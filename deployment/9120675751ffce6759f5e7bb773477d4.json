{"id":"9120675751ffce6759f5e7bb773477d4","source_id_to_path":{"0":"lib/forge-std/src/Base.sol","1":"lib/forge-std/src/Script.sol","2":"lib/forge-std/src/StdChains.sol","3":"lib/forge-std/src/StdCheats.sol","4":"lib/forge-std/src/StdConstants.sol","5":"lib/forge-std/src/StdJson.sol","6":"lib/forge-std/src/StdMath.sol","7":"lib/forge-std/src/StdStorage.sol","8":"lib/forge-std/src/StdStyle.sol","9":"lib/forge-std/src/StdUtils.sol","10":"lib/forge-std/src/Vm.sol","11":"lib/forge-std/src/console.sol","12":"lib/forge-std/src/console2.sol","13":"lib/forge-std/src/interfaces/IMulticall3.sol","14":"lib/forge-std/src/safeconsole.sol","15":"lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol","16":"lib/openzeppelin-contracts-upgradeable/contracts/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol","17":"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol","18":"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol","19":"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/ERC20PermitUpgradeable.sol","20":"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol","21":"lib/openzeppelin-contracts-upgradeable/contracts/utils/NoncesUpgradeable.sol","22":"lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/EIP712Upgradeable.sol","23":"lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol","24":"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/AccessControl.sol","25":"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/IAccessControl.sol","26":"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol","27":"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable2Step.sol","28":"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/extensions/AccessControlDefaultAdminRules.sol","29":"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/extensions/IAccessControlDefaultAdminRules.sol","30":"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/interfaces/IERC1363.sol","31":"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol","32":"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol","33":"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol","34":"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol","35":"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/interfaces/IERC5313.sol","36":"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol","37":"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol","38":"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Utils.sol","39":"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/Proxy.sol","40":"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/beacon/BeaconProxy.sol","41":"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol","42":"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/beacon/UpgradeableBeacon.sol","43":"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/transparent/ProxyAdmin.sol","44":"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/transparent/TransparentUpgradeableProxy.sol","45":"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol","46":"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol","47":"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol","48":"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol","49":"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Address.sol","50":"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Context.sol","51":"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Errors.sol","52":"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Panic.sol","53":"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Pausable.sol","54":"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol","55":"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Strings.sol","56":"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol","57":"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol","58":"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol","59":"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol","60":"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/math/Math.sol","61":"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol","62":"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol","63":"lib/openzeppelin-foundry-upgrades/src/Defender.sol","64":"lib/openzeppelin-foundry-upgrades/src/Options.sol","65":"lib/openzeppelin-foundry-upgrades/src/Upgrades.sol","66":"lib/openzeppelin-foundry-upgrades/src/internal/Core.sol","67":"lib/openzeppelin-foundry-upgrades/src/internal/DefenderDeploy.sol","68":"lib/openzeppelin-foundry-upgrades/src/internal/StringFinder.sol","69":"lib/openzeppelin-foundry-upgrades/src/internal/Utils.sol","70":"lib/openzeppelin-foundry-upgrades/src/internal/Versions.sol","71":"lib/openzeppelin-foundry-upgrades/src/internal/interfaces/IProxyAdmin.sol","72":"lib/openzeppelin-foundry-upgrades/src/internal/interfaces/IUpgradeableBeacon.sol","73":"lib/openzeppelin-foundry-upgrades/src/internal/interfaces/IUpgradeableProxy.sol","74":"script/Deployment.s.sol","75":"src/AddressesWhitelist.sol","76":"src/PriceStorage.sol","77":"src/RequestsManager.sol","78":"src/SimpleToken.sol","79":"src/interfaces/IAddressesWhitelist.sol","80":"src/interfaces/IPriceStorage.sol","81":"src/interfaces/IRequestsManager.sol","82":"src/interfaces/ISimpleToken.sol"},"language":"Solidity","_format":"ethers-rs-sol-build-info-1","input":{"version":"0.8.28","language":"Solidity","sources":{"lib/forge-std/src/Base.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\nimport {StdStorage} from \"./StdStorage.sol\";\nimport {Vm, VmSafe} from \"./Vm.sol\";\n\nabstract contract CommonBase {\n    /// @dev Cheat code address.\n    /// Calculated as `address(uint160(uint256(keccak256(\"hevm cheat code\"))))`.\n    address internal constant VM_ADDRESS = 0x7109709ECfa91a80626fF3989D68f67F5b1DD12D;\n    /// @dev console.sol and console2.sol work by executing a staticcall to this address.\n    /// Calculated as `address(uint160(uint88(bytes11(\"console.log\"))))`.\n    address internal constant CONSOLE = 0x000000000000000000636F6e736F6c652e6c6f67;\n    /// @dev Used when deploying with create2.\n    /// Taken from https://github.com/Arachnid/deterministic-deployment-proxy.\n    address internal constant CREATE2_FACTORY = 0x4e59b44847b379578588920cA78FbF26c0B4956C;\n    /// @dev The default address for tx.origin and msg.sender.\n    /// Calculated as `address(uint160(uint256(keccak256(\"foundry default caller\"))))`.\n    address internal constant DEFAULT_SENDER = 0x1804c8AB1F12E6bbf3894d4083f33e07309d1f38;\n    /// @dev The address of the first contract `CREATE`d by a running test contract.\n    /// When running tests, each test contract is `CREATE`d by `DEFAULT_SENDER` with nonce 1.\n    /// Calculated as `VM.computeCreateAddress(VM.computeCreateAddress(DEFAULT_SENDER, 1), 1)`.\n    address internal constant DEFAULT_TEST_CONTRACT = 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f;\n    /// @dev Deterministic deployment address of the Multicall3 contract.\n    /// Taken from https://www.multicall3.com.\n    address internal constant MULTICALL3_ADDRESS = 0xcA11bde05977b3631167028862bE2a173976CA11;\n    /// @dev The order of the secp256k1 curve.\n    uint256 internal constant SECP256K1_ORDER =\n        115792089237316195423570985008687907852837564279074904382605163141518161494337;\n\n    uint256 internal constant UINT256_MAX =\n        115792089237316195423570985008687907853269984665640564039457584007913129639935;\n\n    Vm internal constant vm = Vm(VM_ADDRESS);\n    StdStorage internal stdstore;\n}\n\nabstract contract TestBase is CommonBase {}\n\nabstract contract ScriptBase is CommonBase {\n    VmSafe internal constant vmSafe = VmSafe(VM_ADDRESS);\n}\n"},"lib/forge-std/src/Script.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\n// 💬 ABOUT\n// Forge Std's default Script.\n\n// 🧩 MODULES\nimport {console} from \"./console.sol\";\nimport {console2} from \"./console2.sol\";\nimport {safeconsole} from \"./safeconsole.sol\";\nimport {StdChains} from \"./StdChains.sol\";\nimport {StdCheatsSafe} from \"./StdCheats.sol\";\nimport {StdConstants} from \"./StdConstants.sol\";\nimport {stdJson} from \"./StdJson.sol\";\nimport {stdMath} from \"./StdMath.sol\";\nimport {StdStorage, stdStorageSafe} from \"./StdStorage.sol\";\nimport {StdStyle} from \"./StdStyle.sol\";\nimport {StdUtils} from \"./StdUtils.sol\";\nimport {VmSafe} from \"./Vm.sol\";\n\n// 📦 BOILERPLATE\nimport {ScriptBase} from \"./Base.sol\";\n\n// ⭐️ SCRIPT\nabstract contract Script is ScriptBase, StdChains, StdCheatsSafe, StdUtils {\n    // Note: IS_SCRIPT() must return true.\n    bool public IS_SCRIPT = true;\n}\n"},"lib/forge-std/src/StdChains.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\nimport {VmSafe} from \"./Vm.sol\";\n\n/**\n * StdChains provides information about EVM compatible chains that can be used in scripts/tests.\n * For each chain, the chain's name, chain ID, and a default RPC URL are provided. Chains are\n * identified by their alias, which is the same as the alias in the `[rpc_endpoints]` section of\n * the `foundry.toml` file. For best UX, ensure the alias in the `foundry.toml` file match the\n * alias used in this contract, which can be found as the first argument to the\n * `setChainWithDefaultRpcUrl` call in the `initializeStdChains` function.\n *\n * There are two main ways to use this contract:\n *   1. Set a chain with `setChain(string memory chainAlias, ChainData memory chain)` or\n *      `setChain(string memory chainAlias, Chain memory chain)`\n *   2. Get a chain with `getChain(string memory chainAlias)` or `getChain(uint256 chainId)`.\n *\n * The first time either of those are used, chains are initialized with the default set of RPC URLs.\n * This is done in `initializeStdChains`, which uses `setChainWithDefaultRpcUrl`. Defaults are recorded in\n * `defaultRpcUrls`.\n *\n * The `setChain` function is straightforward, and it simply saves off the given chain data.\n *\n * The `getChain` methods use `getChainWithUpdatedRpcUrl` to return a chain. For example, let's say\n * we want to retrieve the RPC URL for `mainnet`:\n *   - If you have specified data with `setChain`, it will return that.\n *   - If you have configured a mainnet RPC URL in `foundry.toml`, it will return the URL, provided it\n *     is valid (e.g. a URL is specified, or an environment variable is given and exists).\n *   - If neither of the above conditions is met, the default data is returned.\n *\n * Summarizing the above, the prioritization hierarchy is `setChain` -> `foundry.toml` -> environment variable -> defaults.\n */\nabstract contract StdChains {\n    VmSafe private constant vm = VmSafe(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n\n    bool private stdChainsInitialized;\n\n    struct ChainData {\n        string name;\n        uint256 chainId;\n        string rpcUrl;\n    }\n\n    struct Chain {\n        // The chain name.\n        string name;\n        // The chain's Chain ID.\n        uint256 chainId;\n        // The chain's alias. (i.e. what gets specified in `foundry.toml`).\n        string chainAlias;\n        // A default RPC endpoint for this chain.\n        // NOTE: This default RPC URL is included for convenience to facilitate quick tests and\n        // experimentation. Do not use this RPC URL for production test suites, CI, or other heavy\n        // usage as you will be throttled and this is a disservice to others who need this endpoint.\n        string rpcUrl;\n    }\n\n    // Maps from the chain's alias (matching the alias in the `foundry.toml` file) to chain data.\n    mapping(string => Chain) private chains;\n    // Maps from the chain's alias to it's default RPC URL.\n    mapping(string => string) private defaultRpcUrls;\n    // Maps from a chain ID to it's alias.\n    mapping(uint256 => string) private idToAlias;\n\n    bool private fallbackToDefaultRpcUrls = true;\n\n    // The RPC URL will be fetched from config or defaultRpcUrls if possible.\n    function getChain(string memory chainAlias) internal virtual returns (Chain memory chain) {\n        require(bytes(chainAlias).length != 0, \"StdChains getChain(string): Chain alias cannot be the empty string.\");\n\n        initializeStdChains();\n        chain = chains[chainAlias];\n        require(\n            chain.chainId != 0,\n            string(abi.encodePacked(\"StdChains getChain(string): Chain with alias \\\"\", chainAlias, \"\\\" not found.\"))\n        );\n\n        chain = getChainWithUpdatedRpcUrl(chainAlias, chain);\n    }\n\n    function getChain(uint256 chainId) internal virtual returns (Chain memory chain) {\n        require(chainId != 0, \"StdChains getChain(uint256): Chain ID cannot be 0.\");\n        initializeStdChains();\n        string memory chainAlias = idToAlias[chainId];\n\n        chain = chains[chainAlias];\n\n        require(\n            chain.chainId != 0,\n            string(abi.encodePacked(\"StdChains getChain(uint256): Chain with ID \", vm.toString(chainId), \" not found.\"))\n        );\n\n        chain = getChainWithUpdatedRpcUrl(chainAlias, chain);\n    }\n\n    // set chain info, with priority to argument's rpcUrl field.\n    function setChain(string memory chainAlias, ChainData memory chain) internal virtual {\n        require(\n            bytes(chainAlias).length != 0,\n            \"StdChains setChain(string,ChainData): Chain alias cannot be the empty string.\"\n        );\n\n        require(chain.chainId != 0, \"StdChains setChain(string,ChainData): Chain ID cannot be 0.\");\n\n        initializeStdChains();\n        string memory foundAlias = idToAlias[chain.chainId];\n\n        require(\n            bytes(foundAlias).length == 0 || keccak256(bytes(foundAlias)) == keccak256(bytes(chainAlias)),\n            string(\n                abi.encodePacked(\n                    \"StdChains setChain(string,ChainData): Chain ID \",\n                    vm.toString(chain.chainId),\n                    \" already used by \\\"\",\n                    foundAlias,\n                    \"\\\".\"\n                )\n            )\n        );\n\n        uint256 oldChainId = chains[chainAlias].chainId;\n        delete idToAlias[oldChainId];\n\n        chains[chainAlias] =\n            Chain({name: chain.name, chainId: chain.chainId, chainAlias: chainAlias, rpcUrl: chain.rpcUrl});\n        idToAlias[chain.chainId] = chainAlias;\n    }\n\n    // set chain info, with priority to argument's rpcUrl field.\n    function setChain(string memory chainAlias, Chain memory chain) internal virtual {\n        setChain(chainAlias, ChainData({name: chain.name, chainId: chain.chainId, rpcUrl: chain.rpcUrl}));\n    }\n\n    function _toUpper(string memory str) private pure returns (string memory) {\n        bytes memory strb = bytes(str);\n        bytes memory copy = new bytes(strb.length);\n        for (uint256 i = 0; i < strb.length; i++) {\n            bytes1 b = strb[i];\n            if (b >= 0x61 && b <= 0x7A) {\n                copy[i] = bytes1(uint8(b) - 32);\n            } else {\n                copy[i] = b;\n            }\n        }\n        return string(copy);\n    }\n\n    // lookup rpcUrl, in descending order of priority:\n    // current -> config (foundry.toml) -> environment variable -> default\n    function getChainWithUpdatedRpcUrl(string memory chainAlias, Chain memory chain)\n        private\n        view\n        returns (Chain memory)\n    {\n        if (bytes(chain.rpcUrl).length == 0) {\n            try vm.rpcUrl(chainAlias) returns (string memory configRpcUrl) {\n                chain.rpcUrl = configRpcUrl;\n            } catch (bytes memory err) {\n                string memory envName = string(abi.encodePacked(_toUpper(chainAlias), \"_RPC_URL\"));\n                if (fallbackToDefaultRpcUrls) {\n                    chain.rpcUrl = vm.envOr(envName, defaultRpcUrls[chainAlias]);\n                } else {\n                    chain.rpcUrl = vm.envString(envName);\n                }\n                // Distinguish 'not found' from 'cannot read'\n                // The upstream error thrown by forge for failing cheats changed so we check both the old and new versions\n                bytes memory oldNotFoundError =\n                    abi.encodeWithSignature(\"CheatCodeError\", string(abi.encodePacked(\"invalid rpc url \", chainAlias)));\n                bytes memory newNotFoundError = abi.encodeWithSignature(\n                    \"CheatcodeError(string)\", string(abi.encodePacked(\"invalid rpc url: \", chainAlias))\n                );\n                bytes32 errHash = keccak256(err);\n                if (\n                    (errHash != keccak256(oldNotFoundError) && errHash != keccak256(newNotFoundError))\n                        || bytes(chain.rpcUrl).length == 0\n                ) {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, err), mload(err))\n                    }\n                }\n            }\n        }\n        return chain;\n    }\n\n    function setFallbackToDefaultRpcUrls(bool useDefault) internal {\n        fallbackToDefaultRpcUrls = useDefault;\n    }\n\n    function initializeStdChains() private {\n        if (stdChainsInitialized) return;\n\n        stdChainsInitialized = true;\n\n        // If adding an RPC here, make sure to test the default RPC URL in `test_Rpcs` in `StdChains.t.sol`\n        setChainWithDefaultRpcUrl(\"anvil\", ChainData(\"Anvil\", 31337, \"http://127.0.0.1:8545\"));\n        setChainWithDefaultRpcUrl(\"mainnet\", ChainData(\"Mainnet\", 1, \"https://eth.llamarpc.com\"));\n        setChainWithDefaultRpcUrl(\n            \"sepolia\", ChainData(\"Sepolia\", 11155111, \"https://sepolia.infura.io/v3/b9794ad1ddf84dfb8c34d6bb5dca2001\")\n        );\n        setChainWithDefaultRpcUrl(\"holesky\", ChainData(\"Holesky\", 17000, \"https://rpc.holesky.ethpandaops.io\"));\n        setChainWithDefaultRpcUrl(\"hoodi\", ChainData(\"Hoodi\", 560048, \"https://rpc.hoodi.ethpandaops.io\"));\n        setChainWithDefaultRpcUrl(\"optimism\", ChainData(\"Optimism\", 10, \"https://mainnet.optimism.io\"));\n        setChainWithDefaultRpcUrl(\n            \"optimism_sepolia\", ChainData(\"Optimism Sepolia\", 11155420, \"https://sepolia.optimism.io\")\n        );\n        setChainWithDefaultRpcUrl(\"arbitrum_one\", ChainData(\"Arbitrum One\", 42161, \"https://arb1.arbitrum.io/rpc\"));\n        setChainWithDefaultRpcUrl(\n            \"arbitrum_one_sepolia\", ChainData(\"Arbitrum One Sepolia\", 421614, \"https://sepolia-rollup.arbitrum.io/rpc\")\n        );\n        setChainWithDefaultRpcUrl(\"arbitrum_nova\", ChainData(\"Arbitrum Nova\", 42170, \"https://nova.arbitrum.io/rpc\"));\n        setChainWithDefaultRpcUrl(\"polygon\", ChainData(\"Polygon\", 137, \"https://polygon-rpc.com\"));\n        setChainWithDefaultRpcUrl(\n            \"polygon_amoy\", ChainData(\"Polygon Amoy\", 80002, \"https://rpc-amoy.polygon.technology\")\n        );\n        setChainWithDefaultRpcUrl(\"avalanche\", ChainData(\"Avalanche\", 43114, \"https://api.avax.network/ext/bc/C/rpc\"));\n        setChainWithDefaultRpcUrl(\n            \"avalanche_fuji\", ChainData(\"Avalanche Fuji\", 43113, \"https://api.avax-test.network/ext/bc/C/rpc\")\n        );\n        setChainWithDefaultRpcUrl(\n            \"bnb_smart_chain\", ChainData(\"BNB Smart Chain\", 56, \"https://bsc-dataseed1.binance.org\")\n        );\n        setChainWithDefaultRpcUrl(\n            \"bnb_smart_chain_testnet\",\n            ChainData(\"BNB Smart Chain Testnet\", 97, \"https://rpc.ankr.com/bsc_testnet_chapel\")\n        );\n        setChainWithDefaultRpcUrl(\"gnosis_chain\", ChainData(\"Gnosis Chain\", 100, \"https://rpc.gnosischain.com\"));\n        setChainWithDefaultRpcUrl(\"moonbeam\", ChainData(\"Moonbeam\", 1284, \"https://rpc.api.moonbeam.network\"));\n        setChainWithDefaultRpcUrl(\n            \"moonriver\", ChainData(\"Moonriver\", 1285, \"https://rpc.api.moonriver.moonbeam.network\")\n        );\n        setChainWithDefaultRpcUrl(\"moonbase\", ChainData(\"Moonbase\", 1287, \"https://rpc.testnet.moonbeam.network\"));\n        setChainWithDefaultRpcUrl(\"base_sepolia\", ChainData(\"Base Sepolia\", 84532, \"https://sepolia.base.org\"));\n        setChainWithDefaultRpcUrl(\"base\", ChainData(\"Base\", 8453, \"https://mainnet.base.org\"));\n        setChainWithDefaultRpcUrl(\"blast_sepolia\", ChainData(\"Blast Sepolia\", 168587773, \"https://sepolia.blast.io\"));\n        setChainWithDefaultRpcUrl(\"blast\", ChainData(\"Blast\", 81457, \"https://rpc.blast.io\"));\n        setChainWithDefaultRpcUrl(\"fantom_opera\", ChainData(\"Fantom Opera\", 250, \"https://rpc.ankr.com/fantom/\"));\n        setChainWithDefaultRpcUrl(\n            \"fantom_opera_testnet\", ChainData(\"Fantom Opera Testnet\", 4002, \"https://rpc.ankr.com/fantom_testnet/\")\n        );\n        setChainWithDefaultRpcUrl(\"fraxtal\", ChainData(\"Fraxtal\", 252, \"https://rpc.frax.com\"));\n        setChainWithDefaultRpcUrl(\"fraxtal_testnet\", ChainData(\"Fraxtal Testnet\", 2522, \"https://rpc.testnet.frax.com\"));\n        setChainWithDefaultRpcUrl(\n            \"berachain_bartio_testnet\", ChainData(\"Berachain bArtio Testnet\", 80084, \"https://bartio.rpc.berachain.com\")\n        );\n        setChainWithDefaultRpcUrl(\"flare\", ChainData(\"Flare\", 14, \"https://flare-api.flare.network/ext/C/rpc\"));\n        setChainWithDefaultRpcUrl(\n            \"flare_coston2\", ChainData(\"Flare Coston2\", 114, \"https://coston2-api.flare.network/ext/C/rpc\")\n        );\n\n        setChainWithDefaultRpcUrl(\"mode\", ChainData(\"Mode\", 34443, \"https://mode.drpc.org\"));\n        setChainWithDefaultRpcUrl(\"mode_sepolia\", ChainData(\"Mode Sepolia\", 919, \"https://sepolia.mode.network\"));\n\n        setChainWithDefaultRpcUrl(\"zora\", ChainData(\"Zora\", 7777777, \"https://zora.drpc.org\"));\n        setChainWithDefaultRpcUrl(\n            \"zora_sepolia\", ChainData(\"Zora Sepolia\", 999999999, \"https://sepolia.rpc.zora.energy\")\n        );\n\n        setChainWithDefaultRpcUrl(\"race\", ChainData(\"Race\", 6805, \"https://racemainnet.io\"));\n        setChainWithDefaultRpcUrl(\"race_sepolia\", ChainData(\"Race Sepolia\", 6806, \"https://racemainnet.io\"));\n\n        setChainWithDefaultRpcUrl(\"metal\", ChainData(\"Metal\", 1750, \"https://metall2.drpc.org\"));\n        setChainWithDefaultRpcUrl(\"metal_sepolia\", ChainData(\"Metal Sepolia\", 1740, \"https://testnet.rpc.metall2.com\"));\n\n        setChainWithDefaultRpcUrl(\"binary\", ChainData(\"Binary\", 624, \"https://rpc.zero.thebinaryholdings.com\"));\n        setChainWithDefaultRpcUrl(\n            \"binary_sepolia\", ChainData(\"Binary Sepolia\", 625, \"https://rpc.zero.thebinaryholdings.com\")\n        );\n\n        setChainWithDefaultRpcUrl(\"orderly\", ChainData(\"Orderly\", 291, \"https://rpc.orderly.network\"));\n        setChainWithDefaultRpcUrl(\n            \"orderly_sepolia\", ChainData(\"Orderly Sepolia\", 4460, \"https://testnet-rpc.orderly.org\")\n        );\n    }\n\n    // set chain info, with priority to chainAlias' rpc url in foundry.toml\n    function setChainWithDefaultRpcUrl(string memory chainAlias, ChainData memory chain) private {\n        string memory rpcUrl = chain.rpcUrl;\n        defaultRpcUrls[chainAlias] = rpcUrl;\n        chain.rpcUrl = \"\";\n        setChain(chainAlias, chain);\n        chain.rpcUrl = rpcUrl; // restore argument\n    }\n}\n"},"lib/forge-std/src/StdCheats.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\npragma experimental ABIEncoderV2;\n\nimport {StdStorage, stdStorage} from \"./StdStorage.sol\";\nimport {console2} from \"./console2.sol\";\nimport {Vm} from \"./Vm.sol\";\n\nabstract contract StdCheatsSafe {\n    Vm private constant vm = Vm(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n\n    uint256 private constant UINT256_MAX =\n        115792089237316195423570985008687907853269984665640564039457584007913129639935;\n\n    bool private gasMeteringOff;\n\n    // Data structures to parse Transaction objects from the broadcast artifact\n    // that conform to EIP1559. The Raw structs is what is parsed from the JSON\n    // and then converted to the one that is used by the user for better UX.\n\n    struct RawTx1559 {\n        string[] arguments;\n        address contractAddress;\n        string contractName;\n        // json value name = function\n        string functionSig;\n        bytes32 hash;\n        // json value name = tx\n        RawTx1559Detail txDetail;\n        // json value name = type\n        string opcode;\n    }\n\n    struct RawTx1559Detail {\n        AccessList[] accessList;\n        bytes data;\n        address from;\n        bytes gas;\n        bytes nonce;\n        address to;\n        bytes txType;\n        bytes value;\n    }\n\n    struct Tx1559 {\n        string[] arguments;\n        address contractAddress;\n        string contractName;\n        string functionSig;\n        bytes32 hash;\n        Tx1559Detail txDetail;\n        string opcode;\n    }\n\n    struct Tx1559Detail {\n        AccessList[] accessList;\n        bytes data;\n        address from;\n        uint256 gas;\n        uint256 nonce;\n        address to;\n        uint256 txType;\n        uint256 value;\n    }\n\n    // Data structures to parse Transaction objects from the broadcast artifact\n    // that DO NOT conform to EIP1559. The Raw structs is what is parsed from the JSON\n    // and then converted to the one that is used by the user for better UX.\n\n    struct TxLegacy {\n        string[] arguments;\n        address contractAddress;\n        string contractName;\n        string functionSig;\n        string hash;\n        string opcode;\n        TxDetailLegacy transaction;\n    }\n\n    struct TxDetailLegacy {\n        AccessList[] accessList;\n        uint256 chainId;\n        bytes data;\n        address from;\n        uint256 gas;\n        uint256 gasPrice;\n        bytes32 hash;\n        uint256 nonce;\n        bytes1 opcode;\n        bytes32 r;\n        bytes32 s;\n        uint256 txType;\n        address to;\n        uint8 v;\n        uint256 value;\n    }\n\n    struct AccessList {\n        address accessAddress;\n        bytes32[] storageKeys;\n    }\n\n    // Data structures to parse Receipt objects from the broadcast artifact.\n    // The Raw structs is what is parsed from the JSON\n    // and then converted to the one that is used by the user for better UX.\n\n    struct RawReceipt {\n        bytes32 blockHash;\n        bytes blockNumber;\n        address contractAddress;\n        bytes cumulativeGasUsed;\n        bytes effectiveGasPrice;\n        address from;\n        bytes gasUsed;\n        RawReceiptLog[] logs;\n        bytes logsBloom;\n        bytes status;\n        address to;\n        bytes32 transactionHash;\n        bytes transactionIndex;\n    }\n\n    struct Receipt {\n        bytes32 blockHash;\n        uint256 blockNumber;\n        address contractAddress;\n        uint256 cumulativeGasUsed;\n        uint256 effectiveGasPrice;\n        address from;\n        uint256 gasUsed;\n        ReceiptLog[] logs;\n        bytes logsBloom;\n        uint256 status;\n        address to;\n        bytes32 transactionHash;\n        uint256 transactionIndex;\n    }\n\n    // Data structures to parse the entire broadcast artifact, assuming the\n    // transactions conform to EIP1559.\n\n    struct EIP1559ScriptArtifact {\n        string[] libraries;\n        string path;\n        string[] pending;\n        Receipt[] receipts;\n        uint256 timestamp;\n        Tx1559[] transactions;\n        TxReturn[] txReturns;\n    }\n\n    struct RawEIP1559ScriptArtifact {\n        string[] libraries;\n        string path;\n        string[] pending;\n        RawReceipt[] receipts;\n        TxReturn[] txReturns;\n        uint256 timestamp;\n        RawTx1559[] transactions;\n    }\n\n    struct RawReceiptLog {\n        // json value = address\n        address logAddress;\n        bytes32 blockHash;\n        bytes blockNumber;\n        bytes data;\n        bytes logIndex;\n        bool removed;\n        bytes32[] topics;\n        bytes32 transactionHash;\n        bytes transactionIndex;\n        bytes transactionLogIndex;\n    }\n\n    struct ReceiptLog {\n        // json value = address\n        address logAddress;\n        bytes32 blockHash;\n        uint256 blockNumber;\n        bytes data;\n        uint256 logIndex;\n        bytes32[] topics;\n        uint256 transactionIndex;\n        uint256 transactionLogIndex;\n        bool removed;\n    }\n\n    struct TxReturn {\n        string internalType;\n        string value;\n    }\n\n    struct Account {\n        address addr;\n        uint256 key;\n    }\n\n    enum AddressType {\n        Payable,\n        NonPayable,\n        ZeroAddress,\n        Precompile,\n        ForgeAddress\n    }\n\n    // Checks that `addr` is not blacklisted by token contracts that have a blacklist.\n    function assumeNotBlacklisted(address token, address addr) internal view virtual {\n        // Nothing to check if `token` is not a contract.\n        uint256 tokenCodeSize;\n        assembly {\n            tokenCodeSize := extcodesize(token)\n        }\n        require(tokenCodeSize > 0, \"StdCheats assumeNotBlacklisted(address,address): Token address is not a contract.\");\n\n        bool success;\n        bytes memory returnData;\n\n        // 4-byte selector for `isBlacklisted(address)`, used by USDC.\n        (success, returnData) = token.staticcall(abi.encodeWithSelector(0xfe575a87, addr));\n        vm.assume(!success || abi.decode(returnData, (bool)) == false);\n\n        // 4-byte selector for `isBlackListed(address)`, used by USDT.\n        (success, returnData) = token.staticcall(abi.encodeWithSelector(0xe47d6060, addr));\n        vm.assume(!success || abi.decode(returnData, (bool)) == false);\n    }\n\n    // Checks that `addr` is not blacklisted by token contracts that have a blacklist.\n    // This is identical to `assumeNotBlacklisted(address,address)` but with a different name, for\n    // backwards compatibility, since this name was used in the original PR which already has\n    // a release. This function can be removed in a future release once we want a breaking change.\n    function assumeNoBlacklisted(address token, address addr) internal view virtual {\n        assumeNotBlacklisted(token, addr);\n    }\n\n    function assumeAddressIsNot(address addr, AddressType addressType) internal virtual {\n        if (addressType == AddressType.Payable) {\n            assumeNotPayable(addr);\n        } else if (addressType == AddressType.NonPayable) {\n            assumePayable(addr);\n        } else if (addressType == AddressType.ZeroAddress) {\n            assumeNotZeroAddress(addr);\n        } else if (addressType == AddressType.Precompile) {\n            assumeNotPrecompile(addr);\n        } else if (addressType == AddressType.ForgeAddress) {\n            assumeNotForgeAddress(addr);\n        }\n    }\n\n    function assumeAddressIsNot(address addr, AddressType addressType1, AddressType addressType2) internal virtual {\n        assumeAddressIsNot(addr, addressType1);\n        assumeAddressIsNot(addr, addressType2);\n    }\n\n    function assumeAddressIsNot(\n        address addr,\n        AddressType addressType1,\n        AddressType addressType2,\n        AddressType addressType3\n    ) internal virtual {\n        assumeAddressIsNot(addr, addressType1);\n        assumeAddressIsNot(addr, addressType2);\n        assumeAddressIsNot(addr, addressType3);\n    }\n\n    function assumeAddressIsNot(\n        address addr,\n        AddressType addressType1,\n        AddressType addressType2,\n        AddressType addressType3,\n        AddressType addressType4\n    ) internal virtual {\n        assumeAddressIsNot(addr, addressType1);\n        assumeAddressIsNot(addr, addressType2);\n        assumeAddressIsNot(addr, addressType3);\n        assumeAddressIsNot(addr, addressType4);\n    }\n\n    // This function checks whether an address, `addr`, is payable. It works by sending 1 wei to\n    // `addr` and checking the `success` return value.\n    // NOTE: This function may result in state changes depending on the fallback/receive logic\n    // implemented by `addr`, which should be taken into account when this function is used.\n    function _isPayable(address addr) private returns (bool) {\n        require(\n            addr.balance < UINT256_MAX,\n            \"StdCheats _isPayable(address): Balance equals max uint256, so it cannot receive any more funds\"\n        );\n        uint256 origBalanceTest = address(this).balance;\n        uint256 origBalanceAddr = address(addr).balance;\n\n        vm.deal(address(this), 1);\n        (bool success,) = payable(addr).call{value: 1}(\"\");\n\n        // reset balances\n        vm.deal(address(this), origBalanceTest);\n        vm.deal(addr, origBalanceAddr);\n\n        return success;\n    }\n\n    // NOTE: This function may result in state changes depending on the fallback/receive logic\n    // implemented by `addr`, which should be taken into account when this function is used. See the\n    // `_isPayable` method for more information.\n    function assumePayable(address addr) internal virtual {\n        vm.assume(_isPayable(addr));\n    }\n\n    function assumeNotPayable(address addr) internal virtual {\n        vm.assume(!_isPayable(addr));\n    }\n\n    function assumeNotZeroAddress(address addr) internal pure virtual {\n        vm.assume(addr != address(0));\n    }\n\n    function assumeNotPrecompile(address addr) internal pure virtual {\n        assumeNotPrecompile(addr, _pureChainId());\n    }\n\n    function assumeNotPrecompile(address addr, uint256 chainId) internal pure virtual {\n        // Note: For some chains like Optimism these are technically predeploys (i.e. bytecode placed at a specific\n        // address), but the same rationale for excluding them applies so we include those too.\n\n        // These are reserved by Ethereum and may be on all EVM-compatible chains.\n        vm.assume(addr < address(0x1) || addr > address(0xff));\n\n        // forgefmt: disable-start\n        if (chainId == 10 || chainId == 420) {\n            // https://github.com/ethereum-optimism/optimism/blob/eaa371a0184b56b7ca6d9eb9cb0a2b78b2ccd864/op-bindings/predeploys/addresses.go#L6-L21\n            vm.assume(addr < address(0x4200000000000000000000000000000000000000) || addr > address(0x4200000000000000000000000000000000000800));\n        } else if (chainId == 42161 || chainId == 421613) {\n            // https://developer.arbitrum.io/useful-addresses#arbitrum-precompiles-l2-same-on-all-arb-chains\n            vm.assume(addr < address(0x0000000000000000000000000000000000000064) || addr > address(0x0000000000000000000000000000000000000068));\n        } else if (chainId == 43114 || chainId == 43113) {\n            // https://github.com/ava-labs/subnet-evm/blob/47c03fd007ecaa6de2c52ea081596e0a88401f58/precompile/params.go#L18-L59\n            vm.assume(addr < address(0x0100000000000000000000000000000000000000) || addr > address(0x01000000000000000000000000000000000000ff));\n            vm.assume(addr < address(0x0200000000000000000000000000000000000000) || addr > address(0x02000000000000000000000000000000000000FF));\n            vm.assume(addr < address(0x0300000000000000000000000000000000000000) || addr > address(0x03000000000000000000000000000000000000Ff));\n        }\n        // forgefmt: disable-end\n    }\n\n    function assumeNotForgeAddress(address addr) internal pure virtual {\n        // vm, console, and Create2Deployer addresses\n        vm.assume(\n            addr != address(vm) && addr != 0x000000000000000000636F6e736F6c652e6c6f67\n                && addr != 0x4e59b44847b379578588920cA78FbF26c0B4956C\n        );\n    }\n\n    function assumeUnusedAddress(address addr) internal view virtual {\n        uint256 size;\n        assembly {\n            size := extcodesize(addr)\n        }\n        vm.assume(size == 0);\n\n        assumeNotPrecompile(addr);\n        assumeNotZeroAddress(addr);\n        assumeNotForgeAddress(addr);\n    }\n\n    function readEIP1559ScriptArtifact(string memory path)\n        internal\n        view\n        virtual\n        returns (EIP1559ScriptArtifact memory)\n    {\n        string memory data = vm.readFile(path);\n        bytes memory parsedData = vm.parseJson(data);\n        RawEIP1559ScriptArtifact memory rawArtifact = abi.decode(parsedData, (RawEIP1559ScriptArtifact));\n        EIP1559ScriptArtifact memory artifact;\n        artifact.libraries = rawArtifact.libraries;\n        artifact.path = rawArtifact.path;\n        artifact.timestamp = rawArtifact.timestamp;\n        artifact.pending = rawArtifact.pending;\n        artifact.txReturns = rawArtifact.txReturns;\n        artifact.receipts = rawToConvertedReceipts(rawArtifact.receipts);\n        artifact.transactions = rawToConvertedEIPTx1559s(rawArtifact.transactions);\n        return artifact;\n    }\n\n    function rawToConvertedEIPTx1559s(RawTx1559[] memory rawTxs) internal pure virtual returns (Tx1559[] memory) {\n        Tx1559[] memory txs = new Tx1559[](rawTxs.length);\n        for (uint256 i; i < rawTxs.length; i++) {\n            txs[i] = rawToConvertedEIPTx1559(rawTxs[i]);\n        }\n        return txs;\n    }\n\n    function rawToConvertedEIPTx1559(RawTx1559 memory rawTx) internal pure virtual returns (Tx1559 memory) {\n        Tx1559 memory transaction;\n        transaction.arguments = rawTx.arguments;\n        transaction.contractName = rawTx.contractName;\n        transaction.functionSig = rawTx.functionSig;\n        transaction.hash = rawTx.hash;\n        transaction.txDetail = rawToConvertedEIP1559Detail(rawTx.txDetail);\n        transaction.opcode = rawTx.opcode;\n        return transaction;\n    }\n\n    function rawToConvertedEIP1559Detail(RawTx1559Detail memory rawDetail)\n        internal\n        pure\n        virtual\n        returns (Tx1559Detail memory)\n    {\n        Tx1559Detail memory txDetail;\n        txDetail.data = rawDetail.data;\n        txDetail.from = rawDetail.from;\n        txDetail.to = rawDetail.to;\n        txDetail.nonce = _bytesToUint(rawDetail.nonce);\n        txDetail.txType = _bytesToUint(rawDetail.txType);\n        txDetail.value = _bytesToUint(rawDetail.value);\n        txDetail.gas = _bytesToUint(rawDetail.gas);\n        txDetail.accessList = rawDetail.accessList;\n        return txDetail;\n    }\n\n    function readTx1559s(string memory path) internal view virtual returns (Tx1559[] memory) {\n        string memory deployData = vm.readFile(path);\n        bytes memory parsedDeployData = vm.parseJson(deployData, \".transactions\");\n        RawTx1559[] memory rawTxs = abi.decode(parsedDeployData, (RawTx1559[]));\n        return rawToConvertedEIPTx1559s(rawTxs);\n    }\n\n    function readTx1559(string memory path, uint256 index) internal view virtual returns (Tx1559 memory) {\n        string memory deployData = vm.readFile(path);\n        string memory key = string(abi.encodePacked(\".transactions[\", vm.toString(index), \"]\"));\n        bytes memory parsedDeployData = vm.parseJson(deployData, key);\n        RawTx1559 memory rawTx = abi.decode(parsedDeployData, (RawTx1559));\n        return rawToConvertedEIPTx1559(rawTx);\n    }\n\n    // Analogous to readTransactions, but for receipts.\n    function readReceipts(string memory path) internal view virtual returns (Receipt[] memory) {\n        string memory deployData = vm.readFile(path);\n        bytes memory parsedDeployData = vm.parseJson(deployData, \".receipts\");\n        RawReceipt[] memory rawReceipts = abi.decode(parsedDeployData, (RawReceipt[]));\n        return rawToConvertedReceipts(rawReceipts);\n    }\n\n    function readReceipt(string memory path, uint256 index) internal view virtual returns (Receipt memory) {\n        string memory deployData = vm.readFile(path);\n        string memory key = string(abi.encodePacked(\".receipts[\", vm.toString(index), \"]\"));\n        bytes memory parsedDeployData = vm.parseJson(deployData, key);\n        RawReceipt memory rawReceipt = abi.decode(parsedDeployData, (RawReceipt));\n        return rawToConvertedReceipt(rawReceipt);\n    }\n\n    function rawToConvertedReceipts(RawReceipt[] memory rawReceipts) internal pure virtual returns (Receipt[] memory) {\n        Receipt[] memory receipts = new Receipt[](rawReceipts.length);\n        for (uint256 i; i < rawReceipts.length; i++) {\n            receipts[i] = rawToConvertedReceipt(rawReceipts[i]);\n        }\n        return receipts;\n    }\n\n    function rawToConvertedReceipt(RawReceipt memory rawReceipt) internal pure virtual returns (Receipt memory) {\n        Receipt memory receipt;\n        receipt.blockHash = rawReceipt.blockHash;\n        receipt.to = rawReceipt.to;\n        receipt.from = rawReceipt.from;\n        receipt.contractAddress = rawReceipt.contractAddress;\n        receipt.effectiveGasPrice = _bytesToUint(rawReceipt.effectiveGasPrice);\n        receipt.cumulativeGasUsed = _bytesToUint(rawReceipt.cumulativeGasUsed);\n        receipt.gasUsed = _bytesToUint(rawReceipt.gasUsed);\n        receipt.status = _bytesToUint(rawReceipt.status);\n        receipt.transactionIndex = _bytesToUint(rawReceipt.transactionIndex);\n        receipt.blockNumber = _bytesToUint(rawReceipt.blockNumber);\n        receipt.logs = rawToConvertedReceiptLogs(rawReceipt.logs);\n        receipt.logsBloom = rawReceipt.logsBloom;\n        receipt.transactionHash = rawReceipt.transactionHash;\n        return receipt;\n    }\n\n    function rawToConvertedReceiptLogs(RawReceiptLog[] memory rawLogs)\n        internal\n        pure\n        virtual\n        returns (ReceiptLog[] memory)\n    {\n        ReceiptLog[] memory logs = new ReceiptLog[](rawLogs.length);\n        for (uint256 i; i < rawLogs.length; i++) {\n            logs[i].logAddress = rawLogs[i].logAddress;\n            logs[i].blockHash = rawLogs[i].blockHash;\n            logs[i].blockNumber = _bytesToUint(rawLogs[i].blockNumber);\n            logs[i].data = rawLogs[i].data;\n            logs[i].logIndex = _bytesToUint(rawLogs[i].logIndex);\n            logs[i].topics = rawLogs[i].topics;\n            logs[i].transactionIndex = _bytesToUint(rawLogs[i].transactionIndex);\n            logs[i].transactionLogIndex = _bytesToUint(rawLogs[i].transactionLogIndex);\n            logs[i].removed = rawLogs[i].removed;\n        }\n        return logs;\n    }\n\n    // Deploy a contract by fetching the contract bytecode from\n    // the artifacts directory\n    // e.g. `deployCode(code, abi.encode(arg1,arg2,arg3))`\n    function deployCode(string memory what, bytes memory args) internal virtual returns (address addr) {\n        bytes memory bytecode = abi.encodePacked(vm.getCode(what), args);\n        /// @solidity memory-safe-assembly\n        assembly {\n            addr := create(0, add(bytecode, 0x20), mload(bytecode))\n        }\n\n        require(addr != address(0), \"StdCheats deployCode(string,bytes): Deployment failed.\");\n    }\n\n    function deployCode(string memory what) internal virtual returns (address addr) {\n        bytes memory bytecode = vm.getCode(what);\n        /// @solidity memory-safe-assembly\n        assembly {\n            addr := create(0, add(bytecode, 0x20), mload(bytecode))\n        }\n\n        require(addr != address(0), \"StdCheats deployCode(string): Deployment failed.\");\n    }\n\n    /// @dev deploy contract with value on construction\n    function deployCode(string memory what, bytes memory args, uint256 val) internal virtual returns (address addr) {\n        bytes memory bytecode = abi.encodePacked(vm.getCode(what), args);\n        /// @solidity memory-safe-assembly\n        assembly {\n            addr := create(val, add(bytecode, 0x20), mload(bytecode))\n        }\n\n        require(addr != address(0), \"StdCheats deployCode(string,bytes,uint256): Deployment failed.\");\n    }\n\n    function deployCode(string memory what, uint256 val) internal virtual returns (address addr) {\n        bytes memory bytecode = vm.getCode(what);\n        /// @solidity memory-safe-assembly\n        assembly {\n            addr := create(val, add(bytecode, 0x20), mload(bytecode))\n        }\n\n        require(addr != address(0), \"StdCheats deployCode(string,uint256): Deployment failed.\");\n    }\n\n    // creates a labeled address and the corresponding private key\n    function makeAddrAndKey(string memory name) internal virtual returns (address addr, uint256 privateKey) {\n        privateKey = uint256(keccak256(abi.encodePacked(name)));\n        addr = vm.addr(privateKey);\n        vm.label(addr, name);\n    }\n\n    // creates a labeled address\n    function makeAddr(string memory name) internal virtual returns (address addr) {\n        (addr,) = makeAddrAndKey(name);\n    }\n\n    // Destroys an account immediately, sending the balance to beneficiary.\n    // Destroying means: balance will be zero, code will be empty, and nonce will be 0\n    // This is similar to selfdestruct but not identical: selfdestruct destroys code and nonce\n    // only after tx ends, this will run immediately.\n    function destroyAccount(address who, address beneficiary) internal virtual {\n        uint256 currBalance = who.balance;\n        vm.etch(who, abi.encode());\n        vm.deal(who, 0);\n        vm.resetNonce(who);\n\n        uint256 beneficiaryBalance = beneficiary.balance;\n        vm.deal(beneficiary, currBalance + beneficiaryBalance);\n    }\n\n    // creates a struct containing both a labeled address and the corresponding private key\n    function makeAccount(string memory name) internal virtual returns (Account memory account) {\n        (account.addr, account.key) = makeAddrAndKey(name);\n    }\n\n    function deriveRememberKey(string memory mnemonic, uint32 index)\n        internal\n        virtual\n        returns (address who, uint256 privateKey)\n    {\n        privateKey = vm.deriveKey(mnemonic, index);\n        who = vm.rememberKey(privateKey);\n    }\n\n    function _bytesToUint(bytes memory b) private pure returns (uint256) {\n        require(b.length <= 32, \"StdCheats _bytesToUint(bytes): Bytes length exceeds 32.\");\n        return abi.decode(abi.encodePacked(new bytes(32 - b.length), b), (uint256));\n    }\n\n    function isFork() internal view virtual returns (bool status) {\n        try vm.activeFork() {\n            status = true;\n        } catch (bytes memory) {}\n    }\n\n    modifier skipWhenForking() {\n        if (!isFork()) {\n            _;\n        }\n    }\n\n    modifier skipWhenNotForking() {\n        if (isFork()) {\n            _;\n        }\n    }\n\n    modifier noGasMetering() {\n        vm.pauseGasMetering();\n        // To prevent turning gas monitoring back on with nested functions that use this modifier,\n        // we check if gasMetering started in the off position. If it did, we don't want to turn\n        // it back on until we exit the top level function that used the modifier\n        //\n        // i.e. funcA() noGasMetering { funcB() }, where funcB has noGasMetering as well.\n        // funcA will have `gasStartedOff` as false, funcB will have it as true,\n        // so we only turn metering back on at the end of the funcA\n        bool gasStartedOff = gasMeteringOff;\n        gasMeteringOff = true;\n\n        _;\n\n        // if gas metering was on when this modifier was called, turn it back on at the end\n        if (!gasStartedOff) {\n            gasMeteringOff = false;\n            vm.resumeGasMetering();\n        }\n    }\n\n    // We use this complex approach of `_viewChainId` and `_pureChainId` to ensure there are no\n    // compiler warnings when accessing chain ID in any solidity version supported by forge-std. We\n    // can't simply access the chain ID in a normal view or pure function because the solc View Pure\n    // Checker changed `chainid` from pure to view in 0.8.0.\n    function _viewChainId() private view returns (uint256 chainId) {\n        // Assembly required since `block.chainid` was introduced in 0.8.0.\n        assembly {\n            chainId := chainid()\n        }\n\n        address(this); // Silence warnings in older Solc versions.\n    }\n\n    function _pureChainId() private pure returns (uint256 chainId) {\n        function() internal view returns (uint256) fnIn = _viewChainId;\n        function() internal pure returns (uint256) pureChainId;\n        assembly {\n            pureChainId := fnIn\n        }\n        chainId = pureChainId();\n    }\n}\n\n// Wrappers around cheatcodes to avoid footguns\nabstract contract StdCheats is StdCheatsSafe {\n    using stdStorage for StdStorage;\n\n    StdStorage private stdstore;\n    Vm private constant vm = Vm(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n    address private constant CONSOLE2_ADDRESS = 0x000000000000000000636F6e736F6c652e6c6f67;\n\n    // Skip forward or rewind time by the specified number of seconds\n    function skip(uint256 time) internal virtual {\n        vm.warp(vm.getBlockTimestamp() + time);\n    }\n\n    function rewind(uint256 time) internal virtual {\n        vm.warp(vm.getBlockTimestamp() - time);\n    }\n\n    // Setup a prank from an address that has some ether\n    function hoax(address msgSender) internal virtual {\n        vm.deal(msgSender, 1 << 128);\n        vm.prank(msgSender);\n    }\n\n    function hoax(address msgSender, uint256 give) internal virtual {\n        vm.deal(msgSender, give);\n        vm.prank(msgSender);\n    }\n\n    function hoax(address msgSender, address origin) internal virtual {\n        vm.deal(msgSender, 1 << 128);\n        vm.prank(msgSender, origin);\n    }\n\n    function hoax(address msgSender, address origin, uint256 give) internal virtual {\n        vm.deal(msgSender, give);\n        vm.prank(msgSender, origin);\n    }\n\n    // Start perpetual prank from an address that has some ether\n    function startHoax(address msgSender) internal virtual {\n        vm.deal(msgSender, 1 << 128);\n        vm.startPrank(msgSender);\n    }\n\n    function startHoax(address msgSender, uint256 give) internal virtual {\n        vm.deal(msgSender, give);\n        vm.startPrank(msgSender);\n    }\n\n    // Start perpetual prank from an address that has some ether\n    // tx.origin is set to the origin parameter\n    function startHoax(address msgSender, address origin) internal virtual {\n        vm.deal(msgSender, 1 << 128);\n        vm.startPrank(msgSender, origin);\n    }\n\n    function startHoax(address msgSender, address origin, uint256 give) internal virtual {\n        vm.deal(msgSender, give);\n        vm.startPrank(msgSender, origin);\n    }\n\n    function changePrank(address msgSender) internal virtual {\n        console2_log_StdCheats(\"changePrank is deprecated. Please use vm.startPrank instead.\");\n        vm.stopPrank();\n        vm.startPrank(msgSender);\n    }\n\n    function changePrank(address msgSender, address txOrigin) internal virtual {\n        vm.stopPrank();\n        vm.startPrank(msgSender, txOrigin);\n    }\n\n    // The same as Vm's `deal`\n    // Use the alternative signature for ERC20 tokens\n    function deal(address to, uint256 give) internal virtual {\n        vm.deal(to, give);\n    }\n\n    // Set the balance of an account for any ERC20 token\n    // Use the alternative signature to update `totalSupply`\n    function deal(address token, address to, uint256 give) internal virtual {\n        deal(token, to, give, false);\n    }\n\n    // Set the balance of an account for any ERC1155 token\n    // Use the alternative signature to update `totalSupply`\n    function dealERC1155(address token, address to, uint256 id, uint256 give) internal virtual {\n        dealERC1155(token, to, id, give, false);\n    }\n\n    function deal(address token, address to, uint256 give, bool adjust) internal virtual {\n        // get current balance\n        (, bytes memory balData) = token.staticcall(abi.encodeWithSelector(0x70a08231, to));\n        uint256 prevBal = abi.decode(balData, (uint256));\n\n        // update balance\n        stdstore.target(token).sig(0x70a08231).with_key(to).checked_write(give);\n\n        // update total supply\n        if (adjust) {\n            (, bytes memory totSupData) = token.staticcall(abi.encodeWithSelector(0x18160ddd));\n            uint256 totSup = abi.decode(totSupData, (uint256));\n            if (give < prevBal) {\n                totSup -= (prevBal - give);\n            } else {\n                totSup += (give - prevBal);\n            }\n            stdstore.target(token).sig(0x18160ddd).checked_write(totSup);\n        }\n    }\n\n    function dealERC1155(address token, address to, uint256 id, uint256 give, bool adjust) internal virtual {\n        // get current balance\n        (, bytes memory balData) = token.staticcall(abi.encodeWithSelector(0x00fdd58e, to, id));\n        uint256 prevBal = abi.decode(balData, (uint256));\n\n        // update balance\n        stdstore.target(token).sig(0x00fdd58e).with_key(to).with_key(id).checked_write(give);\n\n        // update total supply\n        if (adjust) {\n            (, bytes memory totSupData) = token.staticcall(abi.encodeWithSelector(0xbd85b039, id));\n            require(\n                totSupData.length != 0,\n                \"StdCheats deal(address,address,uint,uint,bool): target contract is not ERC1155Supply.\"\n            );\n            uint256 totSup = abi.decode(totSupData, (uint256));\n            if (give < prevBal) {\n                totSup -= (prevBal - give);\n            } else {\n                totSup += (give - prevBal);\n            }\n            stdstore.target(token).sig(0xbd85b039).with_key(id).checked_write(totSup);\n        }\n    }\n\n    function dealERC721(address token, address to, uint256 id) internal virtual {\n        // check if token id is already minted and the actual owner.\n        (bool successMinted, bytes memory ownerData) = token.staticcall(abi.encodeWithSelector(0x6352211e, id));\n        require(successMinted, \"StdCheats deal(address,address,uint,bool): id not minted.\");\n\n        // get owner current balance\n        (, bytes memory fromBalData) =\n            token.staticcall(abi.encodeWithSelector(0x70a08231, abi.decode(ownerData, (address))));\n        uint256 fromPrevBal = abi.decode(fromBalData, (uint256));\n\n        // get new user current balance\n        (, bytes memory toBalData) = token.staticcall(abi.encodeWithSelector(0x70a08231, to));\n        uint256 toPrevBal = abi.decode(toBalData, (uint256));\n\n        // update balances\n        stdstore.target(token).sig(0x70a08231).with_key(abi.decode(ownerData, (address))).checked_write(--fromPrevBal);\n        stdstore.target(token).sig(0x70a08231).with_key(to).checked_write(++toPrevBal);\n\n        // update owner\n        stdstore.target(token).sig(0x6352211e).with_key(id).checked_write(to);\n    }\n\n    function deployCodeTo(string memory what, address where) internal virtual {\n        deployCodeTo(what, \"\", 0, where);\n    }\n\n    function deployCodeTo(string memory what, bytes memory args, address where) internal virtual {\n        deployCodeTo(what, args, 0, where);\n    }\n\n    function deployCodeTo(string memory what, bytes memory args, uint256 value, address where) internal virtual {\n        bytes memory creationCode = vm.getCode(what);\n        vm.etch(where, abi.encodePacked(creationCode, args));\n        (bool success, bytes memory runtimeBytecode) = where.call{value: value}(\"\");\n        require(success, \"StdCheats deployCodeTo(string,bytes,uint256,address): Failed to create runtime bytecode.\");\n        vm.etch(where, runtimeBytecode);\n    }\n\n    // Used to prevent the compilation of console, which shortens the compilation time when console is not used elsewhere.\n    function console2_log_StdCheats(string memory p0) private view {\n        (bool status,) = address(CONSOLE2_ADDRESS).staticcall(abi.encodeWithSignature(\"log(string)\", p0));\n        status;\n    }\n}\n"},"lib/forge-std/src/StdConstants.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\nimport {IMulticall3} from \"./interfaces/IMulticall3.sol\";\nimport {Vm} from \"./Vm.sol\";\n\nlibrary StdConstants {\n    /// @dev Cheat code address.\n    /// Calculated as `address(uint160(uint256(keccak256(\"hevm cheat code\"))))`.\n    Vm internal constant VM = Vm(0x7109709ECfa91a80626fF3989D68f67F5b1DD12D);\n    /// @dev console.sol and console2.sol work by executing a staticcall to this address.\n    /// Calculated as `address(uint160(uint88(bytes11(\"console.log\"))))`.\n    address internal constant CONSOLE = 0x000000000000000000636F6e736F6c652e6c6f67;\n    /// @dev Used when deploying with create2.\n    /// Taken from https://github.com/Arachnid/deterministic-deployment-proxy.\n    address internal constant CREATE2_FACTORY = 0x4e59b44847b379578588920cA78FbF26c0B4956C;\n    /// @dev The default address for tx.origin and msg.sender.\n    /// Calculated as `address(uint160(uint256(keccak256(\"foundry default caller\"))))`.\n    address internal constant DEFAULT_SENDER = 0x1804c8AB1F12E6bbf3894d4083f33e07309d1f38;\n    /// @dev The address of the first contract `CREATE`d by a running test contract.\n    /// When running tests, each test contract is `CREATE`d by `DEFAULT_SENDER` with nonce 1.\n    /// Calculated as `VM.computeCreateAddress(VM.computeCreateAddress(DEFAULT_SENDER, 1), 1)`.\n    address internal constant DEFAULT_TEST_CONTRACT = 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f;\n    /// @dev Deterministic deployment address of the Multicall3 contract.\n    /// Taken from https://www.multicall3.com.\n    IMulticall3 internal constant MULTICALL3_ADDRESS = IMulticall3(0xcA11bde05977b3631167028862bE2a173976CA11);\n    /// @dev The order of the secp256k1 curve.\n    uint256 internal constant SECP256K1_ORDER =\n        115792089237316195423570985008687907852837564279074904382605163141518161494337;\n}\n"},"lib/forge-std/src/StdJson.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.6.0 <0.9.0;\n\npragma experimental ABIEncoderV2;\n\nimport {VmSafe} from \"./Vm.sol\";\n\n// Helpers for parsing and writing JSON files\n// To parse:\n// ```\n// using stdJson for string;\n// string memory json = vm.readFile(\"<some_path>\");\n// json.readUint(\"<json_path>\");\n// ```\n// To write:\n// ```\n// using stdJson for string;\n// string memory json = \"json\";\n// json.serialize(\"a\", uint256(123));\n// string memory semiFinal = json.serialize(\"b\", string(\"test\"));\n// string memory finalJson = json.serialize(\"c\", semiFinal);\n// finalJson.write(\"<some_path>\");\n// ```\n\nlibrary stdJson {\n    VmSafe private constant vm = VmSafe(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n\n    function keyExists(string memory json, string memory key) internal view returns (bool) {\n        return vm.keyExistsJson(json, key);\n    }\n\n    function parseRaw(string memory json, string memory key) internal pure returns (bytes memory) {\n        return vm.parseJson(json, key);\n    }\n\n    function readUint(string memory json, string memory key) internal pure returns (uint256) {\n        return vm.parseJsonUint(json, key);\n    }\n\n    function readUintArray(string memory json, string memory key) internal pure returns (uint256[] memory) {\n        return vm.parseJsonUintArray(json, key);\n    }\n\n    function readInt(string memory json, string memory key) internal pure returns (int256) {\n        return vm.parseJsonInt(json, key);\n    }\n\n    function readIntArray(string memory json, string memory key) internal pure returns (int256[] memory) {\n        return vm.parseJsonIntArray(json, key);\n    }\n\n    function readBytes32(string memory json, string memory key) internal pure returns (bytes32) {\n        return vm.parseJsonBytes32(json, key);\n    }\n\n    function readBytes32Array(string memory json, string memory key) internal pure returns (bytes32[] memory) {\n        return vm.parseJsonBytes32Array(json, key);\n    }\n\n    function readString(string memory json, string memory key) internal pure returns (string memory) {\n        return vm.parseJsonString(json, key);\n    }\n\n    function readStringArray(string memory json, string memory key) internal pure returns (string[] memory) {\n        return vm.parseJsonStringArray(json, key);\n    }\n\n    function readAddress(string memory json, string memory key) internal pure returns (address) {\n        return vm.parseJsonAddress(json, key);\n    }\n\n    function readAddressArray(string memory json, string memory key) internal pure returns (address[] memory) {\n        return vm.parseJsonAddressArray(json, key);\n    }\n\n    function readBool(string memory json, string memory key) internal pure returns (bool) {\n        return vm.parseJsonBool(json, key);\n    }\n\n    function readBoolArray(string memory json, string memory key) internal pure returns (bool[] memory) {\n        return vm.parseJsonBoolArray(json, key);\n    }\n\n    function readBytes(string memory json, string memory key) internal pure returns (bytes memory) {\n        return vm.parseJsonBytes(json, key);\n    }\n\n    function readBytesArray(string memory json, string memory key) internal pure returns (bytes[] memory) {\n        return vm.parseJsonBytesArray(json, key);\n    }\n\n    function readUintOr(string memory json, string memory key, uint256 defaultValue) internal view returns (uint256) {\n        return keyExists(json, key) ? readUint(json, key) : defaultValue;\n    }\n\n    function readUintArrayOr(string memory json, string memory key, uint256[] memory defaultValue)\n        internal\n        view\n        returns (uint256[] memory)\n    {\n        return keyExists(json, key) ? readUintArray(json, key) : defaultValue;\n    }\n\n    function readIntOr(string memory json, string memory key, int256 defaultValue) internal view returns (int256) {\n        return keyExists(json, key) ? readInt(json, key) : defaultValue;\n    }\n\n    function readIntArrayOr(string memory json, string memory key, int256[] memory defaultValue)\n        internal\n        view\n        returns (int256[] memory)\n    {\n        return keyExists(json, key) ? readIntArray(json, key) : defaultValue;\n    }\n\n    function readBytes32Or(string memory json, string memory key, bytes32 defaultValue)\n        internal\n        view\n        returns (bytes32)\n    {\n        return keyExists(json, key) ? readBytes32(json, key) : defaultValue;\n    }\n\n    function readBytes32ArrayOr(string memory json, string memory key, bytes32[] memory defaultValue)\n        internal\n        view\n        returns (bytes32[] memory)\n    {\n        return keyExists(json, key) ? readBytes32Array(json, key) : defaultValue;\n    }\n\n    function readStringOr(string memory json, string memory key, string memory defaultValue)\n        internal\n        view\n        returns (string memory)\n    {\n        return keyExists(json, key) ? readString(json, key) : defaultValue;\n    }\n\n    function readStringArrayOr(string memory json, string memory key, string[] memory defaultValue)\n        internal\n        view\n        returns (string[] memory)\n    {\n        return keyExists(json, key) ? readStringArray(json, key) : defaultValue;\n    }\n\n    function readAddressOr(string memory json, string memory key, address defaultValue)\n        internal\n        view\n        returns (address)\n    {\n        return keyExists(json, key) ? readAddress(json, key) : defaultValue;\n    }\n\n    function readAddressArrayOr(string memory json, string memory key, address[] memory defaultValue)\n        internal\n        view\n        returns (address[] memory)\n    {\n        return keyExists(json, key) ? readAddressArray(json, key) : defaultValue;\n    }\n\n    function readBoolOr(string memory json, string memory key, bool defaultValue) internal view returns (bool) {\n        return keyExists(json, key) ? readBool(json, key) : defaultValue;\n    }\n\n    function readBoolArrayOr(string memory json, string memory key, bool[] memory defaultValue)\n        internal\n        view\n        returns (bool[] memory)\n    {\n        return keyExists(json, key) ? readBoolArray(json, key) : defaultValue;\n    }\n\n    function readBytesOr(string memory json, string memory key, bytes memory defaultValue)\n        internal\n        view\n        returns (bytes memory)\n    {\n        return keyExists(json, key) ? readBytes(json, key) : defaultValue;\n    }\n\n    function readBytesArrayOr(string memory json, string memory key, bytes[] memory defaultValue)\n        internal\n        view\n        returns (bytes[] memory)\n    {\n        return keyExists(json, key) ? readBytesArray(json, key) : defaultValue;\n    }\n\n    function serialize(string memory jsonKey, string memory rootObject) internal returns (string memory) {\n        return vm.serializeJson(jsonKey, rootObject);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bool value) internal returns (string memory) {\n        return vm.serializeBool(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bool[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeBool(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, uint256 value) internal returns (string memory) {\n        return vm.serializeUint(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, uint256[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeUint(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, int256 value) internal returns (string memory) {\n        return vm.serializeInt(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, int256[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeInt(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, address value) internal returns (string memory) {\n        return vm.serializeAddress(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, address[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeAddress(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bytes32 value) internal returns (string memory) {\n        return vm.serializeBytes32(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bytes32[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeBytes32(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bytes memory value) internal returns (string memory) {\n        return vm.serializeBytes(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bytes[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeBytes(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, string memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeString(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, string[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeString(jsonKey, key, value);\n    }\n\n    function write(string memory jsonKey, string memory path) internal {\n        vm.writeJson(jsonKey, path);\n    }\n\n    function write(string memory jsonKey, string memory path, string memory valueKey) internal {\n        vm.writeJson(jsonKey, path, valueKey);\n    }\n}\n"},"lib/forge-std/src/StdMath.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\nlibrary stdMath {\n    int256 private constant INT256_MIN = -57896044618658097711785492504343953926634992332820282019728792003956564819968;\n\n    function abs(int256 a) internal pure returns (uint256) {\n        // Required or it will fail when `a = type(int256).min`\n        if (a == INT256_MIN) {\n            return 57896044618658097711785492504343953926634992332820282019728792003956564819968;\n        }\n\n        return uint256(a > 0 ? a : -a);\n    }\n\n    function delta(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a - b : b - a;\n    }\n\n    function delta(int256 a, int256 b) internal pure returns (uint256) {\n        // a and b are of the same sign\n        // this works thanks to two's complement, the left-most bit is the sign bit\n        if ((a ^ b) > -1) {\n            return delta(abs(a), abs(b));\n        }\n\n        // a and b are of opposite signs\n        return abs(a) + abs(b);\n    }\n\n    function percentDelta(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 absDelta = delta(a, b);\n\n        return absDelta * 1e18 / b;\n    }\n\n    function percentDelta(int256 a, int256 b) internal pure returns (uint256) {\n        uint256 absDelta = delta(a, b);\n        uint256 absB = abs(b);\n\n        return absDelta * 1e18 / absB;\n    }\n}\n"},"lib/forge-std/src/StdStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\nimport {Vm} from \"./Vm.sol\";\n\nstruct FindData {\n    uint256 slot;\n    uint256 offsetLeft;\n    uint256 offsetRight;\n    bool found;\n}\n\nstruct StdStorage {\n    mapping(address => mapping(bytes4 => mapping(bytes32 => FindData))) finds;\n    bytes32[] _keys;\n    bytes4 _sig;\n    uint256 _depth;\n    address _target;\n    bytes32 _set;\n    bool _enable_packed_slots;\n    bytes _calldata;\n}\n\nlibrary stdStorageSafe {\n    event SlotFound(address who, bytes4 fsig, bytes32 keysHash, uint256 slot);\n    event WARNING_UninitedSlot(address who, uint256 slot);\n\n    Vm private constant vm = Vm(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n    uint256 constant UINT256_MAX = 115792089237316195423570985008687907853269984665640564039457584007913129639935;\n\n    function sigs(string memory sigStr) internal pure returns (bytes4) {\n        return bytes4(keccak256(bytes(sigStr)));\n    }\n\n    function getCallParams(StdStorage storage self) internal view returns (bytes memory) {\n        if (self._calldata.length == 0) {\n            return flatten(self._keys);\n        } else {\n            return self._calldata;\n        }\n    }\n\n    // Calls target contract with configured parameters\n    function callTarget(StdStorage storage self) internal view returns (bool, bytes32) {\n        bytes memory cald = abi.encodePacked(self._sig, getCallParams(self));\n        (bool success, bytes memory rdat) = self._target.staticcall(cald);\n        bytes32 result = bytesToBytes32(rdat, 32 * self._depth);\n\n        return (success, result);\n    }\n\n    // Tries mutating slot value to determine if the targeted value is stored in it.\n    // If current value is 0, then we are setting slot value to type(uint256).max\n    // Otherwise, we set it to 0. That way, return value should always be affected.\n    function checkSlotMutatesCall(StdStorage storage self, bytes32 slot) internal returns (bool) {\n        bytes32 prevSlotValue = vm.load(self._target, slot);\n        (bool success, bytes32 prevReturnValue) = callTarget(self);\n\n        bytes32 testVal = prevReturnValue == bytes32(0) ? bytes32(UINT256_MAX) : bytes32(0);\n        vm.store(self._target, slot, testVal);\n\n        (, bytes32 newReturnValue) = callTarget(self);\n\n        vm.store(self._target, slot, prevSlotValue);\n\n        return (success && (prevReturnValue != newReturnValue));\n    }\n\n    // Tries setting one of the bits in slot to 1 until return value changes.\n    // Index of resulted bit is an offset packed slot has from left/right side\n    function findOffset(StdStorage storage self, bytes32 slot, bool left) internal returns (bool, uint256) {\n        for (uint256 offset = 0; offset < 256; offset++) {\n            uint256 valueToPut = left ? (1 << (255 - offset)) : (1 << offset);\n            vm.store(self._target, slot, bytes32(valueToPut));\n\n            (bool success, bytes32 data) = callTarget(self);\n\n            if (success && (uint256(data) > 0)) {\n                return (true, offset);\n            }\n        }\n        return (false, 0);\n    }\n\n    function findOffsets(StdStorage storage self, bytes32 slot) internal returns (bool, uint256, uint256) {\n        bytes32 prevSlotValue = vm.load(self._target, slot);\n\n        (bool foundLeft, uint256 offsetLeft) = findOffset(self, slot, true);\n        (bool foundRight, uint256 offsetRight) = findOffset(self, slot, false);\n\n        // `findOffset` may mutate slot value, so we are setting it to initial value\n        vm.store(self._target, slot, prevSlotValue);\n        return (foundLeft && foundRight, offsetLeft, offsetRight);\n    }\n\n    function find(StdStorage storage self) internal returns (FindData storage) {\n        return find(self, true);\n    }\n\n    /// @notice find an arbitrary storage slot given a function sig, input data, address of the contract and a value to check against\n    // slot complexity:\n    //  if flat, will be bytes32(uint256(uint));\n    //  if map, will be keccak256(abi.encode(key, uint(slot)));\n    //  if deep map, will be keccak256(abi.encode(key1, keccak256(abi.encode(key0, uint(slot)))));\n    //  if map struct, will be bytes32(uint256(keccak256(abi.encode(key1, keccak256(abi.encode(key0, uint(slot)))))) + structFieldDepth);\n    function find(StdStorage storage self, bool _clear) internal returns (FindData storage) {\n        address who = self._target;\n        bytes4 fsig = self._sig;\n        uint256 field_depth = self._depth;\n        bytes memory params = getCallParams(self);\n\n        // calldata to test against\n        if (self.finds[who][fsig][keccak256(abi.encodePacked(params, field_depth))].found) {\n            if (_clear) {\n                clear(self);\n            }\n            return self.finds[who][fsig][keccak256(abi.encodePacked(params, field_depth))];\n        }\n        vm.record();\n        (, bytes32 callResult) = callTarget(self);\n        (bytes32[] memory reads,) = vm.accesses(address(who));\n\n        if (reads.length == 0) {\n            revert(\"stdStorage find(StdStorage): No storage use detected for target.\");\n        } else {\n            for (uint256 i = reads.length; --i >= 0;) {\n                bytes32 prev = vm.load(who, reads[i]);\n                if (prev == bytes32(0)) {\n                    emit WARNING_UninitedSlot(who, uint256(reads[i]));\n                }\n\n                if (!checkSlotMutatesCall(self, reads[i])) {\n                    continue;\n                }\n\n                (uint256 offsetLeft, uint256 offsetRight) = (0, 0);\n\n                if (self._enable_packed_slots) {\n                    bool found;\n                    (found, offsetLeft, offsetRight) = findOffsets(self, reads[i]);\n                    if (!found) {\n                        continue;\n                    }\n                }\n\n                // Check that value between found offsets is equal to the current call result\n                uint256 curVal = (uint256(prev) & getMaskByOffsets(offsetLeft, offsetRight)) >> offsetRight;\n\n                if (uint256(callResult) != curVal) {\n                    continue;\n                }\n\n                emit SlotFound(who, fsig, keccak256(abi.encodePacked(params, field_depth)), uint256(reads[i]));\n                self.finds[who][fsig][keccak256(abi.encodePacked(params, field_depth))] =\n                    FindData(uint256(reads[i]), offsetLeft, offsetRight, true);\n                break;\n            }\n        }\n\n        require(\n            self.finds[who][fsig][keccak256(abi.encodePacked(params, field_depth))].found,\n            \"stdStorage find(StdStorage): Slot(s) not found.\"\n        );\n\n        if (_clear) {\n            clear(self);\n        }\n        return self.finds[who][fsig][keccak256(abi.encodePacked(params, field_depth))];\n    }\n\n    function target(StdStorage storage self, address _target) internal returns (StdStorage storage) {\n        self._target = _target;\n        return self;\n    }\n\n    function sig(StdStorage storage self, bytes4 _sig) internal returns (StdStorage storage) {\n        self._sig = _sig;\n        return self;\n    }\n\n    function sig(StdStorage storage self, string memory _sig) internal returns (StdStorage storage) {\n        self._sig = sigs(_sig);\n        return self;\n    }\n\n    function with_calldata(StdStorage storage self, bytes memory _calldata) internal returns (StdStorage storage) {\n        self._calldata = _calldata;\n        return self;\n    }\n\n    function with_key(StdStorage storage self, address who) internal returns (StdStorage storage) {\n        self._keys.push(bytes32(uint256(uint160(who))));\n        return self;\n    }\n\n    function with_key(StdStorage storage self, uint256 amt) internal returns (StdStorage storage) {\n        self._keys.push(bytes32(amt));\n        return self;\n    }\n\n    function with_key(StdStorage storage self, bytes32 key) internal returns (StdStorage storage) {\n        self._keys.push(key);\n        return self;\n    }\n\n    function enable_packed_slots(StdStorage storage self) internal returns (StdStorage storage) {\n        self._enable_packed_slots = true;\n        return self;\n    }\n\n    function depth(StdStorage storage self, uint256 _depth) internal returns (StdStorage storage) {\n        self._depth = _depth;\n        return self;\n    }\n\n    function read(StdStorage storage self) private returns (bytes memory) {\n        FindData storage data = find(self, false);\n        uint256 mask = getMaskByOffsets(data.offsetLeft, data.offsetRight);\n        uint256 value = (uint256(vm.load(self._target, bytes32(data.slot))) & mask) >> data.offsetRight;\n        clear(self);\n        return abi.encode(value);\n    }\n\n    function read_bytes32(StdStorage storage self) internal returns (bytes32) {\n        return abi.decode(read(self), (bytes32));\n    }\n\n    function read_bool(StdStorage storage self) internal returns (bool) {\n        int256 v = read_int(self);\n        if (v == 0) return false;\n        if (v == 1) return true;\n        revert(\"stdStorage read_bool(StdStorage): Cannot decode. Make sure you are reading a bool.\");\n    }\n\n    function read_address(StdStorage storage self) internal returns (address) {\n        return abi.decode(read(self), (address));\n    }\n\n    function read_uint(StdStorage storage self) internal returns (uint256) {\n        return abi.decode(read(self), (uint256));\n    }\n\n    function read_int(StdStorage storage self) internal returns (int256) {\n        return abi.decode(read(self), (int256));\n    }\n\n    function parent(StdStorage storage self) internal returns (uint256, bytes32) {\n        address who = self._target;\n        uint256 field_depth = self._depth;\n        vm.startMappingRecording();\n        uint256 child = find(self, true).slot - field_depth;\n        (bool found, bytes32 key, bytes32 parent_slot) = vm.getMappingKeyAndParentOf(who, bytes32(child));\n        if (!found) {\n            revert(\n                \"stdStorage read_bool(StdStorage): Cannot find parent. Make sure you give a slot and startMappingRecording() has been called.\"\n            );\n        }\n        return (uint256(parent_slot), key);\n    }\n\n    function root(StdStorage storage self) internal returns (uint256) {\n        address who = self._target;\n        uint256 field_depth = self._depth;\n        vm.startMappingRecording();\n        uint256 child = find(self, true).slot - field_depth;\n        bool found;\n        bytes32 root_slot;\n        bytes32 parent_slot;\n        (found,, parent_slot) = vm.getMappingKeyAndParentOf(who, bytes32(child));\n        if (!found) {\n            revert(\n                \"stdStorage read_bool(StdStorage): Cannot find parent. Make sure you give a slot and startMappingRecording() has been called.\"\n            );\n        }\n        while (found) {\n            root_slot = parent_slot;\n            (found,, parent_slot) = vm.getMappingKeyAndParentOf(who, bytes32(root_slot));\n        }\n        return uint256(root_slot);\n    }\n\n    function bytesToBytes32(bytes memory b, uint256 offset) private pure returns (bytes32) {\n        bytes32 out;\n\n        uint256 max = b.length > 32 ? 32 : b.length;\n        for (uint256 i = 0; i < max; i++) {\n            out |= bytes32(b[offset + i] & 0xFF) >> (i * 8);\n        }\n        return out;\n    }\n\n    function flatten(bytes32[] memory b) private pure returns (bytes memory) {\n        bytes memory result = new bytes(b.length * 32);\n        for (uint256 i = 0; i < b.length; i++) {\n            bytes32 k = b[i];\n            /// @solidity memory-safe-assembly\n            assembly {\n                mstore(add(result, add(32, mul(32, i))), k)\n            }\n        }\n\n        return result;\n    }\n\n    function clear(StdStorage storage self) internal {\n        delete self._target;\n        delete self._sig;\n        delete self._keys;\n        delete self._depth;\n        delete self._enable_packed_slots;\n        delete self._calldata;\n    }\n\n    // Returns mask which contains non-zero bits for values between `offsetLeft` and `offsetRight`\n    // (slotValue & mask) >> offsetRight will be the value of the given packed variable\n    function getMaskByOffsets(uint256 offsetLeft, uint256 offsetRight) internal pure returns (uint256 mask) {\n        // mask = ((1 << (256 - (offsetRight + offsetLeft))) - 1) << offsetRight;\n        // using assembly because (1 << 256) causes overflow\n        assembly {\n            mask := shl(offsetRight, sub(shl(sub(256, add(offsetRight, offsetLeft)), 1), 1))\n        }\n    }\n\n    // Returns slot value with updated packed variable.\n    function getUpdatedSlotValue(bytes32 curValue, uint256 varValue, uint256 offsetLeft, uint256 offsetRight)\n        internal\n        pure\n        returns (bytes32 newValue)\n    {\n        return bytes32((uint256(curValue) & ~getMaskByOffsets(offsetLeft, offsetRight)) | (varValue << offsetRight));\n    }\n}\n\nlibrary stdStorage {\n    Vm private constant vm = Vm(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n\n    function sigs(string memory sigStr) internal pure returns (bytes4) {\n        return stdStorageSafe.sigs(sigStr);\n    }\n\n    function find(StdStorage storage self) internal returns (uint256) {\n        return find(self, true);\n    }\n\n    function find(StdStorage storage self, bool _clear) internal returns (uint256) {\n        return stdStorageSafe.find(self, _clear).slot;\n    }\n\n    function target(StdStorage storage self, address _target) internal returns (StdStorage storage) {\n        return stdStorageSafe.target(self, _target);\n    }\n\n    function sig(StdStorage storage self, bytes4 _sig) internal returns (StdStorage storage) {\n        return stdStorageSafe.sig(self, _sig);\n    }\n\n    function sig(StdStorage storage self, string memory _sig) internal returns (StdStorage storage) {\n        return stdStorageSafe.sig(self, _sig);\n    }\n\n    function with_key(StdStorage storage self, address who) internal returns (StdStorage storage) {\n        return stdStorageSafe.with_key(self, who);\n    }\n\n    function with_key(StdStorage storage self, uint256 amt) internal returns (StdStorage storage) {\n        return stdStorageSafe.with_key(self, amt);\n    }\n\n    function with_key(StdStorage storage self, bytes32 key) internal returns (StdStorage storage) {\n        return stdStorageSafe.with_key(self, key);\n    }\n\n    function with_calldata(StdStorage storage self, bytes memory _calldata) internal returns (StdStorage storage) {\n        return stdStorageSafe.with_calldata(self, _calldata);\n    }\n\n    function enable_packed_slots(StdStorage storage self) internal returns (StdStorage storage) {\n        return stdStorageSafe.enable_packed_slots(self);\n    }\n\n    function depth(StdStorage storage self, uint256 _depth) internal returns (StdStorage storage) {\n        return stdStorageSafe.depth(self, _depth);\n    }\n\n    function clear(StdStorage storage self) internal {\n        stdStorageSafe.clear(self);\n    }\n\n    function checked_write(StdStorage storage self, address who) internal {\n        checked_write(self, bytes32(uint256(uint160(who))));\n    }\n\n    function checked_write(StdStorage storage self, uint256 amt) internal {\n        checked_write(self, bytes32(amt));\n    }\n\n    function checked_write_int(StdStorage storage self, int256 val) internal {\n        checked_write(self, bytes32(uint256(val)));\n    }\n\n    function checked_write(StdStorage storage self, bool write) internal {\n        bytes32 t;\n        /// @solidity memory-safe-assembly\n        assembly {\n            t := write\n        }\n        checked_write(self, t);\n    }\n\n    function checked_write(StdStorage storage self, bytes32 set) internal {\n        address who = self._target;\n        bytes4 fsig = self._sig;\n        uint256 field_depth = self._depth;\n        bytes memory params = stdStorageSafe.getCallParams(self);\n\n        if (!self.finds[who][fsig][keccak256(abi.encodePacked(params, field_depth))].found) {\n            find(self, false);\n        }\n        FindData storage data = self.finds[who][fsig][keccak256(abi.encodePacked(params, field_depth))];\n        if ((data.offsetLeft + data.offsetRight) > 0) {\n            uint256 maxVal = 2 ** (256 - (data.offsetLeft + data.offsetRight));\n            require(\n                uint256(set) < maxVal,\n                string(\n                    abi.encodePacked(\n                        \"stdStorage find(StdStorage): Packed slot. We can't fit value greater than \",\n                        vm.toString(maxVal)\n                    )\n                )\n            );\n        }\n        bytes32 curVal = vm.load(who, bytes32(data.slot));\n        bytes32 valToSet = stdStorageSafe.getUpdatedSlotValue(curVal, uint256(set), data.offsetLeft, data.offsetRight);\n\n        vm.store(who, bytes32(data.slot), valToSet);\n\n        (bool success, bytes32 callResult) = stdStorageSafe.callTarget(self);\n\n        if (!success || callResult != set) {\n            vm.store(who, bytes32(data.slot), curVal);\n            revert(\"stdStorage find(StdStorage): Failed to write value.\");\n        }\n        clear(self);\n    }\n\n    function read_bytes32(StdStorage storage self) internal returns (bytes32) {\n        return stdStorageSafe.read_bytes32(self);\n    }\n\n    function read_bool(StdStorage storage self) internal returns (bool) {\n        return stdStorageSafe.read_bool(self);\n    }\n\n    function read_address(StdStorage storage self) internal returns (address) {\n        return stdStorageSafe.read_address(self);\n    }\n\n    function read_uint(StdStorage storage self) internal returns (uint256) {\n        return stdStorageSafe.read_uint(self);\n    }\n\n    function read_int(StdStorage storage self) internal returns (int256) {\n        return stdStorageSafe.read_int(self);\n    }\n\n    function parent(StdStorage storage self) internal returns (uint256, bytes32) {\n        return stdStorageSafe.parent(self);\n    }\n\n    function root(StdStorage storage self) internal returns (uint256) {\n        return stdStorageSafe.root(self);\n    }\n}\n"},"lib/forge-std/src/StdStyle.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\nimport {VmSafe} from \"./Vm.sol\";\n\nlibrary StdStyle {\n    VmSafe private constant vm = VmSafe(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n\n    string constant RED = \"\\u001b[91m\";\n    string constant GREEN = \"\\u001b[92m\";\n    string constant YELLOW = \"\\u001b[93m\";\n    string constant BLUE = \"\\u001b[94m\";\n    string constant MAGENTA = \"\\u001b[95m\";\n    string constant CYAN = \"\\u001b[96m\";\n    string constant BOLD = \"\\u001b[1m\";\n    string constant DIM = \"\\u001b[2m\";\n    string constant ITALIC = \"\\u001b[3m\";\n    string constant UNDERLINE = \"\\u001b[4m\";\n    string constant INVERSE = \"\\u001b[7m\";\n    string constant RESET = \"\\u001b[0m\";\n\n    function styleConcat(string memory style, string memory self) private pure returns (string memory) {\n        return string(abi.encodePacked(style, self, RESET));\n    }\n\n    function red(string memory self) internal pure returns (string memory) {\n        return styleConcat(RED, self);\n    }\n\n    function red(uint256 self) internal pure returns (string memory) {\n        return red(vm.toString(self));\n    }\n\n    function red(int256 self) internal pure returns (string memory) {\n        return red(vm.toString(self));\n    }\n\n    function red(address self) internal pure returns (string memory) {\n        return red(vm.toString(self));\n    }\n\n    function red(bool self) internal pure returns (string memory) {\n        return red(vm.toString(self));\n    }\n\n    function redBytes(bytes memory self) internal pure returns (string memory) {\n        return red(vm.toString(self));\n    }\n\n    function redBytes32(bytes32 self) internal pure returns (string memory) {\n        return red(vm.toString(self));\n    }\n\n    function green(string memory self) internal pure returns (string memory) {\n        return styleConcat(GREEN, self);\n    }\n\n    function green(uint256 self) internal pure returns (string memory) {\n        return green(vm.toString(self));\n    }\n\n    function green(int256 self) internal pure returns (string memory) {\n        return green(vm.toString(self));\n    }\n\n    function green(address self) internal pure returns (string memory) {\n        return green(vm.toString(self));\n    }\n\n    function green(bool self) internal pure returns (string memory) {\n        return green(vm.toString(self));\n    }\n\n    function greenBytes(bytes memory self) internal pure returns (string memory) {\n        return green(vm.toString(self));\n    }\n\n    function greenBytes32(bytes32 self) internal pure returns (string memory) {\n        return green(vm.toString(self));\n    }\n\n    function yellow(string memory self) internal pure returns (string memory) {\n        return styleConcat(YELLOW, self);\n    }\n\n    function yellow(uint256 self) internal pure returns (string memory) {\n        return yellow(vm.toString(self));\n    }\n\n    function yellow(int256 self) internal pure returns (string memory) {\n        return yellow(vm.toString(self));\n    }\n\n    function yellow(address self) internal pure returns (string memory) {\n        return yellow(vm.toString(self));\n    }\n\n    function yellow(bool self) internal pure returns (string memory) {\n        return yellow(vm.toString(self));\n    }\n\n    function yellowBytes(bytes memory self) internal pure returns (string memory) {\n        return yellow(vm.toString(self));\n    }\n\n    function yellowBytes32(bytes32 self) internal pure returns (string memory) {\n        return yellow(vm.toString(self));\n    }\n\n    function blue(string memory self) internal pure returns (string memory) {\n        return styleConcat(BLUE, self);\n    }\n\n    function blue(uint256 self) internal pure returns (string memory) {\n        return blue(vm.toString(self));\n    }\n\n    function blue(int256 self) internal pure returns (string memory) {\n        return blue(vm.toString(self));\n    }\n\n    function blue(address self) internal pure returns (string memory) {\n        return blue(vm.toString(self));\n    }\n\n    function blue(bool self) internal pure returns (string memory) {\n        return blue(vm.toString(self));\n    }\n\n    function blueBytes(bytes memory self) internal pure returns (string memory) {\n        return blue(vm.toString(self));\n    }\n\n    function blueBytes32(bytes32 self) internal pure returns (string memory) {\n        return blue(vm.toString(self));\n    }\n\n    function magenta(string memory self) internal pure returns (string memory) {\n        return styleConcat(MAGENTA, self);\n    }\n\n    function magenta(uint256 self) internal pure returns (string memory) {\n        return magenta(vm.toString(self));\n    }\n\n    function magenta(int256 self) internal pure returns (string memory) {\n        return magenta(vm.toString(self));\n    }\n\n    function magenta(address self) internal pure returns (string memory) {\n        return magenta(vm.toString(self));\n    }\n\n    function magenta(bool self) internal pure returns (string memory) {\n        return magenta(vm.toString(self));\n    }\n\n    function magentaBytes(bytes memory self) internal pure returns (string memory) {\n        return magenta(vm.toString(self));\n    }\n\n    function magentaBytes32(bytes32 self) internal pure returns (string memory) {\n        return magenta(vm.toString(self));\n    }\n\n    function cyan(string memory self) internal pure returns (string memory) {\n        return styleConcat(CYAN, self);\n    }\n\n    function cyan(uint256 self) internal pure returns (string memory) {\n        return cyan(vm.toString(self));\n    }\n\n    function cyan(int256 self) internal pure returns (string memory) {\n        return cyan(vm.toString(self));\n    }\n\n    function cyan(address self) internal pure returns (string memory) {\n        return cyan(vm.toString(self));\n    }\n\n    function cyan(bool self) internal pure returns (string memory) {\n        return cyan(vm.toString(self));\n    }\n\n    function cyanBytes(bytes memory self) internal pure returns (string memory) {\n        return cyan(vm.toString(self));\n    }\n\n    function cyanBytes32(bytes32 self) internal pure returns (string memory) {\n        return cyan(vm.toString(self));\n    }\n\n    function bold(string memory self) internal pure returns (string memory) {\n        return styleConcat(BOLD, self);\n    }\n\n    function bold(uint256 self) internal pure returns (string memory) {\n        return bold(vm.toString(self));\n    }\n\n    function bold(int256 self) internal pure returns (string memory) {\n        return bold(vm.toString(self));\n    }\n\n    function bold(address self) internal pure returns (string memory) {\n        return bold(vm.toString(self));\n    }\n\n    function bold(bool self) internal pure returns (string memory) {\n        return bold(vm.toString(self));\n    }\n\n    function boldBytes(bytes memory self) internal pure returns (string memory) {\n        return bold(vm.toString(self));\n    }\n\n    function boldBytes32(bytes32 self) internal pure returns (string memory) {\n        return bold(vm.toString(self));\n    }\n\n    function dim(string memory self) internal pure returns (string memory) {\n        return styleConcat(DIM, self);\n    }\n\n    function dim(uint256 self) internal pure returns (string memory) {\n        return dim(vm.toString(self));\n    }\n\n    function dim(int256 self) internal pure returns (string memory) {\n        return dim(vm.toString(self));\n    }\n\n    function dim(address self) internal pure returns (string memory) {\n        return dim(vm.toString(self));\n    }\n\n    function dim(bool self) internal pure returns (string memory) {\n        return dim(vm.toString(self));\n    }\n\n    function dimBytes(bytes memory self) internal pure returns (string memory) {\n        return dim(vm.toString(self));\n    }\n\n    function dimBytes32(bytes32 self) internal pure returns (string memory) {\n        return dim(vm.toString(self));\n    }\n\n    function italic(string memory self) internal pure returns (string memory) {\n        return styleConcat(ITALIC, self);\n    }\n\n    function italic(uint256 self) internal pure returns (string memory) {\n        return italic(vm.toString(self));\n    }\n\n    function italic(int256 self) internal pure returns (string memory) {\n        return italic(vm.toString(self));\n    }\n\n    function italic(address self) internal pure returns (string memory) {\n        return italic(vm.toString(self));\n    }\n\n    function italic(bool self) internal pure returns (string memory) {\n        return italic(vm.toString(self));\n    }\n\n    function italicBytes(bytes memory self) internal pure returns (string memory) {\n        return italic(vm.toString(self));\n    }\n\n    function italicBytes32(bytes32 self) internal pure returns (string memory) {\n        return italic(vm.toString(self));\n    }\n\n    function underline(string memory self) internal pure returns (string memory) {\n        return styleConcat(UNDERLINE, self);\n    }\n\n    function underline(uint256 self) internal pure returns (string memory) {\n        return underline(vm.toString(self));\n    }\n\n    function underline(int256 self) internal pure returns (string memory) {\n        return underline(vm.toString(self));\n    }\n\n    function underline(address self) internal pure returns (string memory) {\n        return underline(vm.toString(self));\n    }\n\n    function underline(bool self) internal pure returns (string memory) {\n        return underline(vm.toString(self));\n    }\n\n    function underlineBytes(bytes memory self) internal pure returns (string memory) {\n        return underline(vm.toString(self));\n    }\n\n    function underlineBytes32(bytes32 self) internal pure returns (string memory) {\n        return underline(vm.toString(self));\n    }\n\n    function inverse(string memory self) internal pure returns (string memory) {\n        return styleConcat(INVERSE, self);\n    }\n\n    function inverse(uint256 self) internal pure returns (string memory) {\n        return inverse(vm.toString(self));\n    }\n\n    function inverse(int256 self) internal pure returns (string memory) {\n        return inverse(vm.toString(self));\n    }\n\n    function inverse(address self) internal pure returns (string memory) {\n        return inverse(vm.toString(self));\n    }\n\n    function inverse(bool self) internal pure returns (string memory) {\n        return inverse(vm.toString(self));\n    }\n\n    function inverseBytes(bytes memory self) internal pure returns (string memory) {\n        return inverse(vm.toString(self));\n    }\n\n    function inverseBytes32(bytes32 self) internal pure returns (string memory) {\n        return inverse(vm.toString(self));\n    }\n}\n"},"lib/forge-std/src/StdUtils.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\npragma experimental ABIEncoderV2;\n\nimport {IMulticall3} from \"./interfaces/IMulticall3.sol\";\nimport {VmSafe} from \"./Vm.sol\";\n\nabstract contract StdUtils {\n    /*//////////////////////////////////////////////////////////////////////////\n                                     CONSTANTS\n    //////////////////////////////////////////////////////////////////////////*/\n\n    IMulticall3 private constant multicall = IMulticall3(0xcA11bde05977b3631167028862bE2a173976CA11);\n    VmSafe private constant vm = VmSafe(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n    address private constant CONSOLE2_ADDRESS = 0x000000000000000000636F6e736F6c652e6c6f67;\n    uint256 private constant INT256_MIN_ABS =\n        57896044618658097711785492504343953926634992332820282019728792003956564819968;\n    uint256 private constant SECP256K1_ORDER =\n        115792089237316195423570985008687907852837564279074904382605163141518161494337;\n    uint256 private constant UINT256_MAX =\n        115792089237316195423570985008687907853269984665640564039457584007913129639935;\n\n    // Used by default when deploying with create2, https://github.com/Arachnid/deterministic-deployment-proxy.\n    address private constant CREATE2_FACTORY = 0x4e59b44847b379578588920cA78FbF26c0B4956C;\n\n    /*//////////////////////////////////////////////////////////////////////////\n                                 INTERNAL FUNCTIONS\n    //////////////////////////////////////////////////////////////////////////*/\n\n    function _bound(uint256 x, uint256 min, uint256 max) internal pure virtual returns (uint256 result) {\n        require(min <= max, \"StdUtils bound(uint256,uint256,uint256): Max is less than min.\");\n        // If x is between min and max, return x directly. This is to ensure that dictionary values\n        // do not get shifted if the min is nonzero. More info: https://github.com/foundry-rs/forge-std/issues/188\n        if (x >= min && x <= max) return x;\n\n        uint256 size = max - min + 1;\n\n        // If the value is 0, 1, 2, 3, wrap that to min, min+1, min+2, min+3. Similarly for the UINT256_MAX side.\n        // This helps ensure coverage of the min/max values.\n        if (x <= 3 && size > x) return min + x;\n        if (x >= UINT256_MAX - 3 && size > UINT256_MAX - x) return max - (UINT256_MAX - x);\n\n        // Otherwise, wrap x into the range [min, max], i.e. the range is inclusive.\n        if (x > max) {\n            uint256 diff = x - max;\n            uint256 rem = diff % size;\n            if (rem == 0) return max;\n            result = min + rem - 1;\n        } else if (x < min) {\n            uint256 diff = min - x;\n            uint256 rem = diff % size;\n            if (rem == 0) return min;\n            result = max - rem + 1;\n        }\n    }\n\n    function bound(uint256 x, uint256 min, uint256 max) internal pure virtual returns (uint256 result) {\n        result = _bound(x, min, max);\n        console2_log_StdUtils(\"Bound result\", result);\n    }\n\n    function _bound(int256 x, int256 min, int256 max) internal pure virtual returns (int256 result) {\n        require(min <= max, \"StdUtils bound(int256,int256,int256): Max is less than min.\");\n\n        // Shifting all int256 values to uint256 to use _bound function. The range of two types are:\n        // int256 : -(2**255) ~ (2**255 - 1)\n        // uint256:     0     ~ (2**256 - 1)\n        // So, add 2**255, INT256_MIN_ABS to the integer values.\n        //\n        // If the given integer value is -2**255, we cannot use `-uint256(-x)` because of the overflow.\n        // So, use `~uint256(x) + 1` instead.\n        uint256 _x = x < 0 ? (INT256_MIN_ABS - ~uint256(x) - 1) : (uint256(x) + INT256_MIN_ABS);\n        uint256 _min = min < 0 ? (INT256_MIN_ABS - ~uint256(min) - 1) : (uint256(min) + INT256_MIN_ABS);\n        uint256 _max = max < 0 ? (INT256_MIN_ABS - ~uint256(max) - 1) : (uint256(max) + INT256_MIN_ABS);\n\n        uint256 y = _bound(_x, _min, _max);\n\n        // To move it back to int256 value, subtract INT256_MIN_ABS at here.\n        result = y < INT256_MIN_ABS ? int256(~(INT256_MIN_ABS - y) + 1) : int256(y - INT256_MIN_ABS);\n    }\n\n    function bound(int256 x, int256 min, int256 max) internal pure virtual returns (int256 result) {\n        result = _bound(x, min, max);\n        console2_log_StdUtils(\"Bound result\", vm.toString(result));\n    }\n\n    function boundPrivateKey(uint256 privateKey) internal pure virtual returns (uint256 result) {\n        result = _bound(privateKey, 1, SECP256K1_ORDER - 1);\n    }\n\n    function bytesToUint(bytes memory b) internal pure virtual returns (uint256) {\n        require(b.length <= 32, \"StdUtils bytesToUint(bytes): Bytes length exceeds 32.\");\n        return abi.decode(abi.encodePacked(new bytes(32 - b.length), b), (uint256));\n    }\n\n    /// @dev Compute the address a contract will be deployed at for a given deployer address and nonce\n    /// @notice adapted from Solmate implementation (https://github.com/Rari-Capital/solmate/blob/main/src/utils/LibRLP.sol)\n    function computeCreateAddress(address deployer, uint256 nonce) internal pure virtual returns (address) {\n        console2_log_StdUtils(\"computeCreateAddress is deprecated. Please use vm.computeCreateAddress instead.\");\n        return vm.computeCreateAddress(deployer, nonce);\n    }\n\n    function computeCreate2Address(bytes32 salt, bytes32 initcodeHash, address deployer)\n        internal\n        pure\n        virtual\n        returns (address)\n    {\n        console2_log_StdUtils(\"computeCreate2Address is deprecated. Please use vm.computeCreate2Address instead.\");\n        return vm.computeCreate2Address(salt, initcodeHash, deployer);\n    }\n\n    /// @dev returns the address of a contract created with CREATE2 using the default CREATE2 deployer\n    function computeCreate2Address(bytes32 salt, bytes32 initCodeHash) internal pure returns (address) {\n        console2_log_StdUtils(\"computeCreate2Address is deprecated. Please use vm.computeCreate2Address instead.\");\n        return vm.computeCreate2Address(salt, initCodeHash);\n    }\n\n    /// @dev returns the hash of the init code (creation code + no args) used in CREATE2 with no constructor arguments\n    /// @param creationCode the creation code of a contract C, as returned by type(C).creationCode\n    function hashInitCode(bytes memory creationCode) internal pure returns (bytes32) {\n        return hashInitCode(creationCode, \"\");\n    }\n\n    /// @dev returns the hash of the init code (creation code + ABI-encoded args) used in CREATE2\n    /// @param creationCode the creation code of a contract C, as returned by type(C).creationCode\n    /// @param args the ABI-encoded arguments to the constructor of C\n    function hashInitCode(bytes memory creationCode, bytes memory args) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(creationCode, args));\n    }\n\n    // Performs a single call with Multicall3 to query the ERC-20 token balances of the given addresses.\n    function getTokenBalances(address token, address[] memory addresses)\n        internal\n        virtual\n        returns (uint256[] memory balances)\n    {\n        uint256 tokenCodeSize;\n        assembly {\n            tokenCodeSize := extcodesize(token)\n        }\n        require(tokenCodeSize > 0, \"StdUtils getTokenBalances(address,address[]): Token address is not a contract.\");\n\n        // ABI encode the aggregate call to Multicall3.\n        uint256 length = addresses.length;\n        IMulticall3.Call[] memory calls = new IMulticall3.Call[](length);\n        for (uint256 i = 0; i < length; ++i) {\n            // 0x70a08231 = bytes4(\"balanceOf(address)\"))\n            calls[i] = IMulticall3.Call({target: token, callData: abi.encodeWithSelector(0x70a08231, (addresses[i]))});\n        }\n\n        // Make the aggregate call.\n        (, bytes[] memory returnData) = multicall.aggregate(calls);\n\n        // ABI decode the return data and return the balances.\n        balances = new uint256[](length);\n        for (uint256 i = 0; i < length; ++i) {\n            balances[i] = abi.decode(returnData[i], (uint256));\n        }\n    }\n\n    /*//////////////////////////////////////////////////////////////////////////\n                                 PRIVATE FUNCTIONS\n    //////////////////////////////////////////////////////////////////////////*/\n\n    function addressFromLast20Bytes(bytes32 bytesValue) private pure returns (address) {\n        return address(uint160(uint256(bytesValue)));\n    }\n\n    // This section is used to prevent the compilation of console, which shortens the compilation time when console is\n    // not used elsewhere. We also trick the compiler into letting us make the console log methods as `pure` to avoid\n    // any breaking changes to function signatures.\n    function _castLogPayloadViewToPure(function(bytes memory) internal view fnIn)\n        internal\n        pure\n        returns (function(bytes memory) internal pure fnOut)\n    {\n        assembly {\n            fnOut := fnIn\n        }\n    }\n\n    function _sendLogPayload(bytes memory payload) internal pure {\n        _castLogPayloadViewToPure(_sendLogPayloadView)(payload);\n    }\n\n    function _sendLogPayloadView(bytes memory payload) private view {\n        uint256 payloadLength = payload.length;\n        address consoleAddress = CONSOLE2_ADDRESS;\n        /// @solidity memory-safe-assembly\n        assembly {\n            let payloadStart := add(payload, 32)\n            let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n        }\n    }\n\n    function console2_log_StdUtils(string memory p0) private pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function console2_log_StdUtils(string memory p0, uint256 p1) private pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1));\n    }\n\n    function console2_log_StdUtils(string memory p0, string memory p1) private pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n    }\n}\n"},"lib/forge-std/src/Vm.sol":{"content":"// Automatically @generated by scripts/vm.py. Do not modify manually.\n\n// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity >=0.6.2 <0.9.0;\npragma experimental ABIEncoderV2;\n\n/// The `VmSafe` interface does not allow manipulation of the EVM state or other actions that may\n/// result in Script simulations differing from on-chain execution. It is recommended to only use\n/// these cheats in scripts.\ninterface VmSafe {\n    /// A modification applied to either `msg.sender` or `tx.origin`. Returned by `readCallers`.\n    enum CallerMode {\n        // No caller modification is currently active.\n        None,\n        // A one time broadcast triggered by a `vm.broadcast()` call is currently active.\n        Broadcast,\n        // A recurrent broadcast triggered by a `vm.startBroadcast()` call is currently active.\n        RecurrentBroadcast,\n        // A one time prank triggered by a `vm.prank()` call is currently active.\n        Prank,\n        // A recurrent prank triggered by a `vm.startPrank()` call is currently active.\n        RecurrentPrank\n    }\n\n    /// The kind of account access that occurred.\n    enum AccountAccessKind {\n        // The account was called.\n        Call,\n        // The account was called via delegatecall.\n        DelegateCall,\n        // The account was called via callcode.\n        CallCode,\n        // The account was called via staticcall.\n        StaticCall,\n        // The account was created.\n        Create,\n        // The account was selfdestructed.\n        SelfDestruct,\n        // Synthetic access indicating the current context has resumed after a previous sub-context (AccountAccess).\n        Resume,\n        // The account's balance was read.\n        Balance,\n        // The account's codesize was read.\n        Extcodesize,\n        // The account's codehash was read.\n        Extcodehash,\n        // The account's code was copied.\n        Extcodecopy\n    }\n\n    /// Forge execution contexts.\n    enum ForgeContext {\n        // Test group execution context (test, coverage or snapshot).\n        TestGroup,\n        // `forge test` execution context.\n        Test,\n        // `forge coverage` execution context.\n        Coverage,\n        // `forge snapshot` execution context.\n        Snapshot,\n        // Script group execution context (dry run, broadcast or resume).\n        ScriptGroup,\n        // `forge script` execution context.\n        ScriptDryRun,\n        // `forge script --broadcast` execution context.\n        ScriptBroadcast,\n        // `forge script --resume` execution context.\n        ScriptResume,\n        // Unknown `forge` execution context.\n        Unknown\n    }\n\n    /// The transaction type (`txType`) of the broadcast.\n    enum BroadcastTxType {\n        // Represents a CALL broadcast tx.\n        Call,\n        // Represents a CREATE broadcast tx.\n        Create,\n        // Represents a CREATE2 broadcast tx.\n        Create2\n    }\n\n    /// An Ethereum log. Returned by `getRecordedLogs`.\n    struct Log {\n        // The topics of the log, including the signature, if any.\n        bytes32[] topics;\n        // The raw data of the log.\n        bytes data;\n        // The address of the log's emitter.\n        address emitter;\n    }\n\n    /// An RPC URL and its alias. Returned by `rpcUrlStructs`.\n    struct Rpc {\n        // The alias of the RPC URL.\n        string key;\n        // The RPC URL.\n        string url;\n    }\n\n    /// An RPC log object. Returned by `eth_getLogs`.\n    struct EthGetLogs {\n        // The address of the log's emitter.\n        address emitter;\n        // The topics of the log, including the signature, if any.\n        bytes32[] topics;\n        // The raw data of the log.\n        bytes data;\n        // The block hash.\n        bytes32 blockHash;\n        // The block number.\n        uint64 blockNumber;\n        // The transaction hash.\n        bytes32 transactionHash;\n        // The transaction index in the block.\n        uint64 transactionIndex;\n        // The log index.\n        uint256 logIndex;\n        // Whether the log was removed.\n        bool removed;\n    }\n\n    /// A single entry in a directory listing. Returned by `readDir`.\n    struct DirEntry {\n        // The error message, if any.\n        string errorMessage;\n        // The path of the entry.\n        string path;\n        // The depth of the entry.\n        uint64 depth;\n        // Whether the entry is a directory.\n        bool isDir;\n        // Whether the entry is a symlink.\n        bool isSymlink;\n    }\n\n    /// Metadata information about a file.\n    /// This structure is returned from the `fsMetadata` function and represents known\n    /// metadata about a file such as its permissions, size, modification\n    /// times, etc.\n    struct FsMetadata {\n        // True if this metadata is for a directory.\n        bool isDir;\n        // True if this metadata is for a symlink.\n        bool isSymlink;\n        // The size of the file, in bytes, this metadata is for.\n        uint256 length;\n        // True if this metadata is for a readonly (unwritable) file.\n        bool readOnly;\n        // The last modification time listed in this metadata.\n        uint256 modified;\n        // The last access time of this metadata.\n        uint256 accessed;\n        // The creation time listed in this metadata.\n        uint256 created;\n    }\n\n    /// A wallet with a public and private key.\n    struct Wallet {\n        // The wallet's address.\n        address addr;\n        // The wallet's public key `X`.\n        uint256 publicKeyX;\n        // The wallet's public key `Y`.\n        uint256 publicKeyY;\n        // The wallet's private key.\n        uint256 privateKey;\n    }\n\n    /// The result of a `tryFfi` call.\n    struct FfiResult {\n        // The exit code of the call.\n        int32 exitCode;\n        // The optionally hex-decoded `stdout` data.\n        bytes stdout;\n        // The `stderr` data.\n        bytes stderr;\n    }\n\n    /// Information on the chain and fork.\n    struct ChainInfo {\n        // The fork identifier. Set to zero if no fork is active.\n        uint256 forkId;\n        // The chain ID of the current fork.\n        uint256 chainId;\n    }\n\n    /// Information about a blockchain.\n    struct Chain {\n        // The chain name.\n        string name;\n        // The chain's Chain ID.\n        uint256 chainId;\n        // The chain's alias. (i.e. what gets specified in `foundry.toml`).\n        string chainAlias;\n        // A default RPC endpoint for this chain.\n        string rpcUrl;\n    }\n\n    /// The result of a `stopAndReturnStateDiff` call.\n    struct AccountAccess {\n        // The chain and fork the access occurred.\n        ChainInfo chainInfo;\n        // The kind of account access that determines what the account is.\n        // If kind is Call, DelegateCall, StaticCall or CallCode, then the account is the callee.\n        // If kind is Create, then the account is the newly created account.\n        // If kind is SelfDestruct, then the account is the selfdestruct recipient.\n        // If kind is a Resume, then account represents a account context that has resumed.\n        AccountAccessKind kind;\n        // The account that was accessed.\n        // It's either the account created, callee or a selfdestruct recipient for CREATE, CALL or SELFDESTRUCT.\n        address account;\n        // What accessed the account.\n        address accessor;\n        // If the account was initialized or empty prior to the access.\n        // An account is considered initialized if it has code, a\n        // non-zero nonce, or a non-zero balance.\n        bool initialized;\n        // The previous balance of the accessed account.\n        uint256 oldBalance;\n        // The potential new balance of the accessed account.\n        // That is, all balance changes are recorded here, even if reverts occurred.\n        uint256 newBalance;\n        // Code of the account deployed by CREATE.\n        bytes deployedCode;\n        // Value passed along with the account access\n        uint256 value;\n        // Input data provided to the CREATE or CALL\n        bytes data;\n        // If this access reverted in either the current or parent context.\n        bool reverted;\n        // An ordered list of storage accesses made during an account access operation.\n        StorageAccess[] storageAccesses;\n        // Call depth traversed during the recording of state differences\n        uint64 depth;\n    }\n\n    /// The storage accessed during an `AccountAccess`.\n    struct StorageAccess {\n        // The account whose storage was accessed.\n        address account;\n        // The slot that was accessed.\n        bytes32 slot;\n        // If the access was a write.\n        bool isWrite;\n        // The previous value of the slot.\n        bytes32 previousValue;\n        // The new value of the slot.\n        bytes32 newValue;\n        // If the access was reverted.\n        bool reverted;\n    }\n\n    /// Gas used. Returned by `lastCallGas`.\n    struct Gas {\n        // The gas limit of the call.\n        uint64 gasLimit;\n        // The total gas used.\n        uint64 gasTotalUsed;\n        // DEPRECATED: The amount of gas used for memory expansion. Ref: <https://github.com/foundry-rs/foundry/pull/7934#pullrequestreview-2069236939>\n        uint64 gasMemoryUsed;\n        // The amount of gas refunded.\n        int64 gasRefunded;\n        // The amount of gas remaining.\n        uint64 gasRemaining;\n    }\n\n    /// The result of the `stopDebugTraceRecording` call\n    struct DebugStep {\n        // The stack before executing the step of the run.\n        // stack\\[0\\] represents the top of the stack.\n        // and only stack data relevant to the opcode execution is contained.\n        uint256[] stack;\n        // The memory input data before executing the step of the run.\n        // only input data relevant to the opcode execution is contained.\n        // e.g. for MLOAD, it will have memory\\[offset:offset+32\\] copied here.\n        // the offset value can be get by the stack data.\n        bytes memoryInput;\n        // The opcode that was accessed.\n        uint8 opcode;\n        // The call depth of the step.\n        uint64 depth;\n        // Whether the call end up with out of gas error.\n        bool isOutOfGas;\n        // The contract address where the opcode is running\n        address contractAddr;\n    }\n\n    /// Represents a transaction's broadcast details.\n    struct BroadcastTxSummary {\n        // The hash of the transaction that was broadcasted\n        bytes32 txHash;\n        // Represent the type of transaction among CALL, CREATE, CREATE2\n        BroadcastTxType txType;\n        // The address of the contract that was called or created.\n        // This is address of the contract that is created if the txType is CREATE or CREATE2.\n        address contractAddress;\n        // The block number the transaction landed in.\n        uint64 blockNumber;\n        // Status of the transaction, retrieved from the transaction receipt.\n        bool success;\n    }\n\n    /// Holds a signed EIP-7702 authorization for an authority account to delegate to an implementation.\n    struct SignedDelegation {\n        // The y-parity of the recovered secp256k1 signature (0 or 1).\n        uint8 v;\n        // First 32 bytes of the signature.\n        bytes32 r;\n        // Second 32 bytes of the signature.\n        bytes32 s;\n        // The current nonce of the authority account at signing time.\n        // Used to ensure signature can't be replayed after account nonce changes.\n        uint64 nonce;\n        // Address of the contract implementation that will be delegated to.\n        // Gets encoded into delegation code: 0xef0100 || implementation.\n        address implementation;\n    }\n\n    /// Represents a \"potential\" revert reason from a single subsequent call when using `vm.assumeNoReverts`.\n    /// Reverts that match will result in a FOUNDRY::ASSUME rejection, whereas unmatched reverts will be surfaced\n    /// as normal.\n    struct PotentialRevert {\n        // The allowed origin of the revert opcode; address(0) allows reverts from any address\n        address reverter;\n        // When true, only matches on the beginning of the revert data, otherwise, matches on entire revert data\n        bool partialMatch;\n        // The data to use to match encountered reverts\n        bytes revertData;\n    }\n\n    /// An EIP-2930 access list item.\n    struct AccessListItem {\n        // The address to be added in access list.\n        address target;\n        // The storage keys to be added in access list.\n        bytes32[] storageKeys;\n    }\n\n    // ======== Crypto ========\n\n    /// Derives a private key from the name, labels the account with that name, and returns the wallet.\n    function createWallet(string calldata walletLabel) external returns (Wallet memory wallet);\n\n    /// Generates a wallet from the private key and returns the wallet.\n    function createWallet(uint256 privateKey) external returns (Wallet memory wallet);\n\n    /// Generates a wallet from the private key, labels the account with that name, and returns the wallet.\n    function createWallet(uint256 privateKey, string calldata walletLabel) external returns (Wallet memory wallet);\n\n    /// Derive a private key from a provided mnenomic string (or mnenomic file path)\n    /// at the derivation path `m/44'/60'/0'/0/{index}`.\n    function deriveKey(string calldata mnemonic, uint32 index) external pure returns (uint256 privateKey);\n\n    /// Derive a private key from a provided mnenomic string (or mnenomic file path)\n    /// at `{derivationPath}{index}`.\n    function deriveKey(string calldata mnemonic, string calldata derivationPath, uint32 index)\n        external\n        pure\n        returns (uint256 privateKey);\n\n    /// Derive a private key from a provided mnenomic string (or mnenomic file path) in the specified language\n    /// at the derivation path `m/44'/60'/0'/0/{index}`.\n    function deriveKey(string calldata mnemonic, uint32 index, string calldata language)\n        external\n        pure\n        returns (uint256 privateKey);\n\n    /// Derive a private key from a provided mnenomic string (or mnenomic file path) in the specified language\n    /// at `{derivationPath}{index}`.\n    function deriveKey(string calldata mnemonic, string calldata derivationPath, uint32 index, string calldata language)\n        external\n        pure\n        returns (uint256 privateKey);\n\n    /// Derives secp256r1 public key from the provided `privateKey`.\n    function publicKeyP256(uint256 privateKey) external pure returns (uint256 publicKeyX, uint256 publicKeyY);\n\n    /// Adds a private key to the local forge wallet and returns the address.\n    function rememberKey(uint256 privateKey) external returns (address keyAddr);\n\n    /// Derive a set number of wallets from a mnemonic at the derivation path `m/44'/60'/0'/0/{0..count}`.\n    /// The respective private keys are saved to the local forge wallet for later use and their addresses are returned.\n    function rememberKeys(string calldata mnemonic, string calldata derivationPath, uint32 count)\n        external\n        returns (address[] memory keyAddrs);\n\n    /// Derive a set number of wallets from a mnemonic in the specified language at the derivation path `m/44'/60'/0'/0/{0..count}`.\n    /// The respective private keys are saved to the local forge wallet for later use and their addresses are returned.\n    function rememberKeys(\n        string calldata mnemonic,\n        string calldata derivationPath,\n        string calldata language,\n        uint32 count\n    ) external returns (address[] memory keyAddrs);\n\n    /// Signs data with a `Wallet`.\n    /// Returns a compact signature (`r`, `vs`) as per EIP-2098, where `vs` encodes both the\n    /// signature's `s` value, and the recovery id `v` in a single bytes32.\n    /// This format reduces the signature size from 65 to 64 bytes.\n    function signCompact(Wallet calldata wallet, bytes32 digest) external returns (bytes32 r, bytes32 vs);\n\n    /// Signs `digest` with `privateKey` using the secp256k1 curve.\n    /// Returns a compact signature (`r`, `vs`) as per EIP-2098, where `vs` encodes both the\n    /// signature's `s` value, and the recovery id `v` in a single bytes32.\n    /// This format reduces the signature size from 65 to 64 bytes.\n    function signCompact(uint256 privateKey, bytes32 digest) external pure returns (bytes32 r, bytes32 vs);\n\n    /// Signs `digest` with signer provided to script using the secp256k1 curve.\n    /// Returns a compact signature (`r`, `vs`) as per EIP-2098, where `vs` encodes both the\n    /// signature's `s` value, and the recovery id `v` in a single bytes32.\n    /// This format reduces the signature size from 65 to 64 bytes.\n    /// If `--sender` is provided, the signer with provided address is used, otherwise,\n    /// if exactly one signer is provided to the script, that signer is used.\n    /// Raises error if signer passed through `--sender` does not match any unlocked signers or\n    /// if `--sender` is not provided and not exactly one signer is passed to the script.\n    function signCompact(bytes32 digest) external pure returns (bytes32 r, bytes32 vs);\n\n    /// Signs `digest` with signer provided to script using the secp256k1 curve.\n    /// Returns a compact signature (`r`, `vs`) as per EIP-2098, where `vs` encodes both the\n    /// signature's `s` value, and the recovery id `v` in a single bytes32.\n    /// This format reduces the signature size from 65 to 64 bytes.\n    /// Raises error if none of the signers passed into the script have provided address.\n    function signCompact(address signer, bytes32 digest) external pure returns (bytes32 r, bytes32 vs);\n\n    /// Signs `digest` with `privateKey` using the secp256r1 curve.\n    function signP256(uint256 privateKey, bytes32 digest) external pure returns (bytes32 r, bytes32 s);\n\n    /// Signs data with a `Wallet`.\n    function sign(Wallet calldata wallet, bytes32 digest) external returns (uint8 v, bytes32 r, bytes32 s);\n\n    /// Signs `digest` with `privateKey` using the secp256k1 curve.\n    function sign(uint256 privateKey, bytes32 digest) external pure returns (uint8 v, bytes32 r, bytes32 s);\n\n    /// Signs `digest` with signer provided to script using the secp256k1 curve.\n    /// If `--sender` is provided, the signer with provided address is used, otherwise,\n    /// if exactly one signer is provided to the script, that signer is used.\n    /// Raises error if signer passed through `--sender` does not match any unlocked signers or\n    /// if `--sender` is not provided and not exactly one signer is passed to the script.\n    function sign(bytes32 digest) external pure returns (uint8 v, bytes32 r, bytes32 s);\n\n    /// Signs `digest` with signer provided to script using the secp256k1 curve.\n    /// Raises error if none of the signers passed into the script have provided address.\n    function sign(address signer, bytes32 digest) external pure returns (uint8 v, bytes32 r, bytes32 s);\n\n    // ======== Environment ========\n\n    /// Gets the environment variable `name` and parses it as `address`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envAddress(string calldata name) external view returns (address value);\n\n    /// Gets the environment variable `name` and parses it as an array of `address`, delimited by `delim`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envAddress(string calldata name, string calldata delim) external view returns (address[] memory value);\n\n    /// Gets the environment variable `name` and parses it as `bool`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envBool(string calldata name) external view returns (bool value);\n\n    /// Gets the environment variable `name` and parses it as an array of `bool`, delimited by `delim`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envBool(string calldata name, string calldata delim) external view returns (bool[] memory value);\n\n    /// Gets the environment variable `name` and parses it as `bytes32`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envBytes32(string calldata name) external view returns (bytes32 value);\n\n    /// Gets the environment variable `name` and parses it as an array of `bytes32`, delimited by `delim`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envBytes32(string calldata name, string calldata delim) external view returns (bytes32[] memory value);\n\n    /// Gets the environment variable `name` and parses it as `bytes`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envBytes(string calldata name) external view returns (bytes memory value);\n\n    /// Gets the environment variable `name` and parses it as an array of `bytes`, delimited by `delim`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envBytes(string calldata name, string calldata delim) external view returns (bytes[] memory value);\n\n    /// Gets the environment variable `name` and returns true if it exists, else returns false.\n    function envExists(string calldata name) external view returns (bool result);\n\n    /// Gets the environment variable `name` and parses it as `int256`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envInt(string calldata name) external view returns (int256 value);\n\n    /// Gets the environment variable `name` and parses it as an array of `int256`, delimited by `delim`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envInt(string calldata name, string calldata delim) external view returns (int256[] memory value);\n\n    /// Gets the environment variable `name` and parses it as `bool`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, bool defaultValue) external view returns (bool value);\n\n    /// Gets the environment variable `name` and parses it as `uint256`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, uint256 defaultValue) external view returns (uint256 value);\n\n    /// Gets the environment variable `name` and parses it as an array of `address`, delimited by `delim`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, string calldata delim, address[] calldata defaultValue)\n        external\n        view\n        returns (address[] memory value);\n\n    /// Gets the environment variable `name` and parses it as an array of `bytes32`, delimited by `delim`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, string calldata delim, bytes32[] calldata defaultValue)\n        external\n        view\n        returns (bytes32[] memory value);\n\n    /// Gets the environment variable `name` and parses it as an array of `string`, delimited by `delim`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, string calldata delim, string[] calldata defaultValue)\n        external\n        view\n        returns (string[] memory value);\n\n    /// Gets the environment variable `name` and parses it as an array of `bytes`, delimited by `delim`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, string calldata delim, bytes[] calldata defaultValue)\n        external\n        view\n        returns (bytes[] memory value);\n\n    /// Gets the environment variable `name` and parses it as `int256`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, int256 defaultValue) external view returns (int256 value);\n\n    /// Gets the environment variable `name` and parses it as `address`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, address defaultValue) external view returns (address value);\n\n    /// Gets the environment variable `name` and parses it as `bytes32`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, bytes32 defaultValue) external view returns (bytes32 value);\n\n    /// Gets the environment variable `name` and parses it as `string`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, string calldata defaultValue) external view returns (string memory value);\n\n    /// Gets the environment variable `name` and parses it as `bytes`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, bytes calldata defaultValue) external view returns (bytes memory value);\n\n    /// Gets the environment variable `name` and parses it as an array of `bool`, delimited by `delim`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, string calldata delim, bool[] calldata defaultValue)\n        external\n        view\n        returns (bool[] memory value);\n\n    /// Gets the environment variable `name` and parses it as an array of `uint256`, delimited by `delim`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, string calldata delim, uint256[] calldata defaultValue)\n        external\n        view\n        returns (uint256[] memory value);\n\n    /// Gets the environment variable `name` and parses it as an array of `int256`, delimited by `delim`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, string calldata delim, int256[] calldata defaultValue)\n        external\n        view\n        returns (int256[] memory value);\n\n    /// Gets the environment variable `name` and parses it as `string`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envString(string calldata name) external view returns (string memory value);\n\n    /// Gets the environment variable `name` and parses it as an array of `string`, delimited by `delim`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envString(string calldata name, string calldata delim) external view returns (string[] memory value);\n\n    /// Gets the environment variable `name` and parses it as `uint256`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envUint(string calldata name) external view returns (uint256 value);\n\n    /// Gets the environment variable `name` and parses it as an array of `uint256`, delimited by `delim`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envUint(string calldata name, string calldata delim) external view returns (uint256[] memory value);\n\n    /// Returns true if `forge` command was executed in given context.\n    function isContext(ForgeContext context) external view returns (bool result);\n\n    /// Sets environment variables.\n    function setEnv(string calldata name, string calldata value) external;\n\n    // ======== EVM ========\n\n    /// Gets all accessed reads and write slot from a `vm.record` session, for a given address.\n    function accesses(address target) external returns (bytes32[] memory readSlots, bytes32[] memory writeSlots);\n\n    /// Gets the address for a given private key.\n    function addr(uint256 privateKey) external pure returns (address keyAddr);\n\n    /// Gets all the logs according to specified filter.\n    function eth_getLogs(uint256 fromBlock, uint256 toBlock, address target, bytes32[] calldata topics)\n        external\n        returns (EthGetLogs[] memory logs);\n\n    /// Gets the current `block.blobbasefee`.\n    /// You should use this instead of `block.blobbasefee` if you use `vm.blobBaseFee`, as `block.blobbasefee` is assumed to be constant across a transaction,\n    /// and as a result will get optimized out by the compiler.\n    /// See https://github.com/foundry-rs/foundry/issues/6180\n    function getBlobBaseFee() external view returns (uint256 blobBaseFee);\n\n    /// Gets the current `block.number`.\n    /// You should use this instead of `block.number` if you use `vm.roll`, as `block.number` is assumed to be constant across a transaction,\n    /// and as a result will get optimized out by the compiler.\n    /// See https://github.com/foundry-rs/foundry/issues/6180\n    function getBlockNumber() external view returns (uint256 height);\n\n    /// Gets the current `block.timestamp`.\n    /// You should use this instead of `block.timestamp` if you use `vm.warp`, as `block.timestamp` is assumed to be constant across a transaction,\n    /// and as a result will get optimized out by the compiler.\n    /// See https://github.com/foundry-rs/foundry/issues/6180\n    function getBlockTimestamp() external view returns (uint256 timestamp);\n\n    /// Gets the map key and parent of a mapping at a given slot, for a given address.\n    function getMappingKeyAndParentOf(address target, bytes32 elementSlot)\n        external\n        returns (bool found, bytes32 key, bytes32 parent);\n\n    /// Gets the number of elements in the mapping at the given slot, for a given address.\n    function getMappingLength(address target, bytes32 mappingSlot) external returns (uint256 length);\n\n    /// Gets the elements at index idx of the mapping at the given slot, for a given address. The\n    /// index must be less than the length of the mapping (i.e. the number of keys in the mapping).\n    function getMappingSlotAt(address target, bytes32 mappingSlot, uint256 idx) external returns (bytes32 value);\n\n    /// Gets the nonce of an account.\n    function getNonce(address account) external view returns (uint64 nonce);\n\n    /// Get the nonce of a `Wallet`.\n    function getNonce(Wallet calldata wallet) external returns (uint64 nonce);\n\n    /// Gets all the recorded logs.\n    function getRecordedLogs() external returns (Log[] memory logs);\n\n    /// Returns state diffs from current `vm.startStateDiffRecording` session.\n    function getStateDiff() external view returns (string memory diff);\n\n    /// Returns state diffs from current `vm.startStateDiffRecording` session, in json format.\n    function getStateDiffJson() external view returns (string memory diff);\n\n    /// Gets the gas used in the last call from the callee perspective.\n    function lastCallGas() external view returns (Gas memory gas);\n\n    /// Loads a storage slot from an address.\n    function load(address target, bytes32 slot) external view returns (bytes32 data);\n\n    /// Pauses gas metering (i.e. gas usage is not counted). Noop if already paused.\n    function pauseGasMetering() external;\n\n    /// Records all storage reads and writes.\n    function record() external;\n\n    /// Record all the transaction logs.\n    function recordLogs() external;\n\n    /// Reset gas metering (i.e. gas usage is set to gas limit).\n    function resetGasMetering() external;\n\n    /// Resumes gas metering (i.e. gas usage is counted again). Noop if already on.\n    function resumeGasMetering() external;\n\n    /// Performs an Ethereum JSON-RPC request to the current fork URL.\n    function rpc(string calldata method, string calldata params) external returns (bytes memory data);\n\n    /// Performs an Ethereum JSON-RPC request to the given endpoint.\n    function rpc(string calldata urlOrAlias, string calldata method, string calldata params)\n        external\n        returns (bytes memory data);\n\n    /// Records the debug trace during the run.\n    function startDebugTraceRecording() external;\n\n    /// Starts recording all map SSTOREs for later retrieval.\n    function startMappingRecording() external;\n\n    /// Record all account accesses as part of CREATE, CALL or SELFDESTRUCT opcodes in order,\n    /// along with the context of the calls\n    function startStateDiffRecording() external;\n\n    /// Stop debug trace recording and returns the recorded debug trace.\n    function stopAndReturnDebugTraceRecording() external returns (DebugStep[] memory step);\n\n    /// Returns an ordered array of all account accesses from a `vm.startStateDiffRecording` session.\n    function stopAndReturnStateDiff() external returns (AccountAccess[] memory accountAccesses);\n\n    /// Stops recording all map SSTOREs for later retrieval and clears the recorded data.\n    function stopMappingRecording() external;\n\n    // ======== Filesystem ========\n\n    /// Closes file for reading, resetting the offset and allowing to read it from beginning with readLine.\n    /// `path` is relative to the project root.\n    function closeFile(string calldata path) external;\n\n    /// Copies the contents of one file to another. This function will **overwrite** the contents of `to`.\n    /// On success, the total number of bytes copied is returned and it is equal to the length of the `to` file as reported by `metadata`.\n    /// Both `from` and `to` are relative to the project root.\n    function copyFile(string calldata from, string calldata to) external returns (uint64 copied);\n\n    /// Creates a new, empty directory at the provided path.\n    /// This cheatcode will revert in the following situations, but is not limited to just these cases:\n    /// - User lacks permissions to modify `path`.\n    /// - A parent of the given path doesn't exist and `recursive` is false.\n    /// - `path` already exists and `recursive` is false.\n    /// `path` is relative to the project root.\n    function createDir(string calldata path, bool recursive) external;\n\n    /// Deploys a contract from an artifact file. Takes in the relative path to the json file or the path to the\n    /// artifact in the form of <path>:<contract>:<version> where <contract> and <version> parts are optional.\n    function deployCode(string calldata artifactPath) external returns (address deployedAddress);\n\n    /// Deploys a contract from an artifact file. Takes in the relative path to the json file or the path to the\n    /// artifact in the form of <path>:<contract>:<version> where <contract> and <version> parts are optional.\n    /// Additionally accepts abi-encoded constructor arguments.\n    function deployCode(string calldata artifactPath, bytes calldata constructorArgs)\n        external\n        returns (address deployedAddress);\n\n    /// Deploys a contract from an artifact file. Takes in the relative path to the json file or the path to the\n    /// artifact in the form of <path>:<contract>:<version> where <contract> and <version> parts are optional.\n    /// Additionally accepts `msg.value`.\n    function deployCode(string calldata artifactPath, uint256 value) external returns (address deployedAddress);\n\n    /// Deploys a contract from an artifact file. Takes in the relative path to the json file or the path to the\n    /// artifact in the form of <path>:<contract>:<version> where <contract> and <version> parts are optional.\n    /// Additionally accepts abi-encoded constructor arguments and `msg.value`.\n    function deployCode(string calldata artifactPath, bytes calldata constructorArgs, uint256 value)\n        external\n        returns (address deployedAddress);\n\n    /// Deploys a contract from an artifact file, using the CREATE2 salt. Takes in the relative path to the json file or the path to the\n    /// artifact in the form of <path>:<contract>:<version> where <contract> and <version> parts are optional.\n    function deployCode(string calldata artifactPath, bytes32 salt) external returns (address deployedAddress);\n\n    /// Deploys a contract from an artifact file, using the CREATE2 salt. Takes in the relative path to the json file or the path to the\n    /// artifact in the form of <path>:<contract>:<version> where <contract> and <version> parts are optional.\n    /// Additionally accepts abi-encoded constructor arguments.\n    function deployCode(string calldata artifactPath, bytes calldata constructorArgs, bytes32 salt)\n        external\n        returns (address deployedAddress);\n\n    /// Deploys a contract from an artifact file, using the CREATE2 salt. Takes in the relative path to the json file or the path to the\n    /// artifact in the form of <path>:<contract>:<version> where <contract> and <version> parts are optional.\n    /// Additionally accepts `msg.value`.\n    function deployCode(string calldata artifactPath, uint256 value, bytes32 salt)\n        external\n        returns (address deployedAddress);\n\n    /// Deploys a contract from an artifact file, using the CREATE2 salt. Takes in the relative path to the json file or the path to the\n    /// artifact in the form of <path>:<contract>:<version> where <contract> and <version> parts are optional.\n    /// Additionally accepts abi-encoded constructor arguments and `msg.value`.\n    function deployCode(string calldata artifactPath, bytes calldata constructorArgs, uint256 value, bytes32 salt)\n        external\n        returns (address deployedAddress);\n\n    /// Returns true if the given path points to an existing entity, else returns false.\n    function exists(string calldata path) external view returns (bool result);\n\n    /// Performs a foreign function call via the terminal.\n    function ffi(string[] calldata commandInput) external returns (bytes memory result);\n\n    /// Given a path, query the file system to get information about a file, directory, etc.\n    function fsMetadata(string calldata path) external view returns (FsMetadata memory metadata);\n\n    /// Gets the artifact path from code (aka. creation code).\n    function getArtifactPathByCode(bytes calldata code) external view returns (string memory path);\n\n    /// Gets the artifact path from deployed code (aka. runtime code).\n    function getArtifactPathByDeployedCode(bytes calldata deployedCode) external view returns (string memory path);\n\n    /// Returns the most recent broadcast for the given contract on `chainId` matching `txType`.\n    /// For example:\n    /// The most recent deployment can be fetched by passing `txType` as `CREATE` or `CREATE2`.\n    /// The most recent call can be fetched by passing `txType` as `CALL`.\n    function getBroadcast(string calldata contractName, uint64 chainId, BroadcastTxType txType)\n        external\n        view\n        returns (BroadcastTxSummary memory);\n\n    /// Returns all broadcasts for the given contract on `chainId` with the specified `txType`.\n    /// Sorted such that the most recent broadcast is the first element, and the oldest is the last. i.e descending order of BroadcastTxSummary.blockNumber.\n    function getBroadcasts(string calldata contractName, uint64 chainId, BroadcastTxType txType)\n        external\n        view\n        returns (BroadcastTxSummary[] memory);\n\n    /// Returns all broadcasts for the given contract on `chainId`.\n    /// Sorted such that the most recent broadcast is the first element, and the oldest is the last. i.e descending order of BroadcastTxSummary.blockNumber.\n    function getBroadcasts(string calldata contractName, uint64 chainId)\n        external\n        view\n        returns (BroadcastTxSummary[] memory);\n\n    /// Gets the creation bytecode from an artifact file. Takes in the relative path to the json file or the path to the\n    /// artifact in the form of <path>:<contract>:<version> where <contract> and <version> parts are optional.\n    function getCode(string calldata artifactPath) external view returns (bytes memory creationBytecode);\n\n    /// Gets the deployed bytecode from an artifact file. Takes in the relative path to the json file or the path to the\n    /// artifact in the form of <path>:<contract>:<version> where <contract> and <version> parts are optional.\n    function getDeployedCode(string calldata artifactPath) external view returns (bytes memory runtimeBytecode);\n\n    /// Returns the most recent deployment for the current `chainId`.\n    function getDeployment(string calldata contractName) external view returns (address deployedAddress);\n\n    /// Returns the most recent deployment for the given contract on `chainId`\n    function getDeployment(string calldata contractName, uint64 chainId)\n        external\n        view\n        returns (address deployedAddress);\n\n    /// Returns all deployments for the given contract on `chainId`\n    /// Sorted in descending order of deployment time i.e descending order of BroadcastTxSummary.blockNumber.\n    /// The most recent deployment is the first element, and the oldest is the last.\n    function getDeployments(string calldata contractName, uint64 chainId)\n        external\n        view\n        returns (address[] memory deployedAddresses);\n\n    /// Returns true if the path exists on disk and is pointing at a directory, else returns false.\n    function isDir(string calldata path) external view returns (bool result);\n\n    /// Returns true if the path exists on disk and is pointing at a regular file, else returns false.\n    function isFile(string calldata path) external view returns (bool result);\n\n    /// Get the path of the current project root.\n    function projectRoot() external view returns (string memory path);\n\n    /// Prompts the user for a string value in the terminal.\n    function prompt(string calldata promptText) external returns (string memory input);\n\n    /// Prompts the user for an address in the terminal.\n    function promptAddress(string calldata promptText) external returns (address);\n\n    /// Prompts the user for a hidden string value in the terminal.\n    function promptSecret(string calldata promptText) external returns (string memory input);\n\n    /// Prompts the user for hidden uint256 in the terminal (usually pk).\n    function promptSecretUint(string calldata promptText) external returns (uint256);\n\n    /// Prompts the user for uint256 in the terminal.\n    function promptUint(string calldata promptText) external returns (uint256);\n\n    /// Reads the directory at the given path recursively, up to `maxDepth`.\n    /// `maxDepth` defaults to 1, meaning only the direct children of the given directory will be returned.\n    /// Follows symbolic links if `followLinks` is true.\n    function readDir(string calldata path) external view returns (DirEntry[] memory entries);\n\n    /// See `readDir(string)`.\n    function readDir(string calldata path, uint64 maxDepth) external view returns (DirEntry[] memory entries);\n\n    /// See `readDir(string)`.\n    function readDir(string calldata path, uint64 maxDepth, bool followLinks)\n        external\n        view\n        returns (DirEntry[] memory entries);\n\n    /// Reads the entire content of file to string. `path` is relative to the project root.\n    function readFile(string calldata path) external view returns (string memory data);\n\n    /// Reads the entire content of file as binary. `path` is relative to the project root.\n    function readFileBinary(string calldata path) external view returns (bytes memory data);\n\n    /// Reads next line of file to string.\n    function readLine(string calldata path) external view returns (string memory line);\n\n    /// Reads a symbolic link, returning the path that the link points to.\n    /// This cheatcode will revert in the following situations, but is not limited to just these cases:\n    /// - `path` is not a symbolic link.\n    /// - `path` does not exist.\n    function readLink(string calldata linkPath) external view returns (string memory targetPath);\n\n    /// Removes a directory at the provided path.\n    /// This cheatcode will revert in the following situations, but is not limited to just these cases:\n    /// - `path` doesn't exist.\n    /// - `path` isn't a directory.\n    /// - User lacks permissions to modify `path`.\n    /// - The directory is not empty and `recursive` is false.\n    /// `path` is relative to the project root.\n    function removeDir(string calldata path, bool recursive) external;\n\n    /// Removes a file from the filesystem.\n    /// This cheatcode will revert in the following situations, but is not limited to just these cases:\n    /// - `path` points to a directory.\n    /// - The file doesn't exist.\n    /// - The user lacks permissions to remove the file.\n    /// `path` is relative to the project root.\n    function removeFile(string calldata path) external;\n\n    /// Performs a foreign function call via terminal and returns the exit code, stdout, and stderr.\n    function tryFfi(string[] calldata commandInput) external returns (FfiResult memory result);\n\n    /// Returns the time since unix epoch in milliseconds.\n    function unixTime() external view returns (uint256 milliseconds);\n\n    /// Writes data to file, creating a file if it does not exist, and entirely replacing its contents if it does.\n    /// `path` is relative to the project root.\n    function writeFile(string calldata path, string calldata data) external;\n\n    /// Writes binary data to a file, creating a file if it does not exist, and entirely replacing its contents if it does.\n    /// `path` is relative to the project root.\n    function writeFileBinary(string calldata path, bytes calldata data) external;\n\n    /// Writes line to file, creating a file if it does not exist.\n    /// `path` is relative to the project root.\n    function writeLine(string calldata path, string calldata data) external;\n\n    // ======== JSON ========\n\n    /// Checks if `key` exists in a JSON object.\n    function keyExistsJson(string calldata json, string calldata key) external view returns (bool);\n\n    /// Parses a string of JSON data at `key` and coerces it to `address`.\n    function parseJsonAddress(string calldata json, string calldata key) external pure returns (address);\n\n    /// Parses a string of JSON data at `key` and coerces it to `address[]`.\n    function parseJsonAddressArray(string calldata json, string calldata key)\n        external\n        pure\n        returns (address[] memory);\n\n    /// Parses a string of JSON data at `key` and coerces it to `bool`.\n    function parseJsonBool(string calldata json, string calldata key) external pure returns (bool);\n\n    /// Parses a string of JSON data at `key` and coerces it to `bool[]`.\n    function parseJsonBoolArray(string calldata json, string calldata key) external pure returns (bool[] memory);\n\n    /// Parses a string of JSON data at `key` and coerces it to `bytes`.\n    function parseJsonBytes(string calldata json, string calldata key) external pure returns (bytes memory);\n\n    /// Parses a string of JSON data at `key` and coerces it to `bytes32`.\n    function parseJsonBytes32(string calldata json, string calldata key) external pure returns (bytes32);\n\n    /// Parses a string of JSON data at `key` and coerces it to `bytes32[]`.\n    function parseJsonBytes32Array(string calldata json, string calldata key)\n        external\n        pure\n        returns (bytes32[] memory);\n\n    /// Parses a string of JSON data at `key` and coerces it to `bytes[]`.\n    function parseJsonBytesArray(string calldata json, string calldata key) external pure returns (bytes[] memory);\n\n    /// Parses a string of JSON data at `key` and coerces it to `int256`.\n    function parseJsonInt(string calldata json, string calldata key) external pure returns (int256);\n\n    /// Parses a string of JSON data at `key` and coerces it to `int256[]`.\n    function parseJsonIntArray(string calldata json, string calldata key) external pure returns (int256[] memory);\n\n    /// Returns an array of all the keys in a JSON object.\n    function parseJsonKeys(string calldata json, string calldata key) external pure returns (string[] memory keys);\n\n    /// Parses a string of JSON data at `key` and coerces it to `string`.\n    function parseJsonString(string calldata json, string calldata key) external pure returns (string memory);\n\n    /// Parses a string of JSON data at `key` and coerces it to `string[]`.\n    function parseJsonStringArray(string calldata json, string calldata key) external pure returns (string[] memory);\n\n    /// Parses a string of JSON data at `key` and coerces it to type array corresponding to `typeDescription`.\n    function parseJsonTypeArray(string calldata json, string calldata key, string calldata typeDescription)\n        external\n        pure\n        returns (bytes memory);\n\n    /// Parses a string of JSON data and coerces it to type corresponding to `typeDescription`.\n    function parseJsonType(string calldata json, string calldata typeDescription)\n        external\n        pure\n        returns (bytes memory);\n\n    /// Parses a string of JSON data at `key` and coerces it to type corresponding to `typeDescription`.\n    function parseJsonType(string calldata json, string calldata key, string calldata typeDescription)\n        external\n        pure\n        returns (bytes memory);\n\n    /// Parses a string of JSON data at `key` and coerces it to `uint256`.\n    function parseJsonUint(string calldata json, string calldata key) external pure returns (uint256);\n\n    /// Parses a string of JSON data at `key` and coerces it to `uint256[]`.\n    function parseJsonUintArray(string calldata json, string calldata key) external pure returns (uint256[] memory);\n\n    /// ABI-encodes a JSON object.\n    function parseJson(string calldata json) external pure returns (bytes memory abiEncodedData);\n\n    /// ABI-encodes a JSON object at `key`.\n    function parseJson(string calldata json, string calldata key) external pure returns (bytes memory abiEncodedData);\n\n    /// See `serializeJson`.\n    function serializeAddress(string calldata objectKey, string calldata valueKey, address value)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeAddress(string calldata objectKey, string calldata valueKey, address[] calldata values)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeBool(string calldata objectKey, string calldata valueKey, bool value)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeBool(string calldata objectKey, string calldata valueKey, bool[] calldata values)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeBytes32(string calldata objectKey, string calldata valueKey, bytes32 value)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeBytes32(string calldata objectKey, string calldata valueKey, bytes32[] calldata values)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeBytes(string calldata objectKey, string calldata valueKey, bytes calldata value)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeBytes(string calldata objectKey, string calldata valueKey, bytes[] calldata values)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeInt(string calldata objectKey, string calldata valueKey, int256 value)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeInt(string calldata objectKey, string calldata valueKey, int256[] calldata values)\n        external\n        returns (string memory json);\n\n    /// Serializes a key and value to a JSON object stored in-memory that can be later written to a file.\n    /// Returns the stringified version of the specific JSON file up to that moment.\n    function serializeJson(string calldata objectKey, string calldata value) external returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeJsonType(string calldata typeDescription, bytes calldata value)\n        external\n        pure\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeJsonType(\n        string calldata objectKey,\n        string calldata valueKey,\n        string calldata typeDescription,\n        bytes calldata value\n    ) external returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeString(string calldata objectKey, string calldata valueKey, string calldata value)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeString(string calldata objectKey, string calldata valueKey, string[] calldata values)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeUintToHex(string calldata objectKey, string calldata valueKey, uint256 value)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeUint(string calldata objectKey, string calldata valueKey, uint256 value)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeUint(string calldata objectKey, string calldata valueKey, uint256[] calldata values)\n        external\n        returns (string memory json);\n\n    /// Write a serialized JSON object to a file. If the file exists, it will be overwritten.\n    function writeJson(string calldata json, string calldata path) external;\n\n    /// Write a serialized JSON object to an **existing** JSON file, replacing a value with key = <value_key.>\n    /// This is useful to replace a specific value of a JSON file, without having to parse the entire thing.\n    function writeJson(string calldata json, string calldata path, string calldata valueKey) external;\n\n    /// Checks if `key` exists in a JSON object\n    /// `keyExists` is being deprecated in favor of `keyExistsJson`. It will be removed in future versions.\n    function keyExists(string calldata json, string calldata key) external view returns (bool);\n\n    // ======== Scripting ========\n\n    /// Attach an EIP-4844 blob to the next call\n    function attachBlob(bytes calldata blob) external;\n\n    /// Designate the next call as an EIP-7702 transaction\n    function attachDelegation(SignedDelegation calldata signedDelegation) external;\n\n    /// Takes a signed transaction and broadcasts it to the network.\n    function broadcastRawTransaction(bytes calldata data) external;\n\n    /// Has the next call (at this call depth only) create transactions that can later be signed and sent onchain.\n    /// Broadcasting address is determined by checking the following in order:\n    /// 1. If `--sender` argument was provided, that address is used.\n    /// 2. If exactly one signer (e.g. private key, hw wallet, keystore) is set when `forge broadcast` is invoked, that signer is used.\n    /// 3. Otherwise, default foundry sender (1804c8AB1F12E6bbf3894d4083f33e07309d1f38) is used.\n    function broadcast() external;\n\n    /// Has the next call (at this call depth only) create a transaction with the address provided\n    /// as the sender that can later be signed and sent onchain.\n    function broadcast(address signer) external;\n\n    /// Has the next call (at this call depth only) create a transaction with the private key\n    /// provided as the sender that can later be signed and sent onchain.\n    function broadcast(uint256 privateKey) external;\n\n    /// Returns addresses of available unlocked wallets in the script environment.\n    function getWallets() external returns (address[] memory wallets);\n\n    /// Sign an EIP-7702 authorization and designate the next call as an EIP-7702 transaction\n    function signAndAttachDelegation(address implementation, uint256 privateKey)\n        external\n        returns (SignedDelegation memory signedDelegation);\n\n    /// Sign an EIP-7702 authorization and designate the next call as an EIP-7702 transaction for specific nonce\n    function signAndAttachDelegation(address implementation, uint256 privateKey, uint64 nonce)\n        external\n        returns (SignedDelegation memory signedDelegation);\n\n    /// Sign an EIP-7702 authorization for delegation\n    function signDelegation(address implementation, uint256 privateKey)\n        external\n        returns (SignedDelegation memory signedDelegation);\n\n    /// Sign an EIP-7702 authorization for delegation for specific nonce\n    function signDelegation(address implementation, uint256 privateKey, uint64 nonce)\n        external\n        returns (SignedDelegation memory signedDelegation);\n\n    /// Has all subsequent calls (at this call depth only) create transactions that can later be signed and sent onchain.\n    /// Broadcasting address is determined by checking the following in order:\n    /// 1. If `--sender` argument was provided, that address is used.\n    /// 2. If exactly one signer (e.g. private key, hw wallet, keystore) is set when `forge broadcast` is invoked, that signer is used.\n    /// 3. Otherwise, default foundry sender (1804c8AB1F12E6bbf3894d4083f33e07309d1f38) is used.\n    function startBroadcast() external;\n\n    /// Has all subsequent calls (at this call depth only) create transactions with the address\n    /// provided that can later be signed and sent onchain.\n    function startBroadcast(address signer) external;\n\n    /// Has all subsequent calls (at this call depth only) create transactions with the private key\n    /// provided that can later be signed and sent onchain.\n    function startBroadcast(uint256 privateKey) external;\n\n    /// Stops collecting onchain transactions.\n    function stopBroadcast() external;\n\n    // ======== String ========\n\n    /// Returns true if `search` is found in `subject`, false otherwise.\n    function contains(string calldata subject, string calldata search) external returns (bool result);\n\n    /// Returns the index of the first occurrence of a `key` in an `input` string.\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `key` is not found.\n    /// Returns 0 in case of an empty `key`.\n    function indexOf(string calldata input, string calldata key) external pure returns (uint256);\n\n    /// Parses the given `string` into an `address`.\n    function parseAddress(string calldata stringifiedValue) external pure returns (address parsedValue);\n\n    /// Parses the given `string` into a `bool`.\n    function parseBool(string calldata stringifiedValue) external pure returns (bool parsedValue);\n\n    /// Parses the given `string` into `bytes`.\n    function parseBytes(string calldata stringifiedValue) external pure returns (bytes memory parsedValue);\n\n    /// Parses the given `string` into a `bytes32`.\n    function parseBytes32(string calldata stringifiedValue) external pure returns (bytes32 parsedValue);\n\n    /// Parses the given `string` into a `int256`.\n    function parseInt(string calldata stringifiedValue) external pure returns (int256 parsedValue);\n\n    /// Parses the given `string` into a `uint256`.\n    function parseUint(string calldata stringifiedValue) external pure returns (uint256 parsedValue);\n\n    /// Replaces occurrences of `from` in the given `string` with `to`.\n    function replace(string calldata input, string calldata from, string calldata to)\n        external\n        pure\n        returns (string memory output);\n\n    /// Splits the given `string` into an array of strings divided by the `delimiter`.\n    function split(string calldata input, string calldata delimiter) external pure returns (string[] memory outputs);\n\n    /// Converts the given `string` value to Lowercase.\n    function toLowercase(string calldata input) external pure returns (string memory output);\n\n    /// Converts the given value to a `string`.\n    function toString(address value) external pure returns (string memory stringifiedValue);\n\n    /// Converts the given value to a `string`.\n    function toString(bytes calldata value) external pure returns (string memory stringifiedValue);\n\n    /// Converts the given value to a `string`.\n    function toString(bytes32 value) external pure returns (string memory stringifiedValue);\n\n    /// Converts the given value to a `string`.\n    function toString(bool value) external pure returns (string memory stringifiedValue);\n\n    /// Converts the given value to a `string`.\n    function toString(uint256 value) external pure returns (string memory stringifiedValue);\n\n    /// Converts the given value to a `string`.\n    function toString(int256 value) external pure returns (string memory stringifiedValue);\n\n    /// Converts the given `string` value to Uppercase.\n    function toUppercase(string calldata input) external pure returns (string memory output);\n\n    /// Trims leading and trailing whitespace from the given `string` value.\n    function trim(string calldata input) external pure returns (string memory output);\n\n    // ======== Testing ========\n\n    /// Compares two `uint256` values. Expects difference to be less than or equal to `maxDelta`.\n    /// Formats values with decimals in failure message.\n    function assertApproxEqAbsDecimal(uint256 left, uint256 right, uint256 maxDelta, uint256 decimals) external pure;\n\n    /// Compares two `uint256` values. Expects difference to be less than or equal to `maxDelta`.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertApproxEqAbsDecimal(\n        uint256 left,\n        uint256 right,\n        uint256 maxDelta,\n        uint256 decimals,\n        string calldata error\n    ) external pure;\n\n    /// Compares two `int256` values. Expects difference to be less than or equal to `maxDelta`.\n    /// Formats values with decimals in failure message.\n    function assertApproxEqAbsDecimal(int256 left, int256 right, uint256 maxDelta, uint256 decimals) external pure;\n\n    /// Compares two `int256` values. Expects difference to be less than or equal to `maxDelta`.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertApproxEqAbsDecimal(\n        int256 left,\n        int256 right,\n        uint256 maxDelta,\n        uint256 decimals,\n        string calldata error\n    ) external pure;\n\n    /// Compares two `uint256` values. Expects difference to be less than or equal to `maxDelta`.\n    function assertApproxEqAbs(uint256 left, uint256 right, uint256 maxDelta) external pure;\n\n    /// Compares two `uint256` values. Expects difference to be less than or equal to `maxDelta`.\n    /// Includes error message into revert string on failure.\n    function assertApproxEqAbs(uint256 left, uint256 right, uint256 maxDelta, string calldata error) external pure;\n\n    /// Compares two `int256` values. Expects difference to be less than or equal to `maxDelta`.\n    function assertApproxEqAbs(int256 left, int256 right, uint256 maxDelta) external pure;\n\n    /// Compares two `int256` values. Expects difference to be less than or equal to `maxDelta`.\n    /// Includes error message into revert string on failure.\n    function assertApproxEqAbs(int256 left, int256 right, uint256 maxDelta, string calldata error) external pure;\n\n    /// Compares two `uint256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\n    /// Formats values with decimals in failure message.\n    function assertApproxEqRelDecimal(uint256 left, uint256 right, uint256 maxPercentDelta, uint256 decimals)\n        external\n        pure;\n\n    /// Compares two `uint256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertApproxEqRelDecimal(\n        uint256 left,\n        uint256 right,\n        uint256 maxPercentDelta,\n        uint256 decimals,\n        string calldata error\n    ) external pure;\n\n    /// Compares two `int256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\n    /// Formats values with decimals in failure message.\n    function assertApproxEqRelDecimal(int256 left, int256 right, uint256 maxPercentDelta, uint256 decimals)\n        external\n        pure;\n\n    /// Compares two `int256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertApproxEqRelDecimal(\n        int256 left,\n        int256 right,\n        uint256 maxPercentDelta,\n        uint256 decimals,\n        string calldata error\n    ) external pure;\n\n    /// Compares two `uint256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\n    function assertApproxEqRel(uint256 left, uint256 right, uint256 maxPercentDelta) external pure;\n\n    /// Compares two `uint256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\n    /// Includes error message into revert string on failure.\n    function assertApproxEqRel(uint256 left, uint256 right, uint256 maxPercentDelta, string calldata error)\n        external\n        pure;\n\n    /// Compares two `int256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\n    function assertApproxEqRel(int256 left, int256 right, uint256 maxPercentDelta) external pure;\n\n    /// Compares two `int256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\n    /// Includes error message into revert string on failure.\n    function assertApproxEqRel(int256 left, int256 right, uint256 maxPercentDelta, string calldata error)\n        external\n        pure;\n\n    /// Asserts that two `uint256` values are equal, formatting them with decimals in failure message.\n    function assertEqDecimal(uint256 left, uint256 right, uint256 decimals) external pure;\n\n    /// Asserts that two `uint256` values are equal, formatting them with decimals in failure message.\n    /// Includes error message into revert string on failure.\n    function assertEqDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Asserts that two `int256` values are equal, formatting them with decimals in failure message.\n    function assertEqDecimal(int256 left, int256 right, uint256 decimals) external pure;\n\n    /// Asserts that two `int256` values are equal, formatting them with decimals in failure message.\n    /// Includes error message into revert string on failure.\n    function assertEqDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Asserts that two `bool` values are equal.\n    function assertEq(bool left, bool right) external pure;\n\n    /// Asserts that two `bool` values are equal and includes error message into revert string on failure.\n    function assertEq(bool left, bool right, string calldata error) external pure;\n\n    /// Asserts that two `string` values are equal.\n    function assertEq(string calldata left, string calldata right) external pure;\n\n    /// Asserts that two `string` values are equal and includes error message into revert string on failure.\n    function assertEq(string calldata left, string calldata right, string calldata error) external pure;\n\n    /// Asserts that two `bytes` values are equal.\n    function assertEq(bytes calldata left, bytes calldata right) external pure;\n\n    /// Asserts that two `bytes` values are equal and includes error message into revert string on failure.\n    function assertEq(bytes calldata left, bytes calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `bool` values are equal.\n    function assertEq(bool[] calldata left, bool[] calldata right) external pure;\n\n    /// Asserts that two arrays of `bool` values are equal and includes error message into revert string on failure.\n    function assertEq(bool[] calldata left, bool[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `uint256 values are equal.\n    function assertEq(uint256[] calldata left, uint256[] calldata right) external pure;\n\n    /// Asserts that two arrays of `uint256` values are equal and includes error message into revert string on failure.\n    function assertEq(uint256[] calldata left, uint256[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `int256` values are equal.\n    function assertEq(int256[] calldata left, int256[] calldata right) external pure;\n\n    /// Asserts that two arrays of `int256` values are equal and includes error message into revert string on failure.\n    function assertEq(int256[] calldata left, int256[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two `uint256` values are equal.\n    function assertEq(uint256 left, uint256 right) external pure;\n\n    /// Asserts that two arrays of `address` values are equal.\n    function assertEq(address[] calldata left, address[] calldata right) external pure;\n\n    /// Asserts that two arrays of `address` values are equal and includes error message into revert string on failure.\n    function assertEq(address[] calldata left, address[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `bytes32` values are equal.\n    function assertEq(bytes32[] calldata left, bytes32[] calldata right) external pure;\n\n    /// Asserts that two arrays of `bytes32` values are equal and includes error message into revert string on failure.\n    function assertEq(bytes32[] calldata left, bytes32[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `string` values are equal.\n    function assertEq(string[] calldata left, string[] calldata right) external pure;\n\n    /// Asserts that two arrays of `string` values are equal and includes error message into revert string on failure.\n    function assertEq(string[] calldata left, string[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `bytes` values are equal.\n    function assertEq(bytes[] calldata left, bytes[] calldata right) external pure;\n\n    /// Asserts that two arrays of `bytes` values are equal and includes error message into revert string on failure.\n    function assertEq(bytes[] calldata left, bytes[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two `uint256` values are equal and includes error message into revert string on failure.\n    function assertEq(uint256 left, uint256 right, string calldata error) external pure;\n\n    /// Asserts that two `int256` values are equal.\n    function assertEq(int256 left, int256 right) external pure;\n\n    /// Asserts that two `int256` values are equal and includes error message into revert string on failure.\n    function assertEq(int256 left, int256 right, string calldata error) external pure;\n\n    /// Asserts that two `address` values are equal.\n    function assertEq(address left, address right) external pure;\n\n    /// Asserts that two `address` values are equal and includes error message into revert string on failure.\n    function assertEq(address left, address right, string calldata error) external pure;\n\n    /// Asserts that two `bytes32` values are equal.\n    function assertEq(bytes32 left, bytes32 right) external pure;\n\n    /// Asserts that two `bytes32` values are equal and includes error message into revert string on failure.\n    function assertEq(bytes32 left, bytes32 right, string calldata error) external pure;\n\n    /// Asserts that the given condition is false.\n    function assertFalse(bool condition) external pure;\n\n    /// Asserts that the given condition is false and includes error message into revert string on failure.\n    function assertFalse(bool condition, string calldata error) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be greater than or equal to second.\n    /// Formats values with decimals in failure message.\n    function assertGeDecimal(uint256 left, uint256 right, uint256 decimals) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be greater than or equal to second.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertGeDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Compares two `int256` values. Expects first value to be greater than or equal to second.\n    /// Formats values with decimals in failure message.\n    function assertGeDecimal(int256 left, int256 right, uint256 decimals) external pure;\n\n    /// Compares two `int256` values. Expects first value to be greater than or equal to second.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertGeDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be greater than or equal to second.\n    function assertGe(uint256 left, uint256 right) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be greater than or equal to second.\n    /// Includes error message into revert string on failure.\n    function assertGe(uint256 left, uint256 right, string calldata error) external pure;\n\n    /// Compares two `int256` values. Expects first value to be greater than or equal to second.\n    function assertGe(int256 left, int256 right) external pure;\n\n    /// Compares two `int256` values. Expects first value to be greater than or equal to second.\n    /// Includes error message into revert string on failure.\n    function assertGe(int256 left, int256 right, string calldata error) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be greater than second.\n    /// Formats values with decimals in failure message.\n    function assertGtDecimal(uint256 left, uint256 right, uint256 decimals) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be greater than second.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertGtDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Compares two `int256` values. Expects first value to be greater than second.\n    /// Formats values with decimals in failure message.\n    function assertGtDecimal(int256 left, int256 right, uint256 decimals) external pure;\n\n    /// Compares two `int256` values. Expects first value to be greater than second.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertGtDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be greater than second.\n    function assertGt(uint256 left, uint256 right) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be greater than second.\n    /// Includes error message into revert string on failure.\n    function assertGt(uint256 left, uint256 right, string calldata error) external pure;\n\n    /// Compares two `int256` values. Expects first value to be greater than second.\n    function assertGt(int256 left, int256 right) external pure;\n\n    /// Compares two `int256` values. Expects first value to be greater than second.\n    /// Includes error message into revert string on failure.\n    function assertGt(int256 left, int256 right, string calldata error) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be less than or equal to second.\n    /// Formats values with decimals in failure message.\n    function assertLeDecimal(uint256 left, uint256 right, uint256 decimals) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be less than or equal to second.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertLeDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Compares two `int256` values. Expects first value to be less than or equal to second.\n    /// Formats values with decimals in failure message.\n    function assertLeDecimal(int256 left, int256 right, uint256 decimals) external pure;\n\n    /// Compares two `int256` values. Expects first value to be less than or equal to second.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertLeDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be less than or equal to second.\n    function assertLe(uint256 left, uint256 right) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be less than or equal to second.\n    /// Includes error message into revert string on failure.\n    function assertLe(uint256 left, uint256 right, string calldata error) external pure;\n\n    /// Compares two `int256` values. Expects first value to be less than or equal to second.\n    function assertLe(int256 left, int256 right) external pure;\n\n    /// Compares two `int256` values. Expects first value to be less than or equal to second.\n    /// Includes error message into revert string on failure.\n    function assertLe(int256 left, int256 right, string calldata error) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be less than second.\n    /// Formats values with decimals in failure message.\n    function assertLtDecimal(uint256 left, uint256 right, uint256 decimals) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be less than second.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertLtDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Compares two `int256` values. Expects first value to be less than second.\n    /// Formats values with decimals in failure message.\n    function assertLtDecimal(int256 left, int256 right, uint256 decimals) external pure;\n\n    /// Compares two `int256` values. Expects first value to be less than second.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertLtDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be less than second.\n    function assertLt(uint256 left, uint256 right) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be less than second.\n    /// Includes error message into revert string on failure.\n    function assertLt(uint256 left, uint256 right, string calldata error) external pure;\n\n    /// Compares two `int256` values. Expects first value to be less than second.\n    function assertLt(int256 left, int256 right) external pure;\n\n    /// Compares two `int256` values. Expects first value to be less than second.\n    /// Includes error message into revert string on failure.\n    function assertLt(int256 left, int256 right, string calldata error) external pure;\n\n    /// Asserts that two `uint256` values are not equal, formatting them with decimals in failure message.\n    function assertNotEqDecimal(uint256 left, uint256 right, uint256 decimals) external pure;\n\n    /// Asserts that two `uint256` values are not equal, formatting them with decimals in failure message.\n    /// Includes error message into revert string on failure.\n    function assertNotEqDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Asserts that two `int256` values are not equal, formatting them with decimals in failure message.\n    function assertNotEqDecimal(int256 left, int256 right, uint256 decimals) external pure;\n\n    /// Asserts that two `int256` values are not equal, formatting them with decimals in failure message.\n    /// Includes error message into revert string on failure.\n    function assertNotEqDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Asserts that two `bool` values are not equal.\n    function assertNotEq(bool left, bool right) external pure;\n\n    /// Asserts that two `bool` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(bool left, bool right, string calldata error) external pure;\n\n    /// Asserts that two `string` values are not equal.\n    function assertNotEq(string calldata left, string calldata right) external pure;\n\n    /// Asserts that two `string` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(string calldata left, string calldata right, string calldata error) external pure;\n\n    /// Asserts that two `bytes` values are not equal.\n    function assertNotEq(bytes calldata left, bytes calldata right) external pure;\n\n    /// Asserts that two `bytes` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(bytes calldata left, bytes calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `bool` values are not equal.\n    function assertNotEq(bool[] calldata left, bool[] calldata right) external pure;\n\n    /// Asserts that two arrays of `bool` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(bool[] calldata left, bool[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `uint256` values are not equal.\n    function assertNotEq(uint256[] calldata left, uint256[] calldata right) external pure;\n\n    /// Asserts that two arrays of `uint256` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(uint256[] calldata left, uint256[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `int256` values are not equal.\n    function assertNotEq(int256[] calldata left, int256[] calldata right) external pure;\n\n    /// Asserts that two arrays of `int256` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(int256[] calldata left, int256[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two `uint256` values are not equal.\n    function assertNotEq(uint256 left, uint256 right) external pure;\n\n    /// Asserts that two arrays of `address` values are not equal.\n    function assertNotEq(address[] calldata left, address[] calldata right) external pure;\n\n    /// Asserts that two arrays of `address` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(address[] calldata left, address[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `bytes32` values are not equal.\n    function assertNotEq(bytes32[] calldata left, bytes32[] calldata right) external pure;\n\n    /// Asserts that two arrays of `bytes32` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(bytes32[] calldata left, bytes32[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `string` values are not equal.\n    function assertNotEq(string[] calldata left, string[] calldata right) external pure;\n\n    /// Asserts that two arrays of `string` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(string[] calldata left, string[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `bytes` values are not equal.\n    function assertNotEq(bytes[] calldata left, bytes[] calldata right) external pure;\n\n    /// Asserts that two arrays of `bytes` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(bytes[] calldata left, bytes[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two `uint256` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(uint256 left, uint256 right, string calldata error) external pure;\n\n    /// Asserts that two `int256` values are not equal.\n    function assertNotEq(int256 left, int256 right) external pure;\n\n    /// Asserts that two `int256` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(int256 left, int256 right, string calldata error) external pure;\n\n    /// Asserts that two `address` values are not equal.\n    function assertNotEq(address left, address right) external pure;\n\n    /// Asserts that two `address` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(address left, address right, string calldata error) external pure;\n\n    /// Asserts that two `bytes32` values are not equal.\n    function assertNotEq(bytes32 left, bytes32 right) external pure;\n\n    /// Asserts that two `bytes32` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(bytes32 left, bytes32 right, string calldata error) external pure;\n\n    /// Asserts that the given condition is true.\n    function assertTrue(bool condition) external pure;\n\n    /// Asserts that the given condition is true and includes error message into revert string on failure.\n    function assertTrue(bool condition, string calldata error) external pure;\n\n    /// If the condition is false, discard this run's fuzz inputs and generate new ones.\n    function assume(bool condition) external pure;\n\n    /// Discard this run's fuzz inputs and generate new ones if next call reverted.\n    function assumeNoRevert() external pure;\n\n    /// Discard this run's fuzz inputs and generate new ones if next call reverts with the potential revert parameters.\n    function assumeNoRevert(PotentialRevert calldata potentialRevert) external pure;\n\n    /// Discard this run's fuzz inputs and generate new ones if next call reverts with the any of the potential revert parameters.\n    function assumeNoRevert(PotentialRevert[] calldata potentialReverts) external pure;\n\n    /// Writes a breakpoint to jump to in the debugger.\n    function breakpoint(string calldata char) external pure;\n\n    /// Writes a conditional breakpoint to jump to in the debugger.\n    function breakpoint(string calldata char, bool value) external pure;\n\n    /// Returns true if the current Foundry version is greater than or equal to the given version.\n    /// The given version string must be in the format `major.minor.patch`.\n    /// This is equivalent to `foundryVersionCmp(version) >= 0`.\n    function foundryVersionAtLeast(string calldata version) external view returns (bool);\n\n    /// Compares the current Foundry version with the given version string.\n    /// The given version string must be in the format `major.minor.patch`.\n    /// Returns:\n    /// -1 if current Foundry version is less than the given version\n    /// 0 if current Foundry version equals the given version\n    /// 1 if current Foundry version is greater than the given version\n    /// This result can then be used with a comparison operator against `0`.\n    /// For example, to check if the current Foundry version is greater than or equal to `1.0.0`:\n    /// `if (foundryVersionCmp(\"1.0.0\") >= 0) { ... }`\n    function foundryVersionCmp(string calldata version) external view returns (int256);\n\n    /// Returns a Chain struct for specific alias\n    function getChain(string calldata chainAlias) external view returns (Chain memory chain);\n\n    /// Returns a Chain struct for specific chainId\n    function getChain(uint256 chainId) external view returns (Chain memory chain);\n\n    /// Returns the Foundry version.\n    /// Format: <cargo_version>-<tag>+<git_sha_short>.<unix_build_timestamp>.<profile>\n    /// Sample output: 0.3.0-nightly+3cb96bde9b.1737036656.debug\n    /// Note: Build timestamps may vary slightly across platforms due to separate CI jobs.\n    /// For reliable version comparisons, use UNIX format (e.g., >= 1700000000)\n    /// to compare timestamps while ignoring minor time differences.\n    function getFoundryVersion() external view returns (string memory version);\n\n    /// Returns the RPC url for the given alias.\n    function rpcUrl(string calldata rpcAlias) external view returns (string memory json);\n\n    /// Returns all rpc urls and their aliases as structs.\n    function rpcUrlStructs() external view returns (Rpc[] memory urls);\n\n    /// Returns all rpc urls and their aliases `[alias, url][]`.\n    function rpcUrls() external view returns (string[2][] memory urls);\n\n    /// Suspends execution of the main thread for `duration` milliseconds.\n    function sleep(uint256 duration) external;\n\n    // ======== Toml ========\n\n    /// Checks if `key` exists in a TOML table.\n    function keyExistsToml(string calldata toml, string calldata key) external view returns (bool);\n\n    /// Parses a string of TOML data at `key` and coerces it to `address`.\n    function parseTomlAddress(string calldata toml, string calldata key) external pure returns (address);\n\n    /// Parses a string of TOML data at `key` and coerces it to `address[]`.\n    function parseTomlAddressArray(string calldata toml, string calldata key)\n        external\n        pure\n        returns (address[] memory);\n\n    /// Parses a string of TOML data at `key` and coerces it to `bool`.\n    function parseTomlBool(string calldata toml, string calldata key) external pure returns (bool);\n\n    /// Parses a string of TOML data at `key` and coerces it to `bool[]`.\n    function parseTomlBoolArray(string calldata toml, string calldata key) external pure returns (bool[] memory);\n\n    /// Parses a string of TOML data at `key` and coerces it to `bytes`.\n    function parseTomlBytes(string calldata toml, string calldata key) external pure returns (bytes memory);\n\n    /// Parses a string of TOML data at `key` and coerces it to `bytes32`.\n    function parseTomlBytes32(string calldata toml, string calldata key) external pure returns (bytes32);\n\n    /// Parses a string of TOML data at `key` and coerces it to `bytes32[]`.\n    function parseTomlBytes32Array(string calldata toml, string calldata key)\n        external\n        pure\n        returns (bytes32[] memory);\n\n    /// Parses a string of TOML data at `key` and coerces it to `bytes[]`.\n    function parseTomlBytesArray(string calldata toml, string calldata key) external pure returns (bytes[] memory);\n\n    /// Parses a string of TOML data at `key` and coerces it to `int256`.\n    function parseTomlInt(string calldata toml, string calldata key) external pure returns (int256);\n\n    /// Parses a string of TOML data at `key` and coerces it to `int256[]`.\n    function parseTomlIntArray(string calldata toml, string calldata key) external pure returns (int256[] memory);\n\n    /// Returns an array of all the keys in a TOML table.\n    function parseTomlKeys(string calldata toml, string calldata key) external pure returns (string[] memory keys);\n\n    /// Parses a string of TOML data at `key` and coerces it to `string`.\n    function parseTomlString(string calldata toml, string calldata key) external pure returns (string memory);\n\n    /// Parses a string of TOML data at `key` and coerces it to `string[]`.\n    function parseTomlStringArray(string calldata toml, string calldata key) external pure returns (string[] memory);\n\n    /// Parses a string of TOML data at `key` and coerces it to type array corresponding to `typeDescription`.\n    function parseTomlTypeArray(string calldata toml, string calldata key, string calldata typeDescription)\n        external\n        pure\n        returns (bytes memory);\n\n    /// Parses a string of TOML data and coerces it to type corresponding to `typeDescription`.\n    function parseTomlType(string calldata toml, string calldata typeDescription)\n        external\n        pure\n        returns (bytes memory);\n\n    /// Parses a string of TOML data at `key` and coerces it to type corresponding to `typeDescription`.\n    function parseTomlType(string calldata toml, string calldata key, string calldata typeDescription)\n        external\n        pure\n        returns (bytes memory);\n\n    /// Parses a string of TOML data at `key` and coerces it to `uint256`.\n    function parseTomlUint(string calldata toml, string calldata key) external pure returns (uint256);\n\n    /// Parses a string of TOML data at `key` and coerces it to `uint256[]`.\n    function parseTomlUintArray(string calldata toml, string calldata key) external pure returns (uint256[] memory);\n\n    /// ABI-encodes a TOML table.\n    function parseToml(string calldata toml) external pure returns (bytes memory abiEncodedData);\n\n    /// ABI-encodes a TOML table at `key`.\n    function parseToml(string calldata toml, string calldata key) external pure returns (bytes memory abiEncodedData);\n\n    /// Takes serialized JSON, converts to TOML and write a serialized TOML to a file.\n    function writeToml(string calldata json, string calldata path) external;\n\n    /// Takes serialized JSON, converts to TOML and write a serialized TOML table to an **existing** TOML file, replacing a value with key = <value_key.>\n    /// This is useful to replace a specific value of a TOML file, without having to parse the entire thing.\n    function writeToml(string calldata json, string calldata path, string calldata valueKey) external;\n\n    // ======== Utilities ========\n\n    /// Compute the address of a contract created with CREATE2 using the given CREATE2 deployer.\n    function computeCreate2Address(bytes32 salt, bytes32 initCodeHash, address deployer)\n        external\n        pure\n        returns (address);\n\n    /// Compute the address of a contract created with CREATE2 using the default CREATE2 deployer.\n    function computeCreate2Address(bytes32 salt, bytes32 initCodeHash) external pure returns (address);\n\n    /// Compute the address a contract will be deployed at for a given deployer address and nonce.\n    function computeCreateAddress(address deployer, uint256 nonce) external pure returns (address);\n\n    /// Utility cheatcode to copy storage of `from` contract to another `to` contract.\n    function copyStorage(address from, address to) external;\n\n    /// Returns ENS namehash for provided string.\n    function ensNamehash(string calldata name) external pure returns (bytes32);\n\n    /// Gets the label for the specified address.\n    function getLabel(address account) external view returns (string memory currentLabel);\n\n    /// Labels an address in call traces.\n    function label(address account, string calldata newLabel) external;\n\n    /// Pauses collection of call traces. Useful in cases when you want to skip tracing of\n    /// complex calls which are not useful for debugging.\n    function pauseTracing() external view;\n\n    /// Returns a random `address`.\n    function randomAddress() external returns (address);\n\n    /// Returns a random `bool`.\n    function randomBool() external view returns (bool);\n\n    /// Returns a random byte array value of the given length.\n    function randomBytes(uint256 len) external view returns (bytes memory);\n\n    /// Returns a random fixed-size byte array of length 4.\n    function randomBytes4() external view returns (bytes4);\n\n    /// Returns a random fixed-size byte array of length 8.\n    function randomBytes8() external view returns (bytes8);\n\n    /// Returns a random `int256` value.\n    function randomInt() external view returns (int256);\n\n    /// Returns a random `int256` value of given bits.\n    function randomInt(uint256 bits) external view returns (int256);\n\n    /// Returns a random uint256 value.\n    function randomUint() external returns (uint256);\n\n    /// Returns random uint256 value between the provided range (=min..=max).\n    function randomUint(uint256 min, uint256 max) external returns (uint256);\n\n    /// Returns a random `uint256` value of given bits.\n    function randomUint(uint256 bits) external view returns (uint256);\n\n    /// Unpauses collection of call traces.\n    function resumeTracing() external view;\n\n    /// Utility cheatcode to set arbitrary storage for given target address.\n    function setArbitraryStorage(address target) external;\n\n    /// Utility cheatcode to set arbitrary storage for given target address and overwrite\n    /// any storage slots that have been previously set.\n    function setArbitraryStorage(address target, bool overwrite) external;\n\n    /// Randomly shuffles an array.\n    function shuffle(uint256[] calldata array) external returns (uint256[] memory);\n\n    /// Sorts an array in ascending order.\n    function sort(uint256[] calldata array) external returns (uint256[] memory);\n\n    /// Encodes a `bytes` value to a base64url string.\n    function toBase64URL(bytes calldata data) external pure returns (string memory);\n\n    /// Encodes a `string` value to a base64url string.\n    function toBase64URL(string calldata data) external pure returns (string memory);\n\n    /// Encodes a `bytes` value to a base64 string.\n    function toBase64(bytes calldata data) external pure returns (string memory);\n\n    /// Encodes a `string` value to a base64 string.\n    function toBase64(string calldata data) external pure returns (string memory);\n}\n\n/// The `Vm` interface does allow manipulation of the EVM state. These are all intended to be used\n/// in tests, but it is not recommended to use these cheats in scripts.\ninterface Vm is VmSafe {\n    // ======== EVM ========\n\n    /// Utility cheatcode to set an EIP-2930 access list for all subsequent transactions.\n    function accessList(AccessListItem[] calldata access) external;\n\n    /// Returns the identifier of the currently active fork. Reverts if no fork is currently active.\n    function activeFork() external view returns (uint256 forkId);\n\n    /// In forking mode, explicitly grant the given address cheatcode access.\n    function allowCheatcodes(address account) external;\n\n    /// Sets `block.blobbasefee`\n    function blobBaseFee(uint256 newBlobBaseFee) external;\n\n    /// Sets the blobhashes in the transaction.\n    /// Not available on EVM versions before Cancun.\n    /// If used on unsupported EVM versions it will revert.\n    function blobhashes(bytes32[] calldata hashes) external;\n\n    /// Sets `block.chainid`.\n    function chainId(uint256 newChainId) external;\n\n    /// Clears all mocked calls.\n    function clearMockedCalls() external;\n\n    /// Clones a source account code, state, balance and nonce to a target account and updates in-memory EVM state.\n    function cloneAccount(address source, address target) external;\n\n    /// Sets `block.coinbase`.\n    function coinbase(address newCoinbase) external;\n\n    /// Marks the slots of an account and the account address as cold.\n    function cool(address target) external;\n\n    /// Utility cheatcode to mark specific storage slot as cold, simulating no prior read.\n    function coolSlot(address target, bytes32 slot) external;\n\n    /// Creates a new fork with the given endpoint and the _latest_ block and returns the identifier of the fork.\n    function createFork(string calldata urlOrAlias) external returns (uint256 forkId);\n\n    /// Creates a new fork with the given endpoint and block and returns the identifier of the fork.\n    function createFork(string calldata urlOrAlias, uint256 blockNumber) external returns (uint256 forkId);\n\n    /// Creates a new fork with the given endpoint and at the block the given transaction was mined in,\n    /// replays all transaction mined in the block before the transaction, and returns the identifier of the fork.\n    function createFork(string calldata urlOrAlias, bytes32 txHash) external returns (uint256 forkId);\n\n    /// Creates and also selects a new fork with the given endpoint and the latest block and returns the identifier of the fork.\n    function createSelectFork(string calldata urlOrAlias) external returns (uint256 forkId);\n\n    /// Creates and also selects a new fork with the given endpoint and block and returns the identifier of the fork.\n    function createSelectFork(string calldata urlOrAlias, uint256 blockNumber) external returns (uint256 forkId);\n\n    /// Creates and also selects new fork with the given endpoint and at the block the given transaction was mined in,\n    /// replays all transaction mined in the block before the transaction, returns the identifier of the fork.\n    function createSelectFork(string calldata urlOrAlias, bytes32 txHash) external returns (uint256 forkId);\n\n    /// Sets an address' balance.\n    function deal(address account, uint256 newBalance) external;\n\n    /// Removes the snapshot with the given ID created by `snapshot`.\n    /// Takes the snapshot ID to delete.\n    /// Returns `true` if the snapshot was successfully deleted.\n    /// Returns `false` if the snapshot does not exist.\n    function deleteStateSnapshot(uint256 snapshotId) external returns (bool success);\n\n    /// Removes _all_ snapshots previously created by `snapshot`.\n    function deleteStateSnapshots() external;\n\n    /// Sets `block.difficulty`.\n    /// Not available on EVM versions from Paris onwards. Use `prevrandao` instead.\n    /// Reverts if used on unsupported EVM versions.\n    function difficulty(uint256 newDifficulty) external;\n\n    /// Dump a genesis JSON file's `allocs` to disk.\n    function dumpState(string calldata pathToStateJson) external;\n\n    /// Sets an address' code.\n    function etch(address target, bytes calldata newRuntimeBytecode) external;\n\n    /// Sets `block.basefee`.\n    function fee(uint256 newBasefee) external;\n\n    /// Gets the blockhashes from the current transaction.\n    /// Not available on EVM versions before Cancun.\n    /// If used on unsupported EVM versions it will revert.\n    function getBlobhashes() external view returns (bytes32[] memory hashes);\n\n    /// Returns true if the account is marked as persistent.\n    function isPersistent(address account) external view returns (bool persistent);\n\n    /// Load a genesis JSON file's `allocs` into the in-memory EVM state.\n    function loadAllocs(string calldata pathToAllocsJson) external;\n\n    /// Marks that the account(s) should use persistent storage across fork swaps in a multifork setup\n    /// Meaning, changes made to the state of this account will be kept when switching forks.\n    function makePersistent(address account) external;\n\n    /// See `makePersistent(address)`.\n    function makePersistent(address account0, address account1) external;\n\n    /// See `makePersistent(address)`.\n    function makePersistent(address account0, address account1, address account2) external;\n\n    /// See `makePersistent(address)`.\n    function makePersistent(address[] calldata accounts) external;\n\n    /// Reverts a call to an address with specified revert data.\n    function mockCallRevert(address callee, bytes calldata data, bytes calldata revertData) external;\n\n    /// Reverts a call to an address with a specific `msg.value`, with specified revert data.\n    function mockCallRevert(address callee, uint256 msgValue, bytes calldata data, bytes calldata revertData)\n        external;\n\n    /// Reverts a call to an address with specified revert data.\n    /// Overload to pass the function selector directly `token.approve.selector` instead of `abi.encodeWithSelector(token.approve.selector)`.\n    function mockCallRevert(address callee, bytes4 data, bytes calldata revertData) external;\n\n    /// Reverts a call to an address with a specific `msg.value`, with specified revert data.\n    /// Overload to pass the function selector directly `token.approve.selector` instead of `abi.encodeWithSelector(token.approve.selector)`.\n    function mockCallRevert(address callee, uint256 msgValue, bytes4 data, bytes calldata revertData) external;\n\n    /// Mocks a call to an address, returning specified data.\n    /// Calldata can either be strict or a partial match, e.g. if you only\n    /// pass a Solidity selector to the expected calldata, then the entire Solidity\n    /// function will be mocked.\n    function mockCall(address callee, bytes calldata data, bytes calldata returnData) external;\n\n    /// Mocks a call to an address with a specific `msg.value`, returning specified data.\n    /// Calldata match takes precedence over `msg.value` in case of ambiguity.\n    function mockCall(address callee, uint256 msgValue, bytes calldata data, bytes calldata returnData) external;\n\n    /// Mocks a call to an address, returning specified data.\n    /// Calldata can either be strict or a partial match, e.g. if you only\n    /// pass a Solidity selector to the expected calldata, then the entire Solidity\n    /// function will be mocked.\n    /// Overload to pass the function selector directly `token.approve.selector` instead of `abi.encodeWithSelector(token.approve.selector)`.\n    function mockCall(address callee, bytes4 data, bytes calldata returnData) external;\n\n    /// Mocks a call to an address with a specific `msg.value`, returning specified data.\n    /// Calldata match takes precedence over `msg.value` in case of ambiguity.\n    /// Overload to pass the function selector directly `token.approve.selector` instead of `abi.encodeWithSelector(token.approve.selector)`.\n    function mockCall(address callee, uint256 msgValue, bytes4 data, bytes calldata returnData) external;\n\n    /// Mocks multiple calls to an address, returning specified data for each call.\n    function mockCalls(address callee, bytes calldata data, bytes[] calldata returnData) external;\n\n    /// Mocks multiple calls to an address with a specific `msg.value`, returning specified data for each call.\n    function mockCalls(address callee, uint256 msgValue, bytes calldata data, bytes[] calldata returnData) external;\n\n    /// Whenever a call is made to `callee` with calldata `data`, this cheatcode instead calls\n    /// `target` with the same calldata. This functionality is similar to a delegate call made to\n    /// `target` contract from `callee`.\n    /// Can be used to substitute a call to a function with another implementation that captures\n    /// the primary logic of the original function but is easier to reason about.\n    /// If calldata is not a strict match then partial match by selector is attempted.\n    function mockFunction(address callee, address target, bytes calldata data) external;\n\n    /// Utility cheatcode to remove any EIP-2930 access list set by `accessList` cheatcode.\n    function noAccessList() external;\n\n    /// Sets the *next* call's `msg.sender` to be the input address.\n    function prank(address msgSender) external;\n\n    /// Sets the *next* call's `msg.sender` to be the input address, and the `tx.origin` to be the second input.\n    function prank(address msgSender, address txOrigin) external;\n\n    /// Sets the *next* delegate call's `msg.sender` to be the input address.\n    function prank(address msgSender, bool delegateCall) external;\n\n    /// Sets the *next* delegate call's `msg.sender` to be the input address, and the `tx.origin` to be the second input.\n    function prank(address msgSender, address txOrigin, bool delegateCall) external;\n\n    /// Sets `block.prevrandao`.\n    /// Not available on EVM versions before Paris. Use `difficulty` instead.\n    /// If used on unsupported EVM versions it will revert.\n    function prevrandao(bytes32 newPrevrandao) external;\n\n    /// Sets `block.prevrandao`.\n    /// Not available on EVM versions before Paris. Use `difficulty` instead.\n    /// If used on unsupported EVM versions it will revert.\n    function prevrandao(uint256 newPrevrandao) external;\n\n    /// Reads the current `msg.sender` and `tx.origin` from state and reports if there is any active caller modification.\n    function readCallers() external returns (CallerMode callerMode, address msgSender, address txOrigin);\n\n    /// Resets the nonce of an account to 0 for EOAs and 1 for contract accounts.\n    function resetNonce(address account) external;\n\n    /// Revert the state of the EVM to a previous snapshot\n    /// Takes the snapshot ID to revert to.\n    /// Returns `true` if the snapshot was successfully reverted.\n    /// Returns `false` if the snapshot does not exist.\n    /// **Note:** This does not automatically delete the snapshot. To delete the snapshot use `deleteStateSnapshot`.\n    function revertToState(uint256 snapshotId) external returns (bool success);\n\n    /// Revert the state of the EVM to a previous snapshot and automatically deletes the snapshots\n    /// Takes the snapshot ID to revert to.\n    /// Returns `true` if the snapshot was successfully reverted and deleted.\n    /// Returns `false` if the snapshot does not exist.\n    function revertToStateAndDelete(uint256 snapshotId) external returns (bool success);\n\n    /// Revokes persistent status from the address, previously added via `makePersistent`.\n    function revokePersistent(address account) external;\n\n    /// See `revokePersistent(address)`.\n    function revokePersistent(address[] calldata accounts) external;\n\n    /// Sets `block.height`.\n    function roll(uint256 newHeight) external;\n\n    /// Updates the currently active fork to given block number\n    /// This is similar to `roll` but for the currently active fork.\n    function rollFork(uint256 blockNumber) external;\n\n    /// Updates the currently active fork to given transaction. This will `rollFork` with the number\n    /// of the block the transaction was mined in and replays all transaction mined before it in the block.\n    function rollFork(bytes32 txHash) external;\n\n    /// Updates the given fork to given block number.\n    function rollFork(uint256 forkId, uint256 blockNumber) external;\n\n    /// Updates the given fork to block number of the given transaction and replays all transaction mined before it in the block.\n    function rollFork(uint256 forkId, bytes32 txHash) external;\n\n    /// Takes a fork identifier created by `createFork` and sets the corresponding forked state as active.\n    function selectFork(uint256 forkId) external;\n\n    /// Set blockhash for the current block.\n    /// It only sets the blockhash for blocks where `block.number - 256 <= number < block.number`.\n    function setBlockhash(uint256 blockNumber, bytes32 blockHash) external;\n\n    /// Sets the nonce of an account. Must be higher than the current nonce of the account.\n    function setNonce(address account, uint64 newNonce) external;\n\n    /// Sets the nonce of an account to an arbitrary value.\n    function setNonceUnsafe(address account, uint64 newNonce) external;\n\n    /// Snapshot capture the gas usage of the last call by name from the callee perspective.\n    function snapshotGasLastCall(string calldata name) external returns (uint256 gasUsed);\n\n    /// Snapshot capture the gas usage of the last call by name in a group from the callee perspective.\n    function snapshotGasLastCall(string calldata group, string calldata name) external returns (uint256 gasUsed);\n\n    /// Snapshot the current state of the evm.\n    /// Returns the ID of the snapshot that was created.\n    /// To revert a snapshot use `revertToState`.\n    function snapshotState() external returns (uint256 snapshotId);\n\n    /// Snapshot capture an arbitrary numerical value by name.\n    /// The group name is derived from the contract name.\n    function snapshotValue(string calldata name, uint256 value) external;\n\n    /// Snapshot capture an arbitrary numerical value by name in a group.\n    function snapshotValue(string calldata group, string calldata name, uint256 value) external;\n\n    /// Sets all subsequent calls' `msg.sender` to be the input address until `stopPrank` is called.\n    function startPrank(address msgSender) external;\n\n    /// Sets all subsequent calls' `msg.sender` to be the input address until `stopPrank` is called, and the `tx.origin` to be the second input.\n    function startPrank(address msgSender, address txOrigin) external;\n\n    /// Sets all subsequent delegate calls' `msg.sender` to be the input address until `stopPrank` is called.\n    function startPrank(address msgSender, bool delegateCall) external;\n\n    /// Sets all subsequent delegate calls' `msg.sender` to be the input address until `stopPrank` is called, and the `tx.origin` to be the second input.\n    function startPrank(address msgSender, address txOrigin, bool delegateCall) external;\n\n    /// Start a snapshot capture of the current gas usage by name.\n    /// The group name is derived from the contract name.\n    function startSnapshotGas(string calldata name) external;\n\n    /// Start a snapshot capture of the current gas usage by name in a group.\n    function startSnapshotGas(string calldata group, string calldata name) external;\n\n    /// Resets subsequent calls' `msg.sender` to be `address(this)`.\n    function stopPrank() external;\n\n    /// Stop the snapshot capture of the current gas by latest snapshot name, capturing the gas used since the start.\n    function stopSnapshotGas() external returns (uint256 gasUsed);\n\n    /// Stop the snapshot capture of the current gas usage by name, capturing the gas used since the start.\n    /// The group name is derived from the contract name.\n    function stopSnapshotGas(string calldata name) external returns (uint256 gasUsed);\n\n    /// Stop the snapshot capture of the current gas usage by name in a group, capturing the gas used since the start.\n    function stopSnapshotGas(string calldata group, string calldata name) external returns (uint256 gasUsed);\n\n    /// Stores a value to an address' storage slot.\n    function store(address target, bytes32 slot, bytes32 value) external;\n\n    /// Fetches the given transaction from the active fork and executes it on the current state.\n    function transact(bytes32 txHash) external;\n\n    /// Fetches the given transaction from the given fork and executes it on the current state.\n    function transact(uint256 forkId, bytes32 txHash) external;\n\n    /// Sets `tx.gasprice`.\n    function txGasPrice(uint256 newGasPrice) external;\n\n    /// Utility cheatcode to mark specific storage slot as warm, simulating a prior read.\n    function warmSlot(address target, bytes32 slot) external;\n\n    /// Sets `block.timestamp`.\n    function warp(uint256 newTimestamp) external;\n\n    /// `deleteSnapshot` is being deprecated in favor of `deleteStateSnapshot`. It will be removed in future versions.\n    function deleteSnapshot(uint256 snapshotId) external returns (bool success);\n\n    /// `deleteSnapshots` is being deprecated in favor of `deleteStateSnapshots`. It will be removed in future versions.\n    function deleteSnapshots() external;\n\n    /// `revertToAndDelete` is being deprecated in favor of `revertToStateAndDelete`. It will be removed in future versions.\n    function revertToAndDelete(uint256 snapshotId) external returns (bool success);\n\n    /// `revertTo` is being deprecated in favor of `revertToState`. It will be removed in future versions.\n    function revertTo(uint256 snapshotId) external returns (bool success);\n\n    /// `snapshot` is being deprecated in favor of `snapshotState`. It will be removed in future versions.\n    function snapshot() external returns (uint256 snapshotId);\n\n    // ======== Testing ========\n\n    /// Expect a call to an address with the specified `msg.value` and calldata, and a *minimum* amount of gas.\n    function expectCallMinGas(address callee, uint256 msgValue, uint64 minGas, bytes calldata data) external;\n\n    /// Expect given number of calls to an address with the specified `msg.value` and calldata, and a *minimum* amount of gas.\n    function expectCallMinGas(address callee, uint256 msgValue, uint64 minGas, bytes calldata data, uint64 count)\n        external;\n\n    /// Expects a call to an address with the specified calldata.\n    /// Calldata can either be a strict or a partial match.\n    function expectCall(address callee, bytes calldata data) external;\n\n    /// Expects given number of calls to an address with the specified calldata.\n    function expectCall(address callee, bytes calldata data, uint64 count) external;\n\n    /// Expects a call to an address with the specified `msg.value` and calldata.\n    function expectCall(address callee, uint256 msgValue, bytes calldata data) external;\n\n    /// Expects given number of calls to an address with the specified `msg.value` and calldata.\n    function expectCall(address callee, uint256 msgValue, bytes calldata data, uint64 count) external;\n\n    /// Expect a call to an address with the specified `msg.value`, gas, and calldata.\n    function expectCall(address callee, uint256 msgValue, uint64 gas, bytes calldata data) external;\n\n    /// Expects given number of calls to an address with the specified `msg.value`, gas, and calldata.\n    function expectCall(address callee, uint256 msgValue, uint64 gas, bytes calldata data, uint64 count) external;\n\n    /// Expects the deployment of the specified bytecode by the specified address using the CREATE opcode\n    function expectCreate(bytes calldata bytecode, address deployer) external;\n\n    /// Expects the deployment of the specified bytecode by the specified address using the CREATE2 opcode\n    function expectCreate2(bytes calldata bytecode, address deployer) external;\n\n    /// Prepare an expected anonymous log with (bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData.).\n    /// Call this function, then emit an anonymous event, then call a function. Internally after the call, we check if\n    /// logs were emitted in the expected order with the expected topics and data (as specified by the booleans).\n    function expectEmitAnonymous(bool checkTopic0, bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData)\n        external;\n\n    /// Same as the previous method, but also checks supplied address against emitting contract.\n    function expectEmitAnonymous(\n        bool checkTopic0,\n        bool checkTopic1,\n        bool checkTopic2,\n        bool checkTopic3,\n        bool checkData,\n        address emitter\n    ) external;\n\n    /// Prepare an expected anonymous log with all topic and data checks enabled.\n    /// Call this function, then emit an anonymous event, then call a function. Internally after the call, we check if\n    /// logs were emitted in the expected order with the expected topics and data.\n    function expectEmitAnonymous() external;\n\n    /// Same as the previous method, but also checks supplied address against emitting contract.\n    function expectEmitAnonymous(address emitter) external;\n\n    /// Prepare an expected log with (bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData.).\n    /// Call this function, then emit an event, then call a function. Internally after the call, we check if\n    /// logs were emitted in the expected order with the expected topics and data (as specified by the booleans).\n    function expectEmit(bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData) external;\n\n    /// Same as the previous method, but also checks supplied address against emitting contract.\n    function expectEmit(bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData, address emitter)\n        external;\n\n    /// Prepare an expected log with all topic and data checks enabled.\n    /// Call this function, then emit an event, then call a function. Internally after the call, we check if\n    /// logs were emitted in the expected order with the expected topics and data.\n    function expectEmit() external;\n\n    /// Same as the previous method, but also checks supplied address against emitting contract.\n    function expectEmit(address emitter) external;\n\n    /// Expect a given number of logs with the provided topics.\n    function expectEmit(bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData, uint64 count) external;\n\n    /// Expect a given number of logs from a specific emitter with the provided topics.\n    function expectEmit(\n        bool checkTopic1,\n        bool checkTopic2,\n        bool checkTopic3,\n        bool checkData,\n        address emitter,\n        uint64 count\n    ) external;\n\n    /// Expect a given number of logs with all topic and data checks enabled.\n    function expectEmit(uint64 count) external;\n\n    /// Expect a given number of logs from a specific emitter with all topic and data checks enabled.\n    function expectEmit(address emitter, uint64 count) external;\n\n    /// Expects an error on next call that starts with the revert data.\n    function expectPartialRevert(bytes4 revertData) external;\n\n    /// Expects an error on next call to reverter address, that starts with the revert data.\n    function expectPartialRevert(bytes4 revertData, address reverter) external;\n\n    /// Expects an error on next call with any revert data.\n    function expectRevert() external;\n\n    /// Expects an error on next call that exactly matches the revert data.\n    function expectRevert(bytes4 revertData) external;\n\n    /// Expects a `count` number of reverts from the upcoming calls from the reverter address that match the revert data.\n    function expectRevert(bytes4 revertData, address reverter, uint64 count) external;\n\n    /// Expects a `count` number of reverts from the upcoming calls from the reverter address that exactly match the revert data.\n    function expectRevert(bytes calldata revertData, address reverter, uint64 count) external;\n\n    /// Expects an error on next call that exactly matches the revert data.\n    function expectRevert(bytes calldata revertData) external;\n\n    /// Expects an error with any revert data on next call to reverter address.\n    function expectRevert(address reverter) external;\n\n    /// Expects an error from reverter address on next call, with any revert data.\n    function expectRevert(bytes4 revertData, address reverter) external;\n\n    /// Expects an error from reverter address on next call, that exactly matches the revert data.\n    function expectRevert(bytes calldata revertData, address reverter) external;\n\n    /// Expects a `count` number of reverts from the upcoming calls with any revert data or reverter.\n    function expectRevert(uint64 count) external;\n\n    /// Expects a `count` number of reverts from the upcoming calls that match the revert data.\n    function expectRevert(bytes4 revertData, uint64 count) external;\n\n    /// Expects a `count` number of reverts from the upcoming calls that exactly match the revert data.\n    function expectRevert(bytes calldata revertData, uint64 count) external;\n\n    /// Expects a `count` number of reverts from the upcoming calls from the reverter address.\n    function expectRevert(address reverter, uint64 count) external;\n\n    /// Only allows memory writes to offsets [0x00, 0x60) ∪ [min, max) in the current subcontext. If any other\n    /// memory is written to, the test will fail. Can be called multiple times to add more ranges to the set.\n    function expectSafeMemory(uint64 min, uint64 max) external;\n\n    /// Only allows memory writes to offsets [0x00, 0x60) ∪ [min, max) in the next created subcontext.\n    /// If any other memory is written to, the test will fail. Can be called multiple times to add more ranges\n    /// to the set.\n    function expectSafeMemoryCall(uint64 min, uint64 max) external;\n\n    /// Marks a test as skipped. Must be called at the top level of a test.\n    function skip(bool skipTest) external;\n\n    /// Marks a test as skipped with a reason. Must be called at the top level of a test.\n    function skip(bool skipTest, string calldata reason) external;\n\n    /// Stops all safe memory expectation in the current subcontext.\n    function stopExpectSafeMemory() external;\n\n    // ======== Utilities ========\n\n    /// Causes the next contract creation (via new) to fail and return its initcode in the returndata buffer.\n    /// This allows type-safe access to the initcode payload that would be used for contract creation.\n    /// Example usage:\n    /// vm.interceptInitcode();\n    /// bytes memory initcode;\n    /// try new MyContract(param1, param2) { assert(false); }\n    /// catch (bytes memory interceptedInitcode) { initcode = interceptedInitcode; }\n    function interceptInitcode() external;\n}\n"},"lib/forge-std/src/console.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\nlibrary console {\n    address constant CONSOLE_ADDRESS =\n        0x000000000000000000636F6e736F6c652e6c6f67;\n\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\n        address consoleAddress = CONSOLE_ADDRESS;\n        /// @solidity memory-safe-assembly\n        assembly {\n            pop(\n                staticcall(\n                    gas(),\n                    consoleAddress,\n                    add(payload, 32),\n                    mload(payload),\n                    0,\n                    0\n                )\n            )\n        }\n    }\n\n    function _castToPure(\n      function(bytes memory) internal view fnIn\n    ) internal pure returns (function(bytes memory) pure fnOut) {\n        assembly {\n            fnOut := fnIn\n        }\n    }\n\n    function _sendLogPayload(bytes memory payload) internal pure {\n        _castToPure(_sendLogPayloadImplementation)(payload);\n    }\n\n    function log() internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log()\"));\n    }\n\n    function logInt(int256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0));\n    }\n\n    function logUint(uint256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n    }\n\n    function logString(string memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function logBool(bool p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function logAddress(address p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function logBytes(bytes memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n    }\n\n    function logBytes1(bytes1 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n    }\n\n    function logBytes2(bytes2 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n    }\n\n    function logBytes3(bytes3 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n    }\n\n    function logBytes4(bytes4 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n    }\n\n    function logBytes5(bytes5 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n    }\n\n    function logBytes6(bytes6 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n    }\n\n    function logBytes7(bytes7 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n    }\n\n    function logBytes8(bytes8 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n    }\n\n    function logBytes9(bytes9 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n    }\n\n    function logBytes10(bytes10 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n    }\n\n    function logBytes11(bytes11 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n    }\n\n    function logBytes12(bytes12 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n    }\n\n    function logBytes13(bytes13 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n    }\n\n    function logBytes14(bytes14 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n    }\n\n    function logBytes15(bytes15 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n    }\n\n    function logBytes16(bytes16 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n    }\n\n    function logBytes17(bytes17 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n    }\n\n    function logBytes18(bytes18 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n    }\n\n    function logBytes19(bytes19 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n    }\n\n    function logBytes20(bytes20 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n    }\n\n    function logBytes21(bytes21 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n    }\n\n    function logBytes22(bytes22 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n    }\n\n    function logBytes23(bytes23 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n    }\n\n    function logBytes24(bytes24 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n    }\n\n    function logBytes25(bytes25 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n    }\n\n    function logBytes26(bytes26 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n    }\n\n    function logBytes27(bytes27 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n    }\n\n    function logBytes28(bytes28 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n    }\n\n    function logBytes29(bytes29 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n    }\n\n    function logBytes30(bytes30 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n    }\n\n    function logBytes31(bytes31 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n    }\n\n    function logBytes32(bytes32 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n    }\n\n    function log(uint256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n    }\n\n    function log(int256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0));\n    }\n\n    function log(string memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function log(bool p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function log(address p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function log(uint256 p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256)\", p0, p1));\n    }\n\n    function log(uint256 p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string)\", p0, p1));\n    }\n\n    function log(uint256 p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool)\", p0, p1));\n    }\n\n    function log(uint256 p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address)\", p0, p1));\n    }\n\n    function log(string memory p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1));\n    }\n\n    function log(string memory p0, int256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,int256)\", p0, p1));\n    }\n\n    function log(string memory p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n    }\n\n    function log(string memory p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n    }\n\n    function log(string memory p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n    }\n\n    function log(bool p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256)\", p0, p1));\n    }\n\n    function log(bool p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n    }\n\n    function log(bool p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n    }\n\n    function log(bool p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n    }\n\n    function log(address p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256)\", p0, p1));\n    }\n\n    function log(address p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n    }\n\n    function log(address p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n    }\n\n    function log(address p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n    }\n}\n"},"lib/forge-std/src/console2.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\nimport {console as console2} from \"./console.sol\";\n"},"lib/forge-std/src/interfaces/IMulticall3.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\npragma experimental ABIEncoderV2;\n\ninterface IMulticall3 {\n    struct Call {\n        address target;\n        bytes callData;\n    }\n\n    struct Call3 {\n        address target;\n        bool allowFailure;\n        bytes callData;\n    }\n\n    struct Call3Value {\n        address target;\n        bool allowFailure;\n        uint256 value;\n        bytes callData;\n    }\n\n    struct Result {\n        bool success;\n        bytes returnData;\n    }\n\n    function aggregate(Call[] calldata calls)\n        external\n        payable\n        returns (uint256 blockNumber, bytes[] memory returnData);\n\n    function aggregate3(Call3[] calldata calls) external payable returns (Result[] memory returnData);\n\n    function aggregate3Value(Call3Value[] calldata calls) external payable returns (Result[] memory returnData);\n\n    function blockAndAggregate(Call[] calldata calls)\n        external\n        payable\n        returns (uint256 blockNumber, bytes32 blockHash, Result[] memory returnData);\n\n    function getBasefee() external view returns (uint256 basefee);\n\n    function getBlockHash(uint256 blockNumber) external view returns (bytes32 blockHash);\n\n    function getBlockNumber() external view returns (uint256 blockNumber);\n\n    function getChainId() external view returns (uint256 chainid);\n\n    function getCurrentBlockCoinbase() external view returns (address coinbase);\n\n    function getCurrentBlockDifficulty() external view returns (uint256 difficulty);\n\n    function getCurrentBlockGasLimit() external view returns (uint256 gaslimit);\n\n    function getCurrentBlockTimestamp() external view returns (uint256 timestamp);\n\n    function getEthBalance(address addr) external view returns (uint256 balance);\n\n    function getLastBlockHash() external view returns (bytes32 blockHash);\n\n    function tryAggregate(bool requireSuccess, Call[] calldata calls)\n        external\n        payable\n        returns (Result[] memory returnData);\n\n    function tryBlockAndAggregate(bool requireSuccess, Call[] calldata calls)\n        external\n        payable\n        returns (uint256 blockNumber, bytes32 blockHash, Result[] memory returnData);\n}\n"},"lib/forge-std/src/safeconsole.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\n/// @author philogy <https://github.com/philogy>\n/// @dev Code generated automatically by script.\nlibrary safeconsole {\n    uint256 constant CONSOLE_ADDR = 0x000000000000000000000000000000000000000000636F6e736F6c652e6c6f67;\n\n    // Credit to [0age](https://twitter.com/z0age/status/1654922202930888704) and [0xdapper](https://github.com/foundry-rs/forge-std/pull/374)\n    // for the view-to-pure log trick.\n    function _sendLogPayload(uint256 offset, uint256 size) private pure {\n        function(uint256, uint256) internal view fnIn = _sendLogPayloadView;\n        function(uint256, uint256) internal pure pureSendLogPayload;\n        /// @solidity memory-safe-assembly\n        assembly {\n            pureSendLogPayload := fnIn\n        }\n        pureSendLogPayload(offset, size);\n    }\n\n    function _sendLogPayloadView(uint256 offset, uint256 size) private view {\n        /// @solidity memory-safe-assembly\n        assembly {\n            pop(staticcall(gas(), CONSOLE_ADDR, offset, size, 0x0, 0x0))\n        }\n    }\n\n    function _memcopy(uint256 fromOffset, uint256 toOffset, uint256 length) private pure {\n        function(uint256, uint256, uint256) internal view fnIn = _memcopyView;\n        function(uint256, uint256, uint256) internal pure pureMemcopy;\n        /// @solidity memory-safe-assembly\n        assembly {\n            pureMemcopy := fnIn\n        }\n        pureMemcopy(fromOffset, toOffset, length);\n    }\n\n    function _memcopyView(uint256 fromOffset, uint256 toOffset, uint256 length) private view {\n        /// @solidity memory-safe-assembly\n        assembly {\n            pop(staticcall(gas(), 0x4, fromOffset, length, toOffset, length))\n        }\n    }\n\n    function logMemory(uint256 offset, uint256 length) internal pure {\n        if (offset >= 0x60) {\n            // Sufficient memory before slice to prepare call header.\n            bytes32 m0;\n            bytes32 m1;\n            bytes32 m2;\n            /// @solidity memory-safe-assembly\n            assembly {\n                m0 := mload(sub(offset, 0x60))\n                m1 := mload(sub(offset, 0x40))\n                m2 := mload(sub(offset, 0x20))\n                // Selector of `log(bytes)`.\n                mstore(sub(offset, 0x60), 0x0be77f56)\n                mstore(sub(offset, 0x40), 0x20)\n                mstore(sub(offset, 0x20), length)\n            }\n            _sendLogPayload(offset - 0x44, length + 0x44);\n            /// @solidity memory-safe-assembly\n            assembly {\n                mstore(sub(offset, 0x60), m0)\n                mstore(sub(offset, 0x40), m1)\n                mstore(sub(offset, 0x20), m2)\n            }\n        } else {\n            // Insufficient space, so copy slice forward, add header and reverse.\n            bytes32 m0;\n            bytes32 m1;\n            bytes32 m2;\n            uint256 endOffset = offset + length;\n            /// @solidity memory-safe-assembly\n            assembly {\n                m0 := mload(add(endOffset, 0x00))\n                m1 := mload(add(endOffset, 0x20))\n                m2 := mload(add(endOffset, 0x40))\n            }\n            _memcopy(offset, offset + 0x60, length);\n            /// @solidity memory-safe-assembly\n            assembly {\n                // Selector of `log(bytes)`.\n                mstore(add(offset, 0x00), 0x0be77f56)\n                mstore(add(offset, 0x20), 0x20)\n                mstore(add(offset, 0x40), length)\n            }\n            _sendLogPayload(offset + 0x1c, length + 0x44);\n            _memcopy(offset + 0x60, offset, length);\n            /// @solidity memory-safe-assembly\n            assembly {\n                mstore(add(endOffset, 0x00), m0)\n                mstore(add(endOffset, 0x20), m1)\n                mstore(add(endOffset, 0x40), m2)\n            }\n        }\n    }\n\n    function log(address p0) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            // Selector of `log(address)`.\n            mstore(0x00, 0x2c2ecbc2)\n            mstore(0x20, p0)\n        }\n        _sendLogPayload(0x1c, 0x24);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n        }\n    }\n\n    function log(bool p0) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            // Selector of `log(bool)`.\n            mstore(0x00, 0x32458eed)\n            mstore(0x20, p0)\n        }\n        _sendLogPayload(0x1c, 0x24);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n        }\n    }\n\n    function log(uint256 p0) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            // Selector of `log(uint256)`.\n            mstore(0x00, 0xf82c50f1)\n            mstore(0x20, p0)\n        }\n        _sendLogPayload(0x1c, 0x24);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n        }\n    }\n\n    function log(bytes32 p0) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(string)`.\n            mstore(0x00, 0x41304fac)\n            mstore(0x20, 0x20)\n            writeString(0x40, p0)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(address p0, address p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            // Selector of `log(address,address)`.\n            mstore(0x00, 0xdaf0d4aa)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n        }\n        _sendLogPayload(0x1c, 0x44);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n        }\n    }\n\n    function log(address p0, bool p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            // Selector of `log(address,bool)`.\n            mstore(0x00, 0x75b605d3)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n        }\n        _sendLogPayload(0x1c, 0x44);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n        }\n    }\n\n    function log(address p0, uint256 p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            // Selector of `log(address,uint256)`.\n            mstore(0x00, 0x8309e8a8)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n        }\n        _sendLogPayload(0x1c, 0x44);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n        }\n    }\n\n    function log(address p0, bytes32 p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,string)`.\n            mstore(0x00, 0x759f86bb)\n            mstore(0x20, p0)\n            mstore(0x40, 0x40)\n            writeString(0x60, p1)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, address p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            // Selector of `log(bool,address)`.\n            mstore(0x00, 0x853c4849)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n        }\n        _sendLogPayload(0x1c, 0x44);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n        }\n    }\n\n    function log(bool p0, bool p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            // Selector of `log(bool,bool)`.\n            mstore(0x00, 0x2a110e83)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n        }\n        _sendLogPayload(0x1c, 0x44);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n        }\n    }\n\n    function log(bool p0, uint256 p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            // Selector of `log(bool,uint256)`.\n            mstore(0x00, 0x399174d3)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n        }\n        _sendLogPayload(0x1c, 0x44);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n        }\n    }\n\n    function log(bool p0, bytes32 p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,string)`.\n            mstore(0x00, 0x8feac525)\n            mstore(0x20, p0)\n            mstore(0x40, 0x40)\n            writeString(0x60, p1)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, address p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            // Selector of `log(uint256,address)`.\n            mstore(0x00, 0x69276c86)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n        }\n        _sendLogPayload(0x1c, 0x44);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n        }\n    }\n\n    function log(uint256 p0, bool p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            // Selector of `log(uint256,bool)`.\n            mstore(0x00, 0x1c9d7eb3)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n        }\n        _sendLogPayload(0x1c, 0x44);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            // Selector of `log(uint256,uint256)`.\n            mstore(0x00, 0xf666715a)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n        }\n        _sendLogPayload(0x1c, 0x44);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,string)`.\n            mstore(0x00, 0x643fd0df)\n            mstore(0x20, p0)\n            mstore(0x40, 0x40)\n            writeString(0x60, p1)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bytes32 p0, address p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(string,address)`.\n            mstore(0x00, 0x319af333)\n            mstore(0x20, 0x40)\n            mstore(0x40, p1)\n            writeString(0x60, p0)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bytes32 p0, bool p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(string,bool)`.\n            mstore(0x00, 0xc3b55635)\n            mstore(0x20, 0x40)\n            mstore(0x40, p1)\n            writeString(0x60, p0)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(string,uint256)`.\n            mstore(0x00, 0xb60e72cc)\n            mstore(0x20, 0x40)\n            mstore(0x40, p1)\n            writeString(0x60, p0)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,string)`.\n            mstore(0x00, 0x4b5c4277)\n            mstore(0x20, 0x40)\n            mstore(0x40, 0x80)\n            writeString(0x60, p0)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, address p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(address,address,address)`.\n            mstore(0x00, 0x018c84c2)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(address p0, address p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(address,address,bool)`.\n            mstore(0x00, 0xf2a66286)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(address p0, address p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(address,address,uint256)`.\n            mstore(0x00, 0x17fe6185)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(address p0, address p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(address,address,string)`.\n            mstore(0x00, 0x007150be)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x60)\n            writeString(0x80, p2)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(address p0, bool p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(address,bool,address)`.\n            mstore(0x00, 0xf11699ed)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(address p0, bool p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(address,bool,bool)`.\n            mstore(0x00, 0xeb830c92)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(address p0, bool p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(address,bool,uint256)`.\n            mstore(0x00, 0x9c4f99fb)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(address p0, bool p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(address,bool,string)`.\n            mstore(0x00, 0x212255cc)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x60)\n            writeString(0x80, p2)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(address p0, uint256 p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(address,uint256,address)`.\n            mstore(0x00, 0x7bc0d848)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(address p0, uint256 p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(address,uint256,bool)`.\n            mstore(0x00, 0x678209a8)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(address,uint256,uint256)`.\n            mstore(0x00, 0xb69bcaf6)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(address p0, uint256 p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(address,uint256,string)`.\n            mstore(0x00, 0xa1f2e8aa)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x60)\n            writeString(0x80, p2)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(address p0, bytes32 p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(address,string,address)`.\n            mstore(0x00, 0xf08744e8)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, p2)\n            writeString(0x80, p1)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(address p0, bytes32 p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(address,string,bool)`.\n            mstore(0x00, 0xcf020fb1)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, p2)\n            writeString(0x80, p1)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(address p0, bytes32 p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(address,string,uint256)`.\n            mstore(0x00, 0x67dd6ff1)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, p2)\n            writeString(0x80, p1)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(address p0, bytes32 p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            // Selector of `log(address,string,string)`.\n            mstore(0x00, 0xfb772265)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, 0xa0)\n            writeString(0x80, p1)\n            writeString(0xc0, p2)\n        }\n        _sendLogPayload(0x1c, 0xe4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n        }\n    }\n\n    function log(bool p0, address p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(bool,address,address)`.\n            mstore(0x00, 0xd2763667)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(bool p0, address p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(bool,address,bool)`.\n            mstore(0x00, 0x18c9c746)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(bool p0, address p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(bool,address,uint256)`.\n            mstore(0x00, 0x5f7b9afb)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(bool p0, address p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(bool,address,string)`.\n            mstore(0x00, 0xde9a9270)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x60)\n            writeString(0x80, p2)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bool p0, bool p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(bool,bool,address)`.\n            mstore(0x00, 0x1078f68d)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(bool p0, bool p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(bool,bool,bool)`.\n            mstore(0x00, 0x50709698)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(bool p0, bool p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(bool,bool,uint256)`.\n            mstore(0x00, 0x12f21602)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(bool p0, bool p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(bool,bool,string)`.\n            mstore(0x00, 0x2555fa46)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x60)\n            writeString(0x80, p2)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bool p0, uint256 p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(bool,uint256,address)`.\n            mstore(0x00, 0x088ef9d2)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(bool p0, uint256 p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(bool,uint256,bool)`.\n            mstore(0x00, 0xe8defba9)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(bool,uint256,uint256)`.\n            mstore(0x00, 0x37103367)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(bool p0, uint256 p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(bool,uint256,string)`.\n            mstore(0x00, 0xc3fc3970)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x60)\n            writeString(0x80, p2)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(bool,string,address)`.\n            mstore(0x00, 0x9591b953)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, p2)\n            writeString(0x80, p1)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(bool,string,bool)`.\n            mstore(0x00, 0xdbb4c247)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, p2)\n            writeString(0x80, p1)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(bool,string,uint256)`.\n            mstore(0x00, 0x1093ee11)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, p2)\n            writeString(0x80, p1)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            // Selector of `log(bool,string,string)`.\n            mstore(0x00, 0xb076847f)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, 0xa0)\n            writeString(0x80, p1)\n            writeString(0xc0, p2)\n        }\n        _sendLogPayload(0x1c, 0xe4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n        }\n    }\n\n    function log(uint256 p0, address p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(uint256,address,address)`.\n            mstore(0x00, 0xbcfd9be0)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(uint256 p0, address p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(uint256,address,bool)`.\n            mstore(0x00, 0x9b6ec042)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(uint256,address,uint256)`.\n            mstore(0x00, 0x5a9b5ed5)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(uint256 p0, address p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(uint256,address,string)`.\n            mstore(0x00, 0x63cb41f9)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x60)\n            writeString(0x80, p2)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(uint256 p0, bool p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(uint256,bool,address)`.\n            mstore(0x00, 0x35085f7b)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(uint256 p0, bool p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(uint256,bool,bool)`.\n            mstore(0x00, 0x20718650)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(uint256,bool,uint256)`.\n            mstore(0x00, 0x20098014)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(uint256 p0, bool p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(uint256,bool,string)`.\n            mstore(0x00, 0x85775021)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x60)\n            writeString(0x80, p2)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(uint256,uint256,address)`.\n            mstore(0x00, 0x5c96b331)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(uint256,uint256,bool)`.\n            mstore(0x00, 0x4766da72)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(uint256,uint256,uint256)`.\n            mstore(0x00, 0xd1ed7a3c)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(uint256,uint256,string)`.\n            mstore(0x00, 0x71d04af2)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x60)\n            writeString(0x80, p2)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(uint256,string,address)`.\n            mstore(0x00, 0x7afac959)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, p2)\n            writeString(0x80, p1)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(uint256,string,bool)`.\n            mstore(0x00, 0x4ceda75a)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, p2)\n            writeString(0x80, p1)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(uint256,string,uint256)`.\n            mstore(0x00, 0x37aa7d4c)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, p2)\n            writeString(0x80, p1)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            // Selector of `log(uint256,string,string)`.\n            mstore(0x00, 0xb115611f)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, 0xa0)\n            writeString(0x80, p1)\n            writeString(0xc0, p2)\n        }\n        _sendLogPayload(0x1c, 0xe4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n        }\n    }\n\n    function log(bytes32 p0, address p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(string,address,address)`.\n            mstore(0x00, 0xfcec75e0)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bytes32 p0, address p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(string,address,bool)`.\n            mstore(0x00, 0xc91d5ed4)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bytes32 p0, address p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(string,address,uint256)`.\n            mstore(0x00, 0x0d26b925)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bytes32 p0, address p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            // Selector of `log(string,address,string)`.\n            mstore(0x00, 0xe0e9ad4f)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, 0xa0)\n            writeString(0x80, p0)\n            writeString(0xc0, p2)\n        }\n        _sendLogPayload(0x1c, 0xe4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(string,bool,address)`.\n            mstore(0x00, 0x932bbb38)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(string,bool,bool)`.\n            mstore(0x00, 0x850b7ad6)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(string,bool,uint256)`.\n            mstore(0x00, 0xc95958d6)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            // Selector of `log(string,bool,string)`.\n            mstore(0x00, 0xe298f47d)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, 0xa0)\n            writeString(0x80, p0)\n            writeString(0xc0, p2)\n        }\n        _sendLogPayload(0x1c, 0xe4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(string,uint256,address)`.\n            mstore(0x00, 0x1c7ec448)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(string,uint256,bool)`.\n            mstore(0x00, 0xca7733b1)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(string,uint256,uint256)`.\n            mstore(0x00, 0xca47c4eb)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            // Selector of `log(string,uint256,string)`.\n            mstore(0x00, 0x5970e089)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, 0xa0)\n            writeString(0x80, p0)\n            writeString(0xc0, p2)\n        }\n        _sendLogPayload(0x1c, 0xe4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            // Selector of `log(string,string,address)`.\n            mstore(0x00, 0x95ed0195)\n            mstore(0x20, 0x60)\n            mstore(0x40, 0xa0)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n            writeString(0xc0, p1)\n        }\n        _sendLogPayload(0x1c, 0xe4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            // Selector of `log(string,string,bool)`.\n            mstore(0x00, 0xb0e0f9b5)\n            mstore(0x20, 0x60)\n            mstore(0x40, 0xa0)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n            writeString(0xc0, p1)\n        }\n        _sendLogPayload(0x1c, 0xe4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            // Selector of `log(string,string,uint256)`.\n            mstore(0x00, 0x5821efa1)\n            mstore(0x20, 0x60)\n            mstore(0x40, 0xa0)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n            writeString(0xc0, p1)\n        }\n        _sendLogPayload(0x1c, 0xe4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            // Selector of `log(string,string,string)`.\n            mstore(0x00, 0x2ced7cef)\n            mstore(0x20, 0x60)\n            mstore(0x40, 0xa0)\n            mstore(0x60, 0xe0)\n            writeString(0x80, p0)\n            writeString(0xc0, p1)\n            writeString(0x100, p2)\n        }\n        _sendLogPayload(0x1c, 0x124);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n        }\n    }\n\n    function log(address p0, address p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,address,address,address)`.\n            mstore(0x00, 0x665bf134)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, address p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,address,address,bool)`.\n            mstore(0x00, 0x0e378994)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,address,address,uint256)`.\n            mstore(0x00, 0x94250d77)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, address p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,address,address,string)`.\n            mstore(0x00, 0xf808da20)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, address p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,address,bool,address)`.\n            mstore(0x00, 0x9f1bc36e)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,address,bool,bool)`.\n            mstore(0x00, 0x2cd4134a)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,address,bool,uint256)`.\n            mstore(0x00, 0x3971e78c)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, address p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,address,bool,string)`.\n            mstore(0x00, 0xaa6540c8)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,address,uint256,address)`.\n            mstore(0x00, 0x8da6def5)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,address,uint256,bool)`.\n            mstore(0x00, 0x9b4254e2)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,address,uint256,uint256)`.\n            mstore(0x00, 0xbe553481)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, address p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,address,uint256,string)`.\n            mstore(0x00, 0xfdb4f990)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, address p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,address,string,address)`.\n            mstore(0x00, 0x8f736d16)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, address p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,address,string,bool)`.\n            mstore(0x00, 0x6f1a594e)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, address p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,address,string,uint256)`.\n            mstore(0x00, 0xef1cefe7)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, address p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(address,address,string,string)`.\n            mstore(0x00, 0x21bdaf25)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p2)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(address p0, bool p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,bool,address,address)`.\n            mstore(0x00, 0x660375dd)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,bool,address,bool)`.\n            mstore(0x00, 0xa6f50b0f)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,bool,address,uint256)`.\n            mstore(0x00, 0xa75c59de)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, bool p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,bool,address,string)`.\n            mstore(0x00, 0x2dd778e6)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,bool,bool,address)`.\n            mstore(0x00, 0xcf394485)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,bool,bool,bool)`.\n            mstore(0x00, 0xcac43479)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,bool,bool,uint256)`.\n            mstore(0x00, 0x8c4e5de6)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, bool p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,bool,bool,string)`.\n            mstore(0x00, 0xdfc4a2e8)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,bool,uint256,address)`.\n            mstore(0x00, 0xccf790a1)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,bool,uint256,bool)`.\n            mstore(0x00, 0xc4643e20)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,bool,uint256,uint256)`.\n            mstore(0x00, 0x386ff5f4)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, bool p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,bool,uint256,string)`.\n            mstore(0x00, 0x0aa6cfad)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bool p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,bool,string,address)`.\n            mstore(0x00, 0x19fd4956)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bool p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,bool,string,bool)`.\n            mstore(0x00, 0x50ad461d)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bool p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,bool,string,uint256)`.\n            mstore(0x00, 0x80e6a20b)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bool p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(address,bool,string,string)`.\n            mstore(0x00, 0x475c5c33)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p2)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,uint256,address,address)`.\n            mstore(0x00, 0x478d1c62)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,uint256,address,bool)`.\n            mstore(0x00, 0xa1bcc9b3)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,uint256,address,uint256)`.\n            mstore(0x00, 0x100f650e)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, uint256 p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,uint256,address,string)`.\n            mstore(0x00, 0x1da986ea)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,uint256,bool,address)`.\n            mstore(0x00, 0xa31bfdcc)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,uint256,bool,bool)`.\n            mstore(0x00, 0x3bf5e537)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,uint256,bool,uint256)`.\n            mstore(0x00, 0x22f6b999)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, uint256 p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,uint256,bool,string)`.\n            mstore(0x00, 0xc5ad85f9)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,uint256,uint256,address)`.\n            mstore(0x00, 0x20e3984d)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,uint256,uint256,bool)`.\n            mstore(0x00, 0x66f1bc67)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,uint256,uint256,uint256)`.\n            mstore(0x00, 0x34f0e636)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,uint256,uint256,string)`.\n            mstore(0x00, 0x4a28c017)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, uint256 p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,uint256,string,address)`.\n            mstore(0x00, 0x5c430d47)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, uint256 p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,uint256,string,bool)`.\n            mstore(0x00, 0xcf18105c)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, uint256 p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,uint256,string,uint256)`.\n            mstore(0x00, 0xbf01f891)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, uint256 p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(address,uint256,string,string)`.\n            mstore(0x00, 0x88a8c406)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p2)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(address p0, bytes32 p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,string,address,address)`.\n            mstore(0x00, 0x0d36fa20)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bytes32 p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,string,address,bool)`.\n            mstore(0x00, 0x0df12b76)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bytes32 p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,string,address,uint256)`.\n            mstore(0x00, 0x457fe3cf)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bytes32 p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(address,string,address,string)`.\n            mstore(0x00, 0xf7e36245)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p1)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(address p0, bytes32 p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,string,bool,address)`.\n            mstore(0x00, 0x205871c2)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bytes32 p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,string,bool,bool)`.\n            mstore(0x00, 0x5f1d5c9f)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bytes32 p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,string,bool,uint256)`.\n            mstore(0x00, 0x515e38b6)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bytes32 p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(address,string,bool,string)`.\n            mstore(0x00, 0xbc0b61fe)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p1)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(address p0, bytes32 p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,string,uint256,address)`.\n            mstore(0x00, 0x63183678)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bytes32 p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,string,uint256,bool)`.\n            mstore(0x00, 0x0ef7e050)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bytes32 p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,string,uint256,uint256)`.\n            mstore(0x00, 0x1dc8e1b8)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bytes32 p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(address,string,uint256,string)`.\n            mstore(0x00, 0x448830a8)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p1)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(address p0, bytes32 p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(address,string,string,address)`.\n            mstore(0x00, 0xa04e2f87)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(address p0, bytes32 p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(address,string,string,bool)`.\n            mstore(0x00, 0x35a5071f)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(address p0, bytes32 p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(address,string,string,uint256)`.\n            mstore(0x00, 0x159f8927)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(address p0, bytes32 p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(address,string,string,string)`.\n            mstore(0x00, 0x5d02c50b)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, 0x100)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n            writeString(0x120, p3)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(bool p0, address p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,address,address,address)`.\n            mstore(0x00, 0x1d14d001)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,address,address,bool)`.\n            mstore(0x00, 0x46600be0)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,address,address,uint256)`.\n            mstore(0x00, 0x0c66d1be)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, address p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,address,address,string)`.\n            mstore(0x00, 0xd812a167)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,address,bool,address)`.\n            mstore(0x00, 0x1c41a336)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,address,bool,bool)`.\n            mstore(0x00, 0x6a9c478b)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,address,bool,uint256)`.\n            mstore(0x00, 0x07831502)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, address p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,address,bool,string)`.\n            mstore(0x00, 0x4a66cb34)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,address,uint256,address)`.\n            mstore(0x00, 0x136b05dd)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,address,uint256,bool)`.\n            mstore(0x00, 0xd6019f1c)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,address,uint256,uint256)`.\n            mstore(0x00, 0x7bf181a1)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, address p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,address,uint256,string)`.\n            mstore(0x00, 0x51f09ff8)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, address p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,address,string,address)`.\n            mstore(0x00, 0x6f7c603e)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, address p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,address,string,bool)`.\n            mstore(0x00, 0xe2bfd60b)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, address p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,address,string,uint256)`.\n            mstore(0x00, 0xc21f64c7)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, address p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(bool,address,string,string)`.\n            mstore(0x00, 0xa73c1db6)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p2)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,bool,address,address)`.\n            mstore(0x00, 0xf4880ea4)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,bool,address,bool)`.\n            mstore(0x00, 0xc0a302d8)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,bool,address,uint256)`.\n            mstore(0x00, 0x4c123d57)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, bool p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,bool,address,string)`.\n            mstore(0x00, 0xa0a47963)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,bool,bool,address)`.\n            mstore(0x00, 0x8c329b1a)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,bool,bool,bool)`.\n            mstore(0x00, 0x3b2a5ce0)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,bool,bool,uint256)`.\n            mstore(0x00, 0x6d7045c1)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, bool p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,bool,bool,string)`.\n            mstore(0x00, 0x2ae408d4)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,bool,uint256,address)`.\n            mstore(0x00, 0x54a7a9a0)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,bool,uint256,bool)`.\n            mstore(0x00, 0x619e4d0e)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,bool,uint256,uint256)`.\n            mstore(0x00, 0x0bb00eab)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, bool p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,bool,uint256,string)`.\n            mstore(0x00, 0x7dd4d0e0)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bool p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,bool,string,address)`.\n            mstore(0x00, 0xf9ad2b89)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bool p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,bool,string,bool)`.\n            mstore(0x00, 0xb857163a)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bool p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,bool,string,uint256)`.\n            mstore(0x00, 0xe3a9ca2f)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bool p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(bool,bool,string,string)`.\n            mstore(0x00, 0x6d1e8751)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p2)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,uint256,address,address)`.\n            mstore(0x00, 0x26f560a8)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,uint256,address,bool)`.\n            mstore(0x00, 0xb4c314ff)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,uint256,address,uint256)`.\n            mstore(0x00, 0x1537dc87)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, uint256 p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,uint256,address,string)`.\n            mstore(0x00, 0x1bb3b09a)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,uint256,bool,address)`.\n            mstore(0x00, 0x9acd3616)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,uint256,bool,bool)`.\n            mstore(0x00, 0xceb5f4d7)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,uint256,bool,uint256)`.\n            mstore(0x00, 0x7f9bbca2)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, uint256 p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,uint256,bool,string)`.\n            mstore(0x00, 0x9143dbb1)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,uint256,uint256,address)`.\n            mstore(0x00, 0x00dd87b9)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,uint256,uint256,bool)`.\n            mstore(0x00, 0xbe984353)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,uint256,uint256,uint256)`.\n            mstore(0x00, 0x374bb4b2)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,uint256,uint256,string)`.\n            mstore(0x00, 0x8e69fb5d)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, uint256 p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,uint256,string,address)`.\n            mstore(0x00, 0xfedd1fff)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, uint256 p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,uint256,string,bool)`.\n            mstore(0x00, 0xe5e70b2b)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, uint256 p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,uint256,string,uint256)`.\n            mstore(0x00, 0x6a1199e2)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, uint256 p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(bool,uint256,string,string)`.\n            mstore(0x00, 0xf5bc2249)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p2)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,string,address,address)`.\n            mstore(0x00, 0x2b2b18dc)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,string,address,bool)`.\n            mstore(0x00, 0x6dd434ca)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,string,address,uint256)`.\n            mstore(0x00, 0xa5cada94)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(bool,string,address,string)`.\n            mstore(0x00, 0x12d6c788)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p1)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,string,bool,address)`.\n            mstore(0x00, 0x538e06ab)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,string,bool,bool)`.\n            mstore(0x00, 0xdc5e935b)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,string,bool,uint256)`.\n            mstore(0x00, 0x1606a393)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(bool,string,bool,string)`.\n            mstore(0x00, 0x483d0416)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p1)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,string,uint256,address)`.\n            mstore(0x00, 0x1596a1ce)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,string,uint256,bool)`.\n            mstore(0x00, 0x6b0e5d53)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,string,uint256,uint256)`.\n            mstore(0x00, 0x28863fcb)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(bool,string,uint256,string)`.\n            mstore(0x00, 0x1ad96de6)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p1)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(bool,string,string,address)`.\n            mstore(0x00, 0x97d394d8)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(bool,string,string,bool)`.\n            mstore(0x00, 0x1e4b87e5)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(bool,string,string,uint256)`.\n            mstore(0x00, 0x7be0c3eb)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(bool,string,string,string)`.\n            mstore(0x00, 0x1762e32a)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, 0x100)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n            writeString(0x120, p3)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,address,address,address)`.\n            mstore(0x00, 0x2488b414)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,address,address,bool)`.\n            mstore(0x00, 0x091ffaf5)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,address,address,uint256)`.\n            mstore(0x00, 0x736efbb6)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, address p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,address,address,string)`.\n            mstore(0x00, 0x031c6f73)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,address,bool,address)`.\n            mstore(0x00, 0xef72c513)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,address,bool,bool)`.\n            mstore(0x00, 0xe351140f)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,address,bool,uint256)`.\n            mstore(0x00, 0x5abd992a)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, address p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,address,bool,string)`.\n            mstore(0x00, 0x90fb06aa)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,address,uint256,address)`.\n            mstore(0x00, 0x15c127b5)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,address,uint256,bool)`.\n            mstore(0x00, 0x5f743a7c)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,address,uint256,uint256)`.\n            mstore(0x00, 0x0c9cd9c1)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,address,uint256,string)`.\n            mstore(0x00, 0xddb06521)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, address p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,address,string,address)`.\n            mstore(0x00, 0x9cba8fff)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, address p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,address,string,bool)`.\n            mstore(0x00, 0xcc32ab07)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, address p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,address,string,uint256)`.\n            mstore(0x00, 0x46826b5d)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, address p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(uint256,address,string,string)`.\n            mstore(0x00, 0x3e128ca3)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p2)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,bool,address,address)`.\n            mstore(0x00, 0xa1ef4cbb)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,bool,address,bool)`.\n            mstore(0x00, 0x454d54a5)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,bool,address,uint256)`.\n            mstore(0x00, 0x078287f5)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, bool p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,bool,address,string)`.\n            mstore(0x00, 0xade052c7)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,bool,bool,address)`.\n            mstore(0x00, 0x69640b59)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,bool,bool,bool)`.\n            mstore(0x00, 0xb6f577a1)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,bool,bool,uint256)`.\n            mstore(0x00, 0x7464ce23)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, bool p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,bool,bool,string)`.\n            mstore(0x00, 0xdddb9561)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,bool,uint256,address)`.\n            mstore(0x00, 0x88cb6041)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,bool,uint256,bool)`.\n            mstore(0x00, 0x91a02e2a)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,bool,uint256,uint256)`.\n            mstore(0x00, 0xc6acc7a8)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,bool,uint256,string)`.\n            mstore(0x00, 0xde03e774)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bool p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,bool,string,address)`.\n            mstore(0x00, 0xef529018)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bool p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,bool,string,bool)`.\n            mstore(0x00, 0xeb928d7f)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bool p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,bool,string,uint256)`.\n            mstore(0x00, 0x2c1d0746)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bool p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(uint256,bool,string,string)`.\n            mstore(0x00, 0x68c8b8bd)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p2)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,uint256,address,address)`.\n            mstore(0x00, 0x56a5d1b1)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,uint256,address,bool)`.\n            mstore(0x00, 0x15cac476)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,uint256,address,uint256)`.\n            mstore(0x00, 0x88f6e4b2)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,uint256,address,string)`.\n            mstore(0x00, 0x6cde40b8)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,uint256,bool,address)`.\n            mstore(0x00, 0x9a816a83)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,uint256,bool,bool)`.\n            mstore(0x00, 0xab085ae6)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,uint256,bool,uint256)`.\n            mstore(0x00, 0xeb7f6fd2)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,uint256,bool,string)`.\n            mstore(0x00, 0xa5b4fc99)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,uint256,uint256,address)`.\n            mstore(0x00, 0xfa8185af)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,uint256,uint256,bool)`.\n            mstore(0x00, 0xc598d185)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,uint256,uint256,uint256)`.\n            mstore(0x00, 0x193fb800)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,uint256,uint256,string)`.\n            mstore(0x00, 0x59cfcbe3)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,uint256,string,address)`.\n            mstore(0x00, 0x42d21db7)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,uint256,string,bool)`.\n            mstore(0x00, 0x7af6ab25)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,uint256,string,uint256)`.\n            mstore(0x00, 0x5da297eb)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(uint256,uint256,string,string)`.\n            mstore(0x00, 0x27d8afd2)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p2)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,string,address,address)`.\n            mstore(0x00, 0x6168ed61)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,string,address,bool)`.\n            mstore(0x00, 0x90c30a56)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,string,address,uint256)`.\n            mstore(0x00, 0xe8d3018d)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(uint256,string,address,string)`.\n            mstore(0x00, 0x9c3adfa1)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p1)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,string,bool,address)`.\n            mstore(0x00, 0xae2ec581)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,string,bool,bool)`.\n            mstore(0x00, 0xba535d9c)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,string,bool,uint256)`.\n            mstore(0x00, 0xcf009880)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(uint256,string,bool,string)`.\n            mstore(0x00, 0xd2d423cd)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p1)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,string,uint256,address)`.\n            mstore(0x00, 0x3b2279b4)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,string,uint256,bool)`.\n            mstore(0x00, 0x691a8f74)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,string,uint256,uint256)`.\n            mstore(0x00, 0x82c25b74)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(uint256,string,uint256,string)`.\n            mstore(0x00, 0xb7b914ca)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p1)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(uint256,string,string,address)`.\n            mstore(0x00, 0xd583c602)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(uint256,string,string,bool)`.\n            mstore(0x00, 0xb3a6b6bd)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(uint256,string,string,uint256)`.\n            mstore(0x00, 0xb028c9bd)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(uint256,string,string,string)`.\n            mstore(0x00, 0x21ad0683)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, 0x100)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n            writeString(0x120, p3)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(bytes32 p0, address p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,address,address,address)`.\n            mstore(0x00, 0xed8f28f6)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, address p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,address,address,bool)`.\n            mstore(0x00, 0xb59dbd60)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, address p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,address,address,uint256)`.\n            mstore(0x00, 0x8ef3f399)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, address p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,address,address,string)`.\n            mstore(0x00, 0x800a1c67)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p0)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, address p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,address,bool,address)`.\n            mstore(0x00, 0x223603bd)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, address p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,address,bool,bool)`.\n            mstore(0x00, 0x79884c2b)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, address p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,address,bool,uint256)`.\n            mstore(0x00, 0x3e9f866a)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, address p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,address,bool,string)`.\n            mstore(0x00, 0x0454c079)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p0)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, address p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,address,uint256,address)`.\n            mstore(0x00, 0x63fb8bc5)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, address p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,address,uint256,bool)`.\n            mstore(0x00, 0xfc4845f0)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, address p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,address,uint256,uint256)`.\n            mstore(0x00, 0xf8f51b1e)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, address p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,address,uint256,string)`.\n            mstore(0x00, 0x5a477632)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p0)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, address p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,address,string,address)`.\n            mstore(0x00, 0xaabc9a31)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, address p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,address,string,bool)`.\n            mstore(0x00, 0x5f15d28c)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, address p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,address,string,uint256)`.\n            mstore(0x00, 0x91d1112e)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, address p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(string,address,string,string)`.\n            mstore(0x00, 0x245986f2)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, 0x100)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n            writeString(0x120, p3)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,bool,address,address)`.\n            mstore(0x00, 0x33e9dd1d)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,bool,address,bool)`.\n            mstore(0x00, 0x958c28c6)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,bool,address,uint256)`.\n            mstore(0x00, 0x5d08bb05)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,bool,address,string)`.\n            mstore(0x00, 0x2d8e33a4)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p0)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,bool,bool,address)`.\n            mstore(0x00, 0x7190a529)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,bool,bool,bool)`.\n            mstore(0x00, 0x895af8c5)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,bool,bool,uint256)`.\n            mstore(0x00, 0x8e3f78a9)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,bool,bool,string)`.\n            mstore(0x00, 0x9d22d5dd)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p0)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,bool,uint256,address)`.\n            mstore(0x00, 0x935e09bf)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,bool,uint256,bool)`.\n            mstore(0x00, 0x8af7cf8a)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,bool,uint256,uint256)`.\n            mstore(0x00, 0x64b5bb67)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,bool,uint256,string)`.\n            mstore(0x00, 0x742d6ee7)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p0)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,bool,string,address)`.\n            mstore(0x00, 0xe0625b29)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,bool,string,bool)`.\n            mstore(0x00, 0x3f8a701d)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,bool,string,uint256)`.\n            mstore(0x00, 0x24f91465)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(string,bool,string,string)`.\n            mstore(0x00, 0xa826caeb)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, 0x100)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n            writeString(0x120, p3)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,uint256,address,address)`.\n            mstore(0x00, 0x5ea2b7ae)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,uint256,address,bool)`.\n            mstore(0x00, 0x82112a42)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,uint256,address,uint256)`.\n            mstore(0x00, 0x4f04fdc6)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,uint256,address,string)`.\n            mstore(0x00, 0x9ffb2f93)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p0)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,uint256,bool,address)`.\n            mstore(0x00, 0xe0e95b98)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,uint256,bool,bool)`.\n            mstore(0x00, 0x354c36d6)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,uint256,bool,uint256)`.\n            mstore(0x00, 0xe41b6f6f)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,uint256,bool,string)`.\n            mstore(0x00, 0xabf73a98)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p0)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,uint256,uint256,address)`.\n            mstore(0x00, 0xe21de278)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,uint256,uint256,bool)`.\n            mstore(0x00, 0x7626db92)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,uint256,uint256,uint256)`.\n            mstore(0x00, 0xa7a87853)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,uint256,uint256,string)`.\n            mstore(0x00, 0x854b3496)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p0)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,uint256,string,address)`.\n            mstore(0x00, 0x7c4632a4)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,uint256,string,bool)`.\n            mstore(0x00, 0x7d24491d)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,uint256,string,uint256)`.\n            mstore(0x00, 0xc67ea9d1)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(string,uint256,string,string)`.\n            mstore(0x00, 0x5ab84e1f)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, 0x100)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n            writeString(0x120, p3)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,string,address,address)`.\n            mstore(0x00, 0x439c7bef)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,string,address,bool)`.\n            mstore(0x00, 0x5ccd4e37)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,string,address,uint256)`.\n            mstore(0x00, 0x7cc3c607)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(string,string,address,string)`.\n            mstore(0x00, 0xeb1bff80)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, 0x100)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n            writeString(0x120, p3)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,string,bool,address)`.\n            mstore(0x00, 0xc371c7db)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,string,bool,bool)`.\n            mstore(0x00, 0x40785869)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,string,bool,uint256)`.\n            mstore(0x00, 0xd6aefad2)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(string,string,bool,string)`.\n            mstore(0x00, 0x5e84b0ea)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, 0x100)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n            writeString(0x120, p3)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,string,uint256,address)`.\n            mstore(0x00, 0x1023f7b2)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,string,uint256,bool)`.\n            mstore(0x00, 0xc3a8a654)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,string,uint256,uint256)`.\n            mstore(0x00, 0xf45d7d2c)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(string,string,uint256,string)`.\n            mstore(0x00, 0x5d1a971a)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, 0x100)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n            writeString(0x120, p3)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(string,string,string,address)`.\n            mstore(0x00, 0x6d572f44)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, 0x100)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n            writeString(0x120, p2)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(string,string,string,bool)`.\n            mstore(0x00, 0x2c1754ed)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, 0x100)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n            writeString(0x120, p2)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(string,string,string,uint256)`.\n            mstore(0x00, 0x8eafb02b)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, 0x100)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n            writeString(0x120, p2)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        bytes32 m11;\n        bytes32 m12;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            m11 := mload(0x160)\n            m12 := mload(0x180)\n            // Selector of `log(string,string,string,string)`.\n            mstore(0x00, 0xde68f20a)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, 0x100)\n            mstore(0x80, 0x140)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n            writeString(0x120, p2)\n            writeString(0x160, p3)\n        }\n        _sendLogPayload(0x1c, 0x184);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n            mstore(0x160, m11)\n            mstore(0x180, m12)\n        }\n    }\n}\n"},"lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"@openzeppelin/contracts/access/IAccessControl.sol\";\nimport {ContextUpgradeable} from \"../utils/ContextUpgradeable.sol\";\nimport {ERC165Upgradeable} from \"../utils/introspection/ERC165Upgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\n    struct AccessControlStorage {\n        mapping(bytes32 role => RoleData) _roles;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.AccessControl\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\n\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\n        assembly {\n            $.slot := AccessControlStorageLocation\n        }\n    }\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        return $._roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        return $._roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        $._roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        if (!hasRole(role, account)) {\n            $._roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` from `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        if (hasRole(role, account)) {\n            $._roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"},"lib/openzeppelin-contracts-upgradeable/contracts/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/extensions/AccessControlDefaultAdminRules.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControlDefaultAdminRules} from \"@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol\";\nimport {AccessControlUpgradeable} from \"../AccessControlUpgradeable.sol\";\nimport {IAccessControl} from \"@openzeppelin/contracts/access/IAccessControl.sol\";\nimport {SafeCast} from \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\nimport {Math} from \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport {IERC5313} from \"@openzeppelin/contracts/interfaces/IERC5313.sol\";\nimport {Initializable} from \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows specifying special rules to manage\n * the `DEFAULT_ADMIN_ROLE` holder, which is a sensitive role with special permissions\n * over other roles that may potentially have privileged rights in the system.\n *\n * If a specific role doesn't have an admin role assigned, the holder of the\n * `DEFAULT_ADMIN_ROLE` will have the ability to grant it and revoke it.\n *\n * This contract implements the following risk mitigations on top of {AccessControl}:\n *\n * * Only one account holds the `DEFAULT_ADMIN_ROLE` since deployment until it's potentially renounced.\n * * Enforces a 2-step process to transfer the `DEFAULT_ADMIN_ROLE` to another account.\n * * Enforces a configurable delay between the two steps, with the ability to cancel before the transfer is accepted.\n * * The delay can be changed by scheduling, see {changeDefaultAdminDelay}.\n * * It is not possible to use another role to manage the `DEFAULT_ADMIN_ROLE`.\n *\n * Example usage:\n *\n * ```solidity\n * contract MyToken is AccessControlDefaultAdminRules {\n *   constructor() AccessControlDefaultAdminRules(\n *     3 days,\n *     msg.sender // Explicit initial `DEFAULT_ADMIN_ROLE` holder\n *    ) {}\n * }\n * ```\n */\nabstract contract AccessControlDefaultAdminRulesUpgradeable is Initializable, IAccessControlDefaultAdminRules, IERC5313, AccessControlUpgradeable {\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControlDefaultAdminRules\n    struct AccessControlDefaultAdminRulesStorage {\n        // pending admin pair read/written together frequently\n        address _pendingDefaultAdmin;\n        uint48 _pendingDefaultAdminSchedule; // 0 == unset\n\n        uint48 _currentDelay;\n        address _currentDefaultAdmin;\n\n        // pending delay pair read/written together frequently\n        uint48 _pendingDelay;\n        uint48 _pendingDelaySchedule; // 0 == unset\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.AccessControlDefaultAdminRules\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant AccessControlDefaultAdminRulesStorageLocation = 0xeef3dac4538c82c8ace4063ab0acd2d15cdb5883aa1dff7c2673abb3d8698400;\n\n    function _getAccessControlDefaultAdminRulesStorage() private pure returns (AccessControlDefaultAdminRulesStorage storage $) {\n        assembly {\n            $.slot := AccessControlDefaultAdminRulesStorageLocation\n        }\n    }\n\n    /**\n     * @dev Sets the initial values for {defaultAdminDelay} and {defaultAdmin} address.\n     */\n    function __AccessControlDefaultAdminRules_init(uint48 initialDelay, address initialDefaultAdmin) internal onlyInitializing {\n        __AccessControlDefaultAdminRules_init_unchained(initialDelay, initialDefaultAdmin);\n    }\n\n    function __AccessControlDefaultAdminRules_init_unchained(uint48 initialDelay, address initialDefaultAdmin) internal onlyInitializing {\n        AccessControlDefaultAdminRulesStorage storage $ = _getAccessControlDefaultAdminRulesStorage();\n        if (initialDefaultAdmin == address(0)) {\n            revert AccessControlInvalidDefaultAdmin(address(0));\n        }\n        $._currentDelay = initialDelay;\n        _grantRole(DEFAULT_ADMIN_ROLE, initialDefaultAdmin);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlDefaultAdminRules).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC5313-owner}.\n     */\n    function owner() public view virtual returns (address) {\n        return defaultAdmin();\n    }\n\n    ///\n    /// Override AccessControl role management\n    ///\n\n    /**\n     * @dev See {AccessControl-grantRole}. Reverts for `DEFAULT_ADMIN_ROLE`.\n     */\n    function grantRole(bytes32 role, address account) public virtual override(AccessControlUpgradeable, IAccessControl) {\n        if (role == DEFAULT_ADMIN_ROLE) {\n            revert AccessControlEnforcedDefaultAdminRules();\n        }\n        super.grantRole(role, account);\n    }\n\n    /**\n     * @dev See {AccessControl-revokeRole}. Reverts for `DEFAULT_ADMIN_ROLE`.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override(AccessControlUpgradeable, IAccessControl) {\n        if (role == DEFAULT_ADMIN_ROLE) {\n            revert AccessControlEnforcedDefaultAdminRules();\n        }\n        super.revokeRole(role, account);\n    }\n\n    /**\n     * @dev See {AccessControl-renounceRole}.\n     *\n     * For the `DEFAULT_ADMIN_ROLE`, it only allows renouncing in two steps by first calling\n     * {beginDefaultAdminTransfer} to the `address(0)`, so it's required that the {pendingDefaultAdmin} schedule\n     * has also passed when calling this function.\n     *\n     * After its execution, it will not be possible to call `onlyRole(DEFAULT_ADMIN_ROLE)` functions.\n     *\n     * NOTE: Renouncing `DEFAULT_ADMIN_ROLE` will leave the contract without a {defaultAdmin},\n     * thereby disabling any functionality that is only available for it, and the possibility of reassigning a\n     * non-administrated role.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override(AccessControlUpgradeable, IAccessControl) {\n        AccessControlDefaultAdminRulesStorage storage $ = _getAccessControlDefaultAdminRulesStorage();\n        if (role == DEFAULT_ADMIN_ROLE && account == defaultAdmin()) {\n            (address newDefaultAdmin, uint48 schedule) = pendingDefaultAdmin();\n            if (newDefaultAdmin != address(0) || !_isScheduleSet(schedule) || !_hasSchedulePassed(schedule)) {\n                revert AccessControlEnforcedDefaultAdminDelay(schedule);\n            }\n            delete $._pendingDefaultAdminSchedule;\n        }\n        super.renounceRole(role, account);\n    }\n\n    /**\n     * @dev See {AccessControl-_grantRole}.\n     *\n     * For `DEFAULT_ADMIN_ROLE`, it only allows granting if there isn't already a {defaultAdmin} or if the\n     * role has been previously renounced.\n     *\n     * NOTE: Exposing this function through another mechanism may make the `DEFAULT_ADMIN_ROLE`\n     * assignable again. Make sure to guarantee this is the expected behavior in your implementation.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override returns (bool) {\n        AccessControlDefaultAdminRulesStorage storage $ = _getAccessControlDefaultAdminRulesStorage();\n        if (role == DEFAULT_ADMIN_ROLE) {\n            if (defaultAdmin() != address(0)) {\n                revert AccessControlEnforcedDefaultAdminRules();\n            }\n            $._currentDefaultAdmin = account;\n        }\n        return super._grantRole(role, account);\n    }\n\n    /**\n     * @dev See {AccessControl-_revokeRole}.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override returns (bool) {\n        AccessControlDefaultAdminRulesStorage storage $ = _getAccessControlDefaultAdminRulesStorage();\n        if (role == DEFAULT_ADMIN_ROLE && account == defaultAdmin()) {\n            delete $._currentDefaultAdmin;\n        }\n        return super._revokeRole(role, account);\n    }\n\n    /**\n     * @dev See {AccessControl-_setRoleAdmin}. Reverts for `DEFAULT_ADMIN_ROLE`.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual override {\n        if (role == DEFAULT_ADMIN_ROLE) {\n            revert AccessControlEnforcedDefaultAdminRules();\n        }\n        super._setRoleAdmin(role, adminRole);\n    }\n\n    ///\n    /// AccessControlDefaultAdminRules accessors\n    ///\n\n    /**\n     * @inheritdoc IAccessControlDefaultAdminRules\n     */\n    function defaultAdmin() public view virtual returns (address) {\n        AccessControlDefaultAdminRulesStorage storage $ = _getAccessControlDefaultAdminRulesStorage();\n        return $._currentDefaultAdmin;\n    }\n\n    /**\n     * @inheritdoc IAccessControlDefaultAdminRules\n     */\n    function pendingDefaultAdmin() public view virtual returns (address newAdmin, uint48 schedule) {\n        AccessControlDefaultAdminRulesStorage storage $ = _getAccessControlDefaultAdminRulesStorage();\n        return ($._pendingDefaultAdmin, $._pendingDefaultAdminSchedule);\n    }\n\n    /**\n     * @inheritdoc IAccessControlDefaultAdminRules\n     */\n    function defaultAdminDelay() public view virtual returns (uint48) {\n        AccessControlDefaultAdminRulesStorage storage $ = _getAccessControlDefaultAdminRulesStorage();\n        uint48 schedule = $._pendingDelaySchedule;\n        return (_isScheduleSet(schedule) && _hasSchedulePassed(schedule)) ? $._pendingDelay : $._currentDelay;\n    }\n\n    /**\n     * @inheritdoc IAccessControlDefaultAdminRules\n     */\n    function pendingDefaultAdminDelay() public view virtual returns (uint48 newDelay, uint48 schedule) {\n        AccessControlDefaultAdminRulesStorage storage $ = _getAccessControlDefaultAdminRulesStorage();\n        schedule = $._pendingDelaySchedule;\n        return (_isScheduleSet(schedule) && !_hasSchedulePassed(schedule)) ? ($._pendingDelay, schedule) : (0, 0);\n    }\n\n    /**\n     * @inheritdoc IAccessControlDefaultAdminRules\n     */\n    function defaultAdminDelayIncreaseWait() public view virtual returns (uint48) {\n        return 5 days;\n    }\n\n    ///\n    /// AccessControlDefaultAdminRules public and internal setters for defaultAdmin/pendingDefaultAdmin\n    ///\n\n    /**\n     * @inheritdoc IAccessControlDefaultAdminRules\n     */\n    function beginDefaultAdminTransfer(address newAdmin) public virtual onlyRole(DEFAULT_ADMIN_ROLE) {\n        _beginDefaultAdminTransfer(newAdmin);\n    }\n\n    /**\n     * @dev See {beginDefaultAdminTransfer}.\n     *\n     * Internal function without access restriction.\n     */\n    function _beginDefaultAdminTransfer(address newAdmin) internal virtual {\n        uint48 newSchedule = SafeCast.toUint48(block.timestamp) + defaultAdminDelay();\n        _setPendingDefaultAdmin(newAdmin, newSchedule);\n        emit DefaultAdminTransferScheduled(newAdmin, newSchedule);\n    }\n\n    /**\n     * @inheritdoc IAccessControlDefaultAdminRules\n     */\n    function cancelDefaultAdminTransfer() public virtual onlyRole(DEFAULT_ADMIN_ROLE) {\n        _cancelDefaultAdminTransfer();\n    }\n\n    /**\n     * @dev See {cancelDefaultAdminTransfer}.\n     *\n     * Internal function without access restriction.\n     */\n    function _cancelDefaultAdminTransfer() internal virtual {\n        _setPendingDefaultAdmin(address(0), 0);\n    }\n\n    /**\n     * @inheritdoc IAccessControlDefaultAdminRules\n     */\n    function acceptDefaultAdminTransfer() public virtual {\n        (address newDefaultAdmin, ) = pendingDefaultAdmin();\n        if (_msgSender() != newDefaultAdmin) {\n            // Enforce newDefaultAdmin explicit acceptance.\n            revert AccessControlInvalidDefaultAdmin(_msgSender());\n        }\n        _acceptDefaultAdminTransfer();\n    }\n\n    /**\n     * @dev See {acceptDefaultAdminTransfer}.\n     *\n     * Internal function without access restriction.\n     */\n    function _acceptDefaultAdminTransfer() internal virtual {\n        AccessControlDefaultAdminRulesStorage storage $ = _getAccessControlDefaultAdminRulesStorage();\n        (address newAdmin, uint48 schedule) = pendingDefaultAdmin();\n        if (!_isScheduleSet(schedule) || !_hasSchedulePassed(schedule)) {\n            revert AccessControlEnforcedDefaultAdminDelay(schedule);\n        }\n        _revokeRole(DEFAULT_ADMIN_ROLE, defaultAdmin());\n        _grantRole(DEFAULT_ADMIN_ROLE, newAdmin);\n        delete $._pendingDefaultAdmin;\n        delete $._pendingDefaultAdminSchedule;\n    }\n\n    ///\n    /// AccessControlDefaultAdminRules public and internal setters for defaultAdminDelay/pendingDefaultAdminDelay\n    ///\n\n    /**\n     * @inheritdoc IAccessControlDefaultAdminRules\n     */\n    function changeDefaultAdminDelay(uint48 newDelay) public virtual onlyRole(DEFAULT_ADMIN_ROLE) {\n        _changeDefaultAdminDelay(newDelay);\n    }\n\n    /**\n     * @dev See {changeDefaultAdminDelay}.\n     *\n     * Internal function without access restriction.\n     */\n    function _changeDefaultAdminDelay(uint48 newDelay) internal virtual {\n        uint48 newSchedule = SafeCast.toUint48(block.timestamp) + _delayChangeWait(newDelay);\n        _setPendingDelay(newDelay, newSchedule);\n        emit DefaultAdminDelayChangeScheduled(newDelay, newSchedule);\n    }\n\n    /**\n     * @inheritdoc IAccessControlDefaultAdminRules\n     */\n    function rollbackDefaultAdminDelay() public virtual onlyRole(DEFAULT_ADMIN_ROLE) {\n        _rollbackDefaultAdminDelay();\n    }\n\n    /**\n     * @dev See {rollbackDefaultAdminDelay}.\n     *\n     * Internal function without access restriction.\n     */\n    function _rollbackDefaultAdminDelay() internal virtual {\n        _setPendingDelay(0, 0);\n    }\n\n    /**\n     * @dev Returns the amount of seconds to wait after the `newDelay` will\n     * become the new {defaultAdminDelay}.\n     *\n     * The value returned guarantees that if the delay is reduced, it will go into effect\n     * after a wait that honors the previously set delay.\n     *\n     * See {defaultAdminDelayIncreaseWait}.\n     */\n    function _delayChangeWait(uint48 newDelay) internal view virtual returns (uint48) {\n        uint48 currentDelay = defaultAdminDelay();\n\n        // When increasing the delay, we schedule the delay change to occur after a period of \"new delay\" has passed, up\n        // to a maximum given by defaultAdminDelayIncreaseWait, by default 5 days. For example, if increasing from 1 day\n        // to 3 days, the new delay will come into effect after 3 days. If increasing from 1 day to 10 days, the new\n        // delay will come into effect after 5 days. The 5 day wait period is intended to be able to fix an error like\n        // using milliseconds instead of seconds.\n        //\n        // When decreasing the delay, we wait the difference between \"current delay\" and \"new delay\". This guarantees\n        // that an admin transfer cannot be made faster than \"current delay\" at the time the delay change is scheduled.\n        // For example, if decreasing from 10 days to 3 days, the new delay will come into effect after 7 days.\n        return\n            newDelay > currentDelay\n                ? uint48(Math.min(newDelay, defaultAdminDelayIncreaseWait())) // no need to safecast, both inputs are uint48\n                : currentDelay - newDelay;\n    }\n\n    ///\n    /// Private setters\n    ///\n\n    /**\n     * @dev Setter of the tuple for pending admin and its schedule.\n     *\n     * May emit a DefaultAdminTransferCanceled event.\n     */\n    function _setPendingDefaultAdmin(address newAdmin, uint48 newSchedule) private {\n        AccessControlDefaultAdminRulesStorage storage $ = _getAccessControlDefaultAdminRulesStorage();\n        (, uint48 oldSchedule) = pendingDefaultAdmin();\n\n        $._pendingDefaultAdmin = newAdmin;\n        $._pendingDefaultAdminSchedule = newSchedule;\n\n        // An `oldSchedule` from `pendingDefaultAdmin()` is only set if it hasn't been accepted.\n        if (_isScheduleSet(oldSchedule)) {\n            // Emit for implicit cancellations when another default admin was scheduled.\n            emit DefaultAdminTransferCanceled();\n        }\n    }\n\n    /**\n     * @dev Setter of the tuple for pending delay and its schedule.\n     *\n     * May emit a DefaultAdminDelayChangeCanceled event.\n     */\n    function _setPendingDelay(uint48 newDelay, uint48 newSchedule) private {\n        AccessControlDefaultAdminRulesStorage storage $ = _getAccessControlDefaultAdminRulesStorage();\n        uint48 oldSchedule = $._pendingDelaySchedule;\n\n        if (_isScheduleSet(oldSchedule)) {\n            if (_hasSchedulePassed(oldSchedule)) {\n                // Materialize a virtual delay\n                $._currentDelay = $._pendingDelay;\n            } else {\n                // Emit for implicit cancellations when another delay was scheduled.\n                emit DefaultAdminDelayChangeCanceled();\n            }\n        }\n\n        $._pendingDelay = newDelay;\n        $._pendingDelaySchedule = newSchedule;\n    }\n\n    ///\n    /// Private helpers\n    ///\n\n    /**\n     * @dev Defines if an `schedule` is considered set. For consistency purposes.\n     */\n    function _isScheduleSet(uint48 schedule) private pure returns (bool) {\n        return schedule != 0;\n    }\n\n    /**\n     * @dev Defines if an `schedule` is considered passed. For consistency purposes.\n     */\n    function _hasSchedulePassed(uint48 schedule) private view returns (bool) {\n        return schedule < block.timestamp;\n    }\n}\n"},"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reinitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 && isTopLevelCall;\n        bool construction = initialized == 1 && address(this).code.length == 0;\n\n        if (!initialSetup && !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized >= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Pointer to storage slot. Allows integrators to override it with a custom storage location.\n     *\n     * NOTE: Consider following the ERC-7201 formula to derive storage locations.\n     */\n    function _initializableStorageSlot() internal pure virtual returns (bytes32) {\n        return INITIALIZABLE_STORAGE;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        bytes32 slot = _initializableStorageSlot();\n        assembly {\n            $.slot := slot\n        }\n    }\n}\n"},"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport {ContextUpgradeable} from \"../../utils/ContextUpgradeable.sol\";\nimport {IERC20Errors} from \"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\";\nimport {Initializable} from \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC-20\n * applications.\n */\nabstract contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20, IERC20Metadata, IERC20Errors {\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC20\n    struct ERC20Storage {\n        mapping(address account => uint256) _balances;\n\n        mapping(address account => mapping(address spender => uint256)) _allowances;\n\n        uint256 _totalSupply;\n\n        string _name;\n        string _symbol;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.ERC20\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant ERC20StorageLocation = 0x52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00;\n\n    function _getERC20Storage() private pure returns (ERC20Storage storage $) {\n        assembly {\n            $.slot := ERC20StorageLocation\n        }\n    }\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * Both values are immutable: they can only be set once during construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        ERC20Storage storage $ = _getERC20Storage();\n        $._name = name_;\n        $._symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        ERC20Storage storage $ = _getERC20Storage();\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            $._totalSupply += value;\n        } else {\n            uint256 fromBalance = $._balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                $._balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                $._totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                $._balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     *\n     * ```solidity\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        ERC20Storage storage $ = _getERC20Storage();\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        $._allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner`'s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance < type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"},"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/ERC20PermitUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/ERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20Permit} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\";\nimport {ERC20Upgradeable} from \"../ERC20Upgradeable.sol\";\nimport {ECDSA} from \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport {EIP712Upgradeable} from \"../../../utils/cryptography/EIP712Upgradeable.sol\";\nimport {NoncesUpgradeable} from \"../../../utils/NoncesUpgradeable.sol\";\nimport {Initializable} from \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the ERC-20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[ERC-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC-20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\nabstract contract ERC20PermitUpgradeable is Initializable, ERC20Upgradeable, IERC20Permit, EIP712Upgradeable, NoncesUpgradeable {\n    bytes32 private constant PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n\n    /**\n     * @dev Permit deadline has expired.\n     */\n    error ERC2612ExpiredSignature(uint256 deadline);\n\n    /**\n     * @dev Mismatched signature.\n     */\n    error ERC2612InvalidSigner(address signer, address owner);\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC-20 token name.\n     */\n    function __ERC20Permit_init(string memory name) internal onlyInitializing {\n        __EIP712_init_unchained(name, \"1\");\n    }\n\n    function __ERC20Permit_init_unchained(string memory) internal onlyInitializing {}\n\n    /**\n     * @inheritdoc IERC20Permit\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual {\n        if (block.timestamp > deadline) {\n            revert ERC2612ExpiredSignature(deadline);\n        }\n\n        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSA.recover(hash, v, r, s);\n        if (signer != owner) {\n            revert ERC2612InvalidSigner(signer, owner);\n        }\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @inheritdoc IERC20Permit\n     */\n    function nonces(address owner) public view virtual override(IERC20Permit, NoncesUpgradeable) returns (uint256) {\n        return super.nonces(owner);\n    }\n\n    /**\n     * @inheritdoc IERC20Permit\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n}\n"},"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"},"lib/openzeppelin-contracts-upgradeable/contracts/utils/NoncesUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Nonces.sol)\npragma solidity ^0.8.20;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides tracking nonces for addresses. Nonces will only increment.\n */\nabstract contract NoncesUpgradeable is Initializable {\n    /**\n     * @dev The nonce used for an `account` is not the expected current nonce.\n     */\n    error InvalidAccountNonce(address account, uint256 currentNonce);\n\n    /// @custom:storage-location erc7201:openzeppelin.storage.Nonces\n    struct NoncesStorage {\n        mapping(address account => uint256) _nonces;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Nonces\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant NoncesStorageLocation = 0x5ab42ced628888259c08ac98db1eb0cf702fc1501344311d8b100cd1bfe4bb00;\n\n    function _getNoncesStorage() private pure returns (NoncesStorage storage $) {\n        assembly {\n            $.slot := NoncesStorageLocation\n        }\n    }\n\n    function __Nonces_init() internal onlyInitializing {\n    }\n\n    function __Nonces_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Returns the next unused nonce for an address.\n     */\n    function nonces(address owner) public view virtual returns (uint256) {\n        NoncesStorage storage $ = _getNoncesStorage();\n        return $._nonces[owner];\n    }\n\n    /**\n     * @dev Consumes a nonce.\n     *\n     * Returns the current value and increments nonce.\n     */\n    function _useNonce(address owner) internal virtual returns (uint256) {\n        NoncesStorage storage $ = _getNoncesStorage();\n        // For each account, the nonce has an initial value of 0, can only be incremented by one, and cannot be\n        // decremented or reset. This guarantees that the nonce never overflows.\n        unchecked {\n            // It is important to do x++ and not ++x here.\n            return $._nonces[owner]++;\n        }\n    }\n\n    /**\n     * @dev Same as {_useNonce} but checking that `nonce` is the next valid for `owner`.\n     */\n    function _useCheckedNonce(address owner, uint256 nonce) internal virtual {\n        uint256 current = _useNonce(owner);\n        if (nonce != current) {\n            revert InvalidAccountNonce(owner, current);\n        }\n    }\n}\n"},"lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/EIP712Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/cryptography/EIP712.sol)\n\npragma solidity ^0.8.20;\n\nimport {MessageHashUtils} from \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\";\nimport {IERC5267} from \"@openzeppelin/contracts/interfaces/IERC5267.sol\";\nimport {Initializable} from \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP-712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP-712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\n */\nabstract contract EIP712Upgradeable is Initializable, IERC5267 {\n    bytes32 private constant TYPE_HASH =\n        keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n    /// @custom:storage-location erc7201:openzeppelin.storage.EIP712\n    struct EIP712Storage {\n        /// @custom:oz-renamed-from _HASHED_NAME\n        bytes32 _hashedName;\n        /// @custom:oz-renamed-from _HASHED_VERSION\n        bytes32 _hashedVersion;\n\n        string _name;\n        string _version;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.EIP712\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant EIP712StorageLocation = 0xa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d100;\n\n    function _getEIP712Storage() private pure returns (EIP712Storage storage $) {\n        assembly {\n            $.slot := EIP712StorageLocation\n        }\n    }\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP-712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\n        __EIP712_init_unchained(name, version);\n    }\n\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\n        EIP712Storage storage $ = _getEIP712Storage();\n        $._name = name;\n        $._version = version;\n\n        // Reset prior values in storage if upgrading\n        $._hashedName = 0;\n        $._hashedVersion = 0;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        return _buildDomainSeparator();\n    }\n\n    function _buildDomainSeparator() private view returns (bytes32) {\n        return keccak256(abi.encode(TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash(), block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n\n    /**\n     * @inheritdoc IERC5267\n     */\n    function eip712Domain()\n        public\n        view\n        virtual\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        )\n    {\n        EIP712Storage storage $ = _getEIP712Storage();\n        // If the hashed name and version in storage are non-zero, the contract hasn't been properly initialized\n        // and the EIP712 domain is not reliable, as it will be missing name and version.\n        require($._hashedName == 0 && $._hashedVersion == 0, \"EIP712: Uninitialized\");\n\n        return (\n            hex\"0f\", // 01111\n            _EIP712Name(),\n            _EIP712Version(),\n            block.chainid,\n            address(this),\n            bytes32(0),\n            new uint256[](0)\n        );\n    }\n\n    /**\n     * @dev The name parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712Name() internal view virtual returns (string memory) {\n        EIP712Storage storage $ = _getEIP712Storage();\n        return $._name;\n    }\n\n    /**\n     * @dev The version parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712Version() internal view virtual returns (string memory) {\n        EIP712Storage storage $ = _getEIP712Storage();\n        return $._version;\n    }\n\n    /**\n     * @dev The hash of the name parameter for the EIP712 domain.\n     *\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Name` instead.\n     */\n    function _EIP712NameHash() internal view returns (bytes32) {\n        EIP712Storage storage $ = _getEIP712Storage();\n        string memory name = _EIP712Name();\n        if (bytes(name).length > 0) {\n            return keccak256(bytes(name));\n        } else {\n            // If the name is empty, the contract may have been upgraded without initializing the new storage.\n            // We return the name hash in storage if non-zero, otherwise we assume the name is empty by design.\n            bytes32 hashedName = $._hashedName;\n            if (hashedName != 0) {\n                return hashedName;\n            } else {\n                return keccak256(\"\");\n            }\n        }\n    }\n\n    /**\n     * @dev The hash of the version parameter for the EIP712 domain.\n     *\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Version` instead.\n     */\n    function _EIP712VersionHash() internal view returns (bytes32) {\n        EIP712Storage storage $ = _getEIP712Storage();\n        string memory version = _EIP712Version();\n        if (bytes(version).length > 0) {\n            return keccak256(bytes(version));\n        } else {\n            // If the version is empty, the contract may have been upgraded without initializing the new storage.\n            // We return the version hash in storage if non-zero, otherwise we assume the version is empty by design.\n            bytes32 hashedVersion = $._hashedVersion;\n            if (hashedVersion != 0) {\n                return hashedVersion;\n            } else {\n                return keccak256(\"\");\n            }\n        }\n    }\n}\n"},"lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport {Initializable} from \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/AccessControl.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"./IAccessControl.sol\";\nimport {Context} from \"../utils/Context.sol\";\nimport {ERC165} from \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 role => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (!hasRole(role, account)) {\n            _roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` from `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (hasRole(role, account)) {\n            _roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/IAccessControl.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (access/IAccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControl declared to support ERC-165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted to signal this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n"},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable2Step.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (access/Ownable2Step.sol)\n\npragma solidity ^0.8.20;\n\nimport {Ownable} from \"./Ownable.sol\";\n\n/**\n * @dev Contract module which provides access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * This extension of the {Ownable} contract includes a two-step mechanism to transfer\n * ownership, where the new owner must call {acceptOwnership} in order to replace the\n * old one. This can help prevent common mistakes, such as transfers of ownership to\n * incorrect accounts, or to contracts that are unable to interact with the\n * permission system.\n *\n * The initial owner is specified at deployment time in the constructor for `Ownable`. This\n * can later be changed with {transferOwnership} and {acceptOwnership}.\n *\n * This module is used through inheritance. It will make available all functions\n * from parent (Ownable).\n */\nabstract contract Ownable2Step is Ownable {\n    address private _pendingOwner;\n\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Returns the address of the pending owner.\n     */\n    function pendingOwner() public view virtual returns (address) {\n        return _pendingOwner;\n    }\n\n    /**\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\n     * Can only be called by the current owner.\n     *\n     * Setting `newOwner` to the zero address is allowed; this can be used to cancel an initiated ownership transfer.\n     */\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\n        _pendingOwner = newOwner;\n        emit OwnershipTransferStarted(owner(), newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual override {\n        delete _pendingOwner;\n        super._transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev The new owner accepts the ownership transfer.\n     */\n    function acceptOwnership() public virtual {\n        address sender = _msgSender();\n        if (pendingOwner() != sender) {\n            revert OwnableUnauthorizedAccount(sender);\n        }\n        _transferOwnership(sender);\n    }\n}\n"},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/extensions/AccessControlDefaultAdminRules.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/extensions/AccessControlDefaultAdminRules.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControlDefaultAdminRules} from \"./IAccessControlDefaultAdminRules.sol\";\nimport {AccessControl, IAccessControl} from \"../AccessControl.sol\";\nimport {SafeCast} from \"../../utils/math/SafeCast.sol\";\nimport {Math} from \"../../utils/math/Math.sol\";\nimport {IERC5313} from \"../../interfaces/IERC5313.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows specifying special rules to manage\n * the `DEFAULT_ADMIN_ROLE` holder, which is a sensitive role with special permissions\n * over other roles that may potentially have privileged rights in the system.\n *\n * If a specific role doesn't have an admin role assigned, the holder of the\n * `DEFAULT_ADMIN_ROLE` will have the ability to grant it and revoke it.\n *\n * This contract implements the following risk mitigations on top of {AccessControl}:\n *\n * * Only one account holds the `DEFAULT_ADMIN_ROLE` since deployment until it's potentially renounced.\n * * Enforces a 2-step process to transfer the `DEFAULT_ADMIN_ROLE` to another account.\n * * Enforces a configurable delay between the two steps, with the ability to cancel before the transfer is accepted.\n * * The delay can be changed by scheduling, see {changeDefaultAdminDelay}.\n * * It is not possible to use another role to manage the `DEFAULT_ADMIN_ROLE`.\n *\n * Example usage:\n *\n * ```solidity\n * contract MyToken is AccessControlDefaultAdminRules {\n *   constructor() AccessControlDefaultAdminRules(\n *     3 days,\n *     msg.sender // Explicit initial `DEFAULT_ADMIN_ROLE` holder\n *    ) {}\n * }\n * ```\n */\nabstract contract AccessControlDefaultAdminRules is IAccessControlDefaultAdminRules, IERC5313, AccessControl {\n    // pending admin pair read/written together frequently\n    address private _pendingDefaultAdmin;\n    uint48 private _pendingDefaultAdminSchedule; // 0 == unset\n\n    uint48 private _currentDelay;\n    address private _currentDefaultAdmin;\n\n    // pending delay pair read/written together frequently\n    uint48 private _pendingDelay;\n    uint48 private _pendingDelaySchedule; // 0 == unset\n\n    /**\n     * @dev Sets the initial values for {defaultAdminDelay} and {defaultAdmin} address.\n     */\n    constructor(uint48 initialDelay, address initialDefaultAdmin) {\n        if (initialDefaultAdmin == address(0)) {\n            revert AccessControlInvalidDefaultAdmin(address(0));\n        }\n        _currentDelay = initialDelay;\n        _grantRole(DEFAULT_ADMIN_ROLE, initialDefaultAdmin);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlDefaultAdminRules).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC5313-owner}.\n     */\n    function owner() public view virtual returns (address) {\n        return defaultAdmin();\n    }\n\n    ///\n    /// Override AccessControl role management\n    ///\n\n    /**\n     * @dev See {AccessControl-grantRole}. Reverts for `DEFAULT_ADMIN_ROLE`.\n     */\n    function grantRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\n        if (role == DEFAULT_ADMIN_ROLE) {\n            revert AccessControlEnforcedDefaultAdminRules();\n        }\n        super.grantRole(role, account);\n    }\n\n    /**\n     * @dev See {AccessControl-revokeRole}. Reverts for `DEFAULT_ADMIN_ROLE`.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\n        if (role == DEFAULT_ADMIN_ROLE) {\n            revert AccessControlEnforcedDefaultAdminRules();\n        }\n        super.revokeRole(role, account);\n    }\n\n    /**\n     * @dev See {AccessControl-renounceRole}.\n     *\n     * For the `DEFAULT_ADMIN_ROLE`, it only allows renouncing in two steps by first calling\n     * {beginDefaultAdminTransfer} to the `address(0)`, so it's required that the {pendingDefaultAdmin} schedule\n     * has also passed when calling this function.\n     *\n     * After its execution, it will not be possible to call `onlyRole(DEFAULT_ADMIN_ROLE)` functions.\n     *\n     * NOTE: Renouncing `DEFAULT_ADMIN_ROLE` will leave the contract without a {defaultAdmin},\n     * thereby disabling any functionality that is only available for it, and the possibility of reassigning a\n     * non-administrated role.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\n        if (role == DEFAULT_ADMIN_ROLE && account == defaultAdmin()) {\n            (address newDefaultAdmin, uint48 schedule) = pendingDefaultAdmin();\n            if (newDefaultAdmin != address(0) || !_isScheduleSet(schedule) || !_hasSchedulePassed(schedule)) {\n                revert AccessControlEnforcedDefaultAdminDelay(schedule);\n            }\n            delete _pendingDefaultAdminSchedule;\n        }\n        super.renounceRole(role, account);\n    }\n\n    /**\n     * @dev See {AccessControl-_grantRole}.\n     *\n     * For `DEFAULT_ADMIN_ROLE`, it only allows granting if there isn't already a {defaultAdmin} or if the\n     * role has been previously renounced.\n     *\n     * NOTE: Exposing this function through another mechanism may make the `DEFAULT_ADMIN_ROLE`\n     * assignable again. Make sure to guarantee this is the expected behavior in your implementation.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override returns (bool) {\n        if (role == DEFAULT_ADMIN_ROLE) {\n            if (defaultAdmin() != address(0)) {\n                revert AccessControlEnforcedDefaultAdminRules();\n            }\n            _currentDefaultAdmin = account;\n        }\n        return super._grantRole(role, account);\n    }\n\n    /**\n     * @dev See {AccessControl-_revokeRole}.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override returns (bool) {\n        if (role == DEFAULT_ADMIN_ROLE && account == defaultAdmin()) {\n            delete _currentDefaultAdmin;\n        }\n        return super._revokeRole(role, account);\n    }\n\n    /**\n     * @dev See {AccessControl-_setRoleAdmin}. Reverts for `DEFAULT_ADMIN_ROLE`.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual override {\n        if (role == DEFAULT_ADMIN_ROLE) {\n            revert AccessControlEnforcedDefaultAdminRules();\n        }\n        super._setRoleAdmin(role, adminRole);\n    }\n\n    ///\n    /// AccessControlDefaultAdminRules accessors\n    ///\n\n    /**\n     * @inheritdoc IAccessControlDefaultAdminRules\n     */\n    function defaultAdmin() public view virtual returns (address) {\n        return _currentDefaultAdmin;\n    }\n\n    /**\n     * @inheritdoc IAccessControlDefaultAdminRules\n     */\n    function pendingDefaultAdmin() public view virtual returns (address newAdmin, uint48 schedule) {\n        return (_pendingDefaultAdmin, _pendingDefaultAdminSchedule);\n    }\n\n    /**\n     * @inheritdoc IAccessControlDefaultAdminRules\n     */\n    function defaultAdminDelay() public view virtual returns (uint48) {\n        uint48 schedule = _pendingDelaySchedule;\n        return (_isScheduleSet(schedule) && _hasSchedulePassed(schedule)) ? _pendingDelay : _currentDelay;\n    }\n\n    /**\n     * @inheritdoc IAccessControlDefaultAdminRules\n     */\n    function pendingDefaultAdminDelay() public view virtual returns (uint48 newDelay, uint48 schedule) {\n        schedule = _pendingDelaySchedule;\n        return (_isScheduleSet(schedule) && !_hasSchedulePassed(schedule)) ? (_pendingDelay, schedule) : (0, 0);\n    }\n\n    /**\n     * @inheritdoc IAccessControlDefaultAdminRules\n     */\n    function defaultAdminDelayIncreaseWait() public view virtual returns (uint48) {\n        return 5 days;\n    }\n\n    ///\n    /// AccessControlDefaultAdminRules public and internal setters for defaultAdmin/pendingDefaultAdmin\n    ///\n\n    /**\n     * @inheritdoc IAccessControlDefaultAdminRules\n     */\n    function beginDefaultAdminTransfer(address newAdmin) public virtual onlyRole(DEFAULT_ADMIN_ROLE) {\n        _beginDefaultAdminTransfer(newAdmin);\n    }\n\n    /**\n     * @dev See {beginDefaultAdminTransfer}.\n     *\n     * Internal function without access restriction.\n     */\n    function _beginDefaultAdminTransfer(address newAdmin) internal virtual {\n        uint48 newSchedule = SafeCast.toUint48(block.timestamp) + defaultAdminDelay();\n        _setPendingDefaultAdmin(newAdmin, newSchedule);\n        emit DefaultAdminTransferScheduled(newAdmin, newSchedule);\n    }\n\n    /**\n     * @inheritdoc IAccessControlDefaultAdminRules\n     */\n    function cancelDefaultAdminTransfer() public virtual onlyRole(DEFAULT_ADMIN_ROLE) {\n        _cancelDefaultAdminTransfer();\n    }\n\n    /**\n     * @dev See {cancelDefaultAdminTransfer}.\n     *\n     * Internal function without access restriction.\n     */\n    function _cancelDefaultAdminTransfer() internal virtual {\n        _setPendingDefaultAdmin(address(0), 0);\n    }\n\n    /**\n     * @inheritdoc IAccessControlDefaultAdminRules\n     */\n    function acceptDefaultAdminTransfer() public virtual {\n        (address newDefaultAdmin, ) = pendingDefaultAdmin();\n        if (_msgSender() != newDefaultAdmin) {\n            // Enforce newDefaultAdmin explicit acceptance.\n            revert AccessControlInvalidDefaultAdmin(_msgSender());\n        }\n        _acceptDefaultAdminTransfer();\n    }\n\n    /**\n     * @dev See {acceptDefaultAdminTransfer}.\n     *\n     * Internal function without access restriction.\n     */\n    function _acceptDefaultAdminTransfer() internal virtual {\n        (address newAdmin, uint48 schedule) = pendingDefaultAdmin();\n        if (!_isScheduleSet(schedule) || !_hasSchedulePassed(schedule)) {\n            revert AccessControlEnforcedDefaultAdminDelay(schedule);\n        }\n        _revokeRole(DEFAULT_ADMIN_ROLE, defaultAdmin());\n        _grantRole(DEFAULT_ADMIN_ROLE, newAdmin);\n        delete _pendingDefaultAdmin;\n        delete _pendingDefaultAdminSchedule;\n    }\n\n    ///\n    /// AccessControlDefaultAdminRules public and internal setters for defaultAdminDelay/pendingDefaultAdminDelay\n    ///\n\n    /**\n     * @inheritdoc IAccessControlDefaultAdminRules\n     */\n    function changeDefaultAdminDelay(uint48 newDelay) public virtual onlyRole(DEFAULT_ADMIN_ROLE) {\n        _changeDefaultAdminDelay(newDelay);\n    }\n\n    /**\n     * @dev See {changeDefaultAdminDelay}.\n     *\n     * Internal function without access restriction.\n     */\n    function _changeDefaultAdminDelay(uint48 newDelay) internal virtual {\n        uint48 newSchedule = SafeCast.toUint48(block.timestamp) + _delayChangeWait(newDelay);\n        _setPendingDelay(newDelay, newSchedule);\n        emit DefaultAdminDelayChangeScheduled(newDelay, newSchedule);\n    }\n\n    /**\n     * @inheritdoc IAccessControlDefaultAdminRules\n     */\n    function rollbackDefaultAdminDelay() public virtual onlyRole(DEFAULT_ADMIN_ROLE) {\n        _rollbackDefaultAdminDelay();\n    }\n\n    /**\n     * @dev See {rollbackDefaultAdminDelay}.\n     *\n     * Internal function without access restriction.\n     */\n    function _rollbackDefaultAdminDelay() internal virtual {\n        _setPendingDelay(0, 0);\n    }\n\n    /**\n     * @dev Returns the amount of seconds to wait after the `newDelay` will\n     * become the new {defaultAdminDelay}.\n     *\n     * The value returned guarantees that if the delay is reduced, it will go into effect\n     * after a wait that honors the previously set delay.\n     *\n     * See {defaultAdminDelayIncreaseWait}.\n     */\n    function _delayChangeWait(uint48 newDelay) internal view virtual returns (uint48) {\n        uint48 currentDelay = defaultAdminDelay();\n\n        // When increasing the delay, we schedule the delay change to occur after a period of \"new delay\" has passed, up\n        // to a maximum given by defaultAdminDelayIncreaseWait, by default 5 days. For example, if increasing from 1 day\n        // to 3 days, the new delay will come into effect after 3 days. If increasing from 1 day to 10 days, the new\n        // delay will come into effect after 5 days. The 5 day wait period is intended to be able to fix an error like\n        // using milliseconds instead of seconds.\n        //\n        // When decreasing the delay, we wait the difference between \"current delay\" and \"new delay\". This guarantees\n        // that an admin transfer cannot be made faster than \"current delay\" at the time the delay change is scheduled.\n        // For example, if decreasing from 10 days to 3 days, the new delay will come into effect after 7 days.\n        return\n            newDelay > currentDelay\n                ? uint48(Math.min(newDelay, defaultAdminDelayIncreaseWait())) // no need to safecast, both inputs are uint48\n                : currentDelay - newDelay;\n    }\n\n    ///\n    /// Private setters\n    ///\n\n    /**\n     * @dev Setter of the tuple for pending admin and its schedule.\n     *\n     * May emit a DefaultAdminTransferCanceled event.\n     */\n    function _setPendingDefaultAdmin(address newAdmin, uint48 newSchedule) private {\n        (, uint48 oldSchedule) = pendingDefaultAdmin();\n\n        _pendingDefaultAdmin = newAdmin;\n        _pendingDefaultAdminSchedule = newSchedule;\n\n        // An `oldSchedule` from `pendingDefaultAdmin()` is only set if it hasn't been accepted.\n        if (_isScheduleSet(oldSchedule)) {\n            // Emit for implicit cancellations when another default admin was scheduled.\n            emit DefaultAdminTransferCanceled();\n        }\n    }\n\n    /**\n     * @dev Setter of the tuple for pending delay and its schedule.\n     *\n     * May emit a DefaultAdminDelayChangeCanceled event.\n     */\n    function _setPendingDelay(uint48 newDelay, uint48 newSchedule) private {\n        uint48 oldSchedule = _pendingDelaySchedule;\n\n        if (_isScheduleSet(oldSchedule)) {\n            if (_hasSchedulePassed(oldSchedule)) {\n                // Materialize a virtual delay\n                _currentDelay = _pendingDelay;\n            } else {\n                // Emit for implicit cancellations when another delay was scheduled.\n                emit DefaultAdminDelayChangeCanceled();\n            }\n        }\n\n        _pendingDelay = newDelay;\n        _pendingDelaySchedule = newSchedule;\n    }\n\n    ///\n    /// Private helpers\n    ///\n\n    /**\n     * @dev Defines if an `schedule` is considered set. For consistency purposes.\n     */\n    function _isScheduleSet(uint48 schedule) private pure returns (bool) {\n        return schedule != 0;\n    }\n\n    /**\n     * @dev Defines if an `schedule` is considered passed. For consistency purposes.\n     */\n    function _hasSchedulePassed(uint48 schedule) private view returns (bool) {\n        return schedule < block.timestamp;\n    }\n}\n"},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/extensions/IAccessControlDefaultAdminRules.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (access/extensions/IAccessControlDefaultAdminRules.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"../IAccessControl.sol\";\n\n/**\n * @dev External interface of AccessControlDefaultAdminRules declared to support ERC-165 detection.\n */\ninterface IAccessControlDefaultAdminRules is IAccessControl {\n    /**\n     * @dev The new default admin is not a valid default admin.\n     */\n    error AccessControlInvalidDefaultAdmin(address defaultAdmin);\n\n    /**\n     * @dev At least one of the following rules was violated:\n     *\n     * - The `DEFAULT_ADMIN_ROLE` must only be managed by itself.\n     * - The `DEFAULT_ADMIN_ROLE` must only be held by one account at the time.\n     * - Any `DEFAULT_ADMIN_ROLE` transfer must be in two delayed steps.\n     */\n    error AccessControlEnforcedDefaultAdminRules();\n\n    /**\n     * @dev The delay for transferring the default admin delay is enforced and\n     * the operation must wait until `schedule`.\n     *\n     * NOTE: `schedule` can be 0 indicating there's no transfer scheduled.\n     */\n    error AccessControlEnforcedDefaultAdminDelay(uint48 schedule);\n\n    /**\n     * @dev Emitted when a {defaultAdmin} transfer is started, setting `newAdmin` as the next\n     * address to become the {defaultAdmin} by calling {acceptDefaultAdminTransfer} only after `acceptSchedule`\n     * passes.\n     */\n    event DefaultAdminTransferScheduled(address indexed newAdmin, uint48 acceptSchedule);\n\n    /**\n     * @dev Emitted when a {pendingDefaultAdmin} is reset if it was never accepted, regardless of its schedule.\n     */\n    event DefaultAdminTransferCanceled();\n\n    /**\n     * @dev Emitted when a {defaultAdminDelay} change is started, setting `newDelay` as the next\n     * delay to be applied between default admin transfer after `effectSchedule` has passed.\n     */\n    event DefaultAdminDelayChangeScheduled(uint48 newDelay, uint48 effectSchedule);\n\n    /**\n     * @dev Emitted when a {pendingDefaultAdminDelay} is reset if its schedule didn't pass.\n     */\n    event DefaultAdminDelayChangeCanceled();\n\n    /**\n     * @dev Returns the address of the current `DEFAULT_ADMIN_ROLE` holder.\n     */\n    function defaultAdmin() external view returns (address);\n\n    /**\n     * @dev Returns a tuple of a `newAdmin` and an accept schedule.\n     *\n     * After the `schedule` passes, the `newAdmin` will be able to accept the {defaultAdmin} role\n     * by calling {acceptDefaultAdminTransfer}, completing the role transfer.\n     *\n     * A zero value only in `acceptSchedule` indicates no pending admin transfer.\n     *\n     * NOTE: A zero address `newAdmin` means that {defaultAdmin} is being renounced.\n     */\n    function pendingDefaultAdmin() external view returns (address newAdmin, uint48 acceptSchedule);\n\n    /**\n     * @dev Returns the delay required to schedule the acceptance of a {defaultAdmin} transfer started.\n     *\n     * This delay will be added to the current timestamp when calling {beginDefaultAdminTransfer} to set\n     * the acceptance schedule.\n     *\n     * NOTE: If a delay change has been scheduled, it will take effect as soon as the schedule passes, making this\n     * function returns the new delay. See {changeDefaultAdminDelay}.\n     */\n    function defaultAdminDelay() external view returns (uint48);\n\n    /**\n     * @dev Returns a tuple of `newDelay` and an effect schedule.\n     *\n     * After the `schedule` passes, the `newDelay` will get into effect immediately for every\n     * new {defaultAdmin} transfer started with {beginDefaultAdminTransfer}.\n     *\n     * A zero value only in `effectSchedule` indicates no pending delay change.\n     *\n     * NOTE: A zero value only for `newDelay` means that the next {defaultAdminDelay}\n     * will be zero after the effect schedule.\n     */\n    function pendingDefaultAdminDelay() external view returns (uint48 newDelay, uint48 effectSchedule);\n\n    /**\n     * @dev Starts a {defaultAdmin} transfer by setting a {pendingDefaultAdmin} scheduled for acceptance\n     * after the current timestamp plus a {defaultAdminDelay}.\n     *\n     * Requirements:\n     *\n     * - Only can be called by the current {defaultAdmin}.\n     *\n     * Emits a DefaultAdminRoleChangeStarted event.\n     */\n    function beginDefaultAdminTransfer(address newAdmin) external;\n\n    /**\n     * @dev Cancels a {defaultAdmin} transfer previously started with {beginDefaultAdminTransfer}.\n     *\n     * A {pendingDefaultAdmin} not yet accepted can also be cancelled with this function.\n     *\n     * Requirements:\n     *\n     * - Only can be called by the current {defaultAdmin}.\n     *\n     * May emit a DefaultAdminTransferCanceled event.\n     */\n    function cancelDefaultAdminTransfer() external;\n\n    /**\n     * @dev Completes a {defaultAdmin} transfer previously started with {beginDefaultAdminTransfer}.\n     *\n     * After calling the function:\n     *\n     * - `DEFAULT_ADMIN_ROLE` should be granted to the caller.\n     * - `DEFAULT_ADMIN_ROLE` should be revoked from the previous holder.\n     * - {pendingDefaultAdmin} should be reset to zero values.\n     *\n     * Requirements:\n     *\n     * - Only can be called by the {pendingDefaultAdmin}'s `newAdmin`.\n     * - The {pendingDefaultAdmin}'s `acceptSchedule` should've passed.\n     */\n    function acceptDefaultAdminTransfer() external;\n\n    /**\n     * @dev Initiates a {defaultAdminDelay} update by setting a {pendingDefaultAdminDelay} scheduled for getting\n     * into effect after the current timestamp plus a {defaultAdminDelay}.\n     *\n     * This function guarantees that any call to {beginDefaultAdminTransfer} done between the timestamp this\n     * method is called and the {pendingDefaultAdminDelay} effect schedule will use the current {defaultAdminDelay}\n     * set before calling.\n     *\n     * The {pendingDefaultAdminDelay}'s effect schedule is defined in a way that waiting until the schedule and then\n     * calling {beginDefaultAdminTransfer} with the new delay will take at least the same as another {defaultAdmin}\n     * complete transfer (including acceptance).\n     *\n     * The schedule is designed for two scenarios:\n     *\n     * - When the delay is changed for a larger one the schedule is `block.timestamp + newDelay` capped by\n     * {defaultAdminDelayIncreaseWait}.\n     * - When the delay is changed for a shorter one, the schedule is `block.timestamp + (current delay - new delay)`.\n     *\n     * A {pendingDefaultAdminDelay} that never got into effect will be canceled in favor of a new scheduled change.\n     *\n     * Requirements:\n     *\n     * - Only can be called by the current {defaultAdmin}.\n     *\n     * Emits a DefaultAdminDelayChangeScheduled event and may emit a DefaultAdminDelayChangeCanceled event.\n     */\n    function changeDefaultAdminDelay(uint48 newDelay) external;\n\n    /**\n     * @dev Cancels a scheduled {defaultAdminDelay} change.\n     *\n     * Requirements:\n     *\n     * - Only can be called by the current {defaultAdmin}.\n     *\n     * May emit a DefaultAdminDelayChangeCanceled event.\n     */\n    function rollbackDefaultAdminDelay() external;\n\n    /**\n     * @dev Maximum time in seconds for an increase to {defaultAdminDelay} (that is scheduled using {changeDefaultAdminDelay})\n     * to take effect. Default to 5 days.\n     *\n     * When the {defaultAdminDelay} is scheduled to be increased, it goes into effect after the new delay has passed with\n     * the purpose of giving enough time for reverting any accidental change (i.e. using milliseconds instead of seconds)\n     * that may lock the contract. However, to avoid excessive schedules, the wait is capped by this function and it can\n     * be overrode for a custom {defaultAdminDelay} increase scheduling.\n     *\n     * IMPORTANT: Make sure to add a reasonable amount of time while overriding this value, otherwise,\n     * there's a risk of setting a high new delay that goes into effect almost immediately without the\n     * possibility of human intervention in the case of an input error (eg. set milliseconds instead of seconds).\n     */\n    function defaultAdminDelayIncreaseWait() external view returns (uint48);\n}\n"},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/interfaces/IERC1363.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n"},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC1967.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n */\ninterface IERC1967 {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}\n"},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\n\npragma solidity ^0.8.20;\n\ninterface IERC5267 {\n    /**\n     * @dev MAY be emitted to signal that the domain could have changed.\n     */\n    event EIP712DomainChanged();\n\n    /**\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\n     * signature.\n     */\n    function eip712Domain()\n        external\n        view\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        );\n}\n"},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/interfaces/IERC5313.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5313.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface for the Light Contract Ownership Standard.\n *\n * A standardized minimal interface required to identify an account that controls a contract\n */\ninterface IERC5313 {\n    /**\n     * @dev Gets the address of the owner.\n     */\n    function owner() external view returns (address);\n}\n"},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC-20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC-721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC-1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.2.0) (proxy/ERC1967/ERC1967Proxy.sol)\n\npragma solidity ^0.8.22;\n\nimport {Proxy} from \"../Proxy.sol\";\nimport {ERC1967Utils} from \"./ERC1967Utils.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[ERC-1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `implementation`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `implementation`. This will typically be an\n     * encoded function call, and allows initializing the storage of the proxy like a Solidity constructor.\n     *\n     * Requirements:\n     *\n     * - If `data` is empty, `msg.value` must be zero.\n     */\n    constructor(address implementation, bytes memory _data) payable {\n        ERC1967Utils.upgradeToAndCall(implementation, _data);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by ERC-1967) using\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\n     */\n    function _implementation() internal view virtual override returns (address) {\n        return ERC1967Utils.getImplementation();\n    }\n}\n"},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Utils.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.2.0) (proxy/ERC1967/ERC1967Utils.sol)\n\npragma solidity ^0.8.22;\n\nimport {IBeacon} from \"../beacon/IBeacon.sol\";\nimport {IERC1967} from \"../../interfaces/IERC1967.sol\";\nimport {Address} from \"../../utils/Address.sol\";\nimport {StorageSlot} from \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This library provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[ERC-1967] slots.\n */\nlibrary ERC1967Utils {\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1.\n     */\n    // solhint-disable-next-line private-vars-leading-underscore\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev The `implementation` of the proxy is invalid.\n     */\n    error ERC1967InvalidImplementation(address implementation);\n\n    /**\n     * @dev The `admin` of the proxy is invalid.\n     */\n    error ERC1967InvalidAdmin(address admin);\n\n    /**\n     * @dev The `beacon` of the proxy is invalid.\n     */\n    error ERC1967InvalidBeacon(address beacon);\n\n    /**\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\n     */\n    error ERC1967NonPayable();\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the ERC-1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        if (newImplementation.code.length == 0) {\n            revert ERC1967InvalidImplementation(newImplementation);\n        }\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\n     * to avoid stuck value in the contract.\n     *\n     * Emits an {IERC1967-Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\n        _setImplementation(newImplementation);\n        emit IERC1967.Upgraded(newImplementation);\n\n        if (data.length > 0) {\n            Address.functionDelegateCall(newImplementation, data);\n        } else {\n            _checkNonPayable();\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1.\n     */\n    // solhint-disable-next-line private-vars-leading-underscore\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by ERC-1967) using\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the ERC-1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        if (newAdmin == address(0)) {\n            revert ERC1967InvalidAdmin(address(0));\n        }\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {IERC1967-AdminChanged} event.\n     */\n    function changeAdmin(address newAdmin) internal {\n        emit IERC1967.AdminChanged(getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is the keccak-256 hash of \"eip1967.proxy.beacon\" subtracted by 1.\n     */\n    // solhint-disable-next-line private-vars-leading-underscore\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the ERC-1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        if (newBeacon.code.length == 0) {\n            revert ERC1967InvalidBeacon(newBeacon);\n        }\n\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\n\n        address beaconImplementation = IBeacon(newBeacon).implementation();\n        if (beaconImplementation.code.length == 0) {\n            revert ERC1967InvalidImplementation(beaconImplementation);\n        }\n    }\n\n    /**\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\n     * to avoid stuck value in the contract.\n     *\n     * Emits an {IERC1967-BeaconUpgraded} event.\n     *\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\n     * efficiency.\n     */\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\n        _setBeacon(newBeacon);\n        emit IERC1967.BeaconUpgraded(newBeacon);\n\n        if (data.length > 0) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        } else {\n            _checkNonPayable();\n        }\n    }\n\n    /**\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\n     * if an upgrade doesn't perform an initialization call.\n     */\n    function _checkNonPayable() private {\n        if (msg.value > 0) {\n            revert ERC1967NonPayable();\n        }\n    }\n}\n"},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/Proxy.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback\n     * function and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n}\n"},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/beacon/BeaconProxy.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.2.0) (proxy/beacon/BeaconProxy.sol)\n\npragma solidity ^0.8.22;\n\nimport {IBeacon} from \"./IBeacon.sol\";\nimport {Proxy} from \"../Proxy.sol\";\nimport {ERC1967Utils} from \"../ERC1967/ERC1967Utils.sol\";\n\n/**\n * @dev This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}.\n *\n * The beacon address can only be set once during construction, and cannot be changed afterwards. It is stored in an\n * immutable variable to avoid unnecessary storage reads, and also in the beacon storage slot specified by\n * https://eips.ethereum.org/EIPS/eip-1967[ERC-1967] so that it can be accessed externally.\n *\n * CAUTION: Since the beacon address can never be changed, you must ensure that you either control the beacon, or trust\n * the beacon to not upgrade the implementation maliciously.\n *\n * IMPORTANT: Do not use the implementation logic to modify the beacon storage slot. Doing so would leave the proxy in\n * an inconsistent state where the beacon storage slot does not match the beacon address.\n */\ncontract BeaconProxy is Proxy {\n    // An immutable address for the beacon to avoid unnecessary SLOADs before each delegate call.\n    address private immutable _beacon;\n\n    /**\n     * @dev Initializes the proxy with `beacon`.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\n     * will typically be an encoded function call, and allows initializing the storage of the proxy like a Solidity\n     * constructor.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract with the interface {IBeacon}.\n     * - If `data` is empty, `msg.value` must be zero.\n     */\n    constructor(address beacon, bytes memory data) payable {\n        ERC1967Utils.upgradeBeaconToAndCall(beacon, data);\n        _beacon = beacon;\n    }\n\n    /**\n     * @dev Returns the current implementation address of the associated beacon.\n     */\n    function _implementation() internal view virtual override returns (address) {\n        return IBeacon(_getBeacon()).implementation();\n    }\n\n    /**\n     * @dev Returns the beacon.\n     */\n    function _getBeacon() internal view virtual returns (address) {\n        return _beacon;\n    }\n}\n"},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {UpgradeableBeacon} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/beacon/UpgradeableBeacon.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/UpgradeableBeacon.sol)\n\npragma solidity ^0.8.20;\n\nimport {IBeacon} from \"./IBeacon.sol\";\nimport {Ownable} from \"../../access/Ownable.sol\";\n\n/**\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\n * implementation contract, which is where they will delegate all function calls.\n *\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\n */\ncontract UpgradeableBeacon is IBeacon, Ownable {\n    address private _implementation;\n\n    /**\n     * @dev The `implementation` of the beacon is invalid.\n     */\n    error BeaconInvalidImplementation(address implementation);\n\n    /**\n     * @dev Emitted when the implementation returned by the beacon is changed.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Sets the address of the initial implementation, and the initial owner who can upgrade the beacon.\n     */\n    constructor(address implementation_, address initialOwner) Ownable(initialOwner) {\n        _setImplementation(implementation_);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function implementation() public view virtual returns (address) {\n        return _implementation;\n    }\n\n    /**\n     * @dev Upgrades the beacon to a new implementation.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * Requirements:\n     *\n     * - msg.sender must be the owner of the contract.\n     * - `newImplementation` must be a contract.\n     */\n    function upgradeTo(address newImplementation) public virtual onlyOwner {\n        _setImplementation(newImplementation);\n    }\n\n    /**\n     * @dev Sets the implementation contract address for this beacon\n     *\n     * Requirements:\n     *\n     * - `newImplementation` must be a contract.\n     */\n    function _setImplementation(address newImplementation) private {\n        if (newImplementation.code.length == 0) {\n            revert BeaconInvalidImplementation(newImplementation);\n        }\n        _implementation = newImplementation;\n        emit Upgraded(newImplementation);\n    }\n}\n"},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/transparent/ProxyAdmin.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.2.0) (proxy/transparent/ProxyAdmin.sol)\n\npragma solidity ^0.8.22;\n\nimport {ITransparentUpgradeableProxy} from \"./TransparentUpgradeableProxy.sol\";\nimport {Ownable} from \"../../access/Ownable.sol\";\n\n/**\n * @dev This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an\n * explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.\n */\ncontract ProxyAdmin is Ownable {\n    /**\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgrade(address,address)`\n     * and `upgradeAndCall(address,address,bytes)` are present, and `upgrade` must be used if no function should be called,\n     * while `upgradeAndCall` will invoke the `receive` function if the third argument is the empty byte string.\n     * If the getter returns `\"5.0.0\"`, only `upgradeAndCall(address,address,bytes)` is present, and the third argument must\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\n     * during an upgrade.\n     */\n    string public constant UPGRADE_INTERFACE_VERSION = \"5.0.0\";\n\n    /**\n     * @dev Sets the initial owner who can perform upgrades.\n     */\n    constructor(address initialOwner) Ownable(initialOwner) {}\n\n    /**\n     * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation.\n     * See {TransparentUpgradeableProxy-_dispatchUpgradeToAndCall}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     * - If `data` is empty, `msg.value` must be zero.\n     */\n    function upgradeAndCall(\n        ITransparentUpgradeableProxy proxy,\n        address implementation,\n        bytes memory data\n    ) public payable virtual onlyOwner {\n        proxy.upgradeToAndCall{value: msg.value}(implementation, data);\n    }\n}\n"},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/transparent/TransparentUpgradeableProxy.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.2.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\n\npragma solidity ^0.8.22;\n\nimport {ERC1967Utils} from \"../ERC1967/ERC1967Utils.sol\";\nimport {ERC1967Proxy} from \"../ERC1967/ERC1967Proxy.sol\";\nimport {IERC1967} from \"../../interfaces/IERC1967.sol\";\nimport {ProxyAdmin} from \"./ProxyAdmin.sol\";\n\n/**\n * @dev Interface for {TransparentUpgradeableProxy}. In order to implement transparency, {TransparentUpgradeableProxy}\n * does not implement this interface directly, and its upgradeability mechanism is implemented by an internal dispatch\n * mechanism. The compiler is unaware that these functions are implemented by {TransparentUpgradeableProxy} and will not\n * include them in the ABI so this interface must be used to interact with it.\n */\ninterface ITransparentUpgradeableProxy is IERC1967 {\n    /// @dev See {UUPSUpgradeable-upgradeToAndCall}\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable;\n}\n\n/**\n * @dev This contract implements a proxy that is upgradeable through an associated {ProxyAdmin} instance.\n *\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\n * clashing], which can potentially be used in an attack, this contract uses the\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\n * things that go hand in hand:\n *\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\n * that call matches the {ITransparentUpgradeableProxy-upgradeToAndCall} function exposed by the proxy itself.\n * 2. If the admin calls the proxy, it can call the `upgradeToAndCall` function but any other call won't be forwarded to\n * the implementation. If the admin tries to call a function on the implementation it will fail with an error indicating\n * the proxy admin cannot fallback to the target implementation.\n *\n * These properties mean that the admin account can only be used for upgrading the proxy, so it's best if it's a\n * dedicated account that is not used for anything else. This will avoid headaches due to sudden errors when trying to\n * call a function from the proxy implementation. For this reason, the proxy deploys an instance of {ProxyAdmin} and\n * allows upgrades only if they come through it. You should think of the `ProxyAdmin` instance as the administrative\n * interface of the proxy, including the ability to change who can trigger upgrades by transferring ownership.\n *\n * NOTE: The real interface of this proxy is that defined in `ITransparentUpgradeableProxy`. This contract does not\n * inherit from that interface, and instead `upgradeToAndCall` is implicitly implemented using a custom dispatch\n * mechanism in `_fallback`. Consequently, the compiler will not produce an ABI for this contract. This is necessary to\n * fully implement transparency without decoding reverts caused by selector clashes between the proxy and the\n * implementation.\n *\n * NOTE: This proxy does not inherit from {Context} deliberately. The {ProxyAdmin} of this contract won't send a\n * meta-transaction in any way, and any other meta-transaction setup should be made in the implementation contract.\n *\n * IMPORTANT: This contract avoids unnecessary storage reads by setting the admin only during construction as an\n * immutable variable, preventing any changes thereafter. However, the admin slot defined in ERC-1967 can still be\n * overwritten by the implementation logic pointed to by this proxy. In such cases, the contract may end up in an\n * undesirable state where the admin slot is different from the actual admin. Relying on the value of the admin slot\n * is generally fine if the implementation is trusted.\n *\n * WARNING: It is not recommended to extend this contract to add additional external functions. If you do so, the\n * compiler will not check that there are no selector conflicts, due to the note above. A selector clash between any new\n * function and the functions declared in {ITransparentUpgradeableProxy} will be resolved in favor of the new one. This\n * could render the `upgradeToAndCall` function inaccessible, preventing upgradeability and compromising transparency.\n */\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\n    // An immutable address for the admin to avoid unnecessary SLOADs before each call\n    // at the expense of removing the ability to change the admin once it's set.\n    // This is acceptable if the admin is always a ProxyAdmin instance or similar contract\n    // with its own ability to transfer the permissions to another account.\n    address private immutable _admin;\n\n    /**\n     * @dev The proxy caller is the current admin, and can't fallback to the proxy target.\n     */\n    error ProxyDeniedAdminAccess();\n\n    /**\n     * @dev Initializes an upgradeable proxy managed by an instance of a {ProxyAdmin} with an `initialOwner`,\n     * backed by the implementation at `_logic`, and optionally initialized with `_data` as explained in\n     * {ERC1967Proxy-constructor}.\n     */\n    constructor(address _logic, address initialOwner, bytes memory _data) payable ERC1967Proxy(_logic, _data) {\n        _admin = address(new ProxyAdmin(initialOwner));\n        // Set the storage value and emit an event for ERC-1967 compatibility\n        ERC1967Utils.changeAdmin(_proxyAdmin());\n    }\n\n    /**\n     * @dev Returns the admin of this proxy.\n     */\n    function _proxyAdmin() internal view virtual returns (address) {\n        return _admin;\n    }\n\n    /**\n     * @dev If caller is the admin process the call internally, otherwise transparently fallback to the proxy behavior.\n     */\n    function _fallback() internal virtual override {\n        if (msg.sender == _proxyAdmin()) {\n            if (msg.sig != ITransparentUpgradeableProxy.upgradeToAndCall.selector) {\n                revert ProxyDeniedAdminAccess();\n            } else {\n                _dispatchUpgradeToAndCall();\n            }\n        } else {\n            super._fallback();\n        }\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy. See {ERC1967Utils-upgradeToAndCall}.\n     *\n     * Requirements:\n     *\n     * - If `data` is empty, `msg.value` must be zero.\n     */\n    function _dispatchUpgradeToAndCall() private {\n        (address newImplementation, bytes memory data) = abi.decode(msg.data[4:], (address, bytes));\n        ERC1967Utils.upgradeToAndCall(newImplementation, data);\n    }\n}\n"},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[ERC-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC-20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     *\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n     * only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n     * set here.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n"},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.2.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\nimport {Errors} from \"./Errors.sol\";\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert Errors.InsufficientBalance(address(this).balance, amount);\n        }\n\n        (bool success, bytes memory returndata) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            _revert(returndata);\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {Errors.FailedCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert Errors.InsufficientBalance(address(this).balance, value);\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\n     * of an unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {Errors.FailedCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            assembly (\"memory-safe\") {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert Errors.FailedCall();\n        }\n    }\n}\n"},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Errors.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of common custom errors used in multiple contracts\n *\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\n * It is recommended to avoid relying on the error API for critical functionality.\n *\n * _Available since v5.1._\n */\nlibrary Errors {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error InsufficientBalance(uint256 balance, uint256 needed);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedCall();\n\n    /**\n     * @dev The deployment failed.\n     */\n    error FailedDeployment();\n\n    /**\n     * @dev A necessary precompile is missing.\n     */\n    error MissingPrecompile(address);\n}\n"},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Panic.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Helper library for emitting standardized panic codes.\n *\n * ```solidity\n * contract Example {\n *      using Panic for uint256;\n *\n *      // Use any of the declared internal constants\n *      function foo() { Panic.GENERIC.panic(); }\n *\n *      // Alternatively\n *      function foo() { Panic.panic(Panic.GENERIC); }\n * }\n * ```\n *\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\n *\n * _Available since v5.1._\n */\n// slither-disable-next-line unused-state\nlibrary Panic {\n    /// @dev generic / unspecified error\n    uint256 internal constant GENERIC = 0x00;\n    /// @dev used by the assert() builtin\n    uint256 internal constant ASSERT = 0x01;\n    /// @dev arithmetic underflow or overflow\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\n    /// @dev division or modulo by zero\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\n    /// @dev enum conversion error\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\n    /// @dev invalid encoding in storage\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\n    /// @dev empty array pop\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\n    /// @dev array out of bounds access\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\n    /// @dev resource error (too large allocation or too large array)\n    uint256 internal constant RESOURCE_ERROR = 0x41;\n    /// @dev calling invalid internal function\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\n\n    /// @dev Reverts with a panic code. Recommended to use with\n    /// the internal constants with predefined codes.\n    function panic(uint256 code) internal pure {\n        assembly (\"memory-safe\") {\n            mstore(0x00, 0x4e487b71)\n            mstore(0x20, code)\n            revert(0x1c, 0x24)\n        }\n    }\n}\n"},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Pausable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    bool private _paused;\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC-1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(newImplementation.code.length > 0);\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * TIP: Consider using this library along with {SlotDerivation}.\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct Int256Slot {\n        int256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\n     */\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := store.slot\n        }\n    }\n}\n"},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Strings.sol)\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"./math/Math.sol\";\nimport {SafeCast} from \"./math/SafeCast.sol\";\nimport {SignedMath} from \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    using SafeCast for *;\n\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\n    uint8 private constant ADDRESS_LENGTH = 20;\n    uint256 private constant SPECIAL_CHARS_LOOKUP =\n        (1 << 0x08) | // backspace\n            (1 << 0x09) | // tab\n            (1 << 0x0a) | // newline\n            (1 << 0x0c) | // form feed\n            (1 << 0x0d) | // carriage return\n            (1 << 0x22) | // double quote\n            (1 << 0x5c); // backslash\n\n    /**\n     * @dev The `value` string doesn't fit in the specified `length`.\n     */\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\n\n    /**\n     * @dev The string being parsed contains characters that are not in scope of the given base.\n     */\n    error StringsInvalidChar();\n\n    /**\n     * @dev The string being parsed is not a properly formatted address.\n     */\n    error StringsInvalidAddressFormat();\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            assembly (\"memory-safe\") {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                assembly (\"memory-safe\") {\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toStringSigned(int256 value) internal pure returns (string memory) {\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        uint256 localValue = value;\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\n            localValue >>= 4;\n        }\n        if (localValue != 0) {\n            revert StringsInsufficientHexLength(value, length);\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n     * representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its checksummed ASCII `string` hexadecimal\n     * representation, according to EIP-55.\n     */\n    function toChecksumHexString(address addr) internal pure returns (string memory) {\n        bytes memory buffer = bytes(toHexString(addr));\n\n        // hash the hex part of buffer (skip length + 2 bytes, length 40)\n        uint256 hashValue;\n        assembly (\"memory-safe\") {\n            hashValue := shr(96, keccak256(add(buffer, 0x22), 40))\n        }\n\n        for (uint256 i = 41; i > 1; --i) {\n            // possible values for buffer[i] are 48 (0) to 57 (9) and 97 (a) to 102 (f)\n            if (hashValue & 0xf > 7 && uint8(buffer[i]) > 96) {\n                // case shift by xoring with 0x20\n                buffer[i] ^= 0x20;\n            }\n            hashValue >>= 4;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n\n    /**\n     * @dev Parse a decimal string and returns the value as a `uint256`.\n     *\n     * Requirements:\n     * - The string must be formatted as `[0-9]*`\n     * - The result must fit into an `uint256` type\n     */\n    function parseUint(string memory input) internal pure returns (uint256) {\n        return parseUint(input, 0, bytes(input).length);\n    }\n\n    /**\n     * @dev Variant of {parseUint-string} that parses a substring of `input` located between position `begin` (included) and\n     * `end` (excluded).\n     *\n     * Requirements:\n     * - The substring must be formatted as `[0-9]*`\n     * - The result must fit into an `uint256` type\n     */\n    function parseUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\n        (bool success, uint256 value) = tryParseUint(input, begin, end);\n        if (!success) revert StringsInvalidChar();\n        return value;\n    }\n\n    /**\n     * @dev Variant of {parseUint-string} that returns false if the parsing fails because of an invalid character.\n     *\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\n     */\n    function tryParseUint(string memory input) internal pure returns (bool success, uint256 value) {\n        return _tryParseUintUncheckedBounds(input, 0, bytes(input).length);\n    }\n\n    /**\n     * @dev Variant of {parseUint-string-uint256-uint256} that returns false if the parsing fails because of an invalid\n     * character.\n     *\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\n     */\n    function tryParseUint(\n        string memory input,\n        uint256 begin,\n        uint256 end\n    ) internal pure returns (bool success, uint256 value) {\n        if (end > bytes(input).length || begin > end) return (false, 0);\n        return _tryParseUintUncheckedBounds(input, begin, end);\n    }\n\n    /**\n     * @dev Implementation of {tryParseUint-string-uint256-uint256} that does not check bounds. Caller should make sure that\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\n     */\n    function _tryParseUintUncheckedBounds(\n        string memory input,\n        uint256 begin,\n        uint256 end\n    ) private pure returns (bool success, uint256 value) {\n        bytes memory buffer = bytes(input);\n\n        uint256 result = 0;\n        for (uint256 i = begin; i < end; ++i) {\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\n            if (chr > 9) return (false, 0);\n            result *= 10;\n            result += chr;\n        }\n        return (true, result);\n    }\n\n    /**\n     * @dev Parse a decimal string and returns the value as a `int256`.\n     *\n     * Requirements:\n     * - The string must be formatted as `[-+]?[0-9]*`\n     * - The result must fit in an `int256` type.\n     */\n    function parseInt(string memory input) internal pure returns (int256) {\n        return parseInt(input, 0, bytes(input).length);\n    }\n\n    /**\n     * @dev Variant of {parseInt-string} that parses a substring of `input` located between position `begin` (included) and\n     * `end` (excluded).\n     *\n     * Requirements:\n     * - The substring must be formatted as `[-+]?[0-9]*`\n     * - The result must fit in an `int256` type.\n     */\n    function parseInt(string memory input, uint256 begin, uint256 end) internal pure returns (int256) {\n        (bool success, int256 value) = tryParseInt(input, begin, end);\n        if (!success) revert StringsInvalidChar();\n        return value;\n    }\n\n    /**\n     * @dev Variant of {parseInt-string} that returns false if the parsing fails because of an invalid character or if\n     * the result does not fit in a `int256`.\n     *\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\n     */\n    function tryParseInt(string memory input) internal pure returns (bool success, int256 value) {\n        return _tryParseIntUncheckedBounds(input, 0, bytes(input).length);\n    }\n\n    uint256 private constant ABS_MIN_INT256 = 2 ** 255;\n\n    /**\n     * @dev Variant of {parseInt-string-uint256-uint256} that returns false if the parsing fails because of an invalid\n     * character or if the result does not fit in a `int256`.\n     *\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\n     */\n    function tryParseInt(\n        string memory input,\n        uint256 begin,\n        uint256 end\n    ) internal pure returns (bool success, int256 value) {\n        if (end > bytes(input).length || begin > end) return (false, 0);\n        return _tryParseIntUncheckedBounds(input, begin, end);\n    }\n\n    /**\n     * @dev Implementation of {tryParseInt-string-uint256-uint256} that does not check bounds. Caller should make sure that\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\n     */\n    function _tryParseIntUncheckedBounds(\n        string memory input,\n        uint256 begin,\n        uint256 end\n    ) private pure returns (bool success, int256 value) {\n        bytes memory buffer = bytes(input);\n\n        // Check presence of a negative sign.\n        bytes1 sign = begin == end ? bytes1(0) : bytes1(_unsafeReadBytesOffset(buffer, begin)); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\n        bool positiveSign = sign == bytes1(\"+\");\n        bool negativeSign = sign == bytes1(\"-\");\n        uint256 offset = (positiveSign || negativeSign).toUint();\n\n        (bool absSuccess, uint256 absValue) = tryParseUint(input, begin + offset, end);\n\n        if (absSuccess && absValue < ABS_MIN_INT256) {\n            return (true, negativeSign ? -int256(absValue) : int256(absValue));\n        } else if (absSuccess && negativeSign && absValue == ABS_MIN_INT256) {\n            return (true, type(int256).min);\n        } else return (false, 0);\n    }\n\n    /**\n     * @dev Parse a hexadecimal string (with or without \"0x\" prefix), and returns the value as a `uint256`.\n     *\n     * Requirements:\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]*`\n     * - The result must fit in an `uint256` type.\n     */\n    function parseHexUint(string memory input) internal pure returns (uint256) {\n        return parseHexUint(input, 0, bytes(input).length);\n    }\n\n    /**\n     * @dev Variant of {parseHexUint-string} that parses a substring of `input` located between position `begin` (included) and\n     * `end` (excluded).\n     *\n     * Requirements:\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]*`\n     * - The result must fit in an `uint256` type.\n     */\n    function parseHexUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\n        (bool success, uint256 value) = tryParseHexUint(input, begin, end);\n        if (!success) revert StringsInvalidChar();\n        return value;\n    }\n\n    /**\n     * @dev Variant of {parseHexUint-string} that returns false if the parsing fails because of an invalid character.\n     *\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\n     */\n    function tryParseHexUint(string memory input) internal pure returns (bool success, uint256 value) {\n        return _tryParseHexUintUncheckedBounds(input, 0, bytes(input).length);\n    }\n\n    /**\n     * @dev Variant of {parseHexUint-string-uint256-uint256} that returns false if the parsing fails because of an\n     * invalid character.\n     *\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\n     */\n    function tryParseHexUint(\n        string memory input,\n        uint256 begin,\n        uint256 end\n    ) internal pure returns (bool success, uint256 value) {\n        if (end > bytes(input).length || begin > end) return (false, 0);\n        return _tryParseHexUintUncheckedBounds(input, begin, end);\n    }\n\n    /**\n     * @dev Implementation of {tryParseHexUint-string-uint256-uint256} that does not check bounds. Caller should make sure that\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\n     */\n    function _tryParseHexUintUncheckedBounds(\n        string memory input,\n        uint256 begin,\n        uint256 end\n    ) private pure returns (bool success, uint256 value) {\n        bytes memory buffer = bytes(input);\n\n        // skip 0x prefix if present\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(buffer, begin)) == bytes2(\"0x\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\n        uint256 offset = hasPrefix.toUint() * 2;\n\n        uint256 result = 0;\n        for (uint256 i = begin + offset; i < end; ++i) {\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\n            if (chr > 15) return (false, 0);\n            result *= 16;\n            unchecked {\n                // Multiplying by 16 is equivalent to a shift of 4 bits (with additional overflow check).\n                // This guarantees that adding a value < 16 will not cause an overflow, hence the unchecked.\n                result += chr;\n            }\n        }\n        return (true, result);\n    }\n\n    /**\n     * @dev Parse a hexadecimal string (with or without \"0x\" prefix), and returns the value as an `address`.\n     *\n     * Requirements:\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]{40}`\n     */\n    function parseAddress(string memory input) internal pure returns (address) {\n        return parseAddress(input, 0, bytes(input).length);\n    }\n\n    /**\n     * @dev Variant of {parseAddress-string} that parses a substring of `input` located between position `begin` (included) and\n     * `end` (excluded).\n     *\n     * Requirements:\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]{40}`\n     */\n    function parseAddress(string memory input, uint256 begin, uint256 end) internal pure returns (address) {\n        (bool success, address value) = tryParseAddress(input, begin, end);\n        if (!success) revert StringsInvalidAddressFormat();\n        return value;\n    }\n\n    /**\n     * @dev Variant of {parseAddress-string} that returns false if the parsing fails because the input is not a properly\n     * formatted address. See {parseAddress-string} requirements.\n     */\n    function tryParseAddress(string memory input) internal pure returns (bool success, address value) {\n        return tryParseAddress(input, 0, bytes(input).length);\n    }\n\n    /**\n     * @dev Variant of {parseAddress-string-uint256-uint256} that returns false if the parsing fails because input is not a properly\n     * formatted address. See {parseAddress-string-uint256-uint256} requirements.\n     */\n    function tryParseAddress(\n        string memory input,\n        uint256 begin,\n        uint256 end\n    ) internal pure returns (bool success, address value) {\n        if (end > bytes(input).length || begin > end) return (false, address(0));\n\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(bytes(input), begin)) == bytes2(\"0x\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\n        uint256 expectedLength = 40 + hasPrefix.toUint() * 2;\n\n        // check that input is the correct length\n        if (end - begin == expectedLength) {\n            // length guarantees that this does not overflow, and value is at most type(uint160).max\n            (bool s, uint256 v) = _tryParseHexUintUncheckedBounds(input, begin, end);\n            return (s, address(uint160(v)));\n        } else {\n            return (false, address(0));\n        }\n    }\n\n    function _tryParseChr(bytes1 chr) private pure returns (uint8) {\n        uint8 value = uint8(chr);\n\n        // Try to parse `chr`:\n        // - Case 1: [0-9]\n        // - Case 2: [a-f]\n        // - Case 3: [A-F]\n        // - otherwise not supported\n        unchecked {\n            if (value > 47 && value < 58) value -= 48;\n            else if (value > 96 && value < 103) value -= 87;\n            else if (value > 64 && value < 71) value -= 55;\n            else return type(uint8).max;\n        }\n\n        return value;\n    }\n\n    /**\n     * @dev Escape special characters in JSON strings. This can be useful to prevent JSON injection in NFT metadata.\n     *\n     * WARNING: This function should only be used in double quoted JSON strings. Single quotes are not escaped.\n     *\n     * NOTE: This function escapes all unicode characters, and not just the ones in ranges defined in section 2.5 of\n     * RFC-4627 (U+0000 to U+001F, U+0022 and U+005C). ECMAScript's `JSON.parse` does recover escaped unicode\n     * characters that are not in this range, but other tooling may provide different results.\n     */\n    function escapeJSON(string memory input) internal pure returns (string memory) {\n        bytes memory buffer = bytes(input);\n        bytes memory output = new bytes(2 * buffer.length); // worst case scenario\n        uint256 outputLength = 0;\n\n        for (uint256 i; i < buffer.length; ++i) {\n            bytes1 char = bytes1(_unsafeReadBytesOffset(buffer, i));\n            if (((SPECIAL_CHARS_LOOKUP & (1 << uint8(char))) != 0)) {\n                output[outputLength++] = \"\\\\\";\n                if (char == 0x08) output[outputLength++] = \"b\";\n                else if (char == 0x09) output[outputLength++] = \"t\";\n                else if (char == 0x0a) output[outputLength++] = \"n\";\n                else if (char == 0x0c) output[outputLength++] = \"f\";\n                else if (char == 0x0d) output[outputLength++] = \"r\";\n                else if (char == 0x5c) output[outputLength++] = \"\\\\\";\n                else if (char == 0x22) {\n                    // solhint-disable-next-line quotes\n                    output[outputLength++] = '\"';\n                }\n            } else {\n                output[outputLength++] = char;\n            }\n        }\n        // write the actual length and deallocate unused memory\n        assembly (\"memory-safe\") {\n            mstore(output, outputLength)\n            mstore(0x40, add(output, shl(5, shr(5, add(outputLength, 63)))))\n        }\n\n        return string(output);\n    }\n\n    /**\n     * @dev Reads a bytes32 from a bytes array without bounds checking.\n     *\n     * NOTE: making this function internal would mean it could be used with memory unsafe offset, and marking the\n     * assembly block as such would prevent some optimizations.\n     */\n    function _unsafeReadBytesOffset(bytes memory buffer, uint256 offset) private pure returns (bytes32 value) {\n        // This is not memory safe in the general case, but all calls to this private function are within bounds.\n        assembly (\"memory-safe\") {\n            value := mload(add(buffer, add(0x20, offset)))\n        }\n    }\n}\n"},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS\n    }\n\n    /**\n     * @dev The signature derives the `address(0)`.\n     */\n    error ECDSAInvalidSignature();\n\n    /**\n     * @dev The signature has an invalid length.\n     */\n    error ECDSAInvalidSignatureLength(uint256 length);\n\n    /**\n     * @dev The signature has an S value that is in the upper half order.\n     */\n    error ECDSAInvalidSignatureS(bytes32 s);\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\n     * and a bytes32 providing additional information about the error.\n     *\n     * If no error is returned, then the address can be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes memory signature\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly (\"memory-safe\") {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[ERC-2098 short signatures]\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\n        unchecked {\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\n            return tryRecover(hash, v, r, s);\n        }\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS, s);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\n        }\n\n        return (signer, RecoverError.NoError, bytes32(0));\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\n     */\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert ECDSAInvalidSignature();\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert ECDSAInvalidSignatureS(errorArg);\n        }\n    }\n}\n"},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/cryptography/MessageHashUtils.sol)\n\npragma solidity ^0.8.20;\n\nimport {Strings} from \"../Strings.sol\";\n\n/**\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\n *\n * The library provides methods for generating a hash of a message that conforms to the\n * https://eips.ethereum.org/EIPS/eip-191[ERC-191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\n * specifications.\n */\nlibrary MessageHashUtils {\n    /**\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\n     * `0x45` (`personal_sign` messages).\n     *\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\n     * `\"\\x19Ethereum Signed Message:\\n32\"` and hashing the result. It corresponds with the\n     * hash signed when using the https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sign[`eth_sign`] JSON-RPC method.\n     *\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\n     * keccak256, although any bytes32 value can be safely used because the final digest will\n     * be re-hashed.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\n        assembly (\"memory-safe\") {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\") // 32 is the bytes-length of messageHash\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\n        }\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\n     * `0x45` (`personal_sign` messages).\n     *\n     * The digest is calculated by prefixing an arbitrary `message` with\n     * `\"\\x19Ethereum Signed Message:\\n\" + len(message)` and hashing the result. It corresponds with the\n     * hash signed when using the https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sign[`eth_sign`] JSON-RPC method.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\n        return\n            keccak256(bytes.concat(\"\\x19Ethereum Signed Message:\\n\", bytes(Strings.toString(message.length)), message));\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\n     * `0x00` (data with intended validator).\n     *\n     * The digest is calculated by prefixing an arbitrary `data` with `\"\\x19\\x00\"` and the intended\n     * `validator` address. Then hashing the result.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(hex\"19_00\", validator, data));\n    }\n\n    /**\n     * @dev Variant of {toDataWithIntendedValidatorHash-address-bytes} optimized for cases where `data` is a bytes32.\n     */\n    function toDataWithIntendedValidatorHash(\n        address validator,\n        bytes32 messageHash\n    ) internal pure returns (bytes32 digest) {\n        assembly (\"memory-safe\") {\n            mstore(0x00, hex\"19_00\")\n            mstore(0x02, shl(96, validator))\n            mstore(0x16, messageHash)\n            digest := keccak256(0x00, 0x36)\n        }\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (ERC-191 version `0x01`).\n     *\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\n     * `\\x19\\x01` and hashing the result. It corresponds to the hash signed by the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\n        assembly (\"memory-safe\") {\n            let ptr := mload(0x40)\n            mstore(ptr, hex\"19_01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            digest := keccak256(ptr, 0x42)\n        }\n    }\n}\n"},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\nimport {Panic} from \"../Panic.sol\";\nimport {SafeCast} from \"./SafeCast.sol\";\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Return the 512-bit addition of two uint256.\n     *\n     * The result is stored in two 256 variables such that sum = high * 2²⁵⁶ + low.\n     */\n    function add512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\n        assembly (\"memory-safe\") {\n            low := add(a, b)\n            high := lt(low, a)\n        }\n    }\n\n    /**\n     * @dev Return the 512-bit multiplication of two uint256.\n     *\n     * The result is stored in two 256 variables such that product = high * 2²⁵⁶ + low.\n     */\n    function mul512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\n        // 512-bit multiply [high low] = x * y. Compute the product mod 2²⁵⁶ and mod 2²⁵⁶ - 1, then use\n        // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n        // variables such that product = high * 2²⁵⁶ + low.\n        assembly (\"memory-safe\") {\n            let mm := mulmod(a, b, not(0))\n            low := mul(a, b)\n            high := sub(sub(mm, low), lt(mm, low))\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with a success flag (no overflow).\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            uint256 c = a + b;\n            success = c >= a;\n            result = c * SafeCast.toUint(success);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with a success flag (no overflow).\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            uint256 c = a - b;\n            success = c <= a;\n            result = c * SafeCast.toUint(success);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with a success flag (no overflow).\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            uint256 c = a * b;\n            assembly (\"memory-safe\") {\n                // Only true when the multiplication doesn't overflow\n                // (c / a == b) || (a == 0)\n                success := or(eq(div(c, a), b), iszero(a))\n            }\n            // equivalent to: success ? c : 0\n            result = c * SafeCast.toUint(success);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            success = b > 0;\n            assembly (\"memory-safe\") {\n                // The `DIV` opcode returns zero when the denominator is 0.\n                result := div(a, b)\n            }\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            success = b > 0;\n            assembly (\"memory-safe\") {\n                // The `MOD` opcode returns zero when the denominator is 0.\n                result := mod(a, b)\n            }\n        }\n    }\n\n    /**\n     * @dev Unsigned saturating addition, bounds to `2²⁵⁶ - 1` instead of overflowing.\n     */\n    function saturatingAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n        (bool success, uint256 result) = tryAdd(a, b);\n        return ternary(success, result, type(uint256).max);\n    }\n\n    /**\n     * @dev Unsigned saturating subtraction, bounds to zero instead of overflowing.\n     */\n    function saturatingSub(uint256 a, uint256 b) internal pure returns (uint256) {\n        (, uint256 result) = trySub(a, b);\n        return result;\n    }\n\n    /**\n     * @dev Unsigned saturating multiplication, bounds to `2²⁵⁶ - 1` instead of overflowing.\n     */\n    function saturatingMul(uint256 a, uint256 b) internal pure returns (uint256) {\n        (bool success, uint256 result) = tryMul(a, b);\n        return ternary(success, result, type(uint256).max);\n    }\n\n    /**\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\n     *\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\n     * one branch when needed, making this function more expensive.\n     */\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\n        unchecked {\n            // branchless ternary works because:\n            // b ^ (a ^ b) == a\n            // b ^ 0 == b\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return ternary(a > b, a, b);\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return ternary(a < b, a, b);\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            Panic.panic(Panic.DIVISION_BY_ZERO);\n        }\n\n        // The following calculation ensures accurate ceiling division without overflow.\n        // Since a is non-zero, (a - 1) / b will not overflow.\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\n        // when a = type(uint256).max and b = 1.\n        unchecked {\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\n        }\n    }\n\n    /**\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     *\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            (uint256 high, uint256 low) = mul512(x, y);\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (high == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return low / denominator;\n            }\n\n            // Make sure the result is less than 2²⁵⁶. Also prevents denominator == 0.\n            if (denominator <= high) {\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [high low].\n            uint256 remainder;\n            assembly (\"memory-safe\") {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                high := sub(high, gt(remainder, low))\n                low := sub(low, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly (\"memory-safe\") {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [high low] by twos.\n                low := div(low, twos)\n\n                // Flip twos such that it is 2²⁵⁶ / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from high into low.\n            low |= high * twos;\n\n            // Invert denominator mod 2²⁵⁶. Now that denominator is an odd number, it has an inverse modulo 2²⁵⁶ such\n            // that denominator * inv ≡ 1 mod 2²⁵⁶. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv ≡ 1 mod 2⁴.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2⁸\n            inverse *= 2 - denominator * inverse; // inverse mod 2¹⁶\n            inverse *= 2 - denominator * inverse; // inverse mod 2³²\n            inverse *= 2 - denominator * inverse; // inverse mod 2⁶⁴\n            inverse *= 2 - denominator * inverse; // inverse mod 2¹²⁸\n            inverse *= 2 - denominator * inverse; // inverse mod 2²⁵⁶\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2²⁵⁶. Since the preconditions guarantee that the outcome is\n            // less than 2²⁵⁶, this is the final result. We don't need to compute the high bits of the result and high\n            // is no longer required.\n            result = low * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\n    }\n\n    /**\n     * @dev Calculates floor(x * y >> n) with full precision. Throws if result overflows a uint256.\n     */\n    function mulShr(uint256 x, uint256 y, uint8 n) internal pure returns (uint256 result) {\n        unchecked {\n            (uint256 high, uint256 low) = mul512(x, y);\n            if (high >= 1 << n) {\n                Panic.panic(Panic.UNDER_OVERFLOW);\n            }\n            return (high << (256 - n)) | (low >> n);\n        }\n    }\n\n    /**\n     * @dev Calculates x * y >> n with full precision, following the selected rounding direction.\n     */\n    function mulShr(uint256 x, uint256 y, uint8 n, Rounding rounding) internal pure returns (uint256) {\n        return mulShr(x, y, n) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, 1 << n) > 0);\n    }\n\n    /**\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\n     *\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\n     *\n     * If the input value is not inversible, 0 is returned.\n     *\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\n     */\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\n        unchecked {\n            if (n == 0) return 0;\n\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\n            // ax + ny = 1\n            // ax = 1 + (-y)n\n            // ax ≡ 1 (mod n) # x is the inverse of a modulo n\n\n            // If the remainder is 0 the gcd is n right away.\n            uint256 remainder = a % n;\n            uint256 gcd = n;\n\n            // Therefore the initial coefficients are:\n            // ax + ny = gcd(a, n) = n\n            // 0a + 1n = n\n            int256 x = 0;\n            int256 y = 1;\n\n            while (remainder != 0) {\n                uint256 quotient = gcd / remainder;\n\n                (gcd, remainder) = (\n                    // The old remainder is the next gcd to try.\n                    remainder,\n                    // Compute the next remainder.\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\n                    // where gcd is at most n (capped to type(uint256).max)\n                    gcd - remainder * quotient\n                );\n\n                (x, y) = (\n                    // Increment the coefficient of a.\n                    y,\n                    // Decrement the coefficient of n.\n                    // Can overflow, but the result is casted to uint256 so that the\n                    // next value of y is \"wrapped around\" to a value between 0 and n - 1.\n                    x - y * int256(quotient)\n                );\n            }\n\n            if (gcd != 1) return 0; // No inverse exists.\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\n        }\n    }\n\n    /**\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\n     *\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\n     * prime, then `a**(p-1) ≡ 1 mod p`. As a consequence, we have `a * a**(p-2) ≡ 1 mod p`, which means that\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\n     *\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\n     */\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\n        unchecked {\n            return Math.modExp(a, p - 2, p);\n        }\n    }\n\n    /**\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\n     *\n     * Requirements:\n     * - modulus can't be zero\n     * - underlying staticcall to precompile must succeed\n     *\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\n     * interpreted as 0.\n     */\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\n        (bool success, uint256 result) = tryModExp(b, e, m);\n        if (!success) {\n            Panic.panic(Panic.DIVISION_BY_ZERO);\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\n     * to operate modulo 0 or if the underlying precompile reverted.\n     *\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\n     * of a revert, but the result may be incorrectly interpreted as 0.\n     */\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\n        if (m == 0) return (false, 0);\n        assembly (\"memory-safe\") {\n            let ptr := mload(0x40)\n            // | Offset    | Content    | Content (Hex)                                                      |\n            // |-----------|------------|--------------------------------------------------------------------|\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\n            mstore(ptr, 0x20)\n            mstore(add(ptr, 0x20), 0x20)\n            mstore(add(ptr, 0x40), 0x20)\n            mstore(add(ptr, 0x60), b)\n            mstore(add(ptr, 0x80), e)\n            mstore(add(ptr, 0xa0), m)\n\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\n            // so we can use the memory scratch space located at offset 0.\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\n            result := mload(0x00)\n        }\n    }\n\n    /**\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\n     */\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\n        (bool success, bytes memory result) = tryModExp(b, e, m);\n        if (!success) {\n            Panic.panic(Panic.DIVISION_BY_ZERO);\n        }\n        return result;\n    }\n\n    /**\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\n     */\n    function tryModExp(\n        bytes memory b,\n        bytes memory e,\n        bytes memory m\n    ) internal view returns (bool success, bytes memory result) {\n        if (_zeroBytes(m)) return (false, new bytes(0));\n\n        uint256 mLen = m.length;\n\n        // Encode call args in result and move the free memory pointer\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\n\n        assembly (\"memory-safe\") {\n            let dataPtr := add(result, 0x20)\n            // Write result on top of args to avoid allocating extra memory.\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\n            // Overwrite the length.\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\n            mstore(result, mLen)\n            // Set the memory pointer after the returned data.\n            mstore(0x40, add(dataPtr, mLen))\n        }\n    }\n\n    /**\n     * @dev Returns whether the provided byte array is zero.\n     */\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\n        for (uint256 i = 0; i < byteArray.length; ++i) {\n            if (byteArray[i] != 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\n     * using integer operations.\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        unchecked {\n            // Take care of easy edge cases when a == 0 or a == 1\n            if (a <= 1) {\n                return a;\n            }\n\n            // In this function, we use Newton's method to get a root of `f(x) := x² - a`. It involves building a\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\n            // the current value as `ε_n = | x_n - sqrt(a) |`.\n            //\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\n            // of the target. (i.e. `2**(e-1) ≤ sqrt(a) < 2**e`). We know that `e ≤ 128` because `(2¹²⁸)² = 2²⁵⁶` is\n            // bigger than any uint256.\n            //\n            // By noticing that\n            // `2**(e-1) ≤ sqrt(a) < 2**e → (2**(e-1))² ≤ a < (2**e)² → 2**(2*e-2) ≤ a < 2**(2*e)`\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\n            // to the msb function.\n            uint256 aa = a;\n            uint256 xn = 1;\n\n            if (aa >= (1 << 128)) {\n                aa >>= 128;\n                xn <<= 64;\n            }\n            if (aa >= (1 << 64)) {\n                aa >>= 64;\n                xn <<= 32;\n            }\n            if (aa >= (1 << 32)) {\n                aa >>= 32;\n                xn <<= 16;\n            }\n            if (aa >= (1 << 16)) {\n                aa >>= 16;\n                xn <<= 8;\n            }\n            if (aa >= (1 << 8)) {\n                aa >>= 8;\n                xn <<= 4;\n            }\n            if (aa >= (1 << 4)) {\n                aa >>= 4;\n                xn <<= 2;\n            }\n            if (aa >= (1 << 2)) {\n                xn <<= 1;\n            }\n\n            // We now have x_n such that `x_n = 2**(e-1) ≤ sqrt(a) < 2**e = 2 * x_n`. This implies ε_n ≤ 2**(e-1).\n            //\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to ε_n ≤ 2**(e-2).\n            // This is going to be our x_0 (and ε_0)\n            xn = (3 * xn) >> 1; // ε_0 := | x_0 - sqrt(a) | ≤ 2**(e-2)\n\n            // From here, Newton's method give us:\n            // x_{n+1} = (x_n + a / x_n) / 2\n            //\n            // One should note that:\n            // x_{n+1}² - a = ((x_n + a / x_n) / 2)² - a\n            //              = ((x_n² + a) / (2 * x_n))² - a\n            //              = (x_n⁴ + 2 * a * x_n² + a²) / (4 * x_n²) - a\n            //              = (x_n⁴ + 2 * a * x_n² + a² - 4 * a * x_n²) / (4 * x_n²)\n            //              = (x_n⁴ - 2 * a * x_n² + a²) / (4 * x_n²)\n            //              = (x_n² - a)² / (2 * x_n)²\n            //              = ((x_n² - a) / (2 * x_n))²\n            //              ≥ 0\n            // Which proves that for all n ≥ 1, sqrt(a) ≤ x_n\n            //\n            // This gives us the proof of quadratic convergence of the sequence:\n            // ε_{n+1} = | x_{n+1} - sqrt(a) |\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\n            //         = | (x_n² + a - 2*x_n*sqrt(a)) / (2 * x_n) |\n            //         = | (x_n - sqrt(a))² / (2 * x_n) |\n            //         = | ε_n² / (2 * x_n) |\n            //         = ε_n² / | (2 * x_n) |\n            //\n            // For the first iteration, we have a special case where x_0 is known:\n            // ε_1 = ε_0² / | (2 * x_0) |\n            //     ≤ (2**(e-2))² / (2 * (2**(e-1) + 2**(e-2)))\n            //     ≤ 2**(2*e-4) / (3 * 2**(e-1))\n            //     ≤ 2**(e-3) / 3\n            //     ≤ 2**(e-3-log2(3))\n            //     ≤ 2**(e-4.5)\n            //\n            // For the following iterations, we use the fact that, 2**(e-1) ≤ sqrt(a) ≤ x_n:\n            // ε_{n+1} = ε_n² / | (2 * x_n) |\n            //         ≤ (2**(e-k))² / (2 * 2**(e-1))\n            //         ≤ 2**(2*e-2*k) / 2**e\n            //         ≤ 2**(e-2*k)\n            xn = (xn + a / xn) >> 1; // ε_1 := | x_1 - sqrt(a) | ≤ 2**(e-4.5)  -- special case, see above\n            xn = (xn + a / xn) >> 1; // ε_2 := | x_2 - sqrt(a) | ≤ 2**(e-9)    -- general case with k = 4.5\n            xn = (xn + a / xn) >> 1; // ε_3 := | x_3 - sqrt(a) | ≤ 2**(e-18)   -- general case with k = 9\n            xn = (xn + a / xn) >> 1; // ε_4 := | x_4 - sqrt(a) | ≤ 2**(e-36)   -- general case with k = 18\n            xn = (xn + a / xn) >> 1; // ε_5 := | x_5 - sqrt(a) | ≤ 2**(e-72)   -- general case with k = 36\n            xn = (xn + a / xn) >> 1; // ε_6 := | x_6 - sqrt(a) | ≤ 2**(e-144)  -- general case with k = 72\n\n            // Because e ≤ 128 (as discussed during the first estimation phase), we know have reached a precision\n            // ε_6 ≤ 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\n            // sqrt(a) or sqrt(a) + 1.\n            return xn - SafeCast.toUint(xn > a / xn);\n        }\n    }\n\n    /**\n     * @dev Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 x) internal pure returns (uint256 r) {\n        // If value has upper 128 bits set, log2 result is at least 128\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\n        // If upper 64 bits of 128-bit half set, add 64 to result\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\n        // If upper 32 bits of 64-bit half set, add 32 to result\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\n        // If upper 16 bits of 32-bit half set, add 16 to result\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\n        // If upper 8 bits of 16-bit half set, add 8 to result\n        r |= SafeCast.toUint((x >> r) > 0xff) << 3;\n        // If upper 4 bits of 8-bit half set, add 4 to result\n        r |= SafeCast.toUint((x >> r) > 0xf) << 2;\n\n        // Shifts value right by the current result and use it as an index into this lookup table:\n        //\n        // | x (4 bits) |  index  | table[index] = MSB position |\n        // |------------|---------|-----------------------------|\n        // |    0000    |    0    |        table[0] = 0         |\n        // |    0001    |    1    |        table[1] = 0         |\n        // |    0010    |    2    |        table[2] = 1         |\n        // |    0011    |    3    |        table[3] = 1         |\n        // |    0100    |    4    |        table[4] = 2         |\n        // |    0101    |    5    |        table[5] = 2         |\n        // |    0110    |    6    |        table[6] = 2         |\n        // |    0111    |    7    |        table[7] = 2         |\n        // |    1000    |    8    |        table[8] = 3         |\n        // |    1001    |    9    |        table[9] = 3         |\n        // |    1010    |   10    |        table[10] = 3        |\n        // |    1011    |   11    |        table[11] = 3        |\n        // |    1100    |   12    |        table[12] = 3        |\n        // |    1101    |   13    |        table[13] = 3        |\n        // |    1110    |   14    |        table[14] = 3        |\n        // |    1111    |   15    |        table[15] = 3        |\n        //\n        // The lookup table is represented as a 32-byte value with the MSB positions for 0-15 in the last 16 bytes.\n        assembly (\"memory-safe\") {\n            r := or(r, byte(shr(r, x), 0x0000010102020202030303030303030300000000000000000000000000000000))\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 x) internal pure returns (uint256 r) {\n        // If value has upper 128 bits set, log2 result is at least 128\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\n        // If upper 64 bits of 128-bit half set, add 64 to result\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\n        // If upper 32 bits of 64-bit half set, add 32 to result\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\n        // If upper 16 bits of 32-bit half set, add 16 to result\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\n        // Add 1 if upper 8 bits of 16-bit half set, and divide accumulated result by 8\n        return (r >> 3) | SafeCast.toUint((x >> r) > 0xff);\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeCast {\n    /**\n     * @dev Value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\n\n    /**\n     * @dev An int value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedIntToUint(int256 value);\n\n    /**\n     * @dev Value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\n\n    /**\n     * @dev An uint value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedUintToInt(uint256 value);\n\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        if (value > type(uint248).max) {\n            revert SafeCastOverflowedUintDowncast(248, value);\n        }\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        if (value > type(uint240).max) {\n            revert SafeCastOverflowedUintDowncast(240, value);\n        }\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        if (value > type(uint232).max) {\n            revert SafeCastOverflowedUintDowncast(232, value);\n        }\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        if (value > type(uint224).max) {\n            revert SafeCastOverflowedUintDowncast(224, value);\n        }\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        if (value > type(uint216).max) {\n            revert SafeCastOverflowedUintDowncast(216, value);\n        }\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        if (value > type(uint208).max) {\n            revert SafeCastOverflowedUintDowncast(208, value);\n        }\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        if (value > type(uint200).max) {\n            revert SafeCastOverflowedUintDowncast(200, value);\n        }\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        if (value > type(uint192).max) {\n            revert SafeCastOverflowedUintDowncast(192, value);\n        }\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        if (value > type(uint184).max) {\n            revert SafeCastOverflowedUintDowncast(184, value);\n        }\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        if (value > type(uint176).max) {\n            revert SafeCastOverflowedUintDowncast(176, value);\n        }\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        if (value > type(uint168).max) {\n            revert SafeCastOverflowedUintDowncast(168, value);\n        }\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        if (value > type(uint160).max) {\n            revert SafeCastOverflowedUintDowncast(160, value);\n        }\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        if (value > type(uint152).max) {\n            revert SafeCastOverflowedUintDowncast(152, value);\n        }\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        if (value > type(uint144).max) {\n            revert SafeCastOverflowedUintDowncast(144, value);\n        }\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        if (value > type(uint136).max) {\n            revert SafeCastOverflowedUintDowncast(136, value);\n        }\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        if (value > type(uint128).max) {\n            revert SafeCastOverflowedUintDowncast(128, value);\n        }\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        if (value > type(uint120).max) {\n            revert SafeCastOverflowedUintDowncast(120, value);\n        }\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        if (value > type(uint112).max) {\n            revert SafeCastOverflowedUintDowncast(112, value);\n        }\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        if (value > type(uint104).max) {\n            revert SafeCastOverflowedUintDowncast(104, value);\n        }\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        if (value > type(uint96).max) {\n            revert SafeCastOverflowedUintDowncast(96, value);\n        }\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        if (value > type(uint88).max) {\n            revert SafeCastOverflowedUintDowncast(88, value);\n        }\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        if (value > type(uint80).max) {\n            revert SafeCastOverflowedUintDowncast(80, value);\n        }\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        if (value > type(uint72).max) {\n            revert SafeCastOverflowedUintDowncast(72, value);\n        }\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        if (value > type(uint64).max) {\n            revert SafeCastOverflowedUintDowncast(64, value);\n        }\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        if (value > type(uint56).max) {\n            revert SafeCastOverflowedUintDowncast(56, value);\n        }\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        if (value > type(uint48).max) {\n            revert SafeCastOverflowedUintDowncast(48, value);\n        }\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        if (value > type(uint40).max) {\n            revert SafeCastOverflowedUintDowncast(40, value);\n        }\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        if (value > type(uint32).max) {\n            revert SafeCastOverflowedUintDowncast(32, value);\n        }\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        if (value > type(uint24).max) {\n            revert SafeCastOverflowedUintDowncast(24, value);\n        }\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        if (value > type(uint16).max) {\n            revert SafeCastOverflowedUintDowncast(16, value);\n        }\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        if (value > type(uint8).max) {\n            revert SafeCastOverflowedUintDowncast(8, value);\n        }\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        if (value < 0) {\n            revert SafeCastOverflowedIntToUint(value);\n        }\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\n        downcasted = int248(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(248, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\n        downcasted = int240(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(240, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\n        downcasted = int232(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(232, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\n        downcasted = int224(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(224, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\n        downcasted = int216(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(216, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\n        downcasted = int208(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(208, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\n        downcasted = int200(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(200, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\n        downcasted = int192(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(192, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\n        downcasted = int184(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(184, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\n        downcasted = int176(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(176, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\n        downcasted = int168(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(168, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\n        downcasted = int160(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(160, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\n        downcasted = int152(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(152, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\n        downcasted = int144(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(144, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\n        downcasted = int136(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(136, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\n        downcasted = int128(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(128, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\n        downcasted = int120(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(120, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\n        downcasted = int112(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(112, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\n        downcasted = int104(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(104, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\n        downcasted = int96(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(96, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\n        downcasted = int88(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(88, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\n        downcasted = int80(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(80, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\n        downcasted = int72(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(72, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\n        downcasted = int64(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(64, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\n        downcasted = int56(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(56, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\n        downcasted = int48(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(48, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\n        downcasted = int40(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(40, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\n        downcasted = int32(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(32, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\n        downcasted = int24(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(24, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\n        downcasted = int16(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(16, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\n        downcasted = int8(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(8, value);\n        }\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        if (value > uint256(type(int256).max)) {\n            revert SafeCastOverflowedUintToInt(value);\n        }\n        return int256(value);\n    }\n\n    /**\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\n     */\n    function toUint(bool b) internal pure returns (uint256 u) {\n        assembly (\"memory-safe\") {\n            u := iszero(iszero(b))\n        }\n    }\n}\n"},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.20;\n\nimport {SafeCast} from \"./SafeCast.sol\";\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\n     *\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\n     * one branch when needed, making this function more expensive.\n     */\n    function ternary(bool condition, int256 a, int256 b) internal pure returns (int256) {\n        unchecked {\n            // branchless ternary works because:\n            // b ^ (a ^ b) == a\n            // b ^ 0 == b\n            return b ^ ((a ^ b) * int256(SafeCast.toUint(condition)));\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return ternary(a > b, a, b);\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return ternary(a < b, a, b);\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // Formula from the \"Bit Twiddling Hacks\" by Sean Eron Anderson.\n            // Since `n` is a signed integer, the generated bytecode will use the SAR opcode to perform the right shift,\n            // taking advantage of the most significant (or \"sign\" bit) in two's complement representation.\n            // This opcode adds new most significant bits set to the value of the previous most significant bit. As a result,\n            // the mask will either be `bytes32(0)` (if n is positive) or `~bytes32(0)` (if n is negative).\n            int256 mask = n >> 255;\n\n            // A `bytes32(0)` mask leaves the input unchanged, while a `~bytes32(0)` mask complements it.\n            return uint256((n + mask) ^ mask);\n        }\n    }\n}\n"},"lib/openzeppelin-foundry-upgrades/src/Defender.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Options, DefenderOptions} from \"./Options.sol\";\nimport {Core} from \"./internal/Core.sol\";\nimport {DefenderDeploy} from \"./internal/DefenderDeploy.sol\";\n\n/**\n * @dev Library for interacting with OpenZeppelin Defender from Forge scripts or tests.\n */\nlibrary Defender {\n    /**\n     * @dev Deploys a contract to the current network using OpenZeppelin Defender.\n     *\n     * WARNING: Do not use this function directly if you are deploying an upgradeable contract. This function does not validate whether the contract is upgrade safe.\n     *\n     * NOTE: If using an EOA or Safe to deploy, go to https://defender.openzeppelin.com/v2/#/deploy[Defender deploy] to submit the pending deployment while the script is running.\n     * The script waits for the deployment to complete before it continues.\n     *\n     * @param contractName Name of the contract to deploy, e.g. \"MyContract.sol\" or \"MyContract.sol:MyContract\" or artifact path relative to the project root directory\n     * @return Address of the deployed contract\n     */\n    function deployContract(string memory contractName) internal returns (address) {\n        return deployContract(contractName, \"\");\n    }\n\n    /**\n     * @dev Deploys a contract to the current network using OpenZeppelin Defender.\n     *\n     * WARNING: Do not use this function directly if you are deploying an upgradeable contract. This function does not validate whether the contract is upgrade safe.\n     *\n     * NOTE: If using an EOA or Safe to deploy, go to https://defender.openzeppelin.com/v2/#/deploy[Defender deploy] to submit the pending deployment while the script is running.\n     * The script waits for the deployment to complete before it continues.\n     *\n     * @param contractName Name of the contract to deploy, e.g. \"MyContract.sol\" or \"MyContract.sol:MyContract\" or artifact path relative to the project root directory\n     * @param defenderOpts Defender deployment options. Note that the `useDefenderDeploy` option is always treated as `true` when called from this function.\n     * @return Address of the deployed contract\n     */\n    function deployContract(\n        string memory contractName,\n        DefenderOptions memory defenderOpts\n    ) internal returns (address) {\n        return deployContract(contractName, \"\", defenderOpts);\n    }\n\n    /**\n     * @dev Deploys a contract with constructor arguments to the current network using OpenZeppelin Defender.\n     *\n     * WARNING: Do not use this function directly if you are deploying an upgradeable contract. This function does not validate whether the contract is upgrade safe.\n     *\n     * NOTE: If using an EOA or Safe to deploy, go to https://defender.openzeppelin.com/v2/#/deploy[Defender deploy] to submit the pending deployment while the script is running.\n     * The script waits for the deployment to complete before it continues.\n     *\n     * @param contractName Name of the contract to deploy, e.g. \"MyContract.sol\" or \"MyContract.sol:MyContract\" or artifact path relative to the project root directory\n     * @param constructorData Encoded constructor arguments\n     * @return Address of the deployed contract\n     */\n    function deployContract(string memory contractName, bytes memory constructorData) internal returns (address) {\n        DefenderOptions memory defenderOpts;\n        return deployContract(contractName, constructorData, defenderOpts);\n    }\n\n    /**\n     * @dev Deploys a contract with constructor arguments to the current network using OpenZeppelin Defender.\n     *\n     * WARNING: Do not use this function directly if you are deploying an upgradeable contract. This function does not validate whether the contract is upgrade safe.\n     *\n     * NOTE: If using an EOA or Safe to deploy, go to https://defender.openzeppelin.com/v2/#/deploy[Defender deploy] to submit the pending deployment while the script is running.\n     * The script waits for the deployment to complete before it continues.\n     *\n     * @param contractName Name of the contract to deploy, e.g. \"MyContract.sol\" or \"MyContract.sol:MyContract\" or artifact path relative to the project root directory\n     * @param constructorData Encoded constructor arguments\n     * @param defenderOpts Defender deployment options. Note that the `useDefenderDeploy` option is always treated as `true` when called from this function.\n     * @return Address of the deployed contract\n     */\n    function deployContract(\n        string memory contractName,\n        bytes memory constructorData,\n        DefenderOptions memory defenderOpts\n    ) internal returns (address) {\n        return DefenderDeploy.deploy(contractName, constructorData, defenderOpts);\n    }\n\n    /**\n     * @dev Proposes an upgrade to an upgradeable proxy using OpenZeppelin Defender.\n     *\n     * This function validates a new implementation contract in comparison with a reference contract, deploys the new implementation contract using Defender,\n     * and proposes an upgrade to the new implementation contract using an upgrade approval process on Defender.\n     *\n     * Supported for UUPS or Transparent proxies. Not currently supported for beacon proxies or beacons.\n     * For beacons, use `Upgrades.prepareUpgrade` along with a transaction proposal on Defender to upgrade the beacon to the deployed implementation.\n     *\n     * Requires that either the `referenceContract` option is set, or the contract has a `@custom:oz-upgrades-from <reference>` annotation.\n     *\n     * WARNING: Ensure that the reference contract is the same as the current implementation contract that the proxy is pointing to.\n     * This function does not validate that the reference contract is the current implementation.\n     *\n     * NOTE: If using an EOA or Safe to deploy, go to https://defender.openzeppelin.com/v2/#/deploy[Defender deploy] to submit the pending deployment of the new implementation contract while the script is running.\n     * The script waits for the deployment to complete before it continues.\n     *\n     * @param proxyAddress The proxy address\n     * @param newImplementationContractName Name of the new implementation contract to upgrade to, e.g. \"MyContract.sol\" or \"MyContract.sol:MyContract\" or artifact path relative to the project root directory\n     * @param opts Common options. Note that the `defender.useDefenderDeploy` option is always treated as `true` when called from this function.\n     * @return Struct containing the proposal ID and URL for the upgrade proposal\n     */\n    function proposeUpgrade(\n        address proxyAddress,\n        string memory newImplementationContractName,\n        Options memory opts\n    ) internal returns (ProposeUpgradeResponse memory) {\n        opts.defender.useDefenderDeploy = true;\n        address proxyAdminAddress = Core.getAdminAddress(proxyAddress);\n        address newImplementationAddress = Core.prepareUpgrade(newImplementationContractName, opts);\n        return\n            DefenderDeploy.proposeUpgrade(\n                proxyAddress,\n                proxyAdminAddress,\n                newImplementationAddress,\n                newImplementationContractName,\n                opts\n            );\n    }\n\n    /**\n     * @dev Gets the default deploy approval process configured for your deployment environment on OpenZeppelin Defender.\n     *\n     * @return Struct with the default deploy approval process ID and the associated address, such as a Relayer, EOA, or multisig wallet address.\n     */\n    function getDeployApprovalProcess() internal returns (ApprovalProcessResponse memory) {\n        return DefenderDeploy.getApprovalProcess(\"getDeployApprovalProcess\");\n    }\n\n    /**\n     * @dev Gets the default upgrade approval process configured for your deployment environment on OpenZeppelin Defender.\n     * For example, this is useful for determining the default multisig wallet that you can use in your scripts to assign as the owner of your proxy.\n     *\n     * @return Struct with the default upgrade approval process ID and the associated address, such as a multisig or governor contract address.\n     */\n    function getUpgradeApprovalProcess() internal returns (ApprovalProcessResponse memory) {\n        return DefenderDeploy.getApprovalProcess(\"getUpgradeApprovalProcess\");\n    }\n}\n\nstruct ProposeUpgradeResponse {\n    string proposalId;\n    string url;\n}\n\nstruct ApprovalProcessResponse {\n    string approvalProcessId;\n    address via;\n    string viaType;\n}\n"},"lib/openzeppelin-foundry-upgrades/src/Options.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/**\n * Common options.\n */\nstruct Options {\n    /*\n     * The reference contract to use for storage layout comparisons.\n     *\n     * For supported formats, see https://docs.openzeppelin.com/upgrades-plugins/api-foundry-upgrades#contract_name_formats\n     *\n     * If not using the `referenceBuildInfoDir` option, this must be in Foundry artifact format.\n     *\n     * If using the `referenceBuildInfoDir` option, this must be in annotation format prefixed with the build info directory short name.\n     * For example, if `referenceBuildInfoDir` is `previous-builds/build-info-v1` and the reference contract name is `ContractV1`,\n     * then set this to `build-info-v1:ContractV1`\n     *\n     * If not set, attempts to use the `@custom:oz-upgrades-from <reference>` annotation from the contract.\n     */\n    string referenceContract;\n    /*\n     * Absolute or relative path to a build info directory from a previous version of the project to use for storage layout comparisons.\n     * Relative paths must be relative to the Foundry project root.\n     *\n     * When using this option, refer to this directory using prefix `<dirName>:` before the contract name or fully qualified name\n     * in the `referenceContract` option or `@custom:oz-upgrades-from` annotation, where `<dirName>` is the directory short name.\n     * The directory short name must be unique when compared to the main build info directory.\n     */\n    string referenceBuildInfoDir;\n    /*\n     * Encoded constructor arguments for the implementation contract.\n     * Note that these are different from initializer arguments, and will be used in the deployment of the implementation contract itself.\n     * Can be used to initialize immutable variables.\n     */\n    bytes constructorData;\n    /*\n     * Exclude validations for contracts in source file paths that match any of the given glob patterns.\n     * For example, patterns such as \"contracts/helpers/*.sol\". Does not apply to reference contracts.\n     */\n    string[] exclude;\n    /*\n     * Selectively disable one or more validation errors. Comma-separated list that must be compatible with the\n     * --unsafeAllow option described in https://docs.openzeppelin.com/upgrades-plugins/api-core#usage\n     */\n    string unsafeAllow;\n    /*\n     * Configure storage layout check to allow variable renaming\n     */\n    bool unsafeAllowRenames;\n    /*\n     * Skips checking the `initialOwner` parameter of `Upgrades.deployTransparentProxy`.\n     * When deploying a transparent proxy, the `initialOwner` must be the address of an EOA or a contract that can call functions on a ProxyAdmin. It must not be a ProxyAdmin contract itself.\n     * Use this if you encounter an error due to this check and are sure that the `initialOwner` is not a ProxyAdmin contract.\n     */\n    bool unsafeSkipProxyAdminCheck;\n    /*\n     * Skips checking for storage layout compatibility errors. This is a dangerous option meant to be used as a last resort.\n     */\n    bool unsafeSkipStorageCheck;\n    /*\n     * Skips all upgrade safety checks. This is a dangerous option meant to be used as a last resort.\n     */\n    bool unsafeSkipAllChecks;\n    /*\n     * Options for OpenZeppelin Defender deployments.\n     */\n    DefenderOptions defender;\n}\n\n/**\n * Options for OpenZeppelin Defender deployments.\n */\nstruct DefenderOptions {\n    /*\n     * Deploys contracts using OpenZeppelin Defender instead of broadcasting deployments through Forge. Defaults to `false`. See DEFENDER.md.\n     *\n     * NOTE: If using an EOA or Safe to deploy, go to https://defender.openzeppelin.com/v2/#/deploy[Defender deploy] to submit the pending deployment(s) while the script is running.\n     * The script waits for each deployment to complete before it continues.\n     */\n    bool useDefenderDeploy;\n    /*\n     * When using OpenZeppelin Defender deployments, whether to skip verifying source code on block explorers. Defaults to `false`.\n     */\n    bool skipVerifySourceCode;\n    /*\n     * When using OpenZeppelin Defender deployments, the ID of the relayer to use for the deployment. Defaults to the relayer configured for your deployment environment on Defender.\n     */\n    string relayerId;\n    /*\n     * Applies to OpenZeppelin Defender deployments only.\n     * If this is not set, deployments will be performed using the CREATE opcode.\n     * If this is set, deployments will be performed using the CREATE2 opcode with the provided salt.\n     * Note that deployments using a Safe are done using CREATE2 and require a salt.\n     *\n     * WARNING: CREATE2 affects `msg.sender` behavior. See https://docs.openzeppelin.com/defender/v2/tutorial/deploy#deploy-caveat for more information.\n     */\n    bytes32 salt;\n    /*\n     * The ID of the upgrade approval process to use when proposing an upgrade.\n     * Defaults to the upgrade approval process configured for your deployment environment on Defender.\n     */\n    string upgradeApprovalProcessId;\n    /*\n     * License type to display on block explorers for verified source code.\n     * See https://etherscan.io/contract-license-types for supported values and use the string found in brackets, e.g. MIT.\n     * If not set, infers the license type by using the SPDX license identifier from the contract's Solidity file.\n     * Cannot be set if `skipLicenseType` or `skipVerifySourceCode` is `true`.\n     */\n    string licenseType;\n    /*\n     * If set to `true`, does not set the license type on block explorers for verified source code.\n     * Use this if your contract's license type is not supported by block explorers.\n     * Defaults to `false`.\n     */\n    bool skipLicenseType;\n    /*\n     * Transaction overrides for OpenZeppelin Defender deployments.\n     */\n    TxOverrides txOverrides;\n    /*\n     * When using OpenZeppelin Defender deployments, you can use this to identify, tag, or classify deployments.\n     * See https://docs.openzeppelin.com/defender/module/deploy#metadata.\n     * Must be a JSON string, for example: '{ \"commitHash\": \"4ae3e0d\", \"tag\": \"v1.0.0\", \"anyOtherField\": \"anyValue\" }'\n     */\n    string metadata;\n}\n\n/**\n * Transaction overrides for OpenZeppelin Defender deployments.\n */\nstruct TxOverrides {\n    /*\n     * Maximum amount of gas to allow the deployment transaction to use.\n     */\n    uint256 gasLimit;\n    /*\n     * Gas price for legacy transactions, in wei.\n     */\n    uint256 gasPrice;\n    /*\n     * Maximum total fee per gas, in wei.\n     */\n    uint256 maxFeePerGas;\n    /*\n     * Maximum priority fee per gas, in wei.\n     */\n    uint256 maxPriorityFeePerGas;\n}\n"},"lib/openzeppelin-foundry-upgrades/src/Upgrades.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport {ERC1967Proxy} from \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\";\nimport {TransparentUpgradeableProxy} from \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\nimport {UpgradeableBeacon} from \"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\";\nimport {BeaconProxy} from \"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\";\n\nimport {Vm} from \"forge-std/Vm.sol\";\nimport {Options} from \"./Options.sol\";\nimport {Core} from \"./internal/Core.sol\";\nimport {Utils} from \"./internal/Utils.sol\";\n\n/**\n * @dev Library for deploying and managing upgradeable contracts from Forge scripts or tests.\n *\n * NOTE: Requires OpenZeppelin Contracts v5 or higher.\n */\nlibrary Upgrades {\n    /**\n     * @dev Deploys a UUPS proxy using the given contract as the implementation.\n     *\n     * @param contractName Name of the contract to use as the implementation, e.g. \"MyContract.sol\" or \"MyContract.sol:MyContract\" or artifact path relative to the project root directory\n     * @param initializerData Encoded call data of the initializer function to call during creation of the proxy, or empty if no initialization is required\n     * @param opts Common options\n     * @return Proxy address\n     */\n    function deployUUPSProxy(\n        string memory contractName,\n        bytes memory initializerData,\n        Options memory opts\n    ) internal returns (address) {\n        address impl = deployImplementation(contractName, opts);\n\n        return Core.deploy(\"ERC1967Proxy.sol:ERC1967Proxy\", abi.encode(impl, initializerData), opts);\n    }\n\n    /**\n     * @dev Deploys a UUPS proxy using the given contract as the implementation.\n     *\n     * @param contractName Name of the contract to use as the implementation, e.g. \"MyContract.sol\" or \"MyContract.sol:MyContract\" or artifact path relative to the project root directory\n     * @param initializerData Encoded call data of the initializer function to call during creation of the proxy, or empty if no initialization is required\n     * @return Proxy address\n     */\n    function deployUUPSProxy(string memory contractName, bytes memory initializerData) internal returns (address) {\n        Options memory opts;\n        return deployUUPSProxy(contractName, initializerData, opts);\n    }\n\n    /**\n     * @dev Deploys a transparent proxy using the given contract as the implementation.\n     *\n     * @param contractName Name of the contract to use as the implementation, e.g. \"MyContract.sol\" or \"MyContract.sol:MyContract\" or artifact path relative to the project root directory\n     * @param initialOwner Address to set as the owner of the ProxyAdmin contract which gets deployed by the proxy\n     * @param initializerData Encoded call data of the initializer function to call during creation of the proxy, or empty if no initialization is required\n     * @param opts Common options\n     * @return Proxy address\n     */\n    function deployTransparentProxy(\n        string memory contractName,\n        address initialOwner,\n        bytes memory initializerData,\n        Options memory opts\n    ) internal returns (address) {\n        if (!opts.unsafeSkipAllChecks && !opts.unsafeSkipProxyAdminCheck && Core.inferProxyAdmin(initialOwner)) {\n            revert(\n                string.concat(\n                    \"`initialOwner` must not be a ProxyAdmin contract. If the contract at address \",\n                    Vm(Utils.CHEATCODE_ADDRESS).toString(initialOwner),\n                    \" is not a ProxyAdmin contract and you are sure that this contract is able to call functions on an actual ProxyAdmin, skip this check with the `unsafeSkipProxyAdminCheck` option.\"\n                )\n            );\n        }\n\n        address impl = deployImplementation(contractName, opts);\n\n        return\n            Core.deploy(\n                \"TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy\",\n                abi.encode(impl, initialOwner, initializerData),\n                opts\n            );\n    }\n\n    /**\n     * @dev Deploys a transparent proxy using the given contract as the implementation.\n     *\n     * @param contractName Name of the contract to use as the implementation, e.g. \"MyContract.sol\" or \"MyContract.sol:MyContract\" or artifact path relative to the project root directory\n     * @param initialOwner Address to set as the owner of the ProxyAdmin contract which gets deployed by the proxy\n     * @param initializerData Encoded call data of the initializer function to call during creation of the proxy, or empty if no initialization is required\n     * @return Proxy address\n     */\n    function deployTransparentProxy(\n        string memory contractName,\n        address initialOwner,\n        bytes memory initializerData\n    ) internal returns (address) {\n        Options memory opts;\n        return deployTransparentProxy(contractName, initialOwner, initializerData, opts);\n    }\n\n    /**\n     * @dev Upgrades a proxy to a new implementation contract. Only supported for UUPS or transparent proxies.\n     *\n     * Requires that either the `referenceContract` option is set, or the new implementation contract has a `@custom:oz-upgrades-from <reference>` annotation.\n     *\n     * @param proxy Address of the proxy to upgrade\n     * @param contractName Name of the new implementation contract to upgrade to, e.g. \"MyContract.sol\" or \"MyContract.sol:MyContract\" or artifact path relative to the project root directory\n     * @param data Encoded call data of an arbitrary function to call during the upgrade process, or empty if no function needs to be called during the upgrade\n     * @param opts Common options\n     */\n    function upgradeProxy(address proxy, string memory contractName, bytes memory data, Options memory opts) internal {\n        Core.upgradeProxy(proxy, contractName, data, opts);\n    }\n\n    /**\n     * @dev Upgrades a proxy to a new implementation contract. Only supported for UUPS or transparent proxies.\n     *\n     * Requires that either the `referenceContract` option is set, or the new implementation contract has a `@custom:oz-upgrades-from <reference>` annotation.\n     *\n     * @param proxy Address of the proxy to upgrade\n     * @param contractName Name of the new implementation contract to upgrade to, e.g. \"MyContract.sol\" or \"MyContract.sol:MyContract\" or artifact path relative to the project root directory\n     * @param data Encoded call data of an arbitrary function to call during the upgrade process, or empty if no function needs to be called during the upgrade\n     */\n    function upgradeProxy(address proxy, string memory contractName, bytes memory data) internal {\n        Options memory opts;\n        Core.upgradeProxy(proxy, contractName, data, opts);\n    }\n\n    /**\n     * @notice For tests only. If broadcasting in scripts, use the `--sender <ADDRESS>` option with `forge script` instead.\n     *\n     * @dev Upgrades a proxy to a new implementation contract. Only supported for UUPS or transparent proxies.\n     *\n     * Requires that either the `referenceContract` option is set, or the new implementation contract has a `@custom:oz-upgrades-from <reference>` annotation.\n     *\n     * This function provides an additional `tryCaller` parameter to test an upgrade using a specific caller address.\n     * Use this if you encounter `OwnableUnauthorizedAccount` errors in your tests.\n     *\n     * @param proxy Address of the proxy to upgrade\n     * @param contractName Name of the new implementation contract to upgrade to, e.g. \"MyContract.sol\" or \"MyContract.sol:MyContract\" or artifact path relative to the project root directory\n     * @param data Encoded call data of an arbitrary function to call during the upgrade process, or empty if no function needs to be called during the upgrade\n     * @param opts Common options\n     * @param tryCaller Address to use as the caller of the upgrade function. This should be the address that owns the proxy or its ProxyAdmin.\n     */\n    function upgradeProxy(\n        address proxy,\n        string memory contractName,\n        bytes memory data,\n        Options memory opts,\n        address tryCaller\n    ) internal {\n        Core.upgradeProxy(proxy, contractName, data, opts, tryCaller);\n    }\n\n    /**\n     * @notice For tests only. If broadcasting in scripts, use the `--sender <ADDRESS>` option with `forge script` instead.\n     *\n     * @dev Upgrades a proxy to a new implementation contract. Only supported for UUPS or transparent proxies.\n     *\n     * Requires that either the `referenceContract` option is set, or the new implementation contract has a `@custom:oz-upgrades-from <reference>` annotation.\n     *\n     * This function provides an additional `tryCaller` parameter to test an upgrade using a specific caller address.\n     * Use this if you encounter `OwnableUnauthorizedAccount` errors in your tests.\n     *\n     * @param proxy Address of the proxy to upgrade\n     * @param contractName Name of the new implementation contract to upgrade to, e.g. \"MyContract.sol\" or \"MyContract.sol:MyContract\" or artifact path relative to the project root directory\n     * @param data Encoded call data of an arbitrary function to call during the upgrade process, or empty if no function needs to be called during the upgrade\n     * @param tryCaller Address to use as the caller of the upgrade function. This should be the address that owns the proxy or its ProxyAdmin.\n     */\n    function upgradeProxy(address proxy, string memory contractName, bytes memory data, address tryCaller) internal {\n        Options memory opts;\n        Core.upgradeProxy(proxy, contractName, data, opts, tryCaller);\n    }\n\n    /**\n     * @dev Deploys an upgradeable beacon using the given contract as the implementation.\n     *\n     * @param contractName Name of the contract to use as the implementation, e.g. \"MyContract.sol\" or \"MyContract.sol:MyContract\" or artifact path relative to the project root directory\n     * @param initialOwner Address to set as the owner of the UpgradeableBeacon contract which gets deployed\n     * @param opts Common options\n     * @return Beacon address\n     */\n    function deployBeacon(\n        string memory contractName,\n        address initialOwner,\n        Options memory opts\n    ) internal returns (address) {\n        address impl = deployImplementation(contractName, opts);\n\n        return Core.deploy(\"UpgradeableBeacon.sol:UpgradeableBeacon\", abi.encode(impl, initialOwner), opts);\n    }\n\n    /**\n     * @dev Deploys an upgradeable beacon using the given contract as the implementation.\n     *\n     * @param contractName Name of the contract to use as the implementation, e.g. \"MyContract.sol\" or \"MyContract.sol:MyContract\" or artifact path relative to the project root directory\n     * @param initialOwner Address to set as the owner of the UpgradeableBeacon contract which gets deployed\n     * @return Beacon address\n     */\n    function deployBeacon(string memory contractName, address initialOwner) internal returns (address) {\n        Options memory opts;\n        return deployBeacon(contractName, initialOwner, opts);\n    }\n\n    /**\n     * @dev Upgrades a beacon to a new implementation contract.\n     *\n     * Requires that either the `referenceContract` option is set, or the new implementation contract has a `@custom:oz-upgrades-from <reference>` annotation.\n     *\n     * @param beacon Address of the beacon to upgrade\n     * @param contractName Name of the new implementation contract to upgrade to, e.g. \"MyContract.sol\" or \"MyContract.sol:MyContract\" or artifact path relative to the project root directory\n     * @param opts Common options\n     */\n    function upgradeBeacon(address beacon, string memory contractName, Options memory opts) internal {\n        Core.upgradeBeacon(beacon, contractName, opts);\n    }\n\n    /**\n     * @dev Upgrades a beacon to a new implementation contract.\n     *\n     * Requires that either the `referenceContract` option is set, or the new implementation contract has a `@custom:oz-upgrades-from <reference>` annotation.\n     *\n     * @param beacon Address of the beacon to upgrade\n     * @param contractName Name of the new implementation contract to upgrade to, e.g. \"MyContract.sol\" or \"MyContract.sol:MyContract\" or artifact path relative to the project root directory\n     */\n    function upgradeBeacon(address beacon, string memory contractName) internal {\n        Options memory opts;\n        Core.upgradeBeacon(beacon, contractName, opts);\n    }\n\n    /**\n     * @notice For tests only. If broadcasting in scripts, use the `--sender <ADDRESS>` option with `forge script` instead.\n     *\n     * @dev Upgrades a beacon to a new implementation contract.\n     *\n     * Requires that either the `referenceContract` option is set, or the new implementation contract has a `@custom:oz-upgrades-from <reference>` annotation.\n     *\n     * This function provides an additional `tryCaller` parameter to test an upgrade using a specific caller address.\n     * Use this if you encounter `OwnableUnauthorizedAccount` errors in your tests.\n     *\n     * @param beacon Address of the beacon to upgrade\n     * @param contractName Name of the new implementation contract to upgrade to, e.g. \"MyContract.sol\" or \"MyContract.sol:MyContract\" or artifact path relative to the project root directory\n     * @param opts Common options\n     * @param tryCaller Address to use as the caller of the upgrade function. This should be the address that owns the beacon.\n     */\n    function upgradeBeacon(\n        address beacon,\n        string memory contractName,\n        Options memory opts,\n        address tryCaller\n    ) internal {\n        Core.upgradeBeacon(beacon, contractName, opts, tryCaller);\n    }\n\n    /**\n     * @notice For tests only. If broadcasting in scripts, use the `--sender <ADDRESS>` option with `forge script` instead.\n     *\n     * @dev Upgrades a beacon to a new implementation contract.\n     *\n     * Requires that either the `referenceContract` option is set, or the new implementation contract has a `@custom:oz-upgrades-from <reference>` annotation.\n     *\n     * This function provides an additional `tryCaller` parameter to test an upgrade using a specific caller address.\n     * Use this if you encounter `OwnableUnauthorizedAccount` errors in your tests.\n     *\n     * @param beacon Address of the beacon to upgrade\n     * @param contractName Name of the new implementation contract to upgrade to, e.g. \"MyContract.sol\" or \"MyContract.sol:MyContract\" or artifact path relative to the project root directory\n     * @param tryCaller Address to use as the caller of the upgrade function. This should be the address that owns the beacon.\n     */\n    function upgradeBeacon(address beacon, string memory contractName, address tryCaller) internal {\n        Options memory opts;\n        Core.upgradeBeacon(beacon, contractName, opts, tryCaller);\n    }\n\n    /**\n     * @dev Deploys a beacon proxy using the given beacon and call data.\n     *\n     * @param beacon Address of the beacon to use\n     * @param data Encoded call data of the initializer function to call during creation of the proxy, or empty if no initialization is required\n     * @return Proxy address\n     */\n    function deployBeaconProxy(address beacon, bytes memory data) internal returns (address) {\n        Options memory opts;\n        return deployBeaconProxy(beacon, data, opts);\n    }\n\n    /**\n     * @dev Deploys a beacon proxy using the given beacon and call data.\n     *\n     * @param beacon Address of the beacon to use\n     * @param data Encoded call data of the initializer function to call during creation of the proxy, or empty if no initialization is required\n     * @param opts Common options\n     * @return Proxy address\n     */\n    function deployBeaconProxy(address beacon, bytes memory data, Options memory opts) internal returns (address) {\n        return Core.deploy(\"BeaconProxy.sol:BeaconProxy\", abi.encode(beacon, data), opts);\n    }\n\n    /**\n     * @dev Validates an implementation contract, but does not deploy it.\n     *\n     * @param contractName Name of the contract to validate, e.g. \"MyContract.sol\" or \"MyContract.sol:MyContract\" or artifact path relative to the project root directory\n     * @param opts Common options\n     */\n    function validateImplementation(string memory contractName, Options memory opts) internal {\n        Core.validateImplementation(contractName, opts);\n    }\n\n    /**\n     * @dev Validates and deploys an implementation contract, and returns its address.\n     *\n     * @param contractName Name of the contract to deploy, e.g. \"MyContract.sol\" or \"MyContract.sol:MyContract\" or artifact path relative to the project root directory\n     * @param opts Common options\n     * @return Address of the implementation contract\n     */\n    function deployImplementation(string memory contractName, Options memory opts) internal returns (address) {\n        return Core.deployImplementation(contractName, opts);\n    }\n\n    /**\n     * @dev Validates a new implementation contract in comparison with a reference contract, but does not deploy it.\n     *\n     * Requires that either the `referenceContract` option is set, or the contract has a `@custom:oz-upgrades-from <reference>` annotation.\n     *\n     * @param contractName Name of the contract to validate, e.g. \"MyContract.sol\" or \"MyContract.sol:MyContract\" or artifact path relative to the project root directory\n     * @param opts Common options\n     */\n    function validateUpgrade(string memory contractName, Options memory opts) internal {\n        Core.validateUpgrade(contractName, opts);\n    }\n\n    /**\n     * @dev Validates a new implementation contract in comparison with a reference contract, deploys the new implementation contract,\n     * and returns its address.\n     *\n     * Requires that either the `referenceContract` option is set, or the contract has a `@custom:oz-upgrades-from <reference>` annotation.\n     *\n     * Use this method to prepare an upgrade to be run from an admin address you do not control directly or cannot use from your deployment environment.\n     *\n     * @param contractName Name of the contract to deploy, e.g. \"MyContract.sol\" or \"MyContract.sol:MyContract\" or artifact path relative to the project root directory\n     * @param opts Common options\n     * @return Address of the new implementation contract\n     */\n    function prepareUpgrade(string memory contractName, Options memory opts) internal returns (address) {\n        return Core.prepareUpgrade(contractName, opts);\n    }\n\n    /**\n     * @dev Gets the admin address of a transparent proxy from its ERC1967 admin storage slot.\n     *\n     * @param proxy Address of a transparent proxy\n     * @return Admin address\n     */\n    function getAdminAddress(address proxy) internal view returns (address) {\n        return Core.getAdminAddress(proxy);\n    }\n\n    /**\n     * @dev Gets the implementation address of a transparent or UUPS proxy from its ERC1967 implementation storage slot.\n     *\n     * @param proxy Address of a transparent or UUPS proxy\n     * @return Implementation address\n     */\n    function getImplementationAddress(address proxy) internal view returns (address) {\n        return Core.getImplementationAddress(proxy);\n    }\n\n    /**\n     * @dev Gets the beacon address of a beacon proxy from its ERC1967 beacon storage slot.\n     *\n     * @param proxy Address of a beacon proxy\n     * @return Beacon address\n     */\n    function getBeaconAddress(address proxy) internal view returns (address) {\n        return Core.getBeaconAddress(proxy);\n    }\n}\n\n/**\n * @dev Library for deploying and managing upgradeable contracts from Forge tests, without validations.\n *\n * Can be used with `forge coverage`. Requires implementation contracts to be instantiated first.\n * Does not require `--ffi` and does not require a clean compilation before each run.\n *\n * Not supported for OpenZeppelin Defender deployments.\n *\n * WARNING: Not recommended for use in Forge scripts.\n * `UnsafeUpgrades` does not validate whether your contracts are upgrade safe or whether new implementations are compatible with previous ones.\n * Use `Upgrades` if you want validations to be run.\n *\n * NOTE: Requires OpenZeppelin Contracts v5 or higher.\n */\nlibrary UnsafeUpgrades {\n    /**\n     * @dev Deploys a UUPS proxy using the given contract address as the implementation.\n     *\n     * @param impl Address of the contract to use as the implementation\n     * @param initializerData Encoded call data of the initializer function to call during creation of the proxy, or empty if no initialization is required\n     * @return Proxy address\n     */\n    function deployUUPSProxy(address impl, bytes memory initializerData) internal returns (address) {\n        return address(new ERC1967Proxy(impl, initializerData));\n    }\n\n    /**\n     * @dev Deploys a transparent proxy using the given contract address as the implementation.\n     *\n     * @param impl Address of the contract to use as the implementation\n     * @param initialOwner Address to set as the owner of the ProxyAdmin contract which gets deployed by the proxy\n     * @param initializerData Encoded call data of the initializer function to call during creation of the proxy, or empty if no initialization is required\n     * @return Proxy address\n     */\n    function deployTransparentProxy(\n        address impl,\n        address initialOwner,\n        bytes memory initializerData\n    ) internal returns (address) {\n        return address(new TransparentUpgradeableProxy(impl, initialOwner, initializerData));\n    }\n\n    /**\n     * @dev Upgrades a proxy to a new implementation contract address. Only supported for UUPS or transparent proxies.\n     *\n     * @param proxy Address of the proxy to upgrade\n     * @param newImpl Address of the new implementation contract to upgrade to\n     * @param data Encoded call data of an arbitrary function to call during the upgrade process, or empty if no function needs to be called during the upgrade\n     */\n    function upgradeProxy(address proxy, address newImpl, bytes memory data) internal {\n        Core.upgradeProxyTo(proxy, newImpl, data);\n    }\n\n    /**\n     * @notice For tests only. If broadcasting in scripts, use the `--sender <ADDRESS>` option with `forge script` instead.\n     *\n     * @dev Upgrades a proxy to a new implementation contract address. Only supported for UUPS or transparent proxies.\n     *\n     * This function provides an additional `tryCaller` parameter to test an upgrade using a specific caller address.\n     * Use this if you encounter `OwnableUnauthorizedAccount` errors in your tests.\n     *\n     * @param proxy Address of the proxy to upgrade\n     * @param newImpl Address of the new implementation contract to upgrade to\n     * @param data Encoded call data of an arbitrary function to call during the upgrade process, or empty if no function needs to be called during the upgrade\n     * @param tryCaller Address to use as the caller of the upgrade function. This should be the address that owns the proxy or its ProxyAdmin.\n     */\n    function upgradeProxy(address proxy, address newImpl, bytes memory data, address tryCaller) internal {\n        Core.upgradeProxyTo(proxy, newImpl, data, tryCaller);\n    }\n\n    /**\n     * @dev Deploys an upgradeable beacon using the given contract address as the implementation.\n     *\n     * @param impl Address of the contract to use as the implementation\n     * @param initialOwner Address to set as the owner of the UpgradeableBeacon contract which gets deployed\n     * @return Beacon address\n     */\n    function deployBeacon(address impl, address initialOwner) internal returns (address) {\n        return address(new UpgradeableBeacon(impl, initialOwner));\n    }\n\n    /**\n     * @dev Upgrades a beacon to a new implementation contract address.\n     *\n     * @param beacon Address of the beacon to upgrade\n     * @param newImpl Address of the new implementation contract to upgrade to\n     */\n    function upgradeBeacon(address beacon, address newImpl) internal {\n        Core.upgradeBeaconTo(beacon, newImpl);\n    }\n\n    /**\n     * @notice For tests only. If broadcasting in scripts, use the `--sender <ADDRESS>` option with `forge script` instead.\n     *\n     * @dev Upgrades a beacon to a new implementation contract address.\n     *\n     * This function provides an additional `tryCaller` parameter to test an upgrade using a specific caller address.\n     * Use this if you encounter `OwnableUnauthorizedAccount` errors in your tests.\n     *\n     * @param beacon Address of the beacon to upgrade\n     * @param newImpl Address of the new implementation contract to upgrade to\n     * @param tryCaller Address to use as the caller of the upgrade function. This should be the address that owns the beacon.\n     */\n    function upgradeBeacon(address beacon, address newImpl, address tryCaller) internal {\n        Core.upgradeBeaconTo(beacon, newImpl, tryCaller);\n    }\n\n    /**\n     * @dev Deploys a beacon proxy using the given beacon and call data.\n     *\n     * @param beacon Address of the beacon to use\n     * @param data Encoded call data of the initializer function to call during creation of the proxy, or empty if no initialization is required\n     * @return Proxy address\n     */\n    function deployBeaconProxy(address beacon, bytes memory data) internal returns (address) {\n        return address(new BeaconProxy(beacon, data));\n    }\n\n    /**\n     * @dev Gets the admin address of a transparent proxy from its ERC1967 admin storage slot.\n     *\n     * @param proxy Address of a transparent proxy\n     * @return Admin address\n     */\n    function getAdminAddress(address proxy) internal view returns (address) {\n        return Core.getAdminAddress(proxy);\n    }\n\n    /**\n     * @dev Gets the implementation address of a transparent or UUPS proxy from its ERC1967 implementation storage slot.\n     *\n     * @param proxy Address of a transparent or UUPS proxy\n     * @return Implementation address\n     */\n    function getImplementationAddress(address proxy) internal view returns (address) {\n        return Core.getImplementationAddress(proxy);\n    }\n\n    /**\n     * @dev Gets the beacon address of a beacon proxy from its ERC1967 beacon storage slot.\n     *\n     * @param proxy Address of a beacon proxy\n     * @return Beacon address\n     */\n    function getBeaconAddress(address proxy) internal view returns (address) {\n        return Core.getBeaconAddress(proxy);\n    }\n}\n"},"lib/openzeppelin-foundry-upgrades/src/internal/Core.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Vm} from \"forge-std/Vm.sol\";\nimport {console} from \"forge-std/console.sol\";\n\nimport {Strings} from \"@openzeppelin/contracts/utils/Strings.sol\";\n\nimport {Options} from \"../Options.sol\";\nimport {Versions} from \"./Versions.sol\";\nimport {Utils} from \"./Utils.sol\";\nimport {DefenderDeploy} from \"./DefenderDeploy.sol\";\n\nimport {IUpgradeableProxy} from \"./interfaces/IUpgradeableProxy.sol\";\nimport {IProxyAdmin} from \"./interfaces/IProxyAdmin.sol\";\nimport {IUpgradeableBeacon} from \"./interfaces/IUpgradeableBeacon.sol\";\n\n/**\n * @dev Internal helper methods to validate/deploy implementations and perform upgrades.\n *\n * WARNING: DO NOT USE DIRECTLY. Use Upgrades.sol, LegacyUpgrades.sol or Defender.sol instead.\n */\nlibrary Core {\n    /**\n     * @dev Upgrades a proxy to a new implementation contract. Only supported for UUPS or transparent proxies.\n     *\n     * Requires that either the `referenceContract` option is set, or the new implementation contract has a `@custom:oz-upgrades-from <reference>` annotation.\n     *\n     * @param proxy Address of the proxy to upgrade\n     * @param contractName Name of the new implementation contract to upgrade to, e.g. \"MyContract.sol\" or \"MyContract.sol:MyContract\" or artifact path relative to the project root directory\n     * @param data Encoded call data of an arbitrary function to call during the upgrade process, or empty if no function needs to be called during the upgrade\n     * @param opts Common options\n     */\n    function upgradeProxy(address proxy, string memory contractName, bytes memory data, Options memory opts) internal {\n        address newImpl = prepareUpgrade(contractName, opts);\n        upgradeProxyTo(proxy, newImpl, data);\n    }\n\n    /**\n     * @notice For tests only. If broadcasting in scripts, use the `--sender <ADDRESS>` option with `forge script` instead.\n     *\n     * @dev Upgrades a proxy to a new implementation contract. Only supported for UUPS or transparent proxies.\n     *\n     * Requires that either the `referenceContract` option is set, or the new implementation contract has a `@custom:oz-upgrades-from <reference>` annotation.\n     *\n     * This function provides an additional `tryCaller` parameter to test an upgrade using a specific caller address.\n     * Use this if you encounter `OwnableUnauthorizedAccount` errors in your tests.\n     *\n     * @param proxy Address of the proxy to upgrade\n     * @param contractName Name of the new implementation contract to upgrade to, e.g. \"MyContract.sol\" or \"MyContract.sol:MyContract\" or artifact path relative to the project root directory\n     * @param data Encoded call data of an arbitrary function to call during the upgrade process, or empty if no function needs to be called during the upgrade\n     * @param opts Common options\n     * @param tryCaller Address to use as the caller of the upgrade function. This should be the address that owns the proxy or its ProxyAdmin.\n     */\n    function upgradeProxy(\n        address proxy,\n        string memory contractName,\n        bytes memory data,\n        Options memory opts,\n        address tryCaller\n    ) internal tryPrank(tryCaller) {\n        upgradeProxy(proxy, contractName, data, opts);\n    }\n\n    using Strings for *;\n\n    /**\n     * @dev Upgrades a proxy to a new implementation contract. Only supported for UUPS or transparent proxies.\n     *\n     * @param proxy Address of the proxy to upgrade\n     * @param newImpl Address of the new implementation contract to upgrade to\n     * @param data Encoded call data of an arbitrary function to call during the upgrade process, or empty if no function needs to be called during the upgrade\n     */\n    function upgradeProxyTo(address proxy, address newImpl, bytes memory data) internal {\n        Vm vm = Vm(Utils.CHEATCODE_ADDRESS);\n\n        bytes32 adminSlot = vm.load(proxy, ADMIN_SLOT);\n        if (adminSlot == bytes32(0)) {\n            string memory upgradeInterfaceVersion = getUpgradeInterfaceVersion(proxy);\n            if (upgradeInterfaceVersion.equal(\"5.0.0\") || data.length > 0) {\n                IUpgradeableProxy(proxy).upgradeToAndCall(newImpl, data);\n            } else {\n                IUpgradeableProxy(proxy).upgradeTo(newImpl);\n            }\n        } else {\n            address admin = address(uint160(uint256(adminSlot)));\n            string memory upgradeInterfaceVersion = getUpgradeInterfaceVersion(admin);\n            if (upgradeInterfaceVersion.equal(\"5.0.0\") || data.length > 0) {\n                IProxyAdmin(admin).upgradeAndCall(proxy, newImpl, data);\n            } else {\n                IProxyAdmin(admin).upgrade(proxy, newImpl);\n            }\n        }\n    }\n\n    /**\n     * @notice For tests only. If broadcasting in scripts, use the `--sender <ADDRESS>` option with `forge script` instead.\n     *\n     * @dev Upgrades a proxy to a new implementation contract. Only supported for UUPS or transparent proxies.\n     *\n     * This function provides an additional `tryCaller` parameter to test an upgrade using a specific caller address.\n     * Use this if you encounter `OwnableUnauthorizedAccount` errors in your tests.\n     *\n     * @param proxy Address of the proxy to upgrade\n     * @param newImpl Address of the new implementation contract to upgrade to\n     * @param data Encoded call data of an arbitrary function to call during the upgrade process, or empty if no function needs to be called during the upgrade\n     * @param tryCaller Address to use as the caller of the upgrade function. This should be the address that owns the proxy or its ProxyAdmin.\n     */\n    function upgradeProxyTo(\n        address proxy,\n        address newImpl,\n        bytes memory data,\n        address tryCaller\n    ) internal tryPrank(tryCaller) {\n        upgradeProxyTo(proxy, newImpl, data);\n    }\n\n    /**\n     * @dev Upgrades a beacon to a new implementation contract.\n     *\n     * Requires that either the `referenceContract` option is set, or the new implementation contract has a `@custom:oz-upgrades-from <reference>` annotation.\n     *\n     * @param beacon Address of the beacon to upgrade\n     * @param contractName Name of the new implementation contract to upgrade to, e.g. \"MyContract.sol\" or \"MyContract.sol:MyContract\" or artifact path relative to the project root directory\n     * @param opts Common options\n     */\n    function upgradeBeacon(address beacon, string memory contractName, Options memory opts) internal {\n        address newImpl = prepareUpgrade(contractName, opts);\n        upgradeBeaconTo(beacon, newImpl);\n    }\n\n    /**\n     * @notice For tests only. If broadcasting in scripts, use the `--sender <ADDRESS>` option with `forge script` instead.\n     *\n     * @dev Upgrades a beacon to a new implementation contract.\n     *\n     * Requires that either the `referenceContract` option is set, or the new implementation contract has a `@custom:oz-upgrades-from <reference>` annotation.\n     *\n     * This function provides an additional `tryCaller` parameter to test an upgrade using a specific caller address.\n     * Use this if you encounter `OwnableUnauthorizedAccount` errors in your tests.\n     *\n     * @param beacon Address of the beacon to upgrade\n     * @param contractName Name of the new implementation contract to upgrade to, e.g. \"MyContract.sol\" or \"MyContract.sol:MyContract\" or artifact path relative to the project root directory\n     * @param opts Common options\n     * @param tryCaller Address to use as the caller of the upgrade function. This should be the address that owns the beacon.\n     */\n    function upgradeBeacon(\n        address beacon,\n        string memory contractName,\n        Options memory opts,\n        address tryCaller\n    ) internal tryPrank(tryCaller) {\n        upgradeBeacon(beacon, contractName, opts);\n    }\n\n    /**\n     * @dev Upgrades a beacon to a new implementation contract address.\n     *\n     * @param beacon Address of the beacon to upgrade\n     * @param newImpl Address of the new implementation contract to upgrade to\n     */\n    function upgradeBeaconTo(address beacon, address newImpl) internal {\n        IUpgradeableBeacon(beacon).upgradeTo(newImpl);\n    }\n\n    /**\n     * @notice For tests only. If broadcasting in scripts, use the `--sender <ADDRESS>` option with `forge script` instead.\n     *\n     * @dev Upgrades a beacon to a new implementation contract.\n     *\n     * This function provides an additional `tryCaller` parameter to test an upgrade using a specific caller address.\n     * Use this if you encounter `OwnableUnauthorizedAccount` errors in your tests.\n     *\n     * @param beacon Address of the beacon to upgrade\n     * @param newImpl Address of the new implementation contract to upgrade to\n     * @param tryCaller Address to use as the caller of the upgrade function. This should be the address that owns the beacon.\n     */\n    function upgradeBeaconTo(address beacon, address newImpl, address tryCaller) internal tryPrank(tryCaller) {\n        upgradeBeaconTo(beacon, newImpl);\n    }\n\n    /**\n     * @dev Validates an implementation contract, but does not deploy it.\n     *\n     * @param contractName Name of the contract to validate, e.g. \"MyContract.sol\" or \"MyContract.sol:MyContract\" or artifact path relative to the project root directory\n     * @param opts Common options\n     */\n    function validateImplementation(string memory contractName, Options memory opts) internal {\n        _validate(contractName, opts, false);\n    }\n\n    /**\n     * @dev Validates and deploys an implementation contract, and returns its address.\n     *\n     * @param contractName Name of the contract to deploy, e.g. \"MyContract.sol\" or \"MyContract.sol:MyContract\" or artifact path relative to the project root directory\n     * @param opts Common options\n     * @return Address of the implementation contract\n     */\n    function deployImplementation(string memory contractName, Options memory opts) internal returns (address) {\n        validateImplementation(contractName, opts);\n        return deploy(contractName, opts.constructorData, opts);\n    }\n\n    /**\n     * @dev Validates a new implementation contract in comparison with a reference contract, but does not deploy it.\n     *\n     * Requires that either the `referenceContract` option is set, or the contract has a `@custom:oz-upgrades-from <reference>` annotation.\n     *\n     * @param contractName Name of the contract to validate, e.g. \"MyContract.sol\" or \"MyContract.sol:MyContract\" or artifact path relative to the project root directory\n     * @param opts Common options\n     */\n    function validateUpgrade(string memory contractName, Options memory opts) internal {\n        _validate(contractName, opts, true);\n    }\n\n    /**\n     * @dev Validates a new implementation contract in comparison with a reference contract, deploys the new implementation contract,\n     * and returns its address.\n     *\n     * Requires that either the `referenceContract` option is set, or the contract has a `@custom:oz-upgrades-from <reference>` annotation.\n     *\n     * Use this method to prepare an upgrade to be run from an admin address you do not control directly or cannot use from your deployment environment.\n     *\n     * @param contractName Name of the contract to deploy, e.g. \"MyContract.sol\" or \"MyContract.sol:MyContract\" or artifact path relative to the project root directory\n     * @param opts Common options\n     * @return Address of the new implementation contract\n     */\n    function prepareUpgrade(string memory contractName, Options memory opts) internal returns (address) {\n        validateUpgrade(contractName, opts);\n        return deploy(contractName, opts.constructorData, opts);\n    }\n\n    /**\n     * @dev Gets the admin address of a transparent proxy from its ERC1967 admin storage slot.\n     *\n     * @param proxy Address of a transparent proxy\n     * @return Admin address\n     */\n    function getAdminAddress(address proxy) internal view returns (address) {\n        Vm vm = Vm(Utils.CHEATCODE_ADDRESS);\n\n        bytes32 adminSlot = vm.load(proxy, ADMIN_SLOT);\n        return address(uint160(uint256(adminSlot)));\n    }\n\n    /**\n     * @dev Gets the implementation address of a transparent or UUPS proxy from its ERC1967 implementation storage slot.\n     *\n     * @param proxy Address of a transparent or UUPS proxy\n     * @return Implementation address\n     */\n    function getImplementationAddress(address proxy) internal view returns (address) {\n        Vm vm = Vm(Utils.CHEATCODE_ADDRESS);\n\n        bytes32 implSlot = vm.load(proxy, IMPLEMENTATION_SLOT);\n        return address(uint160(uint256(implSlot)));\n    }\n\n    /**\n     * @dev Gets the beacon address of a beacon proxy from its ERC1967 beacon storage slot.\n     *\n     * @param proxy Address of a beacon proxy\n     * @return Beacon address\n     */\n    function getBeaconAddress(address proxy) internal view returns (address) {\n        Vm vm = Vm(Utils.CHEATCODE_ADDRESS);\n\n        bytes32 beaconSlot = vm.load(proxy, BEACON_SLOT);\n        return address(uint160(uint256(beaconSlot)));\n    }\n\n    /**\n     * @notice For tests only. If broadcasting in scripts, use the `--sender <ADDRESS>` option with `forge script` instead.\n     *\n     * @dev Runs a function as a prank, or just runs the function normally if the prank could not be started.\n     */\n    modifier tryPrank(address deployer) {\n        Vm vm = Vm(Utils.CHEATCODE_ADDRESS);\n\n        try vm.startPrank(deployer) {\n            _;\n            vm.stopPrank();\n        } catch {\n            _;\n        }\n    }\n\n    /**\n     * @dev Storage slot with the address of the implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1.\n     */\n    bytes32 private constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Storage slot with the admin of the proxy.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1.\n     */\n    bytes32 private constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Storage slot with the UpgradeableBeacon contract which defines the implementation for the proxy.\n     * This is the keccak-256 hash of \"eip1967.proxy.beacon\" subtracted by 1.\n     */\n    bytes32 private constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Gets the upgrade interface version string from a proxy or admin contract using the `UPGRADE_INTERFACE_VERSION()` getter.\n     * If the contract does not have the getter or the return data does not look like a string, this function returns an empty string.\n     */\n    function getUpgradeInterfaceVersion(address addr) internal view returns (string memory) {\n        // Use staticcall to prevent forge from broadcasting it, and to ensure no state changes\n        (bool success, bytes memory returndata) = addr.staticcall(\n            abi.encodeWithSignature(\"UPGRADE_INTERFACE_VERSION()\")\n        );\n        if (success && returndata.length > 32) {\n            return abi.decode(returndata, (string));\n        } else {\n            return \"\";\n        }\n    }\n\n    /**\n     * @dev Infers whether the address might be a ProxyAdmin contract.\n     */\n    function inferProxyAdmin(address addr) internal view returns (bool) {\n        return _hasOwner(addr);\n    }\n\n    /**\n     * @dev Returns true if the address is a contract with an `owner()` function that is not state-changing and returns something that might be an address,\n     * otherwise returns false.\n     */\n    function _hasOwner(address addr) private view returns (bool) {\n        // Use staticcall to prevent forge from broadcasting it, and to ensure no state changes\n        (bool success, bytes memory returndata) = addr.staticcall(abi.encodeWithSignature(\"owner()\"));\n        return (success && returndata.length == 32);\n    }\n\n    function _validate(string memory contractName, Options memory opts, bool requireReference) private {\n        if (opts.unsafeSkipAllChecks) {\n            return;\n        }\n\n        string[] memory inputs = buildValidateCommand(contractName, opts, requireReference);\n        Vm.FfiResult memory result = Utils.runAsBashCommand(inputs);\n        string memory stdout = string(result.stdout);\n\n        // CLI validate command uses exit code to indicate if the validation passed or failed.\n        Vm vm = Vm(Utils.CHEATCODE_ADDRESS);\n        if (result.exitCode == 0) {\n            // As an extra precaution, we also check stdout for \"SUCCESS\" to ensure it actually ran.\n            if (vm.contains(stdout, \"SUCCESS\")) {\n                if (result.stderr.length > 0) {\n                    // Prints warnings from stderr\n                    console.log(string(result.stderr));\n                }\n                return;\n            } else {\n                revert(string(abi.encodePacked(\"Failed to run upgrade safety validation: \", stdout)));\n            }\n        } else {\n            if (vm.contains(stdout, \"FAILED\")) {\n                if (result.stderr.length > 0) {\n                    // Prints warnings from stderr\n                    console.log(string(result.stderr));\n                }\n                // Validations ran but some contracts were not upgrade safe\n                revert(string(abi.encodePacked(\"Upgrade safety validation failed:\\n\", stdout)));\n            } else {\n                // Validations failed to run\n                revert(string(abi.encodePacked(\"Failed to run upgrade safety validation: \", string(result.stderr))));\n            }\n        }\n    }\n\n    function buildValidateCommand(\n        string memory contractName,\n        Options memory opts,\n        bool requireReference\n    ) internal view returns (string[] memory) {\n        string memory outDir = Utils.getOutDir();\n\n        string[] memory inputBuilder = new string[](2 ** 16);\n\n        uint16 i = 0;\n\n        inputBuilder[i++] = \"npx\";\n        inputBuilder[i++] = string(abi.encodePacked(\"@openzeppelin/upgrades-core@\", Versions.UPGRADES_CORE));\n        inputBuilder[i++] = \"validate\";\n        inputBuilder[i++] = string(abi.encodePacked(outDir, \"/build-info\"));\n        inputBuilder[i++] = \"--contract\";\n        inputBuilder[i++] = Utils.getFullyQualifiedName(contractName, outDir);\n\n        bool hasReferenceContract = bytes(opts.referenceContract).length != 0;\n        bool hasReferenceBuildInfoDir = bytes(opts.referenceBuildInfoDir).length != 0;\n\n        if (hasReferenceContract) {\n            string memory referenceArg = hasReferenceBuildInfoDir\n                ? opts.referenceContract\n                : Utils.getFullyQualifiedName(opts.referenceContract, outDir);\n            inputBuilder[i++] = \"--reference\";\n            inputBuilder[i++] = string(abi.encodePacked('\"', referenceArg, '\"'));\n        }\n\n        if (hasReferenceBuildInfoDir) {\n            inputBuilder[i++] = \"--referenceBuildInfoDirs\";\n            inputBuilder[i++] = string(abi.encodePacked('\"', opts.referenceBuildInfoDir, '\"'));\n        }\n\n        for (uint8 j = 0; j < opts.exclude.length; j++) {\n            string memory exclude = opts.exclude[j];\n            if (bytes(exclude).length != 0) {\n                inputBuilder[i++] = \"--exclude\";\n                inputBuilder[i++] = string(abi.encodePacked('\"', exclude, '\"'));\n            }\n        }\n\n        if (opts.unsafeSkipStorageCheck) {\n            inputBuilder[i++] = \"--unsafeSkipStorageCheck\";\n        } else if (requireReference) {\n            inputBuilder[i++] = \"--requireReference\";\n        }\n\n        if (bytes(opts.unsafeAllow).length != 0) {\n            inputBuilder[i++] = \"--unsafeAllow\";\n            inputBuilder[i++] = opts.unsafeAllow;\n        }\n\n        if (opts.unsafeAllowRenames) {\n            inputBuilder[i++] = \"--unsafeAllowRenames\";\n        }\n\n        // Create a copy of inputs but with the correct length\n        string[] memory inputs = new string[](i);\n        for (uint16 j = 0; j < i; j++) {\n            inputs[j] = inputBuilder[j];\n        }\n\n        return inputs;\n    }\n\n    function deploy(\n        string memory contractName,\n        bytes memory constructorData,\n        Options memory opts\n    ) internal returns (address) {\n        if (opts.defender.useDefenderDeploy) {\n            return DefenderDeploy.deploy(contractName, constructorData, opts.defender);\n        } else {\n            return _deploy(contractName, constructorData);\n        }\n    }\n\n    function _deploy(string memory contractName, bytes memory constructorData) private returns (address) {\n        bytes memory creationCode = Vm(Utils.CHEATCODE_ADDRESS).getCode(contractName);\n        address deployedAddress = _deployFromBytecode(abi.encodePacked(creationCode, constructorData));\n        if (deployedAddress == address(0)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"Failed to deploy contract \",\n                        contractName,\n                        ' using constructor data \"',\n                        string(constructorData),\n                        '\"'\n                    )\n                )\n            );\n        }\n        return deployedAddress;\n    }\n\n    function _deployFromBytecode(bytes memory bytecode) private returns (address) {\n        address addr;\n        /// @solidity memory-safe-assembly\n        assembly {\n            addr := create(0, add(bytecode, 32), mload(bytecode))\n        }\n        return addr;\n    }\n}\n"},"lib/openzeppelin-foundry-upgrades/src/internal/DefenderDeploy.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Vm} from \"forge-std/Vm.sol\";\nimport {console} from \"forge-std/console.sol\";\n\nimport {Strings} from \"@openzeppelin/contracts/utils/Strings.sol\";\n\nimport {Utils, ContractInfo} from \"./Utils.sol\";\nimport {Versions} from \"./Versions.sol\";\nimport {Options, DefenderOptions} from \"../Options.sol\";\nimport {ProposeUpgradeResponse, ApprovalProcessResponse} from \"../Defender.sol\";\n\n/**\n * @dev Internal helper methods for Defender deployments.\n *\n * WARNING: DO NOT USE DIRECTLY. Use Defender.sol instead.\n */\nlibrary DefenderDeploy {\n    function deploy(\n        string memory contractName,\n        bytes memory constructorData,\n        DefenderOptions memory defenderOpts\n    ) internal returns (address) {\n        string memory outDir = Utils.getOutDir();\n        ContractInfo memory contractInfo = Utils.getContractInfo(contractName, outDir);\n        string memory buildInfoFile = Utils.getBuildInfoFile(\n            contractInfo.sourceCodeHash,\n            contractInfo.shortName,\n            outDir\n        );\n\n        string[] memory inputs = buildDeployCommand(contractInfo, buildInfoFile, constructorData, defenderOpts);\n\n        Vm.FfiResult memory result = Utils.runAsBashCommand(inputs);\n        string memory stdout = string(result.stdout);\n\n        if (result.exitCode != 0) {\n            revert(string(abi.encodePacked(\"Failed to deploy contract \", contractName, \": \", string(result.stderr))));\n        }\n\n        string memory deployedAddress = _parseLine(\"Deployed to address: \", stdout, true);\n        return Vm(Utils.CHEATCODE_ADDRESS).parseAddress(deployedAddress);\n    }\n\n    function buildDeployCommand(\n        ContractInfo memory contractInfo,\n        string memory buildInfoFile,\n        bytes memory constructorData,\n        DefenderOptions memory defenderOpts\n    ) internal view returns (string[] memory) {\n        Vm vm = Vm(Utils.CHEATCODE_ADDRESS);\n\n        if (bytes(defenderOpts.licenseType).length != 0) {\n            if (defenderOpts.skipVerifySourceCode) {\n                revert(\"The `licenseType` option cannot be used when the `skipVerifySourceCode` option is `true`\");\n            } else if (defenderOpts.skipLicenseType) {\n                revert(\"The `licenseType` option cannot be used when the `skipLicenseType` option is `true`\");\n            }\n        }\n\n        string[] memory inputBuilder = new string[](255);\n\n        uint8 i = 0;\n\n        inputBuilder[i++] = \"npx\";\n        inputBuilder[i++] = string(\n            abi.encodePacked(\"@openzeppelin/defender-deploy-client-cli@\", Versions.DEFENDER_DEPLOY_CLIENT_CLI)\n        );\n        inputBuilder[i++] = \"deploy\";\n        inputBuilder[i++] = \"--contractName\";\n        inputBuilder[i++] = contractInfo.shortName;\n        inputBuilder[i++] = \"--contractPath\";\n        inputBuilder[i++] = contractInfo.contractPath;\n        inputBuilder[i++] = \"--chainId\";\n        inputBuilder[i++] = Strings.toString(block.chainid);\n        inputBuilder[i++] = \"--buildInfoFile\";\n        inputBuilder[i++] = buildInfoFile;\n        if (constructorData.length > 0) {\n            inputBuilder[i++] = \"--constructorBytecode\";\n            inputBuilder[i++] = vm.toString(constructorData);\n        }\n        if (defenderOpts.skipVerifySourceCode) {\n            inputBuilder[i++] = \"--verifySourceCode\";\n            inputBuilder[i++] = \"false\";\n        } else if (bytes(defenderOpts.licenseType).length != 0) {\n            inputBuilder[i++] = \"--licenseType\";\n            inputBuilder[i++] = string(abi.encodePacked('\"', defenderOpts.licenseType, '\"'));\n        } else if (!defenderOpts.skipLicenseType && bytes(contractInfo.license).length != 0) {\n            inputBuilder[i++] = \"--licenseType\";\n            inputBuilder[i++] = string(abi.encodePacked('\"', _toLicenseType(contractInfo), '\"'));\n        }\n        if (bytes(defenderOpts.relayerId).length != 0) {\n            inputBuilder[i++] = \"--relayerId\";\n            inputBuilder[i++] = defenderOpts.relayerId;\n        }\n        if (defenderOpts.salt != 0) {\n            inputBuilder[i++] = \"--salt\";\n            inputBuilder[i++] = vm.toString(defenderOpts.salt);\n        }\n        if (defenderOpts.txOverrides.gasLimit != 0) {\n            inputBuilder[i++] = \"--gasLimit\";\n            inputBuilder[i++] = Strings.toString(defenderOpts.txOverrides.gasLimit);\n        }\n        if (defenderOpts.txOverrides.gasPrice != 0) {\n            inputBuilder[i++] = \"--gasPrice\";\n            inputBuilder[i++] = Strings.toString(defenderOpts.txOverrides.gasPrice);\n        }\n        if (defenderOpts.txOverrides.maxFeePerGas != 0) {\n            inputBuilder[i++] = \"--maxFeePerGas\";\n            inputBuilder[i++] = Strings.toString(defenderOpts.txOverrides.maxFeePerGas);\n        }\n        if (defenderOpts.txOverrides.maxPriorityFeePerGas != 0) {\n            inputBuilder[i++] = \"--maxPriorityFeePerGas\";\n            inputBuilder[i++] = Strings.toString(defenderOpts.txOverrides.maxPriorityFeePerGas);\n        }\n        if (bytes(defenderOpts.metadata).length != 0) {\n            inputBuilder[i++] = \"--metadata\";\n            inputBuilder[i++] = string(abi.encodePacked('\"', vm.replace(defenderOpts.metadata, '\"', '\\\\\"'), '\"'));\n        }\n        inputBuilder[i++] = \"--origin\";\n        inputBuilder[i++] = \"Foundry\";\n\n        // Create a copy of inputs but with the correct length\n        string[] memory inputs = new string[](i);\n        for (uint8 j = 0; j < i; j++) {\n            inputs[j] = inputBuilder[j];\n        }\n\n        return inputs;\n    }\n\n    using Strings for string;\n\n    function _toLicenseType(ContractInfo memory contractInfo) private pure returns (string memory) {\n        string memory id = contractInfo.license;\n        if (id.equal(\"UNLICENSED\")) {\n            return \"None\";\n        } else if (id.equal(\"Unlicense\")) {\n            return \"Unlicense\";\n        } else if (id.equal(\"MIT\")) {\n            return \"MIT\";\n        } else if (id.equal(\"GPL-2.0-only\") || id.equal(\"GPL-2.0-or-later\")) {\n            return \"GNU GPLv2\";\n        } else if (id.equal(\"GPL-3.0-only\") || id.equal(\"GPL-3.0-or-later\")) {\n            return \"GNU GPLv3\";\n        } else if (id.equal(\"LGPL-2.1-only\") || id.equal(\"LGPL-2.1-or-later\")) {\n            return \"GNU LGPLv2.1\";\n        } else if (id.equal(\"LGPL-3.0-only\") || id.equal(\"LGPL-3.0-or-later\")) {\n            return \"GNU LGPLv3\";\n        } else if (id.equal(\"BSD-2-Clause\")) {\n            return \"BSD-2-Clause\";\n        } else if (id.equal(\"BSD-3-Clause\")) {\n            return \"BSD-3-Clause\";\n        } else if (id.equal(\"MPL-2.0\")) {\n            return \"MPL-2.0\";\n        } else if (id.equal(\"OSL-3.0\")) {\n            return \"OSL-3.0\";\n        } else if (id.equal(\"Apache-2.0\")) {\n            return \"Apache-2.0\";\n        } else if (id.equal(\"AGPL-3.0-only\") || id.equal(\"AGPL-3.0-or-later\")) {\n            return \"GNU AGPLv3\";\n        } else if (id.equal(\"BUSL-1.1\")) {\n            return \"BSL 1.1\";\n        } else {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"SPDX license identifier \",\n                        contractInfo.license,\n                        \" in \",\n                        contractInfo.contractPath,\n                        \" does not look like a supported license for block explorer verification. Use the `licenseType` option to specify a license type, or set the `skipLicenseType` option to `true` to skip.\"\n                    )\n                )\n            );\n        }\n    }\n\n    function proposeUpgrade(\n        address proxyAddress,\n        address proxyAdminAddress,\n        address newImplementationAddress,\n        string memory newImplementationContractName,\n        Options memory opts\n    ) internal returns (ProposeUpgradeResponse memory) {\n        Vm vm = Vm(Utils.CHEATCODE_ADDRESS);\n\n        string memory outDir = Utils.getOutDir();\n        ContractInfo memory contractInfo = Utils.getContractInfo(newImplementationContractName, outDir);\n\n        string[] memory inputs = buildProposeUpgradeCommand(\n            proxyAddress,\n            proxyAdminAddress,\n            newImplementationAddress,\n            contractInfo,\n            opts\n        );\n\n        Vm.FfiResult memory result = Utils.runAsBashCommand(inputs);\n        string memory stdout = string(result.stdout);\n\n        if (result.exitCode != 0) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"Failed to propose upgrade for proxy \",\n                        vm.toString(proxyAddress),\n                        \": \",\n                        string(result.stderr)\n                    )\n                )\n            );\n        }\n\n        return parseProposeUpgradeResponse(stdout);\n    }\n\n    function parseProposeUpgradeResponse(string memory stdout) internal returns (ProposeUpgradeResponse memory) {\n        ProposeUpgradeResponse memory response;\n        response.proposalId = _parseLine(\"Proposal ID: \", stdout, true);\n        response.url = _parseLine(\"Proposal URL: \", stdout, false);\n        return response;\n    }\n\n    function _parseLine(\n        string memory expectedPrefix,\n        string memory stdout,\n        bool required\n    ) private returns (string memory) {\n        Vm vm = Vm(Utils.CHEATCODE_ADDRESS);\n        if (vm.contains(stdout, expectedPrefix)) {\n            // Get the substring after the prefix\n            string[] memory segments = vm.split(stdout, expectedPrefix);\n            if (segments.length > 2) {\n                revert(\n                    string(\n                        abi.encodePacked(\n                            \"Found multiple occurrences of prefix '\",\n                            expectedPrefix,\n                            \"' in output: \",\n                            stdout\n                        )\n                    )\n                );\n            }\n            string memory suffix = segments[1];\n            // Keep only the first line\n            return vm.split(suffix, \"\\n\")[0];\n        } else if (required) {\n            revert(\n                string(abi.encodePacked(\"Failed to find line with prefix '\", expectedPrefix, \"' in output: \", stdout))\n            );\n        } else {\n            return \"\";\n        }\n    }\n\n    function buildProposeUpgradeCommand(\n        address proxyAddress,\n        address proxyAdminAddress,\n        address newImplementationAddress,\n        ContractInfo memory contractInfo,\n        Options memory opts\n    ) internal view returns (string[] memory) {\n        Vm vm = Vm(Utils.CHEATCODE_ADDRESS);\n\n        string[] memory inputBuilder = new string[](255);\n\n        uint8 i = 0;\n\n        inputBuilder[i++] = \"npx\";\n        inputBuilder[i++] = string(\n            abi.encodePacked(\"@openzeppelin/defender-deploy-client-cli@\", Versions.DEFENDER_DEPLOY_CLIENT_CLI)\n        );\n        inputBuilder[i++] = \"proposeUpgrade\";\n        inputBuilder[i++] = \"--proxyAddress\";\n        inputBuilder[i++] = vm.toString(proxyAddress);\n        inputBuilder[i++] = \"--newImplementationAddress\";\n        inputBuilder[i++] = vm.toString(newImplementationAddress);\n        inputBuilder[i++] = \"--chainId\";\n        inputBuilder[i++] = Strings.toString(block.chainid);\n        inputBuilder[i++] = \"--contractArtifactFile\";\n        inputBuilder[i++] = string(abi.encodePacked('\"', contractInfo.artifactPath, '\"'));\n        if (proxyAdminAddress != address(0)) {\n            inputBuilder[i++] = \"--proxyAdminAddress\";\n            inputBuilder[i++] = vm.toString(proxyAdminAddress);\n        }\n        if (bytes(opts.defender.upgradeApprovalProcessId).length != 0) {\n            inputBuilder[i++] = \"--approvalProcessId\";\n            inputBuilder[i++] = opts.defender.upgradeApprovalProcessId;\n        }\n\n        // Create a copy of inputs but with the correct length\n        string[] memory inputs = new string[](i);\n        for (uint8 j = 0; j < i; j++) {\n            inputs[j] = inputBuilder[j];\n        }\n\n        return inputs;\n    }\n\n    function getApprovalProcess(string memory command) internal returns (ApprovalProcessResponse memory) {\n        string[] memory inputs = buildGetApprovalProcessCommand(command);\n\n        Vm.FfiResult memory result = Utils.runAsBashCommand(inputs);\n        string memory stdout = string(result.stdout);\n\n        if (result.exitCode != 0) {\n            revert(string(abi.encodePacked(\"Failed to get approval process: \", string(result.stderr))));\n        }\n\n        return parseApprovalProcessResponse(stdout);\n    }\n\n    function parseApprovalProcessResponse(string memory stdout) internal returns (ApprovalProcessResponse memory) {\n        Vm vm = Vm(Utils.CHEATCODE_ADDRESS);\n\n        ApprovalProcessResponse memory response;\n\n        response.approvalProcessId = _parseLine(\"Approval process ID: \", stdout, true);\n\n        string memory viaString = _parseLine(\"Via: \", stdout, false);\n        if (bytes(viaString).length != 0) {\n            response.via = vm.parseAddress(viaString);\n        }\n\n        response.viaType = _parseLine(\"Via type: \", stdout, false);\n\n        return response;\n    }\n\n    function buildGetApprovalProcessCommand(string memory command) internal view returns (string[] memory) {\n        string[] memory inputBuilder = new string[](255);\n\n        uint8 i = 0;\n\n        inputBuilder[i++] = \"npx\";\n        inputBuilder[i++] = string(\n            abi.encodePacked(\"@openzeppelin/defender-deploy-client-cli@\", Versions.DEFENDER_DEPLOY_CLIENT_CLI)\n        );\n        inputBuilder[i++] = command;\n        inputBuilder[i++] = \"--chainId\";\n        inputBuilder[i++] = Strings.toString(block.chainid);\n\n        // Create a copy of inputs but with the correct length\n        string[] memory inputs = new string[](i);\n        for (uint8 j = 0; j < i; j++) {\n            inputs[j] = inputBuilder[j];\n        }\n\n        return inputs;\n    }\n}\n"},"lib/openzeppelin-foundry-upgrades/src/internal/StringFinder.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Vm} from \"forge-std/Vm.sol\";\nimport {Utils} from \"./Utils.sol\";\n\n/**\n * String finder functions using Forge's string cheatcodes.\n * For internal use only.\n */\nlibrary StringFinder {\n    /**\n     * Returns whether the subject string contains the search string.\n     */\n    function contains(string memory subject, string memory search) internal returns (bool) {\n        Vm vm = Vm(Utils.CHEATCODE_ADDRESS);\n        return vm.contains(subject, search);\n    }\n\n    /**\n     * Returns whether the subject string starts with the search string.\n     */\n    function startsWith(string memory subject, string memory search) internal pure returns (bool) {\n        Vm vm = Vm(Utils.CHEATCODE_ADDRESS);\n        uint256 index = vm.indexOf(subject, search);\n        return index == 0;\n    }\n\n    /**\n     * Returns whether the subject string ends with the search string.\n     */\n    function endsWith(string memory subject, string memory search) internal pure returns (bool) {\n        Vm vm = Vm(Utils.CHEATCODE_ADDRESS);\n        string[] memory tokens = vm.split(subject, search);\n        return tokens.length > 1 && bytes(tokens[tokens.length - 1]).length == 0;\n    }\n\n    /**\n     * Returns the number of non-overlapping occurrences of the search string in the subject string.\n     */\n    function count(string memory subject, string memory search) internal pure returns (uint256) {\n        Vm vm = Vm(Utils.CHEATCODE_ADDRESS);\n        string[] memory tokens = vm.split(subject, search);\n        return tokens.length - 1;\n    }\n}\n"},"lib/openzeppelin-foundry-upgrades/src/internal/Utils.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Vm} from \"forge-std/Vm.sol\";\nimport {console} from \"forge-std/console.sol\";\n\nimport {StringFinder} from \"./StringFinder.sol\";\n\nstruct ContractInfo {\n    /*\n     * Contract path, e.g. \"src/MyContract.sol\"\n     */\n    string contractPath;\n    /*\n     * Contract short name, e.g. \"MyContract\"\n     */\n    string shortName;\n    /*\n     * License identifier from the compiled artifact. Empty if not found.\n     */\n    string license;\n    /*\n     * keccak256 hash of the source code from metadata\n     */\n    string sourceCodeHash;\n    /*\n     * Artifact file path e.g. the path of the file 'out/MyContract.sol/MyContract.json'\n     */\n    string artifactPath;\n}\n\n/**\n * @dev Internal helper methods used by Upgrades and Defender libraries.\n */\nlibrary Utils {\n    address constant CHEATCODE_ADDRESS = 0x7109709ECfa91a80626fF3989D68f67F5b1DD12D;\n\n    /**\n     * @dev Gets the fully qualified name of a contract.\n     *\n     * @param contractName Contract name in the format \"MyContract.sol\" or \"MyContract.sol:MyContract\" or artifact path relative to the project root directory\n     * @param outDir Foundry output directory to search in if contractName is not an artifact path\n     * @return Fully qualified name of the contract, e.g. \"src/MyContract.sol:MyContract\"\n     */\n    function getFullyQualifiedName(\n        string memory contractName,\n        string memory outDir\n    ) internal view returns (string memory) {\n        ContractInfo memory info = getContractInfo(contractName, outDir);\n        return string(abi.encodePacked(info.contractPath, \":\", info.shortName));\n    }\n\n    /**\n     * @dev Gets information about a contract from its Foundry artifact.\n     *\n     * @param contractName Contract name in the format \"MyContract.sol\" or \"MyContract.sol:MyContract\" or artifact path relative to the project root directory\n     * @param outDir Foundry output directory to search in if contractName is not an artifact path\n     * @return ContractInfo struct containing information about the contract\n     */\n    function getContractInfo(\n        string memory contractName,\n        string memory outDir\n    ) internal view returns (ContractInfo memory) {\n        Vm vm = Vm(CHEATCODE_ADDRESS);\n\n        ContractInfo memory info;\n\n        info.shortName = _toShortName(contractName);\n\n        string memory fileName = _toFileName(contractName);\n\n        string memory artifactPath = string(\n            abi.encodePacked(vm.projectRoot(), \"/\", outDir, \"/\", fileName, \"/\", info.shortName, \".json\")\n        );\n        string memory artifactJson = vm.readFile(artifactPath);\n\n        if (!vm.keyExistsJson(artifactJson, \".ast\")) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"Could not find AST in artifact \",\n                        artifactPath,\n                        \". Set `ast = true` in foundry.toml\"\n                    )\n                )\n            );\n        }\n        info.contractPath = vm.parseJsonString(artifactJson, \".ast.absolutePath\");\n        if (vm.keyExistsJson(artifactJson, \".ast.license\")) {\n            info.license = vm.parseJsonString(artifactJson, \".ast.license\");\n        }\n        info.sourceCodeHash = vm.parseJsonString(\n            artifactJson,\n            string(abi.encodePacked(\".metadata.sources.['\", info.contractPath, \"'].keccak256\"))\n        );\n        info.artifactPath = artifactPath;\n\n        return info;\n    }\n\n    using StringFinder for string;\n\n    /**\n     * Gets the path to the build-info file that contains the given bytecode.\n     *\n     * @param sourceCodeHash keccak256 hash of the source code from metadata\n     * @param contractName Contract name to display in error message if build-info file is not found\n     * @param outDir Foundry output directory that contains a build-info directory\n     * @return The path to the build-info file that contains the given bytecode\n     */\n    function getBuildInfoFile(\n        string memory sourceCodeHash,\n        string memory contractName,\n        string memory outDir\n    ) internal returns (string memory) {\n        string[] memory inputs = new string[](4);\n        inputs[0] = \"grep\";\n        inputs[1] = \"-rl\";\n        inputs[2] = string(abi.encodePacked('\"', sourceCodeHash, '\"'));\n        inputs[3] = string(abi.encodePacked(outDir, \"/build-info\"));\n\n        Vm.FfiResult memory result = runAsBashCommand(inputs);\n        string memory stdout = string(result.stdout);\n\n        if (!stdout.endsWith(\".json\")) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"Could not find build-info file with matching source code hash for contract \",\n                        contractName\n                    )\n                )\n            );\n        }\n\n        return stdout;\n    }\n\n    /**\n     * @dev Gets the output directory from the FOUNDRY_OUT environment variable, or defaults to \"out\" if not set.\n     */\n    function getOutDir() internal view returns (string memory) {\n        Vm vm = Vm(CHEATCODE_ADDRESS);\n\n        string memory defaultOutDir = \"out\";\n        return vm.envOr(\"FOUNDRY_OUT\", defaultOutDir);\n    }\n\n    function _toFileName(string memory name) private pure returns (string memory) {\n        Vm vm = Vm(CHEATCODE_ADDRESS);\n        if (name.endsWith(\".sol\")) {\n            return name;\n        } else if (name.count(\":\") == 1) {\n            return vm.split(name, \":\")[0];\n        } else {\n            if (name.endsWith(\".json\")) {\n                string[] memory parts = vm.split(name, \"/\");\n                if (parts.length > 1) {\n                    return parts[parts.length - 2];\n                }\n            }\n\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"Contract name \",\n                        name,\n                        \" must be in the format MyContract.sol:MyContract or MyContract.sol or out/MyContract.sol/MyContract.json\"\n                    )\n                )\n            );\n        }\n    }\n\n    function _toShortName(string memory name) private pure returns (string memory) {\n        Vm vm = Vm(CHEATCODE_ADDRESS);\n        if (name.endsWith(\".sol\") && name.count(\".sol\") == 1) {\n            return vm.replace(name, \".sol\", \"\");\n        } else if (name.count(\":\") == 1) {\n            return vm.split(name, \":\")[1];\n        } else if (name.endsWith(\".json\") && name.count(\".json\") == 1) {\n            string[] memory parts = vm.split(name, \"/\");\n            string memory jsonName = parts[parts.length - 1];\n            return vm.replace(jsonName, \".json\", \"\");\n        } else {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"Contract name \",\n                        name,\n                        \" must be in the format MyContract.sol:MyContract or MyContract.sol or out/MyContract.sol/MyContract.json\"\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Converts an array of inputs to a bash command.\n     * @param inputs Inputs for a command, e.g. [\"grep\", \"-rl\", \"0x1234\", \"out/build-info\"]\n     * @param bashPath Path to the bash executable or just \"bash\" if it is in the PATH\n     * @return A bash command that runs the given inputs, e.g. [\"bash\", \"-c\", \"grep -rl 0x1234 out/build-info\"]\n     */\n    function toBashCommand(string[] memory inputs, string memory bashPath) internal pure returns (string[] memory) {\n        string memory commandString;\n        for (uint i = 0; i < inputs.length; i++) {\n            commandString = string(abi.encodePacked(commandString, inputs[i]));\n            if (i != inputs.length - 1) {\n                commandString = string(abi.encodePacked(commandString, \" \"));\n            }\n        }\n\n        string[] memory result = new string[](3);\n        result[0] = bashPath;\n        result[1] = \"-c\";\n        result[2] = commandString;\n        return result;\n    }\n\n    /**\n     * @dev Runs an arbitrary command using bash.\n     * @param inputs Inputs for a command, e.g. [\"grep\", \"-rl\", \"0x1234\", \"out/build-info\"]\n     * @return The result of the corresponding bash command as a Vm.FfiResult struct\n     */\n    function runAsBashCommand(string[] memory inputs) internal returns (Vm.FfiResult memory) {\n        Vm vm = Vm(CHEATCODE_ADDRESS);\n        string memory defaultBashPath = \"bash\";\n        string memory bashPath = vm.envOr(\"OPENZEPPELIN_BASH_PATH\", defaultBashPath);\n\n        string[] memory bashCommand = toBashCommand(inputs, bashPath);\n        Vm.FfiResult memory result = vm.tryFfi(bashCommand);\n        if (result.exitCode != 0 && result.stdout.length == 0 && result.stderr.length == 0) {\n            // On Windows, using the bash executable from WSL leads to a non-zero exit code and no output\n            revert(\n                string(\n                    abi.encodePacked(\n                        'Failed to run bash command with \"',\n                        bashCommand[0],\n                        '\". If you are using Windows, set the OPENZEPPELIN_BASH_PATH environment variable to the fully qualified path of the bash executable. For example, if you are using Git for Windows, add the following line in the .env file of your project (using forward slashes):\\nOPENZEPPELIN_BASH_PATH=\"C:/Program Files/Git/bin/bash\"'\n                    )\n                )\n            );\n        } else {\n            return result;\n        }\n    }\n}\n"},"lib/openzeppelin-foundry-upgrades/src/internal/Versions.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nlibrary Versions {\n    // TODO add a workflow to update this automatically based on package.json\n    string constant UPGRADES_CORE = \"^1.37.0\";\n    string constant DEFENDER_DEPLOY_CLIENT_CLI = \"0.0.1-alpha.10\";\n}\n"},"lib/openzeppelin-foundry-upgrades/src/internal/interfaces/IProxyAdmin.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IProxyAdmin {\n    /**\n     * Upgrades a proxy to a new implementation without calling a function on the new implementation.\n     */\n    function upgrade(address, address) external;\n\n    /**\n     * Upgrades a proxy to a new implementation and calls a function on the new implementation.\n     * If UPGRADE_INTERFACE_VERSION is \"5.0.0\", bytes can be empty if no function should be called on the new implementation.\n     */\n    function upgradeAndCall(address, address, bytes memory) external payable;\n}\n"},"lib/openzeppelin-foundry-upgrades/src/internal/interfaces/IUpgradeableBeacon.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IUpgradeableBeacon {\n    /**\n     * Upgrades the beacon to a new implementation.\n     */\n    function upgradeTo(address) external;\n}\n"},"lib/openzeppelin-foundry-upgrades/src/internal/interfaces/IUpgradeableProxy.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IUpgradeableProxy {\n    /**\n     * Upgrades the proxy to a new implementation without calling a function on the new implementation.\n     */\n    function upgradeTo(address) external;\n\n    /**\n     * Upgrades the proxy to a new implementation and calls a function on the new implementation.\n     * If UPGRADE_INTERFACE_VERSION is \"5.0.0\", bytes can be empty if no function should be called on the new implementation.\n     */\n    function upgradeToAndCall(address, bytes memory) external payable;\n}\n"},"script/Deployment.s.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.28;\n\nimport {Script, console} from \"forge-std/Script.sol\";\nimport {Upgrades} from \"openzeppelin-foundry-upgrades/Upgrades.sol\";\n\nimport {AddressesWhitelist} from \"../src/AddressesWhitelist.sol\";\nimport {PriceStorage} from \"../src/PriceStorage.sol\";\nimport {RequestsManager} from \"../src/RequestsManager.sol\";\nimport {SimpleToken} from \"../src/SimpleToken.sol\";\n\ncontract DeploymentScript is Script {\n  // ┌─────────────────────────────────────────────────────────────┐\n  // | Config                                                      |\n  // └─────────────────────────────────────────────────────────────┘\n\n  string TOKEN_NAME = \"avUSD MAX\";\n  string TOKEN_SYMBOL = \"avUSDx\";\n\n  uint256 PRICE_UPDATE_UPPER_BOUND_PERCENTAGE = .05 ether; // 5%\n  uint256 PRICE_UPDATE_LOWER_BOUND_PERCENTAGE = .33 ether; // 33%\n\n  address MINT_DEPOSIT_VAULT = 0xFCc1ab0aEf7e92eEf7AcdDbF187aCDD227aAC081; // MAX avUSD - Mint Deposit Vault\n  address INPUT_TOKEN = 0x24dE8771bC5DdB3362Db529Fc3358F2df3A0E346; // avUSD\n  address MINT_REDEEM_SERVICE_WALLET = 0xD5456b9AB991768601bEdF1159C51009D43C698D; // Avant Bot\n  address PRICE_UPDATE_SERVICE_WALLET = 0xD5456b9AB991768601bEdF1159C51009D43C698D; // Avant Bot\n\n  // ┌─────────────────────────────────────────────────────────────┐\n  // | Script                                                      |\n  // └─────────────────────────────────────────────────────────────┘\n\n  function run() public {\n    uint256 deployerPrivateKey = vm.envUint(\"PRIVATE_KEY\");\n    address deployerAddress = vm.addr(deployerPrivateKey);\n    uint256 deployerBalance = deployerAddress.balance;\n    console.log(\"Deployer -> %s\", deployerAddress);\n    console.log(\"Balance -> %s\", deployerBalance);\n\n    vm.startBroadcast(deployerPrivateKey);\n\n    console.log(\"Deploying %s token...\", TOKEN_SYMBOL);\n    address tokenProxy = Upgrades.deployUUPSProxy(\n      \"SimpleToken.sol\",\n      abi.encodeCall(SimpleToken.initialize, (TOKEN_NAME, TOKEN_SYMBOL))\n    );\n    console.log(\"%s (proxy) deployed to %s\", TOKEN_SYMBOL, address(tokenProxy));\n\n    console.log(\"Deploying PriceStorage...\");\n    address priceStorageProxy = Upgrades.deployUUPSProxy(\n      \"PriceStorage.sol\",\n      abi.encodeCall(PriceStorage.initialize, (PRICE_UPDATE_UPPER_BOUND_PERCENTAGE, PRICE_UPDATE_LOWER_BOUND_PERCENTAGE))\n    );\n    console.log(\"PriceStorage (proxy) deployed to %s\", address(priceStorageProxy));\n    console.log(\"Setting SERVICE_ROLE address on PriceStorage...\");\n    PriceStorage priceStorage = PriceStorage(priceStorageProxy);\n    priceStorage.grantRole(priceStorage.SERVICE_ROLE(), PRICE_UPDATE_SERVICE_WALLET);\n\n    console.log(\"Deploying AddressesWhitelist...\");\n    AddressesWhitelist addressesWhitelist = new AddressesWhitelist();\n    console.log(\"AddressesWhitelist deployed to %s\", address(addressesWhitelist));\n\n    console.log(\"Deploying RequestsManager...\");\n    address[] memory inputTokens = new address[](1);\n    inputTokens[0] = INPUT_TOKEN;\n    RequestsManager requestsManager = new RequestsManager(address(tokenProxy), MINT_DEPOSIT_VAULT, address(addressesWhitelist), inputTokens);\n    console.log(\"RequestsManager deployed to %s\", address(requestsManager));\n    console.log(\"Setting SERVICE_ROLE address on RequestsManager...\");\n    requestsManager.grantRole(requestsManager.SERVICE_ROLE(), MINT_REDEEM_SERVICE_WALLET);\n\n    console.log(\"Setting SERVICE_ROLE address on %s...\", TOKEN_SYMBOL);\n    SimpleToken token = SimpleToken(tokenProxy);\n    token.grantRole(token.SERVICE_ROLE(), address(requestsManager));\n\n    vm.stopBroadcast();\n  }\n}\n"},"src/AddressesWhitelist.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {Ownable2Step, Ownable} from \"@openzeppelin/contracts/access/Ownable2Step.sol\";\n\nimport {IAddressesWhitelist} from \"./interfaces/IAddressesWhitelist.sol\";\n\ncontract AddressesWhitelist is IAddressesWhitelist, Ownable2Step {\n  mapping(address account => bool isAllowed) private allowedAccounts;\n\n  constructor() Ownable(msg.sender) {}\n\n  function addAccount(address _account) external onlyOwner {\n    if (_account == address(0)) revert ZeroAddress();\n    allowedAccounts[_account] = true;\n    emit AccountAdded(_account);\n  }\n\n  function removeAccount(address _account) external onlyOwner {\n    if (_account == address(0)) revert ZeroAddress();\n    allowedAccounts[_account] = false;\n    emit AccountRemoved(_account);\n  }\n\n  function isAllowedAccount(address _account) external view returns (bool isAllowed) {\n    return allowedAccounts[_account];\n  }\n}\n"},"src/PriceStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {AccessControlDefaultAdminRulesUpgradeable} from \"@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol\";\n\nimport {IPriceStorage} from \"./interfaces/IPriceStorage.sol\";\n\ncontract PriceStorage is IPriceStorage, AccessControlDefaultAdminRulesUpgradeable {\n  bytes32 public constant SERVICE_ROLE = keccak256(\"SERVICE_ROLE\");\n  uint256 public constant BOUND_PERCENTAGE_DENOMINATOR = 1e18;\n\n  mapping(bytes32 key => Price price) public prices;\n  Price public lastPrice;\n\n  uint256 public upperBoundPercentage;\n  uint256 public lowerBoundPercentage;\n\n  /// @custom:oz-upgrades-unsafe-allow constructor\n  constructor() {\n    _disableInitializers();\n  }\n\n  function initialize(uint256 _upperBoundPercentage, uint256 _lowerBoundPercentage) public initializer {\n    __AccessControlDefaultAdminRules_init(1 days, msg.sender);\n    setUpperBoundPercentage(_upperBoundPercentage);\n    setLowerBoundPercentage(_lowerBoundPercentage);\n  }\n\n  function setPrice(bytes32 _key, uint256 _price) external onlyRole(SERVICE_ROLE) {\n    if (_key == bytes32(0)) revert InvalidKey();\n    if (_price == 0) revert InvalidPrice();\n    if (prices[_key].timestamp != 0) revert PriceAlreadySet(_key);\n\n    uint256 lastPriceValue = lastPrice.price;\n    if (lastPriceValue != 0) {\n      uint256 upperBound = lastPriceValue + ((lastPriceValue * upperBoundPercentage) / BOUND_PERCENTAGE_DENOMINATOR);\n      uint256 lowerBound = lastPriceValue - ((lastPriceValue * lowerBoundPercentage) / BOUND_PERCENTAGE_DENOMINATOR);\n      if (_price > upperBound || _price < lowerBound) {\n        revert InvalidPriceRange(_price, lowerBound, upperBound);\n      }\n    }\n\n    uint256 currentTime = block.timestamp;\n    Price memory price = Price({price: _price, timestamp: currentTime});\n    prices[_key] = price;\n    lastPrice = price;\n\n    emit PriceSet(_key, _price, currentTime);\n  }\n\n  function setUpperBoundPercentage(uint256 _upperBoundPercentage) public onlyRole(DEFAULT_ADMIN_ROLE) {\n    if (_upperBoundPercentage == 0 || _upperBoundPercentage > BOUND_PERCENTAGE_DENOMINATOR)\n      revert InvalidUpperBoundPercentage();\n\n    upperBoundPercentage = _upperBoundPercentage;\n    emit UpperBoundPercentageSet(_upperBoundPercentage);\n  }\n\n  function setLowerBoundPercentage(uint256 _lowerBoundPercentage) public onlyRole(DEFAULT_ADMIN_ROLE) {\n    if (_lowerBoundPercentage == 0 || _lowerBoundPercentage > BOUND_PERCENTAGE_DENOMINATOR)\n      revert InvalidLowerBoundPercentage();\n\n    lowerBoundPercentage = _lowerBoundPercentage;\n    emit LowerBoundPercentageSet(_lowerBoundPercentage);\n  }\n}\n"},"src/RequestsManager.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {AccessControlDefaultAdminRules} from \"@openzeppelin/contracts/access/extensions/AccessControlDefaultAdminRules.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IERC20Permit} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\";\nimport {Pausable} from \"@openzeppelin/contracts/utils/Pausable.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport {IAddressesWhitelist} from \"./interfaces/IAddressesWhitelist.sol\";\nimport {IRequestsManager} from \"./interfaces/IRequestsManager.sol\";\nimport {ISimpleToken} from \"./interfaces/ISimpleToken.sol\";\n\ncontract RequestsManager is IRequestsManager, AccessControlDefaultAdminRules, Pausable {\n  using SafeERC20 for IERC20;\n\n  bytes32 public constant SERVICE_ROLE = keccak256(\"SERVICE_ROLE\");\n\n  address public immutable ISSUE_TOKEN_ADDRESS;\n  address public treasuryAddress;\n\n  IAddressesWhitelist public providersWhitelist;\n  bool public isWhitelistEnabled;\n\n  mapping(address token => bool isAllowed) public allowedTokens;\n\n  uint256 public burnRequestsCounter;\n  mapping(uint256 id => Request request) public burnRequests;\n\n  uint256 public mintRequestsCounter;\n  mapping(uint256 id => Request request) public mintRequests;\n\n  modifier onlyAllowedProviders() {\n    if (isWhitelistEnabled && !providersWhitelist.isAllowedAccount(msg.sender)) {\n      revert UnknownProvider(msg.sender);\n    }\n    _;\n  }\n\n  modifier burnRequestExist(uint256 _id) {\n    if (burnRequests[_id].provider == address(0)) {\n      revert BurnRequestNotExist(_id);\n    }\n    _;\n  }\n\n  modifier mintRequestExist(uint256 _id) {\n    if (mintRequests[_id].provider == address(0)) {\n      revert MintRequestNotExist(_id);\n    }\n    _;\n  }\n\n  modifier allowedToken(address _tokenAddress) {\n    _assertNonZero(_tokenAddress);\n    if (!allowedTokens[_tokenAddress]) {\n      revert TokenNotAllowed(_tokenAddress);\n    }\n    _;\n  }\n\n  constructor(\n    address _issueTokenAddress,\n    address _treasuryAddress,\n    address _providersWhitelistAddress,\n    address[] memory _allowedTokenAddresses\n  ) AccessControlDefaultAdminRules(1 days, msg.sender) {\n    ISSUE_TOKEN_ADDRESS = _assertNonZero(_issueTokenAddress);\n    treasuryAddress = _assertNonZero(_treasuryAddress);\n    providersWhitelist = IAddressesWhitelist(_assertNonZero(_providersWhitelistAddress));\n\n    for (uint256 i = 0; i < _allowedTokenAddresses.length; i++) {\n      address allowedTokenAddress = _allowedTokenAddresses[i];\n      _assertNonZero(allowedTokenAddress);\n      if (allowedTokenAddress.code.length == 0) revert InvalidTokenAddress(allowedTokenAddress);\n      allowedTokens[allowedTokenAddress] = true;\n    }\n\n    // isWhitelistEnabled = true;\n  }\n\n  function setTreasury(address _treasuryAddress) external onlyRole(DEFAULT_ADMIN_ROLE) {\n    _assertNonZero(_treasuryAddress);\n    treasuryAddress = _treasuryAddress;\n    emit TreasurySet(_treasuryAddress);\n  }\n\n  function setProvidersWhitelist(address _providersWhitelistAddress) external onlyRole(DEFAULT_ADMIN_ROLE) {\n    _assertNonZero(_providersWhitelistAddress);\n    if (_providersWhitelistAddress.code.length == 0) revert InvalidProvidersWhitelist(_providersWhitelistAddress);\n    providersWhitelist = IAddressesWhitelist(_providersWhitelistAddress);\n    emit ProvidersWhitelistSet(_providersWhitelistAddress);\n  }\n\n  function setWhitelistEnabled(bool _isEnabled) external onlyRole(DEFAULT_ADMIN_ROLE) {\n    isWhitelistEnabled = _isEnabled;\n    emit WhitelistEnabledSet(_isEnabled);\n  }\n\n  function addAllowedToken(address _allowedTokenAddress) external onlyRole(DEFAULT_ADMIN_ROLE) {\n    _assertNonZero(_allowedTokenAddress);\n    if (_allowedTokenAddress.code.length == 0) revert InvalidTokenAddress(_allowedTokenAddress);\n    allowedTokens[_allowedTokenAddress] = true;\n    emit AllowedTokenAdded(_allowedTokenAddress);\n  }\n\n  function removeAllowedToken(address _allowedTokenAddress) external onlyRole(DEFAULT_ADMIN_ROLE) {\n    _assertNonZero(_allowedTokenAddress);\n    allowedTokens[_allowedTokenAddress] = false;\n    emit AllowedTokenRemoved(_allowedTokenAddress);\n  }\n\n  function pause() external onlyRole(DEFAULT_ADMIN_ROLE) {\n    Pausable._pause();\n  }\n\n  function unpause() external onlyRole(DEFAULT_ADMIN_ROLE) {\n    Pausable._unpause();\n  }\n\n  function requestMint(\n    address _depositTokenAddress,\n    uint256 _amount,\n    uint256 _minMintAmount\n  ) public onlyAllowedProviders allowedToken(_depositTokenAddress) whenNotPaused {\n    _assertAmount(_amount);\n\n    IERC20(_depositTokenAddress).safeTransferFrom(msg.sender, address(this), _amount);\n    Request memory request = _addMintRequest(_depositTokenAddress, _amount, _minMintAmount);\n\n    emit MintRequestCreated(request.id, request.provider, request.token, request.amount, request.minExpectedAmount);\n  }\n\n  function requestMintWithPermit(\n    address _depositTokenAddress,\n    uint256 _amount,\n    uint256 _minMintAmount,\n    uint256 _deadline,\n    uint8 _v,\n    bytes32 _r,\n    bytes32 _s\n  ) external {\n    IERC20Permit tokenPermit = IERC20Permit(_depositTokenAddress);\n    // the use of `try/catch` allows the permit to fail and makes the code tolerant to frontrunning.\n    // solhint-disable-next-line no-empty-blocks\n    try tokenPermit.permit(msg.sender, address(this), _amount, _deadline, _v, _r, _s) {} catch {}\n    requestMint(_depositTokenAddress, _amount, _minMintAmount);\n  }\n\n  function cancelMint(uint256 _id) external mintRequestExist(_id) {\n    Request storage request = mintRequests[_id];\n    _assertAddress(request.provider, msg.sender);\n    _assertState(State.CREATED, request.state);\n\n    request.state = State.CANCELLED;\n\n    IERC20 depositedToken = IERC20(request.token);\n    depositedToken.safeTransfer(request.provider, request.amount);\n\n    emit MintRequestCancelled(_id);\n  }\n\n  function completeMint(\n    bytes32 _idempotencyKey,\n    uint256 _id,\n    uint256 _mintAmount\n  ) external onlyRole(SERVICE_ROLE) mintRequestExist(_id) {\n    Request storage request = mintRequests[_id];\n    _assertState(State.CREATED, request.state);\n    if (_mintAmount < request.minExpectedAmount) revert InsufficientMintAmount(_mintAmount, request.minExpectedAmount);\n\n    request.state = State.COMPLETED;\n\n    IERC20 depositToken = IERC20(request.token);\n    depositToken.safeTransfer(treasuryAddress, request.amount);\n\n    ISimpleToken issueToken = ISimpleToken(ISSUE_TOKEN_ADDRESS);\n    issueToken.mint(_idempotencyKey, request.provider, _mintAmount);\n\n    emit MintRequestCompleted(_idempotencyKey, _id, _mintAmount);\n  }\n\n  function requestBurn(\n    uint256 _issueTokenAmount,\n    address _withdrawalTokenAddress,\n    uint256 _minWithdrawalAmount\n  ) public onlyAllowedProviders allowedToken(_withdrawalTokenAddress) whenNotPaused {\n    _assertAmount(_issueTokenAmount);\n\n    IERC20 issueToken = IERC20(ISSUE_TOKEN_ADDRESS);\n    issueToken.safeTransferFrom(msg.sender, address(this), _issueTokenAmount);\n\n    Request memory request = _addBurnRequest(_withdrawalTokenAddress, _issueTokenAmount, _minWithdrawalAmount);\n\n    emit BurnRequestCreated(request.id, request.provider, request.token, request.amount, request.minExpectedAmount);\n  }\n\n  function requestBurnWithPermit(\n    uint256 _issueTokenAmount,\n    address _withdrawalTokenAddress,\n    uint256 _minWithdrawalAmount,\n    uint256 _deadline,\n    uint8 _v,\n    bytes32 _r,\n    bytes32 _s\n  ) external {\n    IERC20Permit tokenPermit = IERC20Permit(ISSUE_TOKEN_ADDRESS);\n    // the use of `try/catch` allows the permit to fail and makes the code tolerant to frontrunning.\n    // solhint-disable-next-line no-empty-blocks\n    try tokenPermit.permit(msg.sender, address(this), _issueTokenAmount, _deadline, _v, _r, _s) {} catch {}\n    requestBurn(_issueTokenAmount, _withdrawalTokenAddress, _minWithdrawalAmount);\n  }\n\n  function cancelBurn(uint256 _id) external burnRequestExist(_id) {\n    Request storage request = burnRequests[_id];\n    _assertAddress(request.provider, msg.sender);\n    _assertState(State.CREATED, request.state);\n\n    request.state = State.CANCELLED;\n    IERC20 issueToken = IERC20(ISSUE_TOKEN_ADDRESS);\n    issueToken.safeTransfer(request.provider, request.amount);\n\n    emit BurnRequestCancelled(_id);\n  }\n\n  function completeBurn(\n    bytes32 _idempotencyKey,\n    uint256 _id,\n    uint256 _withdrawalAmount\n  ) external onlyRole(SERVICE_ROLE) burnRequestExist(_id) {\n    Request storage request = burnRequests[_id];\n    _assertState(State.CREATED, request.state);\n    if (_withdrawalAmount < request.minExpectedAmount)\n      revert InsufficientWithdrawalAmount(_withdrawalAmount, request.minExpectedAmount);\n\n    request.state = State.COMPLETED;\n\n    ISimpleToken issueToken = ISimpleToken(ISSUE_TOKEN_ADDRESS);\n    issueToken.burn(_idempotencyKey, address(this), request.amount);\n\n    // slither-disable-next-line arbitrary-send-erc20\n    IERC20(request.token).safeTransferFrom(treasuryAddress, request.provider, _withdrawalAmount);\n\n    emit BurnRequestCompleted(_id, request.amount, _withdrawalAmount);\n  }\n\n  function emergencyWithdraw(IERC20 _token) external onlyRole(DEFAULT_ADMIN_ROLE) {\n    uint256 balance = _token.balanceOf(address(this));\n    _token.safeTransfer(msg.sender, balance);\n\n    emit EmergencyWithdrawn(address(_token), balance);\n  }\n\n  function _addMintRequest(\n    address _tokenAddress,\n    uint256 _amount,\n    uint256 _minExpectedAmount\n  ) internal returns (Request memory mintRequest) {\n    uint256 id = mintRequestsCounter;\n    mintRequest = Request({\n      id: id,\n      provider: msg.sender,\n      state: State.CREATED,\n      amount: _amount,\n      token: _tokenAddress,\n      minExpectedAmount: _minExpectedAmount\n    });\n    mintRequests[id] = mintRequest;\n\n    unchecked {\n      mintRequestsCounter++;\n    }\n\n    return mintRequest;\n  }\n\n  function _addBurnRequest(\n    address _tokenAddress,\n    uint256 _amount,\n    uint256 _minWithdrawalAmount\n  ) internal returns (Request memory burnRequest) {\n    uint256 id = burnRequestsCounter;\n    burnRequest = Request({\n      id: id,\n      provider: msg.sender,\n      state: State.CREATED,\n      amount: _amount,\n      token: _tokenAddress,\n      minExpectedAmount: _minWithdrawalAmount\n    });\n    burnRequests[id] = burnRequest;\n\n    unchecked {\n      burnRequestsCounter++;\n    }\n\n    return burnRequest;\n  }\n\n  function _assertNonZero(address _address) internal pure returns (address nonZeroAddress) {\n    if (_address == address(0)) revert ZeroAddress();\n    return _address;\n  }\n\n  function _assertState(State _expected, State _current) internal pure {\n    if (_expected != _current) revert IllegalState(_expected, _current);\n  }\n\n  function _assertAddress(address _expected, address _actual) internal pure {\n    if (_expected != _actual) revert IllegalAddress(_expected, _actual);\n  }\n\n  function _assertAmount(uint256 _amount) internal pure {\n    if (_amount == 0) revert InvalidAmount(_amount);\n  }\n}\n"},"src/SimpleToken.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {AccessControlDefaultAdminRulesUpgradeable} from \"@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol\";\nimport {ERC20PermitUpgradeable} from \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\";\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\nimport {ISimpleToken} from \"./interfaces/ISimpleToken.sol\";\n\ncontract SimpleToken is ISimpleToken, Initializable, ERC20PermitUpgradeable, AccessControlDefaultAdminRulesUpgradeable {\n  bytes32 public constant SERVICE_ROLE = keccak256(\"SERVICE_ROLE\");\n\n  mapping(bytes32 => bool) private mintIds;\n  mapping(bytes32 => bool) private burnIds;\n\n  modifier idempotentMint(bytes32 _idempotencyKey) {\n    if (mintIds[_idempotencyKey]) {\n      revert IdempotencyKeyAlreadyExist(_idempotencyKey);\n    }\n    _;\n    mintIds[_idempotencyKey] = true;\n  }\n\n  modifier idempotentBurn(bytes32 _idempotencyKey) {\n    if (burnIds[_idempotencyKey]) {\n      revert IdempotencyKeyAlreadyExist(_idempotencyKey);\n    }\n    _;\n    burnIds[_idempotencyKey] = true;\n  }\n\n  /// @custom:oz-upgrades-unsafe-allow constructor\n  constructor() {\n    _disableInitializers();\n  }\n\n  function initialize(string memory _name, string memory _symbol) public initializer {\n    __ERC20_init(_name, _symbol);\n    __ERC20Permit_init(_name);\n    __AccessControlDefaultAdminRules_init(1 days, msg.sender);\n  }\n\n  function mint(address _account, uint256 _amount) external onlyRole(SERVICE_ROLE) {\n    _mint(_account, _amount);\n  }\n\n  function mint(\n    bytes32 _idempotencyKey,\n    address _account,\n    uint256 _amount\n  ) external onlyRole(SERVICE_ROLE) idempotentMint(_idempotencyKey) {\n    _mint(_account, _amount);\n  }\n\n  function burn(address _account, uint256 _amount) external onlyRole(SERVICE_ROLE) {\n    _burn(_account, _amount);\n  }\n\n  function burn(\n    bytes32 _idempotencyKey,\n    address _account,\n    uint256 _amount\n  ) external onlyRole(SERVICE_ROLE) idempotentBurn(_idempotencyKey) {\n    _burn(_account, _amount);\n  }\n}\n"},"src/interfaces/IAddressesWhitelist.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\ninterface IAddressesWhitelist {\n  error ZeroAddress();\n\n  event AccountAdded(address account);\n  event AccountRemoved(address account);\n\n  function isAllowedAccount(address _account) external view returns (bool isAllowed);\n}\n"},"src/interfaces/IPriceStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\ninterface IPriceStorage {\n  struct Price {\n    uint256 price;\n    uint256 timestamp;\n  }\n\n  event PriceSet(bytes32 indexed key, uint256 price, uint256 timestamp);\n  event UpperBoundPercentageSet(uint256 upperBoundPercentage);\n  event LowerBoundPercentageSet(uint256 lowerBoundPercentage);\n\n  error PriceAlreadySet(bytes32 key);\n  error InvalidPrice();\n  error InvalidKey();\n  error InvalidUpperBoundPercentage();\n  error InvalidLowerBoundPercentage();\n  error InvalidPriceRange(uint256 price, uint256 lowerBound, uint256 upperBound);\n\n  function setPrice(bytes32 _key, uint256 _price) external;\n\n  function setUpperBoundPercentage(uint256 _upperBoundPercentage) external;\n\n  function setLowerBoundPercentage(uint256 _lowerBoundPercentage) external;\n\n  function lastPrice() external view returns (uint256 price, uint256 timestamp);\n\n  function prices(bytes32 _key) external view returns (uint256 price, uint256 timestamp);\n}\n"},"src/interfaces/IRequestsManager.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IRequestsManager {\n  error IdempotencyKeyAlreadyExist(bytes32 idempotencyKey);\n  error InvalidAmount(uint256 amount);\n  error ZeroAddress();\n\n  event MintRequestCreated(\n    uint256 indexed id,\n    address indexed provider,\n    address depositToken,\n    uint256 amount,\n    uint256 minMintAmount\n  );\n  event MintRequestCompleted(bytes32 indexed idempotencyKey, uint256 indexed id, uint256 mintedAmount);\n  event MintRequestCancelled(uint256 indexed id);\n\n  event BurnRequestCreated(\n    uint256 indexed id,\n    address indexed provider,\n    address withdrawalTokenAddress,\n    uint256 issueTokenAmount,\n    uint256 minWithdrawalAmount\n  );\n  event BurnRequestCompleted(uint256 indexed id, uint256 burnedAmount, uint256 withdrawalAmount);\n  event BurnRequestCancelled(uint256 indexed id);\n\n  event TreasurySet(address treasuryAddress);\n  event ProvidersWhitelistSet(address providersWhitelistAddress);\n  event WhitelistEnabledSet(bool isEnabled);\n  event AllowedTokenAdded(address tokenAddress);\n  event AllowedTokenRemoved(address tokenAddres);\n  event EmergencyWithdrawn(address tokenAddress, uint256 amount);\n\n  error UnknownProvider(address account);\n  error IllegalState(State expected, State current);\n  error IllegalAddress(address expected, address actual);\n  error MintRequestNotExist(uint256 id);\n  error BurnRequestNotExist(uint256 id);\n  error TokenNotAllowed(address token);\n  error InvalidProvidersWhitelist(address providersWhitelistAddress);\n  error InvalidTokenAddress(address token);\n  error InsufficientMintAmount(uint256 mintAmount, uint256 minMintAmount);\n  error InsufficientWithdrawalAmount(uint256 withdrawalAmount, uint256 minWithdrawalAmount);\n\n  enum State {\n    CREATED,\n    COMPLETED,\n    CANCELLED\n  }\n\n  struct Request {\n    uint256 id;\n    address provider;\n    State state;\n    uint256 amount;\n    address token;\n    uint256 minExpectedAmount;\n  }\n\n  function setTreasury(address _treasuryAddress) external;\n\n  function setProvidersWhitelist(address _providersWhitelistAddress) external;\n\n  function setWhitelistEnabled(bool _isEnabled) external;\n\n  function addAllowedToken(address _allowedTokenAddress) external;\n\n  function removeAllowedToken(address _allowedTokenAddress) external;\n\n  function pause() external;\n\n  function unpause() external;\n\n  function requestMint(address _depositTokenAddress, uint256 _amount, uint256 _minMintAmount) external;\n\n  function requestMintWithPermit(\n    address _depositTokenAddress,\n    uint256 _amount,\n    uint256 _minMintAmount,\n    uint256 _deadline,\n    uint8 _v,\n    bytes32 _r,\n    bytes32 _s\n  ) external;\n\n  function cancelMint(uint256 _id) external;\n\n  function completeMint(bytes32 _idempotencyKey, uint256 _id, uint256 _mintAmount) external;\n\n  function requestBurn(\n    uint256 _issueTokenAmount,\n    address _withdrawalTokenAddress,\n    uint256 _minWithdrawalAmount\n  ) external;\n\n  function requestBurnWithPermit(\n    uint256 _issueTokenAmount,\n    address _withdrawalTokenAddress,\n    uint256 _minWithdrawalAmount,\n    uint256 _deadline,\n    uint8 _v,\n    bytes32 _r,\n    bytes32 _s\n  ) external;\n\n  function cancelBurn(uint256 _id) external;\n\n  function completeBurn(bytes32 _idempotencyKey, uint256 _id, uint256 _withdrawalAmount) external;\n\n  function emergencyWithdraw(IERC20 _token) external;\n}\n"},"src/interfaces/ISimpleToken.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\ninterface ISimpleToken {\n  error IdempotencyKeyAlreadyExist(bytes32 idempotencyKey);\n\n  function mint(address _account, uint256 _amount) external;\n\n  function mint(bytes32 _idempotencyKey, address _account, uint256 _amount) external;\n\n  function burn(address _account, uint256 _amount) external;\n\n  function burn(bytes32 _idempotencyKey, address _account, uint256 _amount) external;\n}\n"}},"settings":{"remappings":["@openzeppelin/contracts/=lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/","@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/openzeppelin-contracts-upgradeable/lib/halmos-cheatcodes/src/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/","openzeppelin-foundry-upgrades/=lib/openzeppelin-foundry-upgrades/src/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"useLiteralContent":false,"bytecodeHash":"ipfs","appendCBOR":true},"outputSelection":{"lib/forge-std/src/Base.sol":{"*":[]},"lib/forge-std/src/Script.sol":{"*":[]},"lib/forge-std/src/StdChains.sol":{"*":[]},"lib/forge-std/src/StdCheats.sol":{"*":[]},"lib/forge-std/src/StdConstants.sol":{"*":[]},"lib/forge-std/src/StdJson.sol":{"*":[]},"lib/forge-std/src/StdMath.sol":{"*":[]},"lib/forge-std/src/StdStorage.sol":{"*":[]},"lib/forge-std/src/StdStyle.sol":{"*":[]},"lib/forge-std/src/StdUtils.sol":{"*":[]},"lib/forge-std/src/Vm.sol":{"*":[]},"lib/forge-std/src/console.sol":{"*":[]},"lib/forge-std/src/console2.sol":{"*":[]},"lib/forge-std/src/interfaces/IMulticall3.sol":{"*":[]},"lib/forge-std/src/safeconsole.sol":{"*":[]},"lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol":{"*":[]},"lib/openzeppelin-contracts-upgradeable/contracts/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol":{"*":[]},"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol":{"*":[]},"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol":{"*":[]},"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/ERC20PermitUpgradeable.sol":{"*":[]},"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol":{"*":[]},"lib/openzeppelin-contracts-upgradeable/contracts/utils/NoncesUpgradeable.sol":{"*":[]},"lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/EIP712Upgradeable.sol":{"*":[]},"lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol":{"*":[]},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/AccessControl.sol":{"*":[]},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/IAccessControl.sol":{"*":[]},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol":{"*":[]},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable2Step.sol":{"*":[]},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/extensions/AccessControlDefaultAdminRules.sol":{"*":[]},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/extensions/IAccessControlDefaultAdminRules.sol":{"*":[]},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/interfaces/IERC1363.sol":{"*":[]},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol":{"*":[]},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol":{"*":[]},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol":{"*":[]},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol":{"*":[]},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/interfaces/IERC5313.sol":{"*":[]},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol":{"*":[]},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol":{"*":[]},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Utils.sol":{"*":[]},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/Proxy.sol":{"*":[]},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/beacon/BeaconProxy.sol":{"*":[]},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol":{"*":[]},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/beacon/UpgradeableBeacon.sol":{"*":[]},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/transparent/ProxyAdmin.sol":{"*":[]},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/transparent/TransparentUpgradeableProxy.sol":{"*":[]},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol":{"*":[]},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"*":[]},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol":{"*":[]},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol":{"*":[]},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Address.sol":{"*":[]},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Context.sol":{"*":[]},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Errors.sol":{"*":[]},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Panic.sol":{"*":[]},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Pausable.sol":{"*":[]},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol":{"*":[]},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Strings.sol":{"*":[]},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol":{"*":[]},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol":{"*":[]},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol":{"*":[]},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol":{"*":[]},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/math/Math.sol":{"*":[]},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol":{"*":[]},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol":{"*":[]},"lib/openzeppelin-foundry-upgrades/src/Defender.sol":{"*":[]},"lib/openzeppelin-foundry-upgrades/src/Options.sol":{"*":[]},"lib/openzeppelin-foundry-upgrades/src/Upgrades.sol":{"*":[]},"lib/openzeppelin-foundry-upgrades/src/internal/Core.sol":{"*":[]},"lib/openzeppelin-foundry-upgrades/src/internal/DefenderDeploy.sol":{"*":[]},"lib/openzeppelin-foundry-upgrades/src/internal/StringFinder.sol":{"*":[]},"lib/openzeppelin-foundry-upgrades/src/internal/Utils.sol":{"*":[]},"lib/openzeppelin-foundry-upgrades/src/internal/Versions.sol":{"*":[]},"lib/openzeppelin-foundry-upgrades/src/internal/interfaces/IProxyAdmin.sol":{"*":[]},"lib/openzeppelin-foundry-upgrades/src/internal/interfaces/IUpgradeableBeacon.sol":{"*":[]},"lib/openzeppelin-foundry-upgrades/src/internal/interfaces/IUpgradeableProxy.sol":{"*":[]},"script/Deployment.s.sol":{"":["ast"],"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","storageLayout"]},"src/AddressesWhitelist.sol":{"*":[]},"src/PriceStorage.sol":{"*":[]},"src/RequestsManager.sol":{"*":[]},"src/SimpleToken.sol":{"*":[]},"src/interfaces/IAddressesWhitelist.sol":{"*":[]},"src/interfaces/IPriceStorage.sol":{"*":[]},"src/interfaces/IRequestsManager.sol":{"*":[]},"src/interfaces/ISimpleToken.sol":{"*":[]}},"evmVersion":"cancun","viaIR":false,"libraries":{}},"allowPaths":["/home/user/projects/Avant-Contracts-Max","/home/user/projects/Avant-Contracts-Max/lib"],"basePath":"/home/user/projects/Avant-Contracts-Max","includePaths":["/home/user/projects/Avant-Contracts-Max"]},"output":{"errors":[{"sourceLocation":{"file":"script/Deployment.s.sol","start":422,"end":4111},"type":"Warning","component":"general","severity":"warning","errorCode":"5574","message":"Contract code size is 32610 bytes and exceeds 24576 bytes (a limit introduced in Spurious Dragon). This contract may not be deployable on Mainnet. Consider enabling the optimizer (with a low \"runs\" value!), turning off revert strings, or using libraries.","formattedMessage":"Warning: Contract code size is 32610 bytes and exceeds 24576 bytes (a limit introduced in Spurious Dragon). This contract may not be deployable on Mainnet. Consider enabling the optimizer (with a low \"runs\" value!), turning off revert strings, or using libraries.\n  --> script/Deployment.s.sol:12:1:\n   |\n12 | contract DeploymentScript is Script {\n   | ^ (Relevant source part starts here and spans across multiple lines).\n\n"}],"contracts":{"script/Deployment.s.sol":{"DeploymentScript":{"abi":[{"type":"function","name":"IS_SCRIPT","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"run","inputs":[],"outputs":[],"stateMutability":"nonpayable"}],"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"IS_SCRIPT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"run\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"script/Deployment.s.sol\":\"DeploymentScript\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts-upgradeable/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/\",\":openzeppelin-foundry-upgrades/=lib/openzeppelin-foundry-upgrades/src/\"]},\"sources\":{\"lib/forge-std/src/Base.sol\":{\"keccak256\":\"0xa3735a6618a3014e42bb4329ad143e3b2c59cd95094350202e4c4a06c9d585dd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://eef9db48d94726ec3d3fa3a84a8d520903705190f7ee7a04a065335a6aeeac4d\",\"dweb:/ipfs/QmSWmNny7TkzyqRPjGdpERAJuBwwznrGPLUqS4DZy5fX5z\"]},\"lib/forge-std/src/Script.sol\":{\"keccak256\":\"0xc942e27c7baae499beb01afbbae99f24d42af9a6e4aae675bc6901b704aa8e9b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0456008adf68947247f358b62863af4a8e349549d2260f2ff9569ff0e3cf5c98\",\"dweb:/ipfs/QmdviSUj2i7o3TPN5vd2xocqGMFVqjUzaiJTZRYyPxyHPx\"]},\"lib/forge-std/src/StdChains.sol\":{\"keccak256\":\"0xd3edaf57db178f839d97ccee0009c2b7b20f78c2adca9028a6013acb8d5b4c5e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0f17329ac1d25d3e6657ca240dee0a3f9b2cf22a64a05b87dac15252dee74351\",\"dweb:/ipfs/QmPHxkEwgVpQNbU52s58RmmegrkYGj8bNKTVSW8rZm3dBm\"]},\"lib/forge-std/src/StdCheats.sol\":{\"keccak256\":\"0x0fa6ec03602648b62cce41aab2096e6b7e052f2846075d967b6958dd586db746\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cd84e2ca9c1eaed6b76768cc12bb8c1af8289170ea8b7706f58d516460d79c41\",\"dweb:/ipfs/QmQ7BK7co6DE4eWUqMyv11s5eHYkS1tyx8tDSZGZVtf2aK\"]},\"lib/forge-std/src/StdConstants.sol\":{\"keccak256\":\"0x319ccdabfa2c0b2428301445873270ffea20f0e039d4fd5e6eeba65158e4e534\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b633f9d3a719e1d035ce7daa6cc051ddf89a72d34200d14cec37728e245cdabc\",\"dweb:/ipfs/QmRP7HQJpHMx1CsFrY8tXVVx1DQmi2dcb2BoGfiWaA923r\"]},\"lib/forge-std/src/StdJson.sol\":{\"keccak256\":\"0xbc0132abe1c2accc2867c0f03667afffdf92f3e95a581bb03c9557eaa38ea500\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://eb6fab37dc73c219cfbb7b4f4998bcf7677ca5397a867e850f40232192073974\",\"dweb:/ipfs/QmUHsbVdp9SKmgek7ZfPcLTKrpZFXpqaqt4sVejzxGEQL3\"]},\"lib/forge-std/src/StdMath.sol\":{\"keccak256\":\"0xd90ad4fd8aeaeb8929964e686e769fdedd5eded3fc3815df194a0ab9f91a3fb2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7919b70f636c7b805223992f28ad1ad0145d6c1385b5931a3589aface5fe6c92\",\"dweb:/ipfs/QmY7FRaULwoGgFteF8GawjQJRfasNgpWnU2aiMsFrYpuTC\"]},\"lib/forge-std/src/StdStorage.sol\":{\"keccak256\":\"0xb91ab24383a5872b894fc93325eef1add6cbbf981628f18e860068bf88bb7dcc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2651e33b9ac8fc5803ed0a43078c1bf4fa90a0b0347aafd95776b02daccdcc57\",\"dweb:/ipfs/QmbdRyPuGJdZgnCuMnp7c1WsBo1Spf7j1KMmws1Z5rd4BQ\"]},\"lib/forge-std/src/StdStyle.sol\":{\"keccak256\":\"0x43e2a8a9b9c2574dabe74f11adf6f782df218f463540e3b5b563609fe108597d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://51363ca97404cf4128e1141428949768c31929e75e014b02c85e887fbbb4f1b8\",\"dweb:/ipfs/QmVhtbQc2fU4rRmbcfBtz34mAgG4BAZBsbna1Ca4SkoPsK\"]},\"lib/forge-std/src/StdUtils.sol\":{\"keccak256\":\"0x7274081e11c05164fd8eadde4de8305c033e58a43008dea58065f3170ccf0737\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e9801614b6c9d3e472982e6cc68f5f1ad03682f84eafb686be65633c7132d138\",\"dweb:/ipfs/QmcQSUcrm2A7XuektnxJjvYGmZtBeA6LKPxCXRqdXBX776\"]},\"lib/forge-std/src/Vm.sol\":{\"keccak256\":\"0xaae88142a348064677cf81169ea0ca706be3e99e2a0f13a01878ff8d52cf6b25\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://da4fb0ed1b31381c7e60ee386acc72796e8a8325c83739ec9a3678e2f841073c\",\"dweb:/ipfs/Qmb4MU6FpAi8Wt5kUQ3wa7ooHnfMVbdd9zuvnqbTehLmxJ\"]},\"lib/forge-std/src/console.sol\":{\"keccak256\":\"0x4bbf47eb762cef93729d6ef15e78789957147039b113e5d4df48e3d3fd16d0f5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://af9e3a7c3d82fb5b10b57ca4d1a82f2acbef80c077f6f6ef0cc0187c7bfd9f57\",\"dweb:/ipfs/QmR9VzmnBDJpgiDP6CHT6truehukF9HpYvuP6kRiJbDwPP\"]},\"lib/forge-std/src/console2.sol\":{\"keccak256\":\"0x3b8fe79f48f065a4e4d35362171304a33784c3a90febae5f2787805a438de12f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://61de63af08803549299e68b6e6e88d40f3c5afac450e4ee0a228c66a61ba003d\",\"dweb:/ipfs/QmWVoQ5rrVxnczD4ZZoPbD4PC9Z3uExJtzjD4awTqd14MZ\"]},\"lib/forge-std/src/interfaces/IMulticall3.sol\":{\"keccak256\":\"0x7aac1389150499a922d1f9ef5749c908cef127cb2075b92fa17e9cb611263d0a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d95ebb7c7c463e08ebc12dab639945752fb2480acfc6e86da32f72732a7fd0c0\",\"dweb:/ipfs/QmNXK8P8oPWwajsQHvAHw3JPyQidPLCGQN3hWu1Lk6PBL2\"]},\"lib/forge-std/src/safeconsole.sol\":{\"keccak256\":\"0xbef9786cb49d3eade757bad87568c49c8c8f35721f0193c95ffb055d9e466e11\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3bafd2b0b2d28068d329f95ea8a1fbce3719c257fcb863fc01abcbafd8d531ab\",\"dweb:/ipfs/QmUeaFjKWTVDBsHVfSob4mwt6A5hTnKDz22HaUXeZhypa3\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol\":{\"keccak256\":\"0x0d4d7d19a052a2ef9d17b28450133631188b895e1755747fa8ad0280aadfb534\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://838551e10cc07e570b70aee1078e490658d3a0ab8f4adfd4f3f2a565200753da\",\"dweb:/ipfs/QmceT7R3Pqzywyxr3MSEA7VXU4axZAPS6BLy92iV97rGdG\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol\":{\"keccak256\":\"0x956cbd3e346c8ff9b9e51b6e414f23b056198016f805eb04c6634946a10760af\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d2b6578d7ddfb0bf8c00edf3d21fa1f8063c41a2d478eef2a0f04ee0900e9c5e\",\"dweb:/ipfs/QmahbtHqGXJxthFT7oiZCkQfw7cezVAZpkWdrhS9xWZ9xy\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":{\"keccak256\":\"0xdb4d24ee2c087c391d587cd17adfe5b3f9d93b3110b1388c2ab6c7c0ad1dcd05\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ab7b6d5b9e2b88176312967fe0f0e78f3d9a1422fa5e4b64e2440c35869b5d08\",\"dweb:/ipfs/QmXKYWWyzcLg1B2k7Sb1qkEXgLCYfXecR9wYW5obRzWP1Q\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol\":{\"keccak256\":\"0xa0e86b70fa5a7bd63795161c0882676fde6a18bbb1991938ef014fb0184b4b13\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1727a5d693a56ed6af48bace20d8ec26232f0a8f78ff482c5a691cc5c348a019\",\"dweb:/ipfs/QmdXaYmoETBqAv4YBnSmZyuoovjQMsDjfjnCnBFqXhhQEB\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":{\"keccak256\":\"0x4c6100a8ab53ef249c937067f7d9779ee0966fb55b39903628c169428fdeee76\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2b96738706660e46a7d77d13e14191d658b87720e2000a52c02890505183c118\",\"dweb:/ipfs/QmRUjhpmBAEmVEqD4L5LznnDR9gQdgXg17kZExC9N55Q63\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://08e39f23d5b4692f9a40803e53a8156b72b4c1f9902a88cd65ba964db103dab9\",\"dweb:/ipfs/QmPKn6EYDgpga7KtpkA8wV2yJCYGMtc9K4LkJfhKX2RVSV\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/NoncesUpgradeable.sol\":{\"keccak256\":\"0x778f4a1546a1c6c726ecc8e2348a2789690fb8f26e12bd9d89537669167b79a4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://851d3dfe724e918ff0a064b206e1ef46b27ab0df2aa2c8af976973a22ef59827\",\"dweb:/ipfs/Qmd4wb7zX8ueYhMVBy5PJjfsANK3Ra3pKPN7qQkNsdwGHn\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/EIP712Upgradeable.sol\":{\"keccak256\":\"0xd45a5b1d0e451376b08e1bc7e332426c24382053300acf0ac667be1b8abb6cc2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://824eb0b8c71db8b95b707218d8540c2046a2fefc642e74b343ae90e5c72e2b52\",\"dweb:/ipfs/QmdQTZTomqxRrySDNdv1FEyh3ZWibxwC9FRdcV3DCuASpx\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol\":{\"keccak256\":\"0xc8ed8d2056934b7675b695dec032f2920c2f5c6cf33a17ca85650940675323ab\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3c8ccc75d1cd792d192aa09e54dd49ea35fe85baa9fcd17486f29227d9f29b89\",\"dweb:/ipfs/QmbboSbFUEiM9tdEgBwuTRb7bykFoJXZ7dsSr1PSREJXMr\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/AccessControl.sol\":{\"keccak256\":\"0xc1bebdee8943bd5e9ef1e0f2e63296aa1dd4171a66b9e74d0286220e891e1458\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://928cf2f0042c606f3dcb21bd8a272573f462a215cd65285d2d6b407f31e9bd67\",\"dweb:/ipfs/QmWGxjckno6sfjHPX5naPnsfsyisgy4PJDf46eLw9umfpx\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\":{\"keccak256\":\"0x4d9a2b261b56a1e4a37bb038151dec98b952fed16de2bdfdda27e38e2b12b530\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f724110f7aeb6151af800ab8c12e6060b29bda9e013f0ccb331eb754d6a7cbf0\",\"dweb:/ipfs/QmUcjzCZpxtUPdEThtAzE1f9LvuJiUGZxTdH9N6bHrb5Cf\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable2Step.sol\":{\"keccak256\":\"0xdcad8898fda432696597752e8ec361b87d85c82cb258115427af006dacf7128c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e2c9d517f0c136d54bd00cd57959d25681d4d6273f5bbbc263afe228303772f0\",\"dweb:/ipfs/QmReNFjXBiufByiAAzfSQ2SM5r3qeUErn46BmN3yVRvrek\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/extensions/AccessControlDefaultAdminRules.sol\":{\"keccak256\":\"0xd5e43578dce2678fbd458e1221dc37b20e983ecce4a314b422704f07d6015c5b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9ea4d9ae3392dc9db1ef4d7ebef84ce7fa243dc14abb46e68eb2eb60d2cd0e93\",\"dweb:/ipfs/QmRfjyDoLWF74EgmpcGkWZM7Kx1LgHN8dZHBxAnU9vPH46\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/extensions/IAccessControlDefaultAdminRules.sol\":{\"keccak256\":\"0x094d9bafd5008e2e3b53e40b0ca75173cec4e2c81cf2572ddbef07d375976580\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://caa28b73830478c39706023a757ce6cc138c396d94300fbcc927998a139f8b7e\",\"dweb:/ipfs/QmYVS9731qEJhuMMsU6vqrkdGxq2pxdXcvmtGTNSntAsAE\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/interfaces/IERC1363.sol\":{\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://da62d6be1f5c6edf577f0cb45666a8aa9c2086a4bac87d95d65f02e2f4c36a4b\",\"dweb:/ipfs/QmNkpvBpoCMvX8JwAFNSc5XxJ2q5BXJpL5L1txb4QkqVFF\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol\":{\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://11fea9f8bc98949ac6709f0c1699db7430d2948137aa94d5a9e95a91f61a710a\",\"dweb:/ipfs/QmQdfRXxQjwP6yn3DVo1GHPpriKNcFghSPi94Z1oKEFUNS\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol\":{\"keccak256\":\"0xb25a4f11fa80c702bf5cd85adec90e6f6f507f32f4a8e6f5dbc31e8c10029486\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6917f8a323e7811f041aecd4d9fd6e92455a6fba38a797ac6f6e208c7912b79d\",\"dweb:/ipfs/QmShuYv55wYHGi4EFkDB8QfF7ZCHoKk2efyz3AWY1ExSq7\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol\":{\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a2608291cb038b388d80b79a06b6118a42f7894ff67b7da10ec0dbbf5b2973ba\",\"dweb:/ipfs/QmWohqcBLbcxmA4eGPhZDXe5RYMMEEpFq22nfkaUMvTfw1\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol\":{\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5c0f29195ad64cbe556da8e257dac8f05f78c53f90323c0d2accf8e6922d33a\",\"dweb:/ipfs/QmQ61TED8uaCZwcbh8KkgRSsCav7x7HbcGHwHts3U4DmUP\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/interfaces/IERC5313.sol\":{\"keccak256\":\"0x22412c268e74cc3cbf550aecc2f7456f6ac40783058e219cfe09f26f4d396621\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0b841021f25480424d2359de4869e60e77f790f52e8e85f07aa389543024b559\",\"dweb:/ipfs/QmV7U5ehV5xe3QrbE8ErxfWSSzK1T1dGeizXvYPjWpNDGq\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b\",\"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"keccak256\":\"0xa3066ff86b94128a9d3956a63a0511fa1aae41bd455772ab587b32ff322acb2e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bf7b192fd82acf6187970c80548f624b1b9c80425b62fa49e7fdb538a52de049\",\"dweb:/ipfs/QmWXG1YCde1tqDYTbNwjkZDWVgPEjzaQGSDqWkyKLzaNua\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"keccak256\":\"0x8decfa54cec979c824b044b8128cd91d713f72c71fd7dfa54974624d8c949898\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://271f914261a19d87117a777e0924ada545c16191ef9b00cc40b0134fc14ebc70\",\"dweb:/ipfs/QmdvVNWHGHQrGGPonZJs5NuzTevTjZRM2zayKrDJf7WBA2\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/Proxy.sol\":{\"keccak256\":\"0xc3f2ec76a3de8ed7a7007c46166f5550c72c7709e3fc7e8bb3111a7191cdedbd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e73efb4c2ca655882dc237c6b4f234a9bd36d97159d8fcaa837eb01171f726ac\",\"dweb:/ipfs/QmTNnnv7Gu5fs5G1ZMh7Fexp8N4XUs3XrNAngjcxgiss3e\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/beacon/BeaconProxy.sol\":{\"keccak256\":\"0xef92aebf99249a8ac1d682b9a0f04b6f2af2a8f631cb126625bab15bafcefda8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9a0709f54f682b4d22d3108e5951019145cd0b4abda4517638410d231f37d960\",\"dweb:/ipfs/QmdR3oRXqheNuBVRW1cMqDCffBsV1DtuvRHuaDph4ZTku2\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":{\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5aa4f07e65444784c29cd7bfcc2341b34381e4e5b5da9f0c5bd00d7f430e66fa\",\"dweb:/ipfs/QmWRMh4Q9DpaU9GvsiXmDdoNYMyyece9if7hnfLz7uqzWM\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/beacon/UpgradeableBeacon.sol\":{\"keccak256\":\"0x5920bac7215d12961e23b207f6e81a1d64aa4935a4469abe95b64a96a3c3007b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b34bb828c45c3a4ebf6c2c585971abf5089e61357a3818a2900c7e85b74a1299\",\"dweb:/ipfs/QmewGAzKsPXYfSjCKxuH1SekKxtdyzhdbdyxjF5gohLigt\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/transparent/ProxyAdmin.sol\":{\"keccak256\":\"0x46f86003755f50eff00a7c5aaf493ae62e024142b8aec4493a313851d3c14872\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://462c770cb667cc75ab22df5a29c50873b24b267274edf87ac5cfe0112bf4c3f7\",\"dweb:/ipfs/QmTfKk32AkQ2yyYZCYJ44V69EM5t9ryBFC6bRF7FVMHXvj\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\":{\"keccak256\":\"0x92579f452fe663595a898cbac85d80bb3868a6c9f034f19ba7fbebdfa3b65a4d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d07a888cd4a26c7077a30dd99e9ac30fbe2752bfb37e58c65f06a3b192079ef3\",\"dweb:/ipfs/QmZCQY4FC4ynBv9dha4BBWM1vYxTUJPBdFBS4HEFe6XzVB\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c13d13304ac79a83ab1c30168967d19e2203342ebbd6a9bbce4db7550522dcbf\",\"dweb:/ipfs/QmeN5jKMN2vw5bhacr6tkg78afbTTZUeaacNHqjWt4Ew1r\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x27dbc90e5136ffe46c04f7596fc2dbcc3acebd8d504da3d93fdb8496e6de04f6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea8b92e4245d75a5579c10f22f118f7b4ba07c57341f181f0b2a85ff8663de3\",\"dweb:/ipfs/Qme3Ss5ByjmkxxkMdLpyu7fQ1PCtjNFH1wEFszt2BZePiG\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x982c5cb790ab941d1e04f807120a71709d4c313ba0bfc16006447ffbd27fbbd5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8150ceb4ac947e8a442b2a9c017e01e880b2be2dd958f1fa9bc405f4c5a86508\",\"dweb:/ipfs/QmbcBmFX66AY6Kbhnd5gx7zpkgqnUafo43XnmayAM7zVdB\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"keccak256\":\"0xaaa1d17c1129b127a4a401db2fbd72960e2671474be3d08cae71ccdc42f7624c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cb2f27cd3952aa667e198fba0d9b7bcec52fbb12c16f013c25fe6fb52b29cc0e\",\"dweb:/ipfs/QmeuohBFoeyDPZA9JNCTEDz3VBfBD4EABWuWXVhHAuEpKR\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Errors.sol\":{\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ba1d02f4847670a1b83dec9f7d37f0b0418d6043447b69f3a29a5f9efc547fcf\",\"dweb:/ipfs/QmQ7iH2keLNUKgq2xSWcRmuBE5eZ3F5whYAkAGzCNNoEWB\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Panic.sol\":{\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c6a5ff4f9fd8649b7ee20800b7fa387d3465bd77cf20c2d1068cd5c98e1ed57a\",\"dweb:/ipfs/QmVSaVJf9FXFhdYEYeCEfjMVHrxDh5qL4CGkxdMWpQCrqG\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Pausable.sol\":{\"keccak256\":\"0xdb484371dfbb848cb6f5d70464e9ac9b2900e4164ead76bbce4fef0b44bcc68f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f9d6f6f6600a2bec622f699081b58350873b5e63ce05464d17d674a290bb8a7c\",\"dweb:/ipfs/QmQKVzSQY1PM3Bid4QhgVVZyx6B4Jx7XgaQzLKHj38vJz8\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9f660b1f351b757dfe01438e59888f31f33ded3afcf5cb5b0d9bf9aa6f320a8b\",\"dweb:/ipfs/QmarDJ5hZEgBtCmmrVzEZWjub9769eD686jmzb2XpSU1cM\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"keccak256\":\"0x81c274a60a7ae232ae3dc9ff3a4011b4849a853c13b0832cd3351bb1bb2f0dae\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9da0c20dc74358a2a76330818f3bac9d1e2ce3371aec847b9cbf5d147fbae4f6\",\"dweb:/ipfs/QmeczhmnFv1hbXKGLwbYXY6Rrytc9a5A2YaRi5QMMgjPnb\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0x69f54c02b7d81d505910ec198c11ed4c6a728418a868b906b4a0cf29946fda84\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8e25e4bdb7ae1f21d23bfee996e22736fc0ab44cfabedac82a757b1edc5623b9\",\"dweb:/ipfs/QmQdWQvB6JCP9ZMbzi8EvQ1PTETqkcTWrbcVurS7DKpa5n\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol\":{\"keccak256\":\"0x26670fef37d4adf55570ba78815eec5f31cb017e708f61886add4fc4da665631\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b16d45febff462bafd8a5669f904796a835baf607df58a8461916d3bf4f08c59\",\"dweb:/ipfs/QmU2eJFpjmT4vxeJWJyLeQb8Xht1kdB8Y6MKLDPFA9WPux\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0xddce8e17e3d3f9ed818b4f4c4478a8262aab8b11ed322f1bf5ed705bb4bd97fa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8084aa71a4cc7d2980972412a88fe4f114869faea3fefa5436431644eb5c0287\",\"dweb:/ipfs/Qmbqfs5dRdPvHVKY8kTaeyc65NdqXRQwRK7h9s5UJEhD1p\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621\",\"dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x1225214420c83ebcca88f2ae2b50f053aaa7df7bd684c3e878d334627f2edfc6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6c5fab4970634f9ab9a620983dc1c8a30153981a0b1a521666e269d0a11399d3\",\"dweb:/ipfs/QmVRnBC575MESGkEHndjujtR7qub2FzU9RWy9eKLp4hPZB\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol\":{\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b1d578337048cad08c1c03041cca5978eff5428aa130c781b271ad9e5566e1f8\",\"dweb:/ipfs/QmPFKL2r9CBsMwmUqqdcFPfHZB2qcs9g1HDrPxzWSxomvy\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://db5fbb3dddd8b7047465b62575d96231ba8a2774d37fb4737fbf23340fabbb03\",\"dweb:/ipfs/QmVUSvooZKEdEdap619tcJjTLcAuH6QBdZqAzWwnAXZAWJ\"]},\"lib/openzeppelin-foundry-upgrades/src/Defender.sol\":{\"keccak256\":\"0x2114e4d70d53b36e8cec54ba11ff78d9f38a466ec3504c76c7f26101a7cff37f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://58f4d9bc58646e7631b263cdb8ef260e6818e9f716036d81d1c18218c9557a23\",\"dweb:/ipfs/QmS18L4R4gPtay9eQBcR28DnwmBkGSWsiCFwm2tXc3BkHL\"]},\"lib/openzeppelin-foundry-upgrades/src/Options.sol\":{\"keccak256\":\"0xd62ea6bdc1d148c473846b5bd943144a4e492cb93496fc54645258fdc2e261f7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c58d96f48c6cde51bb137e851c2a481cb7f0003accfd17594c4ba0586be3c3bb\",\"dweb:/ipfs/QmdioTToxjZy2buydukEPdGrDqBEtLqtokRkN5ghgzm19V\"]},\"lib/openzeppelin-foundry-upgrades/src/Upgrades.sol\":{\"keccak256\":\"0x822dc23091a6ef7c1207bdc65eba8716b635392cd061e56b99d042216686d6e2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c376817ffdc56d89bdb10c4b42e56b4c4c294686f914fb65cc3e96c108f660c0\",\"dweb:/ipfs/QmXHy6WYztETzHKGjzLpDmvgFkzxsv1hEbMkEbwNyWn47o\"]},\"lib/openzeppelin-foundry-upgrades/src/internal/Core.sol\":{\"keccak256\":\"0x1f671c2d16c7e66ef014d284bed46aa0fbf36d99d788e8874a8bc64f2e1f75e9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://991fcba03f07c28f7c04b8a85f4acbb9ffcf0f7f7e1b3e4c2eb6fc0585c2a3d1\",\"dweb:/ipfs/QmXBAMjyCnEqdYQw7vSKfQSUZK8C1aRgGXu46AiGeeut6B\"]},\"lib/openzeppelin-foundry-upgrades/src/internal/DefenderDeploy.sol\":{\"keccak256\":\"0x5df88a72cb2f2e22f609636474a828595fc284e9745a7569ec73cd3c13f54ff5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ec83f6823ed33ed0da807034e5556d5a84abdbb8c989fec141900d73970d05d9\",\"dweb:/ipfs/QmVb7Rfoaqn8gzKJNrSRJGVU2qSNuvMc7FJrb4j928upCK\"]},\"lib/openzeppelin-foundry-upgrades/src/internal/StringFinder.sol\":{\"keccak256\":\"0x423f79ce68a98fd38d2654a47fd373f58036fbef129dd1a189d0534e67c38c50\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d5fec9580ff736edf6bac3f2b03f9a6c2036ba5e71bf2210491e614be8795dfd\",\"dweb:/ipfs/QmavYcUmMnf9czYo2cLxR4VLyiwtaA68yvf2g3pyoE9a4A\"]},\"lib/openzeppelin-foundry-upgrades/src/internal/Utils.sol\":{\"keccak256\":\"0x96c6430958a3c74dc93b470f3656352412691e1a8c53e7225ca8b8c32ab3e77b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7b1ce52f58c935c8cc930edeb13cdf6cf8d0bc2d5e58ff5f5d555383d97eda9d\",\"dweb:/ipfs/QmSWXzxtUijtQPxEQhuFw9JA5XiMWQshmYd39ZboqWRbHr\"]},\"lib/openzeppelin-foundry-upgrades/src/internal/Versions.sol\":{\"keccak256\":\"0x50d28b08e922e5313831d5a45aca27d5dd429c3f891e26c89d16b088bca8372d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://208be31cc96d534f64e5293872d99cc68932df6505ea3b6b0e8f7b19cd1cd0c4\",\"dweb:/ipfs/QmbyznRaPjcZXSJ7w6ms1zrQcdtofWEPs7HSkVvFX6tQ1L\"]},\"lib/openzeppelin-foundry-upgrades/src/internal/interfaces/IProxyAdmin.sol\":{\"keccak256\":\"0xf5e514595089f8959da130507086e7388602a71ce60575d141e7d892dfbddbfc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9b41366e2823ccc8cb42304496d761b3df80946d17384634a61afd7139495c91\",\"dweb:/ipfs/QmZE2nRMxax1NPj63ifemKdScGJzKNWi7BCGudjFLsUz1y\"]},\"lib/openzeppelin-foundry-upgrades/src/internal/interfaces/IUpgradeableBeacon.sol\":{\"keccak256\":\"0xa8d7bffdd26eb763e459650c83f247b54af79800c2df52ad05878f238fc1c2f8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed47f1e53e5eb7d48fed60a414755641fca8fa0e713fd503b2597227da78a2f\",\"dweb:/ipfs/QmQr8A5wddHdhQNauFShXxRkPcuVVpVsYpq846WhmFC8Tv\"]},\"lib/openzeppelin-foundry-upgrades/src/internal/interfaces/IUpgradeableProxy.sol\":{\"keccak256\":\"0x781b564b90bba0c0e8e12fb66b1c910f42d369db469f2e88592b4cff29de99a5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://45fcab02a43fde934445b88e905aba3f58a70b75dd6ee6eb86a3d593424aeb03\",\"dweb:/ipfs/QmXmhAgrctaYUDLoTRgUjwD4deoXu1E2QT1kftVGcVa56j\"]},\"script/Deployment.s.sol\":{\"keccak256\":\"0xfe821e8c0f8a4cb45049aaca720240c8fd3b264bacdb9e926162a0ba39aed5f5\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://e010e7b76bb3d3fd325d2aff1c3bc5c9833434e66ce51c63f9cd44f12a6c75ea\",\"dweb:/ipfs/QmbUeRBd8Be8eVHMw4LFHsSew1Q3vDB5wmsFL7MC4gTL5k\"]},\"src/AddressesWhitelist.sol\":{\"keccak256\":\"0xcc4f7b0ba582d3f9daa0aa67efa4f87ddabca79213125803a15f1dbed0349d2f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b4bfd3feb2f74ae63eb0c12e76bc2cc67e83dabdb4f654acc70b61a8afeac1e7\",\"dweb:/ipfs/QmV4E9B1LpRZh2a5rREtEKjmpPCg1RssnwL4xghfTEDvZe\"]},\"src/PriceStorage.sol\":{\"keccak256\":\"0x0c8bf404439fed3e9b2778f9f0722ef64790b2368c83be6d41d6e9d50aeb21ba\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1d4e00997cfe69fd45bc99d4741d42e7374c2a6187b9c833ac989766808e7789\",\"dweb:/ipfs/QmbYiivizihkt8oookAq91kmQheRJayuWuaLxymsbRnes1\"]},\"src/RequestsManager.sol\":{\"keccak256\":\"0x300fb930bd713711e651927167cf3381d3403cce1610fcf962f1f58166d1c0c3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://55a33a8a9aeca2688720fbe8e426ec76d21ec521c42f939d65a671d52d5a128d\",\"dweb:/ipfs/QmUi7vSTrgrQfHhQNecGb3yzzwXLf245vVAfTq45W1kBUw\"]},\"src/SimpleToken.sol\":{\"keccak256\":\"0xa03067d99b20ceef178c7290753405397e92f931759a3ff5fe182fb477221b33\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://398fa8ffb193a416dcab48abc9e775bd3e4fa64668014ba36331d02604ca95c9\",\"dweb:/ipfs/QmXURduadcmGzDB3fWnJ83fGwi9m7Y45i4RrjnHu34H6Aw\"]},\"src/interfaces/IAddressesWhitelist.sol\":{\"keccak256\":\"0x5d9188a29e698571074343dac9affe9a353965d65844dd8af76a40a7f9f34f30\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bfc8bad66933f20d9c42124a983c1ac3345c4f54e26f4fd7d82f33add7de4f23\",\"dweb:/ipfs/QmSjS91Ag3hBzK4zrS2rotNQLgHoR6kxwJAhyJtWoyTei1\"]},\"src/interfaces/IPriceStorage.sol\":{\"keccak256\":\"0x9c3933fb1ea69749560cd65504b5b831696d52e360d96f70ecb57d521e488164\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6453ee6f418590417f4e314ec15813359aa4d03f7605ddd2901844254429b9cf\",\"dweb:/ipfs/QmW5USrhdmNM3ZfZaUjVZmHk3Pe7r83oP4PQYTcxQ3xqhh\"]},\"src/interfaces/IRequestsManager.sol\":{\"keccak256\":\"0x895c09c06849bc10f5257617827ae2cf0f2e9a822f3d464788e2f970bc3996a8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0a6ea48e78dba63fa377601394e17fbbe058e8e18e27dd5673c1dd8afe8269cb\",\"dweb:/ipfs/QmPEKEEASUxcoRrWaTwgeRZoirjVcErkvCcxEMSEXNWCQF\"]},\"src/interfaces/ISimpleToken.sol\":{\"keccak256\":\"0x28a5cb003aa38248d519116cae3a52756eb6021b0eaf7bd28cbad31ca49c4bd2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8891f73ceebeeb0eb1e95980e226a965e0a6eb2e052bf3c485d3d811e782ba03\",\"dweb:/ipfs/QmWkgdZd6enUqiY8zL7C8KJZvKvEbSfjhY86uHeC2tFzq3\"]}},\"version\":1}","userdoc":{},"devdoc":{},"storageLayout":{"storage":[{"astId":46,"contract":"script/Deployment.s.sol:DeploymentScript","label":"stdstore","offset":0,"slot":"0","type":"t_struct(StdStorage)5112_storage"},{"astId":124,"contract":"script/Deployment.s.sol:DeploymentScript","label":"stdChainsInitialized","offset":0,"slot":"8","type":"t_bool"},{"astId":145,"contract":"script/Deployment.s.sol:DeploymentScript","label":"chains","offset":0,"slot":"9","type":"t_mapping(t_string_memory_ptr,t_struct(Chain)140_storage)"},{"astId":149,"contract":"script/Deployment.s.sol:DeploymentScript","label":"defaultRpcUrls","offset":0,"slot":"10","type":"t_mapping(t_string_memory_ptr,t_string_storage)"},{"astId":153,"contract":"script/Deployment.s.sol:DeploymentScript","label":"idToAlias","offset":0,"slot":"11","type":"t_mapping(t_uint256,t_string_storage)"},{"astId":156,"contract":"script/Deployment.s.sol:DeploymentScript","label":"fallbackToDefaultRpcUrls","offset":0,"slot":"12","type":"t_bool"},{"astId":1094,"contract":"script/Deployment.s.sol:DeploymentScript","label":"gasMeteringOff","offset":1,"slot":"12","type":"t_bool"},{"astId":99,"contract":"script/Deployment.s.sol:DeploymentScript","label":"IS_SCRIPT","offset":2,"slot":"12","type":"t_bool"},{"astId":51795,"contract":"script/Deployment.s.sol:DeploymentScript","label":"TOKEN_NAME","offset":0,"slot":"13","type":"t_string_storage"},{"astId":51798,"contract":"script/Deployment.s.sol:DeploymentScript","label":"TOKEN_SYMBOL","offset":0,"slot":"14","type":"t_string_storage"},{"astId":51801,"contract":"script/Deployment.s.sol:DeploymentScript","label":"PRICE_UPDATE_UPPER_BOUND_PERCENTAGE","offset":0,"slot":"15","type":"t_uint256"},{"astId":51804,"contract":"script/Deployment.s.sol:DeploymentScript","label":"PRICE_UPDATE_LOWER_BOUND_PERCENTAGE","offset":0,"slot":"16","type":"t_uint256"},{"astId":51807,"contract":"script/Deployment.s.sol:DeploymentScript","label":"MINT_DEPOSIT_VAULT","offset":0,"slot":"17","type":"t_address"},{"astId":51810,"contract":"script/Deployment.s.sol:DeploymentScript","label":"INPUT_TOKEN","offset":0,"slot":"18","type":"t_address"},{"astId":51813,"contract":"script/Deployment.s.sol:DeploymentScript","label":"MINT_REDEEM_SERVICE_WALLET","offset":0,"slot":"19","type":"t_address"},{"astId":51816,"contract":"script/Deployment.s.sol:DeploymentScript","label":"PRICE_UPDATE_SERVICE_WALLET","offset":0,"slot":"20","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_bytes32)dyn_storage":{"encoding":"dynamic_array","label":"bytes32[]","numberOfBytes":"32","base":"t_bytes32"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes4":{"encoding":"inplace","label":"bytes4","numberOfBytes":"4"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)5087_storage)))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(bytes4 => mapping(bytes32 => struct FindData)))","numberOfBytes":"32","value":"t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)5087_storage))"},"t_mapping(t_bytes32,t_struct(FindData)5087_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct FindData)","numberOfBytes":"32","value":"t_struct(FindData)5087_storage"},"t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)5087_storage))":{"encoding":"mapping","key":"t_bytes4","label":"mapping(bytes4 => mapping(bytes32 => struct FindData))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_struct(FindData)5087_storage)"},"t_mapping(t_string_memory_ptr,t_string_storage)":{"encoding":"mapping","key":"t_string_memory_ptr","label":"mapping(string => string)","numberOfBytes":"32","value":"t_string_storage"},"t_mapping(t_string_memory_ptr,t_struct(Chain)140_storage)":{"encoding":"mapping","key":"t_string_memory_ptr","label":"mapping(string => struct StdChains.Chain)","numberOfBytes":"32","value":"t_struct(Chain)140_storage"},"t_mapping(t_uint256,t_string_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => string)","numberOfBytes":"32","value":"t_string_storage"},"t_string_memory_ptr":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(Chain)140_storage":{"encoding":"inplace","label":"struct StdChains.Chain","numberOfBytes":"128","members":[{"astId":133,"contract":"script/Deployment.s.sol:DeploymentScript","label":"name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":135,"contract":"script/Deployment.s.sol:DeploymentScript","label":"chainId","offset":0,"slot":"1","type":"t_uint256"},{"astId":137,"contract":"script/Deployment.s.sol:DeploymentScript","label":"chainAlias","offset":0,"slot":"2","type":"t_string_storage"},{"astId":139,"contract":"script/Deployment.s.sol:DeploymentScript","label":"rpcUrl","offset":0,"slot":"3","type":"t_string_storage"}]},"t_struct(FindData)5087_storage":{"encoding":"inplace","label":"struct FindData","numberOfBytes":"128","members":[{"astId":5080,"contract":"script/Deployment.s.sol:DeploymentScript","label":"slot","offset":0,"slot":"0","type":"t_uint256"},{"astId":5082,"contract":"script/Deployment.s.sol:DeploymentScript","label":"offsetLeft","offset":0,"slot":"1","type":"t_uint256"},{"astId":5084,"contract":"script/Deployment.s.sol:DeploymentScript","label":"offsetRight","offset":0,"slot":"2","type":"t_uint256"},{"astId":5086,"contract":"script/Deployment.s.sol:DeploymentScript","label":"found","offset":0,"slot":"3","type":"t_bool"}]},"t_struct(StdStorage)5112_storage":{"encoding":"inplace","label":"struct StdStorage","numberOfBytes":"256","members":[{"astId":5096,"contract":"script/Deployment.s.sol:DeploymentScript","label":"finds","offset":0,"slot":"0","type":"t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)5087_storage)))"},{"astId":5099,"contract":"script/Deployment.s.sol:DeploymentScript","label":"_keys","offset":0,"slot":"1","type":"t_array(t_bytes32)dyn_storage"},{"astId":5101,"contract":"script/Deployment.s.sol:DeploymentScript","label":"_sig","offset":0,"slot":"2","type":"t_bytes4"},{"astId":5103,"contract":"script/Deployment.s.sol:DeploymentScript","label":"_depth","offset":0,"slot":"3","type":"t_uint256"},{"astId":5105,"contract":"script/Deployment.s.sol:DeploymentScript","label":"_target","offset":0,"slot":"4","type":"t_address"},{"astId":5107,"contract":"script/Deployment.s.sol:DeploymentScript","label":"_set","offset":0,"slot":"5","type":"t_bytes32"},{"astId":5109,"contract":"script/Deployment.s.sol:DeploymentScript","label":"_enable_packed_slots","offset":0,"slot":"6","type":"t_bool"},{"astId":5111,"contract":"script/Deployment.s.sol:DeploymentScript","label":"_calldata","offset":0,"slot":"7","type":"t_bytes_storage"}]},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"evm":{"bytecode":{"functionDebugData":{"array_dataslot_string_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"clean_up_bytearray_end_slots_string_storage":{"entryPoint":331,"id":null,"parameterSlots":3,"returnSlots":0},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":407,"id":null,"parameterSlots":2,"returnSlots":0},"extract_byte_array_length":{"entryPoint":275,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x41":{"entryPoint":255,"id":null,"parameterSlots":0,"returnSlots":0}},"object":"","opcodes":"PUSH1 0xC DUP1 SLOAD PUSH3 0xFF00FF NOT AND PUSH3 0x10001 OR SWAP1 SSTORE PUSH1 0xC0 PUSH1 0x40 MSTORE PUSH1 0x9 PUSH1 0x80 SWAP1 DUP2 MSTORE PUSH9 0xC2ECAAA688409A82B PUSH1 0xBB SHL PUSH1 0xA0 MSTORE PUSH1 0xD SWAP1 PUSH2 0x39 SWAP1 DUP3 PUSH2 0x197 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x6 DUP2 MSTORE PUSH6 0xC2ECAAA688F PUSH1 0xD3 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0xE SWAP1 PUSH2 0x64 SWAP1 DUP3 PUSH2 0x197 JUMP JUMPDEST POP PUSH7 0xB1A2BC2EC50000 PUSH1 0xF SSTORE PUSH8 0x494654067E10000 PUSH1 0x10 SSTORE PUSH1 0x11 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND PUSH20 0xFCC1AB0AEF7E92EEF7ACDDBF187ACDD227AAC081 OR SWAP1 SWAP2 SSTORE PUSH1 0x12 DUP1 SLOAD DUP3 AND PUSH20 0x24DE8771BC5DDB3362DB529FC3358F2DF3A0E346 OR SWAP1 SSTORE PUSH1 0x13 DUP1 SLOAD DUP3 AND PUSH20 0xD5456B9AB991768601BEDF1159C51009D43C698D SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x14 DUP1 SLOAD SWAP1 SWAP3 AND OR SWAP1 SSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF9 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH2 0x251 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x127 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x145 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x192 JUMPI DUP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x170 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x18F JUMPI PUSH0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x17C JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x1B0 JUMPI PUSH2 0x1B0 PUSH2 0xFF JUMP JUMPDEST PUSH2 0x1C4 DUP2 PUSH2 0x1BE DUP5 SLOAD PUSH2 0x113 JUMP JUMPDEST DUP5 PUSH2 0x14B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x1F DUP3 GT PUSH1 0x1 DUP2 EQ PUSH2 0x1F6 JUMPI PUSH0 DUP4 ISZERO PUSH2 0x1DF JUMPI POP DUP5 DUP3 ADD MLOAD JUMPDEST PUSH0 NOT PUSH1 0x3 DUP6 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP5 SWAP1 SHL OR DUP5 SSTORE PUSH2 0x18F JUMP JUMPDEST PUSH0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP6 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x225 JUMPI DUP8 DUP6 ADD MLOAD DUP3 SSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x205 JUMP JUMPDEST POP DUP5 DUP3 LT ISZERO PUSH2 0x242 JUMPI DUP7 DUP5 ADD MLOAD PUSH0 NOT PUSH1 0x3 DUP8 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0x7F62 DUP1 PUSH2 0x25E PUSH0 CODECOPY PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x34 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xC0406226 EQ PUSH2 0x38 JUMPI DUP1 PUSH4 0xF8CCBF47 EQ PUSH2 0x42 JUMPI JUMPDEST PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0x40 PUSH2 0x69 JUMP JUMPDEST STOP JUMPDEST PUSH1 0xC SLOAD PUSH2 0x55 SWAP1 PUSH3 0x10000 SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xC1978D1F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xB PUSH1 0x24 DUP3 ADD MSTORE PUSH11 0x505249564154455F4B4559 PUSH1 0xA8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH0 SWAP1 PUSH0 MLOAD PUSH1 0x20 PUSH2 0x7E43 PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SWAP1 PUSH4 0xC1978D1F SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xCD JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xF1 SWAP2 SWAP1 PUSH2 0x3E97 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH3 0x5E79B7 PUSH1 0xE0 SHL SUB NOT DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE SWAP1 SWAP2 POP PUSH0 SWAP1 PUSH0 MLOAD PUSH1 0x20 PUSH2 0x7E43 PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SWAP1 PUSH4 0xFFA18649 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x140 JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x164 SWAP2 SWAP1 PUSH2 0x3EAE JUMP JUMPDEST SWAP1 POP PUSH0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND BALANCE SWAP1 POP PUSH2 0x1A4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xE DUP2 MSTORE PUSH1 0x20 ADD PUSH14 0x4465706C6F796572202D3E202573 PUSH1 0x90 SHL DUP2 MSTORE POP DUP4 PUSH2 0x9DD JUMP JUMPDEST PUSH2 0x1D3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xD DUP2 MSTORE PUSH1 0x20 ADD PUSH13 0x42616C616E6365202D3E202573 PUSH1 0x98 SHL DUP2 MSTORE POP DUP3 PUSH2 0xA26 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xCE817D47 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH0 MLOAD PUSH1 0x20 PUSH2 0x7E43 PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SWAP1 PUSH4 0xCE817D47 SWAP1 PUSH1 0x24 ADD PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x216 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x228 JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH2 0x2EB PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x15 DUP2 MSTORE PUSH1 0x20 ADD PUSH21 0x2232B83637BCB4B7339012B9903A37B5B2B7171717 PUSH1 0x59 SHL DUP2 MSTORE POP PUSH1 0xE DUP1 SLOAD PUSH2 0x26A SWAP1 PUSH2 0x3ED4 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x296 SWAP1 PUSH2 0x3ED4 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2E1 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2B8 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2E1 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2C4 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP PUSH2 0xA6B JUMP JUMPDEST PUSH0 PUSH2 0x35B PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xF DUP2 MSTORE PUSH1 0x20 ADD PUSH15 0x14DA5B5C1B19551BDAD95B8B9CDBDB PUSH1 0x8A SHL DUP2 MSTORE POP PUSH1 0xD PUSH1 0xE PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x32C SWAP3 SWAP2 SWAP1 PUSH2 0x3FA4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x266C45BB PUSH1 0xE1 SHL OR SWAP1 MSTORE PUSH2 0xAB0 JUMP JUMPDEST SWAP1 POP PUSH2 0x425 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x19 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x2573202870726F787929206465706C6F79656420746F20257300000000000000 DUP2 MSTORE POP PUSH1 0xE DUP1 SLOAD PUSH2 0x3A3 SWAP1 PUSH2 0x3ED4 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x3CF SWAP1 PUSH2 0x3ED4 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x41A JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3F1 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x41A JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x3FD JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP4 PUSH2 0xACE JUMP JUMPDEST PUSH2 0x463 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x19 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4465706C6F79696E6720507269636553746F726167652E2E2E00000000000000 DUP2 MSTORE POP PUSH2 0xB1A JUMP JUMPDEST PUSH0 PUSH2 0x4DF PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x10 DUP2 MSTORE PUSH1 0x20 ADD PUSH16 0x141C9A58D954DD1BDC9859D94B9CDBDB PUSH1 0x82 SHL DUP2 MSTORE POP PUSH1 0xF SLOAD PUSH1 0x10 SLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x4B0 SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x7251808B PUSH1 0xE1 SHL OR SWAP1 MSTORE PUSH2 0xAB0 JUMP JUMPDEST SWAP1 POP PUSH2 0x503 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x23 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x7EBA PUSH1 0x23 SWAP2 CODECOPY DUP3 PUSH2 0x9DD JUMP JUMPDEST PUSH2 0x524 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2F DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x7EFE PUSH1 0x2F SWAP2 CODECOPY PUSH2 0xB1A JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x2F2FF15D DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA20E7D47 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x573 JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x597 SWAP2 SWAP1 PUSH2 0x3E97 JUMP JUMPDEST PUSH1 0x14 SLOAD PUSH1 0x40 MLOAD PUSH1 0xE0 DUP5 SWAP1 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5DE JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x5F0 JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH2 0x632 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1F DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4465706C6F79696E672041646472657373657357686974656C6973742E2E2E00 DUP2 MSTORE POP PUSH2 0xB1A JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD PUSH2 0x63F SWAP1 PUSH2 0x3DAE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH2 0x658 JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP SWAP1 POP PUSH2 0x67D PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x7EDD PUSH1 0x21 SWAP2 CODECOPY DUP3 PUSH2 0x9DD JUMP JUMPDEST PUSH2 0x6BB PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1C DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4465706C6F79696E672052657175657374734D616E616765722E2E2E00000000 DUP2 MSTORE POP PUSH2 0xB1A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH0 SWAP2 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP POP PUSH1 0x12 SLOAD DUP3 MLOAD SWAP3 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 DUP4 SWAP2 POP PUSH0 SWAP1 PUSH2 0x6FB JUMPI PUSH2 0x6FB PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x20 SWAP2 DUP3 MUL SWAP3 SWAP1 SWAP3 ADD ADD MSTORE PUSH1 0x11 SLOAD PUSH1 0x40 MLOAD PUSH0 SWAP3 DUP9 SWAP3 AND SWAP1 DUP6 SWAP1 DUP6 SWAP1 PUSH2 0x72A SWAP1 PUSH2 0x3DBB JUMP JUMPDEST PUSH2 0x737 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3FF0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH2 0x750 JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP SWAP1 POP PUSH2 0x792 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1E DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x52657175657374734D616E61676572206465706C6F79656420746F2025730000 DUP2 MSTORE POP DUP3 PUSH2 0x9DD JUMP JUMPDEST PUSH2 0x7B3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x32 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x7E63 PUSH1 0x32 SWAP2 CODECOPY PUSH2 0xB1A JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x2F2FF15D DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA20E7D47 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7FE JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x822 SWAP2 SWAP1 PUSH2 0x3E97 JUMP JUMPDEST PUSH1 0x13 SLOAD PUSH1 0x40 MLOAD PUSH1 0xE0 DUP5 SWAP1 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x869 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x87B JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH2 0x8A8 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x7E95 PUSH1 0x25 SWAP2 CODECOPY PUSH1 0xE DUP1 SLOAD PUSH2 0x26A SWAP1 PUSH2 0x3ED4 JUMP JUMPDEST PUSH0 DUP7 SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x2F2FF15D DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA20E7D47 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8F7 JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x91B SWAP2 SWAP1 PUSH2 0x3E97 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x960 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x972 JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH0 MLOAD PUSH1 0x20 PUSH2 0x7E43 PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x76EADD36 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x9BB JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x9CD JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xA22 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x9F3 SWAP3 SWAP2 SWAP1 PUSH2 0x4091 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x319AF333 PUSH1 0xE0 SHL OR SWAP1 MSTORE PUSH2 0xB60 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xA22 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xA3C SWAP3 SWAP2 SWAP1 PUSH2 0x40BA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x2D839CB3 PUSH1 0xE2 SHL OR SWAP1 MSTORE PUSH2 0xB60 JUMP JUMPDEST PUSH2 0xA22 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xA81 SWAP3 SWAP2 SWAP1 PUSH2 0x40DB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x4B5C4277 PUSH1 0xE0 SHL OR SWAP1 MSTORE PUSH2 0xB60 JUMP JUMPDEST PUSH0 PUSH2 0xAB9 PUSH2 0x3DC8 JUMP JUMPDEST PUSH2 0xAC4 DUP5 DUP5 DUP4 PUSH2 0xB69 JUMP JUMPDEST SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xB15 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xAE6 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x40FF JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x95ED0195 PUSH1 0xE0 SHL OR SWAP1 MSTORE PUSH2 0xB60 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0xB5D DUP2 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xB2E SWAP2 SWAP1 PUSH2 0x413C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x104C13EB PUSH1 0xE2 SHL OR SWAP1 MSTORE PUSH2 0xB60 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0xB5D DUP2 PUSH2 0xBE3 JUMP JUMPDEST PUSH0 PUSH0 PUSH2 0xB75 DUP6 DUP5 PUSH2 0xC02 JUMP JUMPDEST SWAP1 POP PUSH2 0xBD8 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1D DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4552433139363750726F78792E736F6C3A4552433139363750726F7879000000 DUP2 MSTORE POP DUP3 DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xBC3 SWAP3 SWAP2 SWAP1 PUSH2 0x414E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP6 PUSH2 0xC0D JUMP JUMPDEST SWAP2 POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH11 0x636F6E736F6C652E6C6F67 SWAP1 POP PUSH0 PUSH0 DUP4 MLOAD PUSH1 0x20 DUP6 ADD DUP5 GAS STATICCALL POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0xBDC DUP4 DUP4 PUSH2 0xC3C JUMP JUMPDEST PUSH2 0x120 DUP2 ADD MLOAD MLOAD PUSH0 SWAP1 ISZERO PUSH2 0xC32 JUMPI PUSH2 0xC2B DUP5 DUP5 DUP5 PUSH2 0x120 ADD MLOAD PUSH2 0xC56 JUMP JUMPDEST SWAP1 POP PUSH2 0xBDC JUMP JUMPDEST PUSH2 0xC2B DUP5 DUP5 PUSH2 0xDB2 JUMP JUMPDEST PUSH0 PUSH2 0xC47 DUP4 DUP4 PUSH2 0xE77 JUMP JUMPDEST PUSH2 0xBDC DUP4 DUP4 PUSH1 0x40 ADD MLOAD DUP5 PUSH2 0xC0D JUMP JUMPDEST PUSH0 PUSH0 PUSH2 0xC60 PUSH2 0xE82 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0xC6D DUP7 DUP4 PUSH2 0xF17 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0xC83 DUP3 PUSH1 0x60 ADD MLOAD DUP4 PUSH1 0x20 ADD MLOAD DUP6 PUSH2 0x131C JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0xC92 DUP4 DUP4 DUP10 DUP10 PUSH2 0x14A1 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0xC9E DUP3 PUSH2 0x2256 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD DUP2 MLOAD SWAP2 SWAP3 POP SWAP1 PUSH1 0x3 SIGNEXTEND ISZERO PUSH2 0xCF7 JUMPI DUP10 DUP3 PUSH1 0x40 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xCC8 SWAP3 SWAP2 SWAP1 PUSH2 0x4190 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH2 0xCEE SWAP2 PUSH1 0x4 ADD PUSH2 0x413C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH2 0xD31 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x15 DUP2 MSTORE PUSH1 0x20 ADD PUSH21 0x2232B83637BCB2B2103A379030B2323932B9B99D1 PUSH1 0x5D SHL DUP2 MSTORE POP DUP4 PUSH1 0x1 PUSH2 0x23DE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xC6CE059D PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH0 MLOAD PUSH1 0x20 PUSH2 0x7E43 PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SWAP1 PUSH4 0xC6CE059D SWAP1 PUSH2 0xD64 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x413C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD7F JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xDA3 SWAP2 SWAP1 PUSH2 0x3EAE JUMP JUMPDEST SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x8D1CC925 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 SWAP1 DUP2 SWAP1 PUSH0 MLOAD PUSH1 0x20 PUSH2 0x7E43 PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SWAP1 PUSH4 0x8D1CC925 SWAP1 PUSH2 0xDE6 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x413C JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE00 JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xE27 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x429F JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0xE54 DUP3 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xE40 SWAP3 SWAP2 SWAP1 PUSH2 0x42D0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH2 0x25C6 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xAC4 JUMPI DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xCC8 SWAP3 SWAP2 SWAP1 PUSH2 0x42E4 JUMP JUMPDEST PUSH2 0xA22 DUP3 DUP3 PUSH0 PUSH2 0x25D7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x3 DUP2 MSTORE PUSH3 0x1BDD5D PUSH1 0xEA SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 MLOAD PUSH4 0x34515CDB PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x60 SWAP2 PUSH0 MLOAD PUSH1 0x20 PUSH2 0x7E43 PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SWAP2 DUP3 SWAP1 PUSH4 0xD145736C SWAP1 PUSH2 0xECF SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x4358 JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xEE9 JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xF10 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x429F JUMP JUMPDEST SWAP3 POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0xF49 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH0 PUSH0 MLOAD PUSH1 0x20 PUSH2 0x7E43 PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SWAP1 POP PUSH2 0xF8C PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH2 0xF95 DUP6 PUSH2 0x2774 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH0 PUSH2 0xFA4 DUP7 PUSH2 0x2A8E JUMP JUMPDEST SWAP1 POP PUSH0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD930A0E6 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xFE2 JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1009 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x429F JUMP JUMPDEST DUP7 DUP4 DUP6 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1023 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x438C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH4 0x60F9BB11 PUSH1 0xE0 SHL DUP3 MSTORE SWAP2 POP PUSH0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 PUSH4 0x60F9BB11 SWAP1 PUSH2 0x1061 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x413C JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x107B JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x10A2 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x429F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x6DA11AFB PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 PUSH4 0xDB4235F6 SWAP1 PUSH2 0x10D1 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x43F0 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x10EC JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1110 SWAP2 SWAP1 PUSH2 0x4428 JUMP JUMPDEST PUSH2 0x1125 JUMPI DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xCC8 SWAP2 SWAP1 PUSH2 0x4447 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x9389F59 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 PUSH4 0x49C4FAC8 SWAP1 PUSH2 0x1151 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x44B0 JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x116B JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1192 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x429F JUMP JUMPDEST DUP5 MSTORE PUSH1 0x40 MLOAD PUSH4 0x6DA11AFB PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 PUSH4 0xDB4235F6 SWAP1 PUSH2 0x11C0 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x44F5 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x11DB JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x11FF SWAP2 SWAP1 PUSH2 0x4428 JUMP JUMPDEST ISZERO PUSH2 0x1277 JUMPI PUSH1 0x40 MLOAD PUSH4 0x9389F59 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 PUSH4 0x49C4FAC8 SWAP1 PUSH2 0x1230 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x44F5 JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x124A JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1271 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x429F JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MSTORE JUMPDEST DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x49C4FAC8 DUP3 DUP7 PUSH0 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x129B SWAP2 SWAP1 PUSH2 0x4535 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12C7 SWAP3 SWAP2 SWAP1 PUSH2 0x40DB JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x12E1 JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1308 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x429F JUMP JUMPDEST PUSH1 0x60 DUP6 ADD MSTORE POP PUSH1 0x80 DUP4 ADD MSTORE POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x4 DUP1 DUP3 MSTORE PUSH1 0xA0 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH0 SWAP2 SWAP1 DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x1337 JUMPI SWAP1 POP POP SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH4 0x6772657 PUSH1 0xE4 SHL DUP2 MSTORE POP DUP2 PUSH0 DUP2 MLOAD DUP2 LT PUSH2 0x137D JUMPI PUSH2 0x137D PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0xB5C9B PUSH1 0xEA SHL DUP2 MSTORE POP DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x13B7 JUMPI PUSH2 0x13B7 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x13D3 SWAP2 SWAP1 PUSH2 0x4579 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 PUSH1 0x2 DUP2 MLOAD DUP2 LT PUSH2 0x13F5 JUMPI PUSH2 0x13F5 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1411 SWAP2 SWAP1 PUSH2 0x459F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 PUSH1 0x3 DUP2 MLOAD DUP2 LT PUSH2 0x1433 JUMPI PUSH2 0x1433 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH0 PUSH2 0x1448 DUP3 PUSH2 0x2256 JUMP JUMPDEST SWAP1 POP PUSH0 DUP2 PUSH1 0x20 ADD MLOAD SWAP1 POP PUSH2 0x1482 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH5 0x173539B7B7 PUSH1 0xD9 SHL DUP2 MSTORE POP DUP3 PUSH2 0x2C63 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1497 JUMPI DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xCC8 SWAP2 SWAP1 PUSH2 0x45C5 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0xA0 DUP2 ADD MLOAD MLOAD PUSH1 0x60 SWAP1 PUSH0 MLOAD PUSH1 0x20 PUSH2 0x7E43 PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SWAP1 ISZERO PUSH2 0x15F0 JUMPI DUP3 PUSH1 0x20 ADD MLOAD ISZERO PUSH2 0x155C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x58 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54686520606C6963656E73655479706560206F7074696F6E2063616E6E6F7420 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x62652075736564207768656E207468652060736B6970566572696679536F7572 PUSH1 0x64 DUP3 ADD MSTORE PUSH32 0x6365436F646560206F7074696F6E206973206074727565600000000000000000 PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 ADD PUSH2 0xCEE JUMP JUMPDEST DUP3 PUSH1 0xC0 ADD MLOAD ISZERO PUSH2 0x15F0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x53 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54686520606C6963656E73655479706560206F7074696F6E2063616E6E6F7420 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x62652075736564207768656E207468652060736B69704C6963656E7365547970 PUSH1 0x64 DUP3 ADD MSTORE PUSH19 0x32B01037B83A34B7B71034B990303A393AB2B PUSH1 0x6D SHL PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 ADD PUSH2 0xCEE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xFF DUP1 DUP3 MSTORE PUSH2 0x2000 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH0 SWAP2 DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x1608 JUMPI POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x3 DUP2 MSTORE PUSH3 0xDCE0F PUSH1 0xEB SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 SWAP2 POP PUSH0 SWAP1 DUP3 DUP3 PUSH2 0x1646 DUP2 PUSH2 0x4644 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x165B JUMPI PUSH2 0x165B PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xE DUP2 MSTORE PUSH1 0x20 ADD PUSH14 0x302E302E312D616C7068612E313 PUSH1 0x94 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x169D SWAP2 SWAP1 PUSH2 0x4662 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP3 DUP3 DUP1 PUSH2 0x16B8 SWAP1 PUSH2 0x4644 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x16CD JUMPI PUSH2 0x16CD PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x6 DUP2 MSTORE PUSH1 0x20 ADD PUSH6 0x6465706C6F79 PUSH1 0xD0 SHL DUP2 MSTORE POP DUP3 DUP3 DUP1 PUSH2 0x1703 SWAP1 PUSH2 0x4644 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1718 JUMPI PUSH2 0x1718 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xE DUP2 MSTORE PUSH1 0x20 ADD PUSH14 0x2D2D636F6E74726163744E616D65 PUSH1 0x90 SHL DUP2 MSTORE POP DUP3 DUP3 DUP1 PUSH2 0x1756 SWAP1 PUSH2 0x4644 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x176B JUMPI PUSH2 0x176B PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP8 PUSH1 0x20 ADD MLOAD DUP3 DUP3 DUP1 PUSH2 0x1787 SWAP1 PUSH2 0x4644 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x179C JUMPI PUSH2 0x179C PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xE DUP2 MSTORE PUSH1 0x20 ADD PUSH14 0x5A5AC6DEDCE8E4C2C6E8A0C2E8D PUSH1 0x93 SHL DUP2 MSTORE POP DUP3 DUP3 DUP1 PUSH2 0x17DA SWAP1 PUSH2 0x4644 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x17EF JUMPI PUSH2 0x17EF PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE DUP8 MLOAD DUP3 DUP3 PUSH2 0x1807 DUP2 PUSH2 0x4644 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x181C JUMPI PUSH2 0x181C PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x9 DUP2 MSTORE PUSH1 0x20 ADD PUSH9 0xB4B58DA185A5B9259 PUSH1 0xBA SHL DUP2 MSTORE POP DUP3 DUP3 DUP1 PUSH2 0x1855 SWAP1 PUSH2 0x4644 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x186A JUMPI PUSH2 0x186A PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH2 0x187E CHAINID PUSH2 0x2D1D JUMP JUMPDEST DUP3 DUP3 PUSH2 0x1889 DUP2 PUSH2 0x4644 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x189E JUMPI PUSH2 0x189E PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xF DUP2 MSTORE PUSH1 0x20 ADD PUSH15 0x2D2D6275696C64496E666F46696C65 PUSH1 0x88 SHL DUP2 MSTORE POP DUP3 DUP3 DUP1 PUSH2 0x18DD SWAP1 PUSH2 0x4644 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x18F2 JUMPI PUSH2 0x18F2 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP7 DUP3 DUP3 DUP1 PUSH2 0x190A SWAP1 PUSH2 0x4644 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x191F JUMPI PUSH2 0x191F PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE DUP6 MLOAD ISZERO PUSH2 0x1A21 JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x15 DUP2 MSTORE PUSH21 0x2D2D636F6E7374727563746F7242797465636F6465 PUSH1 0x58 SHL PUSH1 0x20 DUP3 ADD MSTORE DUP3 DUP3 PUSH2 0x1968 DUP2 PUSH2 0x4644 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x197D JUMPI PUSH2 0x197D PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x40 MLOAD PUSH4 0x71AAD10D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x71AAD10D SWAP1 PUSH2 0x19B4 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x413C JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x19CE JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x19F5 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x429F JUMP JUMPDEST DUP3 DUP3 PUSH2 0x1A00 DUP2 PUSH2 0x4644 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1A15 JUMPI PUSH2 0x1A15 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP JUMPDEST DUP5 PUSH1 0x20 ADD MLOAD ISZERO PUSH2 0x1ACE JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x12 DUP2 MSTORE PUSH18 0x2D2D766572696679536F75726365436F6465 PUSH1 0x70 SHL PUSH1 0x20 DUP3 ADD MSTORE DUP3 DUP3 PUSH2 0x1A5F DUP2 PUSH2 0x4644 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1A74 JUMPI PUSH2 0x1A74 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH5 0x66616C7365 PUSH1 0xD8 SHL DUP2 MSTORE POP DUP3 DUP3 DUP1 PUSH2 0x1AA9 SWAP1 PUSH2 0x4644 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1ABE JUMPI PUSH2 0x1ABE PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH2 0x1C17 JUMP JUMPDEST PUSH1 0xA0 DUP6 ADD MLOAD MLOAD ISZERO PUSH2 0x1B58 JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xD DUP2 MSTORE PUSH13 0x2D2D6C6963656E736554797065 PUSH1 0x98 SHL PUSH1 0x20 DUP3 ADD MSTORE DUP3 DUP3 PUSH2 0x1B08 DUP2 PUSH2 0x4644 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1B1D JUMPI PUSH2 0x1B1D PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP5 PUSH1 0xA0 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1B3D SWAP2 SWAP1 PUSH2 0x4579 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP3 DUP3 DUP1 PUSH2 0x1AA9 SWAP1 PUSH2 0x4644 JUMP JUMPDEST DUP5 PUSH1 0xC0 ADD MLOAD ISZERO DUP1 ISZERO PUSH2 0x1B6E JUMPI POP PUSH1 0x40 DUP9 ADD MLOAD MLOAD ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x1C17 JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xD DUP2 MSTORE PUSH13 0x2D2D6C6963656E736554797065 PUSH1 0x98 SHL PUSH1 0x20 DUP3 ADD MSTORE DUP3 DUP3 PUSH2 0x1BA2 DUP2 PUSH2 0x4644 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1BB7 JUMPI PUSH2 0x1BB7 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH2 0x1BCB DUP9 PUSH2 0x2DAC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1BDB SWAP2 SWAP1 PUSH2 0x4579 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP3 DUP3 DUP1 PUSH2 0x1BF6 SWAP1 PUSH2 0x4644 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1C0B JUMPI PUSH2 0x1C0B PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP JUMPDEST PUSH1 0x40 DUP6 ADD MLOAD MLOAD ISZERO PUSH2 0x1CA1 JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xB DUP2 MSTORE PUSH11 0xB4B5C995B185E595C9259 PUSH1 0xAA SHL PUSH1 0x20 DUP3 ADD MSTORE DUP3 DUP3 PUSH2 0x1C4F DUP2 PUSH2 0x4644 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1C64 JUMPI PUSH2 0x1C64 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP5 PUSH1 0x40 ADD MLOAD DUP3 DUP3 DUP1 PUSH2 0x1C80 SWAP1 PUSH2 0x4644 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1C95 JUMPI PUSH2 0x1C95 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP JUMPDEST PUSH1 0x60 DUP6 ADD MLOAD ISZERO PUSH2 0x1D8E JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x6 DUP2 MSTORE PUSH6 0xB4B5CD85B1D PUSH1 0xD2 SHL PUSH1 0x20 DUP3 ADD MSTORE DUP3 DUP3 PUSH2 0x1CD3 DUP2 PUSH2 0x4644 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1CE8 JUMPI PUSH2 0x1CE8 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x60 DUP6 ADD MLOAD PUSH1 0x40 MLOAD PUSH4 0x1623433D PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xB11A19E8 SWAP1 PUSH1 0x24 ADD PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1D3B JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1D62 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x429F JUMP JUMPDEST DUP3 DUP3 PUSH2 0x1D6D DUP2 PUSH2 0x4644 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1D82 JUMPI PUSH2 0x1D82 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP JUMPDEST PUSH1 0xE0 DUP6 ADD MLOAD MLOAD ISZERO PUSH2 0x1E21 JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xA DUP2 MSTORE PUSH10 0xB4B59D85CD31A5B5A5D PUSH1 0xB2 SHL PUSH1 0x20 DUP3 ADD MSTORE DUP3 DUP3 PUSH2 0x1DC5 DUP2 PUSH2 0x4644 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1DDA JUMPI PUSH2 0x1DDA PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH2 0x1DF5 DUP6 PUSH1 0xE0 ADD MLOAD PUSH0 ADD MLOAD PUSH2 0x2D1D JUMP JUMPDEST DUP3 DUP3 PUSH2 0x1E00 DUP2 PUSH2 0x4644 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1E15 JUMPI PUSH2 0x1E15 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP JUMPDEST PUSH1 0xE0 DUP6 ADD MLOAD PUSH1 0x20 ADD MLOAD ISZERO PUSH2 0x1EB8 JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xA DUP2 MSTORE PUSH10 0x2D2D6761735072696365 PUSH1 0xB0 SHL PUSH1 0x20 DUP3 ADD MSTORE DUP3 DUP3 PUSH2 0x1E5B DUP2 PUSH2 0x4644 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1E70 JUMPI PUSH2 0x1E70 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH2 0x1E8C DUP6 PUSH1 0xE0 ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH2 0x2D1D JUMP JUMPDEST DUP3 DUP3 PUSH2 0x1E97 DUP2 PUSH2 0x4644 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1EAC JUMPI PUSH2 0x1EAC PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP JUMPDEST PUSH1 0xE0 DUP6 ADD MLOAD PUSH1 0x40 ADD MLOAD ISZERO PUSH2 0x1F53 JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xE DUP2 MSTORE PUSH14 0x2D2D6D6178466565506572476173 PUSH1 0x90 SHL PUSH1 0x20 DUP3 ADD MSTORE DUP3 DUP3 PUSH2 0x1EF6 DUP2 PUSH2 0x4644 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1F0B JUMPI PUSH2 0x1F0B PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH2 0x1F27 DUP6 PUSH1 0xE0 ADD MLOAD PUSH1 0x40 ADD MLOAD PUSH2 0x2D1D JUMP JUMPDEST DUP3 DUP3 PUSH2 0x1F32 DUP2 PUSH2 0x4644 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1F47 JUMPI PUSH2 0x1F47 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP JUMPDEST PUSH1 0xE0 DUP6 ADD MLOAD PUSH1 0x60 ADD MLOAD ISZERO PUSH2 0x1FF6 JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x16 DUP2 MSTORE PUSH22 0x2D2D6D61785072696F72697479466565506572476173 PUSH1 0x50 SHL PUSH1 0x20 DUP3 ADD MSTORE DUP3 DUP3 PUSH2 0x1F99 DUP2 PUSH2 0x4644 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1FAE JUMPI PUSH2 0x1FAE PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH2 0x1FCA DUP6 PUSH1 0xE0 ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH2 0x2D1D JUMP JUMPDEST DUP3 DUP3 PUSH2 0x1FD5 DUP2 PUSH2 0x4644 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1FEA JUMPI PUSH2 0x1FEA PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP JUMPDEST PUSH2 0x100 DUP6 ADD MLOAD MLOAD ISZERO PUSH2 0x210C JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xA DUP2 MSTORE PUSH10 0x2D2D6D65746164617461 PUSH1 0xB0 SHL PUSH1 0x20 DUP3 ADD MSTORE DUP3 DUP3 PUSH2 0x202E DUP2 PUSH2 0x4644 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x2043 JUMPI PUSH2 0x2043 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH2 0x100 DUP6 ADD MLOAD PUSH1 0x40 MLOAD PUSH4 0x7005681F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP2 PUSH4 0xE00AD03E SWAP2 PUSH2 0x207F SWAP2 SWAP1 PUSH1 0x4 ADD PUSH2 0x46A5 JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2099 JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x20C0 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x429F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x20D0 SWAP2 SWAP1 PUSH2 0x4579 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP3 DUP3 DUP1 PUSH2 0x20EB SWAP1 PUSH2 0x4644 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x2100 JUMPI PUSH2 0x2100 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x8 DUP2 MSTORE PUSH8 0x1696B7B934B3B4B7 PUSH1 0xC1 SHL PUSH1 0x20 DUP3 ADD MSTORE DUP3 DUP3 PUSH2 0x2136 DUP2 PUSH2 0x4644 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x214B JUMPI PUSH2 0x214B PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x7 DUP2 MSTORE PUSH1 0x20 ADD PUSH7 0x466F756E647279 PUSH1 0xC8 SHL DUP2 MSTORE POP DUP3 DUP3 DUP1 PUSH2 0x2182 SWAP1 PUSH2 0x4644 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x2197 JUMPI PUSH2 0x2197 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH0 DUP2 PUSH1 0xFF AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x21BE JUMPI PUSH2 0x21BE PUSH2 0x3FC8 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x21F1 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x21DC JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH0 JUMPDEST DUP3 PUSH1 0xFF AND DUP2 PUSH1 0xFF AND LT ISZERO PUSH2 0x2249 JUMPI DUP4 DUP2 PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x2219 JUMPI PUSH2 0x2219 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x2236 JUMPI PUSH2 0x2236 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x21F6 JUMP JUMPDEST POP SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x227C PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH0 PUSH1 0x3 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x4 DUP1 DUP3 MSTORE PUSH4 0xC4C2E6D PUSH1 0xE3 SHL PUSH1 0x20 DUP4 ADD MSTORE SWAP2 MLOAD PUSH4 0x34515CDB PUSH1 0xE2 SHL DUP2 MSTORE PUSH0 MLOAD PUSH1 0x20 PUSH2 0x7E43 PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SWAP3 PUSH0 SWAP2 DUP5 SWAP2 PUSH4 0xD145736C SWAP2 PUSH2 0x22C8 SWAP2 DUP7 SWAP2 ADD PUSH2 0x46F7 JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x22E2 JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x2309 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x429F JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0x2316 DUP7 DUP4 PUSH2 0x33B1 JUMP JUMPDEST SWAP1 POP PUSH0 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF45C1CE7 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2345 SWAP2 SWAP1 PUSH2 0x4736 JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2360 JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x2387 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4799 JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP PUSH1 0x3 SIGNEXTEND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x23A0 JUMPI POP PUSH1 0x20 DUP2 ADD MLOAD MLOAD ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x23AF JUMPI POP PUSH1 0x40 DUP2 ADD MLOAD MLOAD ISZERO JUMPDEST ISZERO PUSH2 0x1497 JUMPI DUP2 PUSH0 DUP2 MLOAD DUP2 LT PUSH2 0x23C6 JUMPI PUSH2 0x23C6 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xCC8 SWAP2 SWAP1 PUSH2 0x4845 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xFEC62BB PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x60 SWAP1 PUSH0 MLOAD PUSH1 0x20 PUSH2 0x7E43 PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SWAP1 DUP2 SWAP1 PUSH4 0x3FB18AEC SWAP1 PUSH2 0x2415 SWAP1 DUP8 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x40DB JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2431 JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2455 SWAP2 SWAP1 PUSH2 0x4428 JUMP JUMPDEST ISZERO PUSH2 0x2598 JUMPI PUSH1 0x40 MLOAD PUSH4 0x8BB75533 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x8BB75533 SWAP1 PUSH2 0x248A SWAP1 DUP9 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x40DB JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x24A4 JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x24CB SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4A06 JUMP JUMPDEST SWAP1 POP PUSH1 0x2 DUP2 MLOAD GT ISZERO PUSH2 0x24EA JUMPI DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xCC8 SWAP3 SWAP2 SWAP1 PUSH2 0x4ACF JUMP JUMPDEST PUSH0 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x24FE JUMPI PUSH2 0x24FE PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x8BB75533 DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2534 SWAP2 SWAP1 PUSH2 0x4B2F JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x254E JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x2575 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4A06 JUMP JUMPDEST PUSH0 DUP2 MLOAD DUP2 LT PUSH2 0x2586 JUMPI PUSH2 0x2586 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP4 POP POP POP POP PUSH2 0xBDC JUMP JUMPDEST DUP3 ISZERO PUSH2 0x25B1 JUMPI DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xCC8 SWAP3 SWAP2 SWAP1 PUSH2 0x4B63 JUMP JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH0 DUP2 MSTORE PUSH2 0xBDC JUMP JUMPDEST PUSH0 PUSH0 DUP3 MLOAD PUSH1 0x20 DUP5 ADD PUSH0 CREATE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP2 PUSH2 0x100 ADD MLOAD ISZERO PUSH2 0x25E7 JUMPI POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x25F3 DUP5 DUP5 DUP5 PUSH2 0x34E8 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0x25FF DUP3 PUSH2 0x2256 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD DUP2 MLOAD SWAP2 SWAP3 POP SWAP1 PUSH0 MLOAD PUSH1 0x20 PUSH2 0x7E43 PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SWAP1 PUSH1 0x3 SIGNEXTEND PUSH0 SUB PUSH2 0x26C5 JUMPI PUSH1 0x40 MLOAD PUSH4 0xFEC62BB PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0x3FB18AEC SWAP1 PUSH2 0x264E SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x4B9E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x266A JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x268E SWAP2 SWAP1 PUSH2 0x4428 JUMP JUMPDEST ISZERO PUSH2 0x26B4 JUMPI PUSH1 0x40 DUP4 ADD MLOAD MLOAD ISZERO PUSH2 0x26AB JUMPI PUSH2 0x26AB DUP4 PUSH1 0x40 ADD MLOAD PUSH2 0xB1A JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xCC8 SWAP2 SWAP1 PUSH2 0x4BD9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xFEC62BB PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0x3FB18AEC SWAP1 PUSH2 0x26F1 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x4C1C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x270D JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2731 SWAP2 SWAP1 PUSH2 0x4428 JUMP JUMPDEST ISZERO PUSH2 0x275F JUMPI PUSH1 0x40 DUP4 ADD MLOAD MLOAD ISZERO PUSH2 0x274E JUMPI PUSH2 0x274E DUP4 PUSH1 0x40 ADD MLOAD PUSH2 0xB1A JUMP JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xCC8 SWAP2 SWAP1 PUSH2 0x4C56 JUMP JUMPDEST DUP3 PUSH1 0x40 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xCC8 SWAP2 SWAP1 PUSH2 0x4BD9 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH4 0xB9CDBDB PUSH1 0xE2 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 SWAP1 PUSH0 MLOAD PUSH1 0x20 PUSH2 0x7E43 PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SWAP1 PUSH2 0x27AC SWAP1 DUP5 SWAP1 PUSH2 0x2C63 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x27DD JUMPI POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH4 0xB9CDBDB PUSH1 0xE2 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x27D9 SWAP1 DUP5 SWAP1 PUSH2 0x3BEB JUMP JUMPDEST PUSH1 0x1 EQ JUMPDEST ISZERO PUSH2 0x284F JUMPI PUSH1 0x40 MLOAD PUSH4 0x7005681F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0xE00AD03E SWAP1 PUSH2 0x280E SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x4C92 JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2828 JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xBDC SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x429F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x1 DUP2 MSTORE PUSH1 0x1D PUSH1 0xF9 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x2872 SWAP1 DUP5 SWAP1 PUSH2 0x3BEB JUMP JUMPDEST PUSH1 0x1 SUB PUSH2 0x2908 JUMPI PUSH1 0x40 MLOAD PUSH4 0x8BB75533 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0x8BB75533 SWAP1 PUSH2 0x28A5 SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x4CDB JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x28BF JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x28E6 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4A06 JUMP JUMPDEST PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x28F8 JUMPI PUSH2 0x28F8 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x5 DUP2 MSTORE PUSH5 0x173539B7B7 PUSH1 0xD9 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x292F SWAP1 DUP5 SWAP1 PUSH2 0x2C63 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2961 JUMPI POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x5 DUP2 MSTORE PUSH5 0x173539B7B7 PUSH1 0xD9 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x295D SWAP1 DUP5 SWAP1 PUSH2 0x3BEB JUMP JUMPDEST PUSH1 0x1 EQ JUMPDEST ISZERO PUSH2 0x2A77 JUMPI PUSH1 0x40 MLOAD PUSH4 0x8BB75533 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x8BB75533 SWAP1 PUSH2 0x2994 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x4D10 JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x29AE JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x29D5 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4A06 JUMP JUMPDEST SWAP1 POP PUSH0 DUP2 PUSH1 0x1 DUP4 MLOAD PUSH2 0x29E7 SWAP2 SWAP1 PUSH2 0x4D45 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x29F7 JUMPI PUSH2 0x29F7 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xE00AD03E DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2A2D SWAP2 SWAP1 PUSH2 0x4D58 JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2A47 JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x2A6E SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x429F JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xCC8 SWAP2 SWAP1 PUSH2 0x4DA2 JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH4 0xB9CDBDB PUSH1 0xE2 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 SWAP1 PUSH0 MLOAD PUSH1 0x20 PUSH2 0x7E43 PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SWAP1 PUSH2 0x2AC6 SWAP1 DUP5 SWAP1 PUSH2 0x2C63 JUMP JUMPDEST ISZERO PUSH2 0x2AD2 JUMPI POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x1 DUP2 MSTORE PUSH1 0x1D PUSH1 0xF9 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x2AF5 SWAP1 DUP5 SWAP1 PUSH2 0x3BEB JUMP JUMPDEST PUSH1 0x1 SUB PUSH2 0x2B7A JUMPI PUSH1 0x40 MLOAD PUSH4 0x8BB75533 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0x8BB75533 SWAP1 PUSH2 0x2B28 SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x4CDB JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2B42 JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x2B69 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4A06 JUMP JUMPDEST PUSH0 DUP2 MLOAD DUP2 LT PUSH2 0x28F8 JUMPI PUSH2 0x28F8 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x5 DUP2 MSTORE PUSH5 0x173539B7B7 PUSH1 0xD9 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x2BA1 SWAP1 DUP5 SWAP1 PUSH2 0x2C63 JUMP JUMPDEST ISZERO PUSH2 0x2A77 JUMPI PUSH1 0x40 MLOAD PUSH4 0x8BB75533 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x8BB75533 SWAP1 PUSH2 0x2BD4 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x4D10 JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2BEE JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x2C15 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4A06 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP2 MLOAD GT ISZERO PUSH2 0x2C51 JUMPI DUP1 PUSH1 0x2 DUP3 MLOAD PUSH2 0x2C30 SWAP2 SWAP1 PUSH2 0x4D45 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x2C40 JUMPI PUSH2 0x2C40 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST POP DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xCC8 SWAP2 SWAP1 PUSH2 0x4DA2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x8BB75533 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 SWAP1 PUSH0 MLOAD PUSH1 0x20 PUSH2 0x7E43 PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SWAP1 DUP3 SWAP1 DUP3 SWAP1 PUSH4 0x8BB75533 SWAP1 PUSH2 0x2C9B SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x40DB JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2CB5 JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x2CDC SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4A06 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP2 MLOAD GT DUP1 ISZERO PUSH2 0x2A6E JUMPI POP DUP1 PUSH1 0x1 DUP3 MLOAD PUSH2 0x2CF9 SWAP2 SWAP1 PUSH2 0x4D45 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x2D09 JUMPI PUSH2 0x2D09 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD PUSH0 EQ SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH0 PUSH2 0x2D29 DUP4 PUSH2 0x3C74 JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x2D47 JUMPI PUSH2 0x2D47 PUSH2 0x3FC8 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2D71 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH0 NOT ADD PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0x2D7B JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 ADD MLOAD DUP2 MLOAD DUP1 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0xA DUP3 MSTORE PUSH10 0x1553931250D15394D151 PUSH1 0xB2 SHL PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x60 SWAP2 PUSH2 0x2DDF SWAP1 DUP3 SWAP1 PUSH2 0x3D4B JUMP JUMPDEST ISZERO PUSH2 0x2E06 JUMPI POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH4 0x4E6F6E65 PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x9 DUP2 MSTORE PUSH9 0x556E6C6963656E7365 PUSH1 0xB8 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x2E31 SWAP1 DUP3 SWAP1 PUSH2 0x3D4B JUMP JUMPDEST ISZERO PUSH2 0x2E5D JUMPI POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x9 DUP2 MSTORE PUSH9 0x556E6C6963656E7365 PUSH1 0xB8 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x3 DUP2 MSTORE PUSH3 0x135255 PUSH1 0xEA SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x2E82 SWAP1 DUP3 SWAP1 PUSH2 0x3D4B JUMP JUMPDEST ISZERO PUSH2 0x2EA8 JUMPI POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x3 DUP2 MSTORE PUSH3 0x135255 PUSH1 0xEA SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xC DUP2 MSTORE PUSH12 0x47504C2D322E302D6F6E6C79 PUSH1 0xA0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x2ED6 SWAP1 DUP3 SWAP1 PUSH2 0x3D4B JUMP JUMPDEST DUP1 PUSH2 0x2F0E JUMPI POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x10 DUP2 MSTORE PUSH16 0x23A8261699171816B7B916B630BA32B9 PUSH1 0x81 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x2F0E SWAP1 DUP3 SWAP1 PUSH2 0x3D4B JUMP JUMPDEST ISZERO PUSH2 0x2F3A JUMPI POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x9 DUP2 MSTORE PUSH9 0x23A72A9023A8263B19 PUSH1 0xB9 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xC DUP2 MSTORE PUSH12 0x47504C2D332E302D6F6E6C79 PUSH1 0xA0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x2F68 SWAP1 DUP3 SWAP1 PUSH2 0x3D4B JUMP JUMPDEST DUP1 PUSH2 0x2FA0 JUMPI POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x10 DUP2 MSTORE PUSH16 0x23A8261699971816B7B916B630BA32B9 PUSH1 0x81 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x2FA0 SWAP1 DUP3 SWAP1 PUSH2 0x3D4B JUMP JUMPDEST ISZERO PUSH2 0x2FCC JUMPI POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x9 DUP2 MSTORE PUSH9 0x474E552047504C7633 PUSH1 0xB8 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xD DUP2 MSTORE PUSH13 0x4C47504C2D322E312D6F6E6C79 PUSH1 0x98 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x2FFB SWAP1 DUP3 SWAP1 PUSH2 0x3D4B JUMP JUMPDEST DUP1 PUSH2 0x3034 JUMPI POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x11 DUP2 MSTORE PUSH17 0x2623A8261699171896B7B916B630BA32B9 PUSH1 0x79 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x3034 SWAP1 DUP3 SWAP1 PUSH2 0x3D4B JUMP JUMPDEST ISZERO PUSH2 0x3063 JUMPI POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xC DUP2 MSTORE PUSH12 0x474E55204C47504C76322E31 PUSH1 0xA0 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xD DUP2 MSTORE PUSH13 0x4C47504C2D332E302D6F6E6C79 PUSH1 0x98 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x3092 SWAP1 DUP3 SWAP1 PUSH2 0x3D4B JUMP JUMPDEST DUP1 PUSH2 0x30CB JUMPI POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x11 DUP2 MSTORE PUSH17 0x2623A8261699971816B7B916B630BA32B9 PUSH1 0x79 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x30CB SWAP1 DUP3 SWAP1 PUSH2 0x3D4B JUMP JUMPDEST ISZERO PUSH2 0x30F8 JUMPI POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xA DUP2 MSTORE PUSH10 0x474E55204C47504C7633 PUSH1 0xB0 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xC DUP2 MSTORE PUSH12 0x4253442D322D436C61757365 PUSH1 0xA0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x3126 SWAP1 DUP3 SWAP1 PUSH2 0x3D4B JUMP JUMPDEST ISZERO PUSH2 0x3155 JUMPI POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xC DUP2 MSTORE PUSH12 0x4253442D322D436C61757365 PUSH1 0xA0 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xC DUP2 MSTORE PUSH12 0x4253442D332D436C61757365 PUSH1 0xA0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x3183 SWAP1 DUP3 SWAP1 PUSH2 0x3D4B JUMP JUMPDEST ISZERO PUSH2 0x31B2 JUMPI POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xC DUP2 MSTORE PUSH12 0x4253442D332D436C61757365 PUSH1 0xA0 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x7 DUP2 MSTORE PUSH7 0x4D504C2D322E3 PUSH1 0xCC SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x31DB SWAP1 DUP3 SWAP1 PUSH2 0x3D4B JUMP JUMPDEST ISZERO PUSH2 0x3205 JUMPI POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x7 DUP2 MSTORE PUSH7 0x4D504C2D322E3 PUSH1 0xCC SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x7 DUP2 MSTORE PUSH7 0x4F534C2D332E3 PUSH1 0xCC SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x322E SWAP1 DUP3 SWAP1 PUSH2 0x3D4B JUMP JUMPDEST ISZERO PUSH2 0x3258 JUMPI POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x7 DUP2 MSTORE PUSH7 0x4F534C2D332E3 PUSH1 0xCC SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xA DUP2 MSTORE PUSH10 0x4170616368652D322E3 PUSH1 0xB4 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x3284 SWAP1 DUP3 SWAP1 PUSH2 0x3D4B JUMP JUMPDEST ISZERO PUSH2 0x32B1 JUMPI POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xA DUP2 MSTORE PUSH10 0x4170616368652D322E3 PUSH1 0xB4 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xD DUP2 MSTORE PUSH13 0x4147504C2D332E302D6F6E6C79 PUSH1 0x98 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x32E0 SWAP1 DUP3 SWAP1 PUSH2 0x3D4B JUMP JUMPDEST DUP1 PUSH2 0x3319 JUMPI POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x11 DUP2 MSTORE PUSH17 0x20A3A8261699971816B7B916B630BA32B9 PUSH1 0x79 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x3319 SWAP1 DUP3 SWAP1 PUSH2 0x3D4B JUMP JUMPDEST ISZERO PUSH2 0x3346 JUMPI POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xA DUP2 MSTORE PUSH10 0x474E55204147504C7633 PUSH1 0xB0 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x8 DUP2 MSTORE PUSH8 0x4255534C2D312E31 PUSH1 0xC0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x3370 SWAP1 DUP3 SWAP1 PUSH2 0x3D4B JUMP JUMPDEST ISZERO PUSH2 0x339A JUMPI POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x7 DUP2 MSTORE PUSH7 0x42534C20312E31 PUSH1 0xC8 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 DUP5 ADD MLOAD DUP5 MLOAD SWAP2 MLOAD PUSH2 0xCC8 SWAP3 SWAP1 PUSH1 0x20 ADD PUSH2 0x4E4E JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x343B JUMPI DUP2 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x33D2 JUMPI PUSH2 0x33D2 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x33EB SWAP3 SWAP2 SWAP1 PUSH2 0x42D0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP2 POP PUSH1 0x1 DUP6 MLOAD PUSH2 0x340A SWAP2 SWAP1 PUSH2 0x4D45 JUMP JUMPDEST DUP2 EQ PUSH2 0x3433 JUMPI DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3421 SWAP2 SWAP1 PUSH2 0x4F83 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP2 POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x33B6 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x3 DUP1 DUP3 MSTORE PUSH1 0x80 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH0 SWAP2 DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x3453 JUMPI SWAP1 POP POP SWAP1 POP DUP4 DUP2 PUSH0 DUP2 MLOAD DUP2 LT PUSH2 0x347D JUMPI PUSH2 0x347D PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2D63 PUSH1 0xF0 SHL DUP2 MSTORE POP DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x34B6 JUMPI PUSH2 0x34B6 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP2 DUP2 PUSH1 0x2 DUP2 MLOAD DUP2 LT PUSH2 0x34D5 JUMPI PUSH2 0x34D5 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH0 PUSH2 0x34F3 PUSH2 0xE82 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH3 0x10000 DUP1 DUP3 MSTORE PUSH3 0x200020 DUP3 ADD SWAP1 SWAP3 MSTORE SWAP2 SWAP3 POP PUSH0 SWAP2 SWAP1 DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x3512 JUMPI POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x3 DUP2 MSTORE PUSH3 0xDCE0F PUSH1 0xEB SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 SWAP2 POP PUSH0 SWAP1 DUP3 DUP3 PUSH2 0x3550 DUP2 PUSH2 0x4F9F JUMP JUMPDEST SWAP4 POP PUSH2 0xFFFF AND DUP2 MLOAD DUP2 LT PUSH2 0x3566 JUMPI PUSH2 0x3566 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x7 DUP2 MSTORE PUSH1 0x20 ADD PUSH7 0x5E312E33372E3 PUSH1 0xCC SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x35A1 SWAP2 SWAP1 PUSH2 0x4FB6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP3 DUP3 DUP1 PUSH2 0x35BC SWAP1 PUSH2 0x4F9F JUMP JUMPDEST SWAP4 POP PUSH2 0xFFFF AND DUP2 MLOAD DUP2 LT PUSH2 0x35D2 JUMPI PUSH2 0x35D2 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x8 DUP2 MSTORE PUSH1 0x20 ADD PUSH8 0x76616C6964617465 PUSH1 0xC0 SHL DUP2 MSTORE POP DUP3 DUP3 DUP1 PUSH2 0x360A SWAP1 PUSH2 0x4F9F JUMP JUMPDEST SWAP4 POP PUSH2 0xFFFF AND DUP2 MLOAD DUP2 LT PUSH2 0x3620 JUMPI PUSH2 0x3620 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x363C SWAP2 SWAP1 PUSH2 0x459F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP3 DUP3 DUP1 PUSH2 0x3657 SWAP1 PUSH2 0x4F9F JUMP JUMPDEST SWAP4 POP PUSH2 0xFFFF AND DUP2 MLOAD DUP2 LT PUSH2 0x366D JUMPI PUSH2 0x366D PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xA DUP2 MSTORE PUSH1 0x20 ADD PUSH10 0xB4B58DBDB9D1C9858DD PUSH1 0xB2 SHL DUP2 MSTORE POP DUP3 DUP3 DUP1 PUSH2 0x36A7 SWAP1 PUSH2 0x4F9F JUMP JUMPDEST SWAP4 POP PUSH2 0xFFFF AND DUP2 MLOAD DUP2 LT PUSH2 0x36BD JUMPI PUSH2 0x36BD PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH2 0x36D2 DUP8 DUP5 PUSH2 0x3D6F JUMP JUMPDEST DUP3 DUP3 PUSH2 0x36DD DUP2 PUSH2 0x4F9F JUMP JUMPDEST SWAP4 POP PUSH2 0xFFFF AND DUP2 MLOAD DUP2 LT PUSH2 0x36F3 JUMPI PUSH2 0x36F3 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP7 MLOAD MLOAD SWAP1 DUP8 ADD MLOAD MLOAD SWAP1 ISZERO DUP1 ISZERO SWAP2 ISZERO ISZERO SWAP1 PUSH2 0x37D2 JUMPI PUSH0 DUP2 PUSH2 0x372D JUMPI DUP9 MLOAD PUSH2 0x3728 SWAP1 DUP8 PUSH2 0x3D6F JUMP JUMPDEST PUSH2 0x3730 JUMP JUMPDEST DUP9 MLOAD JUMPDEST SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xB DUP2 MSTORE PUSH1 0x20 ADD PUSH11 0x2D2D7265666572656E6365 PUSH1 0xA8 SHL DUP2 MSTORE POP DUP6 DUP6 DUP1 PUSH2 0x3762 SWAP1 PUSH2 0x4F9F JUMP JUMPDEST SWAP7 POP PUSH2 0xFFFF AND DUP2 MLOAD DUP2 LT PUSH2 0x3778 JUMPI PUSH2 0x3778 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP1 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3794 SWAP2 SWAP1 PUSH2 0x4579 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP6 DUP6 DUP1 PUSH2 0x37AF SWAP1 PUSH2 0x4F9F JUMP JUMPDEST SWAP7 POP PUSH2 0xFFFF AND DUP2 MLOAD DUP2 LT PUSH2 0x37C5 JUMPI PUSH2 0x37C5 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP POP JUMPDEST DUP1 ISZERO PUSH2 0x388A JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x18 DUP2 MSTORE PUSH32 0x2D2D7265666572656E63654275696C64496E666F446972730000000000000000 PUSH1 0x20 DUP3 ADD MSTORE DUP5 DUP5 PUSH2 0x3817 DUP2 PUSH2 0x4F9F JUMP JUMPDEST SWAP6 POP PUSH2 0xFFFF AND DUP2 MLOAD DUP2 LT PUSH2 0x382D JUMPI PUSH2 0x382D PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP8 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x384D SWAP2 SWAP1 PUSH2 0x4579 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP5 DUP5 DUP1 PUSH2 0x3868 SWAP1 PUSH2 0x4F9F JUMP JUMPDEST SWAP6 POP PUSH2 0xFFFF AND DUP2 MLOAD DUP2 LT PUSH2 0x387E JUMPI PUSH2 0x387E PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP JUMPDEST PUSH0 JUMPDEST DUP9 PUSH1 0x60 ADD MLOAD MLOAD DUP2 PUSH1 0xFF AND LT ISZERO PUSH2 0x3975 JUMPI PUSH0 DUP10 PUSH1 0x60 ADD MLOAD DUP3 PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x38B6 JUMPI PUSH2 0x38B6 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP1 MLOAD PUSH0 EQ PUSH2 0x3962 JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x9 DUP2 MSTORE PUSH9 0x2D2D6578636C756465 PUSH1 0xB8 SHL PUSH1 0x20 DUP3 ADD MSTORE DUP7 DUP7 PUSH2 0x38F3 DUP2 PUSH2 0x4F9F JUMP JUMPDEST SWAP8 POP PUSH2 0xFFFF AND DUP2 MLOAD DUP2 LT PUSH2 0x3909 JUMPI PUSH2 0x3909 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP1 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3925 SWAP2 SWAP1 PUSH2 0x4579 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP7 DUP7 DUP1 PUSH2 0x3940 SWAP1 PUSH2 0x4F9F JUMP JUMPDEST SWAP8 POP PUSH2 0xFFFF AND DUP2 MLOAD DUP2 LT PUSH2 0x3956 JUMPI PUSH2 0x3956 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP JUMPDEST POP DUP1 PUSH2 0x396D DUP2 PUSH2 0x4644 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x388C JUMP JUMPDEST POP DUP8 PUSH1 0xE0 ADD MLOAD ISZERO PUSH2 0x39E5 JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x18 DUP2 MSTORE PUSH32 0x2D2D756E73616665536B697053746F72616765436865636B0000000000000000 PUSH1 0x20 DUP3 ADD MSTORE DUP5 DUP5 PUSH2 0x39BF DUP2 PUSH2 0x4F9F JUMP JUMPDEST SWAP6 POP PUSH2 0xFFFF AND DUP2 MLOAD DUP2 LT PUSH2 0x39D5 JUMPI PUSH2 0x39D5 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH2 0x3A41 JUMP JUMPDEST DUP7 ISZERO PUSH2 0x3A41 JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x12 DUP2 MSTORE PUSH18 0x2D2D726571756972655265666572656E6365 PUSH1 0x70 SHL PUSH1 0x20 DUP3 ADD MSTORE DUP5 DUP5 PUSH2 0x3A1F DUP2 PUSH2 0x4F9F JUMP JUMPDEST SWAP6 POP PUSH2 0xFFFF AND DUP2 MLOAD DUP2 LT PUSH2 0x3A35 JUMPI PUSH2 0x3A35 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP JUMPDEST PUSH1 0x80 DUP9 ADD MLOAD MLOAD ISZERO PUSH2 0x3ACF JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xD DUP2 MSTORE PUSH13 0x2D2D756E73616665416C6C6F77 PUSH1 0x98 SHL PUSH1 0x20 DUP3 ADD MSTORE DUP5 DUP5 PUSH2 0x3A7B DUP2 PUSH2 0x4F9F JUMP JUMPDEST SWAP6 POP PUSH2 0xFFFF AND DUP2 MLOAD DUP2 LT PUSH2 0x3A91 JUMPI PUSH2 0x3A91 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP8 PUSH1 0x80 ADD MLOAD DUP5 DUP5 DUP1 PUSH2 0x3AAD SWAP1 PUSH2 0x4F9F JUMP JUMPDEST SWAP6 POP PUSH2 0xFFFF AND DUP2 MLOAD DUP2 LT PUSH2 0x3AC3 JUMPI PUSH2 0x3AC3 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP JUMPDEST DUP8 PUSH1 0xA0 ADD MLOAD ISZERO PUSH2 0x3B31 JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x14 DUP2 MSTORE PUSH20 0x2D2D756E73616665416C6C6F7752656E616D6573 PUSH1 0x60 SHL PUSH1 0x20 DUP3 ADD MSTORE DUP5 DUP5 PUSH2 0x3B0F DUP2 PUSH2 0x4F9F JUMP JUMPDEST SWAP6 POP PUSH2 0xFFFF AND DUP2 MLOAD DUP2 LT PUSH2 0x3B25 JUMPI PUSH2 0x3B25 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP JUMPDEST PUSH0 DUP4 PUSH2 0xFFFF AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x3B4E JUMPI PUSH2 0x3B4E PUSH2 0x3FC8 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3B81 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x3B6C JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH0 JUMPDEST DUP5 PUSH2 0xFFFF AND DUP2 PUSH2 0xFFFF AND LT ISZERO PUSH2 0x3BDD JUMPI DUP6 DUP2 PUSH2 0xFFFF AND DUP2 MLOAD DUP2 LT PUSH2 0x3BAC JUMPI PUSH2 0x3BAC PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 PUSH2 0xFFFF AND DUP2 MLOAD DUP2 LT PUSH2 0x3BCA JUMPI PUSH2 0x3BCA PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x3B86 JUMP JUMPDEST POP SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x8BB75533 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 SWAP1 PUSH0 MLOAD PUSH1 0x20 PUSH2 0x7E43 PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SWAP1 DUP3 SWAP1 DUP3 SWAP1 PUSH4 0x8BB75533 SWAP1 PUSH2 0x3C23 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x40DB JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3C3D JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x3C64 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4A06 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP2 MLOAD PUSH2 0x2A6E SWAP2 SWAP1 PUSH2 0x4D45 JUMP JUMPDEST PUSH0 DUP1 PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 LT PUSH2 0x3CB2 JUMPI PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x3CDE JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x3CFC JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x3D14 JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x3D28 JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x3D3A JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0xAC8 JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD DUP4 MLOAD EQ DUP1 ISZERO PUSH2 0xBDC JUMPI POP POP DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 DUP3 MLOAD SWAP3 SWAP1 SWAP2 ADD SWAP2 SWAP1 SWAP2 KECCAK256 EQ SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH0 PUSH2 0x3D7C DUP5 DUP5 PUSH2 0xF17 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP1 DUP4 ADD MLOAD PUSH1 0x40 MLOAD SWAP4 SWAP5 POP PUSH2 0x3D96 SWAP4 SWAP1 SWAP2 ADD PUSH2 0x4FE7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x4C4 DUP1 PUSH2 0x5007 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH2 0x2978 DUP1 PUSH2 0x54CB DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x140 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3E1F PUSH2 0x3E24 JUMP JUMPDEST SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x120 ADD PUSH1 0x40 MSTORE DUP1 PUSH0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3E8A PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH0 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3EA7 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3EBE JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xBDC JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x3EE8 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x2A88 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST DUP1 SLOAD PUSH0 SWAP1 PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x3F1E JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x3F3C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST DUP2 DUP7 MSTORE PUSH1 0x20 DUP7 ADD DUP2 DUP1 ISZERO PUSH2 0x3F57 JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x3F6D JUMPI PUSH2 0x3F99 JUMP JUMPDEST PUSH1 0xFF NOT DUP6 AND DUP3 MSTORE DUP4 ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD SWAP6 POP PUSH2 0x3F99 JUMP JUMPDEST PUSH0 DUP8 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 PUSH0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x3F93 JUMPI DUP2 SLOAD DUP5 DUP3 ADD MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD PUSH2 0x3F77 JUMP JUMPDEST DUP4 ADD SWAP7 POP POP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH0 PUSH2 0x3FB6 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x3F06 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xBD8 DUP2 DUP6 PUSH2 0x3F06 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 DUP2 AND PUSH1 0x20 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 DUP5 AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP4 ADD DUP2 SWAP1 MSTORE DUP4 MLOAD SWAP1 DUP4 ADD DUP2 SWAP1 MSTORE PUSH0 SWAP2 DUP5 ADD SWAP1 PUSH1 0xA0 DUP5 ADD SWAP1 DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x4055 JUMPI DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x402E JUMP JUMPDEST POP SWAP1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD DUP1 DUP5 MSTORE DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP7 ADD MCOPY PUSH0 PUSH1 0x20 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH0 PUSH2 0x40A3 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x4063 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x20 DUP4 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH0 PUSH2 0x40CC PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x4063 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x20 DUP4 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH0 PUSH2 0x40ED PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x4063 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xBD8 DUP2 DUP6 PUSH2 0x4063 JUMP JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH0 PUSH2 0x4111 PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x4063 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x4123 DUP2 DUP7 PUSH2 0x4063 JUMP JUMPDEST SWAP2 POP POP PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x40 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH0 PUSH2 0xBDC PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x4063 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH0 SWAP1 PUSH2 0x4171 SWAP1 DUP4 ADD DUP5 PUSH2 0x4063 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD DUP1 PUSH1 0x20 DUP5 ADD DUP6 MCOPY PUSH0 SWAP4 ADD SWAP3 DUP4 MSTORE POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4661696C656420746F206465706C6F7920636F6E747261637420000000000000 DUP2 MSTORE PUSH0 PUSH2 0x41C1 PUSH1 0x1A DUP4 ADD DUP6 PUSH2 0x4179 JUMP JUMPDEST PUSH2 0x1D1 PUSH1 0xF5 SHL DUP2 MSTORE PUSH2 0xBD8 PUSH1 0x2 DUP3 ADD DUP6 PUSH2 0x4179 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x60 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x41F8 JUMPI PUSH2 0x41F8 PUSH2 0x3FC8 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x4226 JUMPI PUSH2 0x4226 PUSH2 0x3FC8 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x423D JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x20 DUP4 ADD PUSH0 PUSH0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP5 GT ISZERO PUSH2 0x425C JUMPI PUSH2 0x425C PUSH2 0x3FC8 JUMP JUMPDEST POP PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD PUSH2 0x4271 DUP2 PUSH2 0x41FE JUMP JUMPDEST SWAP2 POP POP DUP3 DUP2 MSTORE DUP6 DUP4 DUP4 ADD GT ISZERO PUSH2 0x4285 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP3 DUP3 PUSH1 0x20 DUP4 ADD MCOPY PUSH0 SWAP3 DUP2 ADD PUSH1 0x20 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x42AF JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x42C4 JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0xAC4 DUP5 DUP3 DUP6 ADD PUSH2 0x422E JUMP JUMPDEST PUSH0 PUSH2 0x4171 PUSH2 0x42DE DUP4 DUP7 PUSH2 0x4179 JUMP JUMPDEST DUP5 PUSH2 0x4179 JUMP JUMPDEST PUSH32 0x4661696C656420746F206465706C6F7920636F6E747261637420000000000000 DUP2 MSTORE PUSH0 PUSH2 0x4315 PUSH1 0x1A DUP4 ADD DUP6 PUSH2 0x4179 JUMP JUMPDEST PUSH32 0x207573696E6720636F6E7374727563746F722064617461202200000000000000 DUP2 MSTORE PUSH2 0x4345 PUSH1 0x19 DUP3 ADD DUP6 PUSH2 0x4179 JUMP JUMPDEST PUSH1 0x11 PUSH1 0xF9 SHL DUP2 MSTORE PUSH1 0x1 ADD SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0xB PUSH1 0x40 DUP3 ADD MSTORE PUSH11 0x1193D55391149657D3D555 PUSH1 0xAA SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x20 DUP3 ADD MSTORE PUSH0 PUSH2 0xBDC PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x4063 JUMP JUMPDEST PUSH0 PUSH2 0x4397 DUP3 DUP8 PUSH2 0x4179 JUMP JUMPDEST PUSH1 0x2F PUSH1 0xF8 SHL DUP2 MSTORE PUSH2 0x43AB PUSH1 0x1 DUP3 ADD DUP8 PUSH2 0x4179 JUMP JUMPDEST SWAP1 POP PUSH1 0x2F PUSH1 0xF8 SHL DUP2 MSTORE PUSH2 0x43C1 PUSH1 0x1 DUP3 ADD DUP7 PUSH2 0x4179 JUMP JUMPDEST SWAP1 POP PUSH1 0x2F PUSH1 0xF8 SHL DUP2 MSTORE PUSH2 0x43D7 PUSH1 0x1 DUP3 ADD DUP6 PUSH2 0x4179 JUMP JUMPDEST PUSH5 0x173539B7B7 PUSH1 0xD9 SHL DUP2 MSTORE PUSH1 0x5 ADD SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH0 PUSH2 0x4402 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x4063 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x4 DUP2 MSTORE PUSH4 0xB985CDD PUSH1 0xE2 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4438 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xBDC JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH32 0x436F756C64206E6F742066696E642041535420696E2061727469666163742000 DUP2 MSTORE PUSH0 PUSH2 0x4478 PUSH1 0x1F DUP4 ADD DUP5 PUSH2 0x4179 JUMP JUMPDEST PUSH32 0x2E205365742060617374203D20747275656020696E20666F756E6472792E746F DUP2 MSTORE PUSH2 0x1B5B PUSH1 0xF2 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x22 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH0 PUSH2 0x44C2 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x4063 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x11 DUP2 MSTORE PUSH17 0x5CC2E6E85CC2C4E6DED8EAE8CAA0C2E8D PUSH1 0x7B SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH0 PUSH2 0x4507 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x4063 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0xC DUP2 MSTORE PUSH12 0x2E6173742E6C6963656E7365 PUSH1 0xA0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0x2E6D657461646174612E736F75726365732E5B27 PUSH1 0x60 SHL DUP2 MSTORE PUSH0 PUSH2 0x455D PUSH1 0x14 DUP4 ADD DUP5 PUSH2 0x4179 JUMP JUMPDEST PUSH12 0x13AE9735B2B1B1B0B5991A9B PUSH1 0xA1 SHL DUP2 MSTORE PUSH1 0xC ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x11 PUSH1 0xF9 SHL DUP2 MSTORE PUSH0 PUSH2 0x458E PUSH1 0x1 DUP4 ADD DUP5 PUSH2 0x4179 JUMP JUMPDEST PUSH1 0x11 PUSH1 0xF9 SHL DUP2 MSTORE PUSH1 0x1 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x45AA DUP3 DUP5 PUSH2 0x4179 JUMP JUMPDEST PUSH11 0x2F6275696C642D696E666F PUSH1 0xA8 SHL DUP2 MSTORE PUSH1 0xB ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x436F756C64206E6F742066696E64206275696C642D696E666F2066696C652077 DUP2 MSTORE PUSH32 0x697468206D61746368696E6720736F7572636520636F6465206861736820666F PUSH1 0x20 DUP3 ADD MSTORE PUSH11 0x391031B7B73A3930B1BA1 PUSH1 0xAD SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH0 PUSH2 0xBDC PUSH1 0x4B DUP4 ADD DUP5 PUSH2 0x4179 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH1 0xFF DUP3 AND PUSH1 0xFF DUP2 SUB PUSH2 0x4659 JUMPI PUSH2 0x4659 PUSH2 0x4630 JUMP JUMPDEST PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x406F70656E7A657070656C696E2F646566656E6465722D6465706C6F792D636C DUP2 MSTORE PUSH9 0x1A595B9D0B58DB1A5 PUSH1 0xBE SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH0 PUSH2 0xBDC PUSH1 0x29 DUP4 ADD DUP5 PUSH2 0x4179 JUMP JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH0 PUSH2 0x46B7 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x4063 JUMP JUMPDEST DUP3 DUP2 SUB DUP1 PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x1 DUP3 MSTORE PUSH1 0x11 PUSH1 0xF9 SHL PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP2 ADD PUSH1 0x40 DUP6 ADD MSTORE POP PUSH1 0x2 PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x2E11 PUSH1 0xF1 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP2 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x16 PUSH1 0x40 DUP3 ADD MSTORE PUSH22 0x9EA08A9CB48AA0A08A98929CBE8482A690BEA082A89 PUSH1 0x53 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x20 DUP3 ADD MSTORE PUSH0 PUSH2 0xBDC PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x4063 JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD PUSH1 0x20 DUP4 MSTORE DUP1 DUP5 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 DUP6 ADD SWAP2 POP PUSH1 0x40 DUP2 PUSH1 0x5 SHL DUP7 ADD ADD SWAP3 POP PUSH1 0x20 DUP7 ADD PUSH0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x478D JUMPI PUSH1 0x3F NOT DUP8 DUP7 SUB ADD DUP5 MSTORE PUSH2 0x4778 DUP6 DUP4 MLOAD PUSH2 0x4063 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x475C JUMP JUMPDEST POP SWAP3 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x47A9 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x47BE JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP3 ADD PUSH1 0x60 DUP2 DUP6 SUB SLT ISZERO PUSH2 0x47CF JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0x47D7 PUSH2 0x41D6 JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x3 SIGNEXTEND DUP2 EQ PUSH2 0x47E7 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x4801 JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0x480D DUP7 DUP3 DUP6 ADD PUSH2 0x422E JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x482B JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0x4837 DUP7 DUP3 DUP6 ADD PUSH2 0x422E JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x4661696C656420746F2072756E206261736820636F6D6D616E64207769746820 DUP2 MSTORE PUSH1 0x11 PUSH1 0xF9 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH0 PUSH2 0x4880 PUSH1 0x21 DUP4 ADD DUP5 PUSH2 0x4179 JUMP JUMPDEST PUSH32 0x222E20496620796F7520617265207573696E672057696E646F77732C20736574 DUP2 MSTORE PUSH32 0x20746865204F50454E5A455050454C494E5F424153485F5041544820656E7669 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x726F6E6D656E74207661726961626C6520746F207468652066756C6C79207175 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x616C69666965642070617468206F662074686520626173682065786563757461 PUSH1 0x60 DUP3 ADD MSTORE PUSH32 0x626C652E20466F72206578616D706C652C20696620796F752061726520757369 PUSH1 0x80 DUP3 ADD MSTORE PUSH32 0x6E672047697420666F722057696E646F77732C206164642074686520666F6C6C PUSH1 0xA0 DUP3 ADD MSTORE PUSH32 0x6F77696E67206C696E6520696E20746865202E656E762066696C65206F662079 PUSH1 0xC0 DUP3 ADD MSTORE PUSH32 0x6F75722070726F6A65637420287573696E6720666F727761726420736C617368 PUSH1 0xE0 DUP3 ADD MSTORE PUSH32 0x6573293A0A4F50454E5A455050454C494E5F424153485F504154483D22433A2F PUSH2 0x100 DUP3 ADD MSTORE PUSH32 0x50726F6772616D2046696C65732F4769742F62696E2F62617368220000000000 PUSH2 0x120 DUP3 ADD MSTORE PUSH2 0x13B ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4A16 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x4A2B JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP3 ADD PUSH1 0x1F DUP2 ADD DUP5 SGT PUSH2 0x4A3B JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x4A54 JUMPI PUSH2 0x4A54 PUSH2 0x3FC8 JUMP JUMPDEST DUP1 PUSH1 0x5 SHL PUSH2 0x4A64 PUSH1 0x20 DUP3 ADD PUSH2 0x41FE JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP2 DUP5 ADD DUP2 ADD SWAP3 SWAP1 DUP2 ADD SWAP1 DUP8 DUP5 GT ISZERO PUSH2 0x4A7F JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH1 0x20 DUP6 ADD SWAP3 POP JUMPDEST DUP4 DUP4 LT ISZERO PUSH2 0x4AC4 JUMPI DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x4AA3 JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0x4AB2 DUP10 PUSH1 0x20 DUP4 DUP10 ADD ADD PUSH2 0x422E JUMP JUMPDEST DUP4 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x4A86 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x466F756E64206D756C7469706C65206F6363757272656E636573206F66207072 DUP2 MSTORE PUSH6 0x656669782027 PUSH1 0xD0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH0 PUSH2 0x4B0F PUSH1 0x26 DUP4 ADD DUP6 PUSH2 0x4179 JUMP JUMPDEST PUSH13 0x139034B71037BABA383ABA1D1 PUSH1 0x9D SHL DUP2 MSTORE PUSH2 0xBD8 PUSH1 0xD DUP3 ADD DUP6 PUSH2 0x4179 JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH0 PUSH2 0x4B41 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x4063 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 SWAP4 DUP5 ADD MSTORE PUSH1 0x1 DUP2 MSTORE PUSH1 0x5 PUSH1 0xF9 SHL SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE POP PUSH1 0x40 ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4661696C656420746F2066696E64206C696E6520776974682070726566697820 DUP2 MSTORE PUSH1 0x27 PUSH1 0xF8 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH0 PUSH2 0x4B0F PUSH1 0x21 DUP4 ADD DUP6 PUSH2 0x4179 JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH0 PUSH2 0x4BB0 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x4063 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x7 DUP2 MSTORE PUSH7 0x53554343455353 PUSH1 0xC8 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4661696C656420746F2072756E2075706772616465207361666574792076616C DUP2 MSTORE PUSH9 0x34B230BA34B7B71D1 PUSH1 0xBD SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH0 PUSH2 0xBDC PUSH1 0x29 DUP4 ADD DUP5 PUSH2 0x4179 JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH0 PUSH2 0x4C2E PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x4063 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x6 DUP2 MSTORE PUSH6 0x119052531151 PUSH1 0xD2 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x55706772616465207361666574792076616C69646174696F6E206661696C6564 DUP2 MSTORE PUSH2 0x1D05 PUSH1 0xF1 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH0 PUSH2 0xBDC PUSH1 0x22 DUP4 ADD DUP5 PUSH2 0x4179 JUMP JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH0 PUSH2 0x4CA4 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x4063 JUMP JUMPDEST DUP3 DUP2 SUB DUP1 PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x4 DUP3 MSTORE PUSH4 0xB9CDBDB PUSH1 0xE2 SHL PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP2 ADD PUSH1 0x40 DUP6 ADD MSTORE POP PUSH0 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH0 PUSH2 0x4CED PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x4063 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x1 DUP2 MSTORE PUSH1 0x1D PUSH1 0xF9 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH0 PUSH2 0x4D22 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x4063 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x1 DUP2 MSTORE PUSH1 0x2F PUSH1 0xF8 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0xAC8 JUMPI PUSH2 0xAC8 PUSH2 0x4630 JUMP JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH0 PUSH2 0x4D6A PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x4063 JUMP JUMPDEST DUP3 DUP2 SUB DUP1 PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x5 DUP3 MSTORE PUSH5 0x173539B7B7 PUSH1 0xD9 SHL PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP2 ADD PUSH1 0x40 DUP6 ADD MSTORE POP PUSH0 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH14 0x21B7B73A3930B1BA103730B6B29 PUSH1 0x95 SHL DUP2 MSTORE PUSH0 PUSH2 0x4DC4 PUSH1 0xE DUP4 ADD DUP5 PUSH2 0x4179 JUMP JUMPDEST PUSH32 0x206D75737420626520696E2074686520666F726D6174204D79436F6E74726163 DUP2 MSTORE PUSH32 0x742E736F6C3A4D79436F6E7472616374206F72204D79436F6E74726163742E73 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x6F6C206F72206F75742F4D79436F6E74726163742E736F6C2F4D79436F6E7472 PUSH1 0x40 DUP3 ADD MSTORE PUSH8 0x30B1BA173539B7B7 PUSH1 0xC1 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x68 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x53504458206C6963656E7365206964656E746966696572200000000000000000 DUP2 MSTORE PUSH0 PUSH2 0x4E7F PUSH1 0x18 DUP4 ADD DUP6 PUSH2 0x4179 JUMP JUMPDEST PUSH4 0x1034B71 PUSH1 0xE5 SHL DUP2 MSTORE PUSH2 0x4E96 PUSH1 0x4 DUP3 ADD DUP6 PUSH2 0x4179 JUMP JUMPDEST PUSH32 0x20646F6573206E6F74206C6F6F6B206C696B65206120737570706F7274656420 DUP2 MSTORE PUSH32 0x6C6963656E736520666F7220626C6F636B206578706C6F726572207665726966 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x69636174696F6E2E205573652074686520606C6963656E73655479706560206F PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x7074696F6E20746F20737065636966792061206C6963656E736520747970652C PUSH1 0x60 DUP3 ADD MSTORE PUSH32 0x206F7220736574207468652060736B69704C6963656E73655479706560206F70 PUSH1 0x80 DUP3 ADD MSTORE PUSH32 0x74696F6E20746F2060747275656020746F20736B69702E000000000000000000 PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xB7 ADD SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x4F8E DUP3 DUP5 PUSH2 0x4179 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xFD SHL DUP2 MSTORE PUSH1 0x1 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0xFFFF DUP3 AND PUSH2 0xFFFF DUP2 SUB PUSH2 0x4659 JUMPI PUSH2 0x4659 PUSH2 0x4630 JUMP JUMPDEST PUSH32 0x406F70656E7A657070656C696E2F75706772616465732D636F72654000000000 DUP2 MSTORE PUSH0 PUSH2 0xBDC PUSH1 0x1C DUP4 ADD DUP5 PUSH2 0x4179 JUMP JUMPDEST PUSH0 PUSH2 0x4FF2 DUP3 DUP6 PUSH2 0x4179 JUMP JUMPDEST PUSH1 0x1D PUSH1 0xF9 SHL DUP2 MSTORE PUSH2 0xBD8 PUSH1 0x1 DUP3 ADD DUP6 PUSH2 0x4179 JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xE JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP CALLER DUP1 PUSH1 0x33 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3A DUP2 PUSH1 0x3F JUMP JUMPDEST POP PUSH1 0xA8 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE PUSH1 0x56 DUP2 PUSH1 0x59 JUMP JUMPDEST POP JUMP JUMPDEST PUSH0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x40F DUP1 PUSH2 0xB5 PUSH0 CODECOPY PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x85 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xC4740A95 GT PUSH2 0x58 JUMPI DUP1 PUSH4 0xC4740A95 EQ PUSH2 0xFF JUMPI DUP1 PUSH4 0xE30C3978 EQ PUSH2 0x112 JUMPI DUP1 PUSH4 0xE89B0E1E EQ PUSH2 0x123 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x136 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x89 JUMPI DUP1 PUSH4 0x79BA5097 EQ PUSH2 0x93 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x9B JUMPI DUP1 PUSH4 0xB23BC7D7 EQ PUSH2 0xC4 JUMPI JUMPDEST PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0x91 PUSH2 0x149 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x91 PUSH2 0x15C JUMP JUMPDEST PUSH0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xEF PUSH2 0xD2 CALLDATASIZE PUSH1 0x4 PUSH2 0x3AC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xBB JUMP JUMPDEST PUSH2 0x91 PUSH2 0x10D CALLDATASIZE PUSH1 0x4 PUSH2 0x3AC JUMP JUMPDEST PUSH2 0x1A5 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xA7 JUMP JUMPDEST PUSH2 0x91 PUSH2 0x131 CALLDATASIZE PUSH1 0x4 PUSH2 0x3AC JUMP JUMPDEST PUSH2 0x22B JUMP JUMPDEST PUSH2 0x91 PUSH2 0x144 CALLDATASIZE PUSH1 0x4 PUSH2 0x3AC JUMP JUMPDEST PUSH2 0x2AD JUMP JUMPDEST PUSH2 0x151 PUSH2 0x31D JUMP JUMPDEST PUSH2 0x15A PUSH0 PUSH2 0x349 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1 SLOAD CALLER SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 EQ PUSH2 0x199 JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1A2 DUP2 PUSH2 0x349 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x1AD PUSH2 0x31D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1D4 JUMPI PUSH1 0x40 MLOAD PUSH4 0xD92E233D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE SWAP1 MLOAD SWAP2 DUP3 MSTORE PUSH32 0xBF2E373B8263F701E10EFCAC80EA442AFCB29C6852B3A42B0B46CC8EDAAF54A7 SWAP2 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0x233 PUSH2 0x31D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x25A JUMPI PUSH1 0x40 MLOAD PUSH4 0xD92E233D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE SWAP1 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x8F42195A0BBFA58954BE4349DEB9EFC38BDB9C298E529F705F8BC1E38BCE0399 SWAP2 ADD PUSH2 0x220 JUMP JUMPDEST PUSH2 0x2B5 PUSH2 0x31D JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 SWAP2 AND DUP2 OR SWAP1 SWAP2 SSTORE PUSH2 0x2E5 PUSH0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x38D16B8CAC22D99FC7C124B9CD0DE2D3FA1FAEF420BFE791D8C362D765E22700 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x15A JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x190 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE PUSH2 0x1A2 DUP2 PUSH0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3BC JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x3D2 JUMPI PUSH0 PUSH0 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA9 0xCF 0xD4 0xD8 PUSH7 0xA60382AF4E425E 0xAE DIV 0x4D SWAP8 DUP14 DUP7 NOT DUP16 0xED SAR 0xBE BLOBHASH BLOBBASEFEE LOG0 0xBC MULMOD GAS 0xE6 0xB2 0xC9 PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER PUSH1 0xA0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x2978 CODESIZE SUB DUP1 PUSH2 0x2978 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2E SWAP2 PUSH2 0x30A JUMP JUMPDEST PUSH3 0x15180 CALLER DUP1 PUSH2 0x58 JUMPI PUSH1 0x40 MLOAD PUSH4 0x61164011 PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB AND PUSH1 0x1 PUSH1 0xD0 SHL PUSH6 0xFFFFFFFFFFFF DUP6 AND MUL OR SWAP1 SSTORE PUSH2 0x81 PUSH0 DUP3 PUSH2 0x199 JUMP JUMPDEST POP POP POP PUSH2 0x93 DUP5 PUSH2 0x208 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x80 MSTORE PUSH2 0xA8 DUP4 PUSH2 0x208 JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH2 0x100 MUL PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0xD8 DUP3 PUSH2 0x208 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x18F JUMPI PUSH0 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x116 JUMPI PUSH2 0x116 PUSH2 0x406 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH2 0x12F DUP2 PUSH2 0x208 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EXTCODESIZE PUSH0 SUB PUSH2 0x165 JUMPI PUSH1 0x40 MLOAD PUSH4 0x73306803 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x4F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE ADD PUSH2 0xFA JUMP JUMPDEST POP POP POP POP POP PUSH2 0x41A JUMP JUMPDEST PUSH0 DUP3 PUSH2 0x1F5 JUMPI PUSH0 PUSH2 0x1B2 PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1D9 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1FE1E13D PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND OR SWAP1 SSTORE JUMPDEST PUSH2 0x1FF DUP4 DUP4 PUSH2 0x234 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x230 JUMPI PUSH1 0x40 MLOAD PUSH4 0xD92E233D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x2D4 JUMPI PUSH0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x28C CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP PUSH1 0x1 PUSH2 0x202 JUMP JUMPDEST POP PUSH0 PUSH2 0x202 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x2F1 JUMPI PUSH0 PUSH0 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH0 PUSH0 PUSH0 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x31D JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0x326 DUP6 PUSH2 0x2DB JUMP JUMPDEST SWAP4 POP PUSH2 0x334 PUSH1 0x20 DUP7 ADD PUSH2 0x2DB JUMP JUMPDEST SWAP3 POP PUSH2 0x342 PUSH1 0x40 DUP7 ADD PUSH2 0x2DB JUMP JUMPDEST PUSH1 0x60 DUP7 ADD MLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x35D JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP6 ADD PUSH1 0x1F DUP2 ADD DUP8 SGT PUSH2 0x36D JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x386 JUMPI PUSH2 0x386 PUSH2 0x2F6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x5 DUP3 SWAP1 SHL SWAP1 PUSH1 0x3F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x3B4 JUMPI PUSH2 0x3B4 PUSH2 0x2F6 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 DUP3 MSTORE PUSH1 0x20 DUP2 DUP5 ADD DUP2 ADD SWAP3 SWAP1 DUP2 ADD DUP11 DUP5 GT ISZERO PUSH2 0x3D1 JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH1 0x20 DUP6 ADD SWAP5 POP JUMPDEST DUP4 DUP6 LT ISZERO PUSH2 0x3F7 JUMPI PUSH2 0x3E9 DUP6 PUSH2 0x2DB JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 ADD PUSH2 0x3D8 JUMP JUMPDEST POP SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x80 MLOAD PUSH2 0x2523 PUSH2 0x455 PUSH0 CODECOPY PUSH0 DUP2 DUP2 PUSH2 0x56D ADD MSTORE DUP2 DUP2 PUSH2 0x882 ADD MSTORE DUP2 DUP2 PUSH2 0xFB3 ADD MSTORE DUP2 DUP2 PUSH2 0x12B2 ADD MSTORE DUP2 DUP2 PUSH2 0x1328 ADD MSTORE PUSH2 0x1513 ADD MSTORE PUSH2 0x2523 PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x276 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x156 JUMPI DUP1 PUSH4 0xCC8463C8 GT PUSH2 0xCA JUMPI DUP1 PUSH4 0xE744092E GT PUSH2 0x84 JUMPI DUP1 PUSH4 0xE744092E EQ PUSH2 0x626 JUMPI DUP1 PUSH4 0xEC6686AD EQ PUSH2 0x648 JUMPI DUP1 PUSH4 0xF0F44260 EQ PUSH2 0x65B JUMPI DUP1 PUSH4 0xF67E6070 EQ PUSH2 0x66E JUMPI DUP1 PUSH4 0xF9052BEA EQ PUSH2 0x681 JUMPI DUP1 PUSH4 0xFF5528E0 EQ PUSH2 0x694 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP1 PUSH4 0xCC8463C8 EQ PUSH2 0x5BA JUMPI DUP1 PUSH4 0xCEFC1429 EQ PUSH2 0x5C2 JUMPI DUP1 PUSH4 0xCF6EEFB7 EQ PUSH2 0x5CA JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x5F8 JUMPI DUP1 PUSH4 0xD602B9FD EQ PUSH2 0x60B JUMPI DUP1 PUSH4 0xE3F4CE55 EQ PUSH2 0x613 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP1 PUSH4 0xA20E7D47 GT PUSH2 0x11B JUMPI DUP1 PUSH4 0xA20E7D47 EQ PUSH2 0x527 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x54E JUMPI DUP1 PUSH4 0xA46E82D2 EQ PUSH2 0x555 JUMPI DUP1 PUSH4 0xA693577C EQ PUSH2 0x568 JUMPI DUP1 PUSH4 0xAAFA2D69 EQ PUSH2 0x58F JUMPI DUP1 PUSH4 0xC5F956AF EQ PUSH2 0x5A2 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x4BF JUMPI DUP1 PUSH4 0x90469A9D EQ PUSH2 0x4C7 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x4DA JUMPI DUP1 PUSH4 0x986D7A69 EQ PUSH2 0x4ED JUMPI DUP1 PUSH4 0xA1EDA53C EQ PUSH2 0x500 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP1 PUSH4 0x424E6575 GT PUSH2 0x1ED JUMPI DUP1 PUSH4 0x6406C10C GT PUSH2 0x1B2 JUMPI DUP1 PUSH4 0x6406C10C EQ PUSH2 0x411 JUMPI DUP1 PUSH4 0x649A5EC7 EQ PUSH2 0x463 JUMPI DUP1 PUSH4 0x6FF1C9BC EQ PUSH2 0x476 JUMPI DUP1 PUSH4 0x77BEF613 EQ PUSH2 0x489 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x492 JUMPI DUP1 PUSH4 0x84EF8FFC EQ PUSH2 0x49A JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP1 PUSH4 0x424E6575 EQ PUSH2 0x373 JUMPI DUP1 PUSH4 0x5676659B EQ PUSH2 0x3D7 JUMPI DUP1 PUSH4 0x5C6A9384 EQ PUSH2 0x3EA JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x3F3 JUMPI DUP1 PUSH4 0x634E93DA EQ PUSH2 0x3FE JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP1 PUSH4 0x19B2A6B9 GT PUSH2 0x23E JUMPI DUP1 PUSH4 0x19B2A6B9 EQ PUSH2 0x2EF JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x302 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x332 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x345 JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x358 JUMPI DUP1 PUSH4 0x4178617F EQ PUSH2 0x360 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x27A JUMPI DUP1 PUSH4 0x22D63FB EQ PUSH2 0x2A2 JUMPI DUP1 PUSH4 0x52D9E7E EQ PUSH2 0x2BE JUMPI DUP1 PUSH4 0xAA6220B EQ PUSH2 0x2D3 JUMPI DUP1 PUSH4 0x184D69AB EQ PUSH2 0x2DB JUMPI JUMPDEST PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0x28D PUSH2 0x288 CALLDATASIZE PUSH1 0x4 PUSH2 0x2160 JUMP JUMPDEST PUSH2 0x6A7 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH3 0x69780 JUMPDEST PUSH1 0x40 MLOAD PUSH6 0xFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x299 JUMP JUMPDEST PUSH2 0x2D1 PUSH2 0x2CC CALLDATASIZE PUSH1 0x4 PUSH2 0x2194 JUMP JUMPDEST PUSH2 0x6D1 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2D1 PUSH2 0x734 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH2 0x28D SWAP1 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x2D1 PUSH2 0x2FD CALLDATASIZE PUSH1 0x4 PUSH2 0x21AF JUMP JUMPDEST PUSH2 0x749 JUMP JUMPDEST PUSH2 0x324 PUSH2 0x310 CALLDATASIZE PUSH1 0x4 PUSH2 0x21D8 JUMP JUMPDEST PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x299 JUMP JUMPDEST PUSH2 0x2D1 PUSH2 0x340 CALLDATASIZE PUSH1 0x4 PUSH2 0x2203 JUMP JUMPDEST PUSH2 0x920 JUMP JUMPDEST PUSH2 0x2D1 PUSH2 0x353 CALLDATASIZE PUSH1 0x4 PUSH2 0x2203 JUMP JUMPDEST PUSH2 0x94C JUMP JUMPDEST PUSH2 0x2D1 PUSH2 0x9F2 JUMP JUMPDEST PUSH2 0x2D1 PUSH2 0x36E CALLDATASIZE PUSH1 0x4 PUSH2 0x2231 JUMP JUMPDEST PUSH2 0xA04 JUMP JUMPDEST PUSH2 0x3C5 PUSH2 0x381 CALLDATASIZE PUSH1 0x4 PUSH2 0x21D8 JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 DUP5 ADD SLOAD PUSH1 0x4 SWAP1 SWAP5 ADD SLOAD SWAP3 SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND SWAP5 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 SWAP5 DIV PUSH1 0xFF AND SWAP4 SWAP2 AND SWAP1 DUP7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x299 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2280 JUMP JUMPDEST PUSH2 0x2D1 PUSH2 0x3E5 CALLDATASIZE PUSH1 0x4 PUSH2 0x22DE JUMP JUMPDEST PUSH2 0xAA0 JUMP JUMPDEST PUSH2 0x324 PUSH1 0x6 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0xFF AND PUSH2 0x28D JUMP JUMPDEST PUSH2 0x2D1 PUSH2 0x40C CALLDATASIZE PUSH1 0x4 PUSH2 0x2231 JUMP JUMPDEST PUSH2 0xB18 JUMP JUMPDEST PUSH2 0x3C5 PUSH2 0x41F CALLDATASIZE PUSH1 0x4 PUSH2 0x21D8 JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 DUP5 ADD SLOAD PUSH1 0x4 SWAP1 SWAP5 ADD SLOAD SWAP3 SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND SWAP5 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 SWAP5 DIV PUSH1 0xFF AND SWAP4 SWAP2 AND SWAP1 DUP7 JUMP JUMPDEST PUSH2 0x2D1 PUSH2 0x471 CALLDATASIZE PUSH1 0x4 PUSH2 0x233F JUMP JUMPDEST PUSH2 0xB2B JUMP JUMPDEST PUSH2 0x2D1 PUSH2 0x484 CALLDATASIZE PUSH1 0x4 PUSH2 0x2231 JUMP JUMPDEST PUSH2 0xB3E JUMP JUMPDEST PUSH2 0x324 PUSH1 0x8 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x2D1 PUSH2 0xC0D JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x299 JUMP JUMPDEST PUSH2 0x4A7 PUSH2 0xC1F JUMP JUMPDEST PUSH2 0x2D1 PUSH2 0x4D5 CALLDATASIZE PUSH1 0x4 PUSH2 0x2231 JUMP JUMPDEST PUSH2 0xC37 JUMP JUMPDEST PUSH2 0x28D PUSH2 0x4E8 CALLDATASIZE PUSH1 0x4 PUSH2 0x2203 JUMP JUMPDEST PUSH2 0xC9B JUMP JUMPDEST PUSH2 0x2D1 PUSH2 0x4FB CALLDATASIZE PUSH1 0x4 PUSH2 0x2364 JUMP JUMPDEST PUSH2 0xCC3 JUMP JUMPDEST PUSH2 0x508 PUSH2 0xE62 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH6 0xFFFFFFFFFFFF SWAP4 DUP5 AND DUP2 MSTORE SWAP3 SWAP1 SWAP2 AND PUSH1 0x20 DUP4 ADD MSTORE ADD PUSH2 0x299 JUMP JUMPDEST PUSH2 0x324 PUSH32 0xD8A7A79547AF723EE3E12B59A480111268D8969C634E1A34A144D2C8B91D635B DUP2 JUMP JUMPDEST PUSH2 0x324 PUSH0 DUP2 JUMP JUMPDEST PUSH2 0x2D1 PUSH2 0x563 CALLDATASIZE PUSH1 0x4 PUSH2 0x21AF JUMP JUMPDEST PUSH2 0xEB4 JUMP JUMPDEST PUSH2 0x4A7 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x2D1 PUSH2 0x59D CALLDATASIZE PUSH1 0x4 PUSH2 0x2231 JUMP JUMPDEST PUSH2 0x108A JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH2 0x4A7 SWAP1 PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x2A7 PUSH2 0x1121 JUMP JUMPDEST PUSH2 0x2D1 PUSH2 0x117F JUMP JUMPDEST PUSH2 0x5D2 PUSH2 0x11BE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND DUP4 MSTORE PUSH6 0xFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x20 DUP4 ADD MSTORE ADD PUSH2 0x299 JUMP JUMPDEST PUSH2 0x2D1 PUSH2 0x606 CALLDATASIZE PUSH1 0x4 PUSH2 0x2203 JUMP JUMPDEST PUSH2 0x11DF JUMP JUMPDEST PUSH2 0x2D1 PUSH2 0x1207 JUMP JUMPDEST PUSH2 0x2D1 PUSH2 0x621 CALLDATASIZE PUSH1 0x4 PUSH2 0x21D8 JUMP JUMPDEST PUSH2 0x1219 JUMP JUMPDEST PUSH2 0x28D PUSH2 0x634 CALLDATASIZE PUSH1 0x4 PUSH2 0x2231 JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 MSTORE PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x2D1 PUSH2 0x656 CALLDATASIZE PUSH1 0x4 PUSH2 0x2396 JUMP JUMPDEST PUSH2 0x1319 JUMP JUMPDEST PUSH2 0x2D1 PUSH2 0x669 CALLDATASIZE PUSH1 0x4 PUSH2 0x2231 JUMP JUMPDEST PUSH2 0x13A7 JUMP JUMPDEST PUSH2 0x2D1 PUSH2 0x67C CALLDATASIZE PUSH1 0x4 PUSH2 0x23DA JUMP JUMPDEST PUSH2 0x1411 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH2 0x4A7 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x2D1 PUSH2 0x6A2 CALLDATASIZE PUSH1 0x4 PUSH2 0x21D8 JUMP JUMPDEST PUSH2 0x15D2 JUMP JUMPDEST PUSH0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x18A4C3C3 PUSH1 0xE1 SHL EQ DUP1 PUSH2 0x6CB JUMPI POP PUSH2 0x6CB DUP3 PUSH2 0x16B8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x6DB DUP2 PUSH2 0x16EC JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD DUP4 ISZERO ISZERO PUSH1 0x1 PUSH1 0xA0 SHL MUL PUSH1 0xFF PUSH1 0xA0 SHL NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x411283AE1B0E68089790510EB77CCAD9B761295BE576637799607C8AE066FE9F SWAP1 PUSH2 0x728 SWAP1 DUP5 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x73E DUP2 PUSH2 0x16EC JUMP JUMPDEST PUSH2 0x746 PUSH2 0x16F6 JUMP JUMPDEST POP JUMP JUMPDEST PUSH32 0xD8A7A79547AF723EE3E12B59A480111268D8969C634E1A34A144D2C8B91D635B PUSH2 0x773 DUP2 PUSH2 0x16EC JUMP JUMPDEST PUSH0 DUP4 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD DUP4 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x7B4 JUMPI PUSH1 0x40 MLOAD PUSH4 0x52E56FDF PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP5 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD SWAP1 SWAP2 PUSH2 0x7DB SWAP2 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1702 JUMP JUMPDEST DUP1 PUSH1 0x4 ADD SLOAD DUP5 LT ISZERO PUSH2 0x80D JUMPI PUSH1 0x4 DUP1 DUP3 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0xDA975475 PUSH1 0xE0 SHL DUP2 MSTORE SWAP2 DUP3 ADD DUP7 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x7AB JUMP JUMPDEST PUSH1 0x1 DUP2 ADD DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND PUSH1 0x1 PUSH1 0xA0 SHL OR SWAP1 SSTORE PUSH1 0x3 DUP1 DUP3 ADD SLOAD SWAP1 SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP3 PUSH2 0x850 SWAP3 DUP5 SWAP3 PUSH2 0x100 SWAP1 SWAP2 DIV SWAP1 SWAP2 AND SWAP1 PUSH2 0x1748 JUMP JUMPDEST PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0x7ED9DB59 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP8 SWAP1 MSTORE PUSH32 0x0 SWAP2 DUP3 AND SWAP1 PUSH4 0x7ED9DB59 SWAP1 PUSH1 0x64 ADD PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8C5 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x8D7 JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP DUP7 DUP9 PUSH32 0x2F78B4436CBDCAE9D74F9F2699396A3D28CD2AB069518D23BE6B25CD29E49963 DUP9 PUSH1 0x40 MLOAD PUSH2 0x90E SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP2 PUSH2 0x93E JUMPI PUSH1 0x40 MLOAD PUSH4 0x1FE1E13D PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x948 DUP3 DUP3 PUSH2 0x17AC JUMP JUMPDEST POP POP JUMP JUMPDEST DUP2 ISZERO DUP1 ISZERO PUSH2 0x967 JUMPI POP PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND SWAP2 AND EQ JUMPDEST ISZERO PUSH2 0x9E8 JUMPI PUSH0 PUSH0 PUSH2 0x976 PUSH2 0x11BE JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO ISZERO DUP1 PUSH2 0x998 JUMPI POP PUSH6 0xFFFFFFFFFFFF DUP2 AND ISZERO JUMPDEST DUP1 PUSH2 0x9AB JUMPI POP TIMESTAMP PUSH6 0xFFFFFFFFFFFF DUP3 AND LT ISZERO JUMPDEST ISZERO PUSH2 0x9D3 JUMPI PUSH1 0x40 MLOAD PUSH4 0x19CA5EBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH6 0xFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x7AB JUMP JUMPDEST POP POP PUSH1 0x1 DUP1 SLOAD PUSH6 0xFFFFFFFFFFFF PUSH1 0xA0 SHL NOT AND SWAP1 SSTORE JUMPDEST PUSH2 0x948 DUP3 DUP3 PUSH2 0x17D6 JUMP JUMPDEST PUSH0 PUSH2 0x9FC DUP2 PUSH2 0x16EC JUMP JUMPDEST PUSH2 0x746 PUSH2 0x1809 JUMP JUMPDEST PUSH0 PUSH2 0xA0E DUP2 PUSH2 0x16EC JUMP JUMPDEST PUSH2 0xA17 DUP3 PUSH2 0x185B JUMP JUMPDEST POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EXTCODESIZE PUSH0 SUB PUSH2 0xA4D JUMPI PUSH1 0x40 MLOAD PUSH4 0x73306803 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x7AB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE SWAP1 MLOAD SWAP2 DUP3 MSTORE PUSH32 0xF849D00BC67E9E4BF072DF9680646C59B8C5380160834C2E1D4896CE5EC81F75 SWAP2 ADD PUSH2 0x728 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xD505ACCF PUSH1 0xE0 SHL DUP2 MSTORE DUP8 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0xD505ACCF SWAP1 PUSH2 0xADA SWAP1 CALLER SWAP1 ADDRESS SWAP1 DUP13 SWAP1 DUP12 SWAP1 DUP12 SWAP1 DUP12 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0x240F JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xAF1 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xB02 JUMPI POP PUSH1 0x1 JUMPDEST POP PUSH2 0xB0E DUP9 DUP9 DUP9 PUSH2 0xCC3 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0xB22 DUP2 PUSH2 0x16EC JUMP JUMPDEST PUSH2 0x948 DUP3 PUSH2 0x1887 JUMP JUMPDEST PUSH0 PUSH2 0xB35 DUP2 PUSH2 0x16EC JUMP JUMPDEST PUSH2 0x948 DUP3 PUSH2 0x18F9 JUMP JUMPDEST PUSH0 PUSH2 0xB48 DUP2 PUSH2 0x16EC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xB8C JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xBB0 SWAP2 SWAP1 PUSH2 0x2450 JUMP JUMPDEST SWAP1 POP PUSH2 0xBC6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND CALLER DUP4 PUSH2 0x1748 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE PUSH32 0x2E39961A70A10F4D46383948095AC2752B3EE642A7C76AA827410AAFF08C2E51 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0xC17 DUP2 PUSH2 0x16EC JUMP JUMPDEST PUSH2 0x746 PUSH2 0x1961 JUMP JUMPDEST PUSH0 PUSH2 0xC32 PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH2 0xC41 DUP2 PUSH2 0x16EC JUMP JUMPDEST PUSH2 0xC4A DUP3 PUSH2 0x185B JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE SWAP1 MLOAD SWAP2 DUP3 MSTORE PUSH32 0xBF996B4FD74F0C7159BB017B1DB415B0D9A6F13129F46D0B93309D170B78DF31 SWAP2 ADD PUSH2 0x728 JUMP JUMPDEST PUSH0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND DUP1 ISZERO PUSH2 0xD44 JUMPI POP PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0xB23BC7D7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xB23BC7D7 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD1E JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xD42 SWAP2 SWAP1 PUSH2 0x2467 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0xD64 JUMPI PUSH1 0x40 MLOAD PUSH4 0x30AC863D PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x7AB JUMP JUMPDEST DUP3 PUSH2 0xD6E DUP2 PUSH2 0x185B JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xDB2 JUMPI PUSH1 0x40 MLOAD PUSH4 0x94403B7 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x7AB JUMP JUMPDEST PUSH2 0xDBA PUSH2 0x199E JUMP JUMPDEST PUSH2 0xDC3 DUP4 PUSH2 0x19C2 JUMP JUMPDEST PUSH2 0xDD8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND CALLER ADDRESS DUP7 PUSH2 0x19E5 JUMP JUMPDEST PUSH0 PUSH2 0xDE4 DUP6 DUP6 DUP6 PUSH2 0x1A1E JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH0 ADD MLOAD PUSH32 0x7F382249E1E2D2BE5B5E769BBD3ABD8E092FC5932A37D3819055E2C88C8540F8 DUP4 PUSH1 0x80 ADD MLOAD DUP5 PUSH1 0x60 ADD MLOAD DUP6 PUSH1 0xA0 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0xE53 SWAP4 SWAP3 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH0 SWAP1 PUSH1 0x1 PUSH1 0xD0 SHL SWAP1 DIV PUSH6 0xFFFFFFFFFFFF AND DUP1 ISZERO ISZERO DUP1 ISZERO PUSH2 0xE8D JUMPI POP TIMESTAMP PUSH6 0xFFFFFFFFFFFF DUP3 AND LT ISZERO JUMPDEST PUSH2 0xE98 JUMPI PUSH0 PUSH0 PUSH2 0xEAC JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH6 0xFFFFFFFFFFFF AND DUP2 JUMPDEST SWAP2 POP SWAP2 POP SWAP1 SWAP2 JUMP JUMPDEST PUSH32 0xD8A7A79547AF723EE3E12B59A480111268D8969C634E1A34A144D2C8B91D635B PUSH2 0xEDE DUP2 PUSH2 0x16EC JUMP JUMPDEST PUSH0 DUP4 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD DUP4 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xF1A JUMPI PUSH1 0x40 MLOAD PUSH4 0xE0A3CFF5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x7AB JUMP JUMPDEST PUSH0 DUP5 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD SWAP1 SWAP2 PUSH2 0xF41 SWAP2 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1702 JUMP JUMPDEST DUP1 PUSH1 0x4 ADD SLOAD DUP5 LT ISZERO PUSH2 0xF73 JUMPI PUSH1 0x4 DUP1 DUP3 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0x70998595 PUSH1 0xE1 SHL DUP2 MSTORE SWAP2 DUP3 ADD DUP7 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x7AB JUMP JUMPDEST PUSH1 0x1 DUP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL PUSH1 0xFF PUSH1 0xA0 SHL NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE PUSH1 0x2 DUP2 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0xD1AA41D PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP9 SWAP1 MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0x346A9074 SWAP1 PUSH1 0x64 ADD PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xFFE JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1010 JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 DUP7 ADD SLOAD SWAP2 DUP7 ADD SLOAD PUSH2 0x1041 SWAP5 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP4 POP PUSH2 0x100 SWAP1 SWAP2 DIV DUP2 AND SWAP2 AND DUP9 PUSH2 0x19E5 JUMP JUMPDEST PUSH1 0x2 DUP3 ADD SLOAD PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP8 SWAP1 MSTORE DUP8 SWAP2 PUSH32 0xBF79CE6FFDA2B262D7C1D31CDE3FBDE100C49885BE80BA25764DC18E0256B54F SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x1094 DUP2 PUSH2 0x16EC JUMP JUMPDEST PUSH2 0x109D DUP3 PUSH2 0x185B JUMP JUMPDEST POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EXTCODESIZE PUSH0 SUB PUSH2 0x10D3 JUMPI PUSH1 0x40 MLOAD PUSH4 0x54B1211F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x7AB JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0xE462DC805CB3FFEB7C059557B4FE0B57A01A6C6CA928941561BAF95E8834EF20 SWAP1 PUSH1 0x20 ADD PUSH2 0x728 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH0 SWAP1 PUSH1 0x1 PUSH1 0xD0 SHL SWAP1 DIV PUSH6 0xFFFFFFFFFFFF AND DUP1 ISZERO ISZERO DUP1 ISZERO PUSH2 0x114B JUMPI POP TIMESTAMP PUSH6 0xFFFFFFFFFFFF DUP3 AND LT JUMPDEST PUSH2 0x1166 JUMPI PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0xD0 SHL SWAP1 DIV PUSH6 0xFFFFFFFFFFFF AND PUSH2 0x1179 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH6 0xFFFFFFFFFFFF AND JUMPDEST SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH0 PUSH2 0x1188 PUSH2 0x11BE JUMP JUMPDEST POP SWAP1 POP CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ PUSH2 0x11B6 JUMPI PUSH1 0x40 MLOAD PUSH4 0x61164011 PUSH1 0xE1 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x7AB JUMP JUMPDEST PUSH2 0x746 PUSH2 0x1B0D JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP2 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 SWAP2 DIV PUSH6 0xFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST DUP2 PUSH2 0x11FD JUMPI PUSH1 0x40 MLOAD PUSH4 0x1FE1E13D PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x948 DUP3 DUP3 PUSH2 0x1BA3 JUMP JUMPDEST PUSH0 PUSH2 0x1211 DUP2 PUSH2 0x16EC JUMP JUMPDEST PUSH2 0x746 PUSH2 0x1BC7 JUMP JUMPDEST PUSH0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1255 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE0A3CFF5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x7AB JUMP JUMPDEST PUSH0 DUP3 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD PUSH2 0x127A SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH2 0x1BD1 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SLOAD PUSH2 0x1294 SWAP1 PUSH0 SWAP1 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1702 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0xA1 SHL PUSH1 0xFF PUSH1 0xA0 SHL NOT DUP3 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x2 DUP3 ADD SLOAD PUSH32 0x0 SWAP2 PUSH2 0x12E9 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP3 AND SWAP1 PUSH2 0x1748 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP5 SWAP1 PUSH32 0xD4AD51F415EBCB45BD9F8DFD5DB6D35F987FDF5EBB909BCC3322990F140BC88E SWAP1 PUSH0 SWAP1 LOG2 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xD505ACCF PUSH1 0xE0 SHL DUP2 MSTORE PUSH32 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0xD505ACCF SWAP1 PUSH2 0x1373 SWAP1 CALLER SWAP1 ADDRESS SWAP1 DUP14 SWAP1 DUP12 SWAP1 DUP12 SWAP1 DUP12 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0x240F JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x138A JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x139B JUMPI POP PUSH1 0x1 JUMPDEST POP PUSH2 0xB0E DUP9 DUP9 DUP9 PUSH2 0x1411 JUMP JUMPDEST PUSH0 PUSH2 0x13B1 DUP2 PUSH2 0x16EC JUMP JUMPDEST PUSH2 0x13BA DUP3 PUSH2 0x185B JUMP JUMPDEST POP PUSH1 0x3 DUP1 SLOAD PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT AND PUSH2 0x100 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x3C864541EF71378C6229510ED90F376565EE42D9C5E0904A984A9E863E6DB44F SWAP1 PUSH1 0x20 ADD PUSH2 0x728 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND DUP1 ISZERO PUSH2 0x1492 JUMPI POP PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0xB23BC7D7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xB23BC7D7 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x146C JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1490 SWAP2 SWAP1 PUSH2 0x2467 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x14B2 JUMPI PUSH1 0x40 MLOAD PUSH4 0x30AC863D PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x7AB JUMP JUMPDEST DUP2 PUSH2 0x14BC DUP2 PUSH2 0x185B JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1500 JUMPI PUSH1 0x40 MLOAD PUSH4 0x94403B7 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x7AB JUMP JUMPDEST PUSH2 0x1508 PUSH2 0x199E JUMP JUMPDEST PUSH2 0x1511 DUP5 PUSH2 0x19C2 JUMP JUMPDEST PUSH32 0x0 PUSH2 0x1547 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND CALLER ADDRESS DUP9 PUSH2 0x19E5 JUMP JUMPDEST PUSH0 PUSH2 0x1553 DUP6 DUP8 DUP7 PUSH2 0x1C16 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH0 ADD MLOAD PUSH32 0x9FDC4F6581C246C961BFA60D4A4D0D0F26A4BC0D47082A0F628BC8C92EA98F4 DUP4 PUSH1 0x80 ADD MLOAD DUP5 PUSH1 0x60 ADD MLOAD DUP6 PUSH1 0xA0 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x15C2 SWAP4 SWAP3 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP JUMP JUMPDEST PUSH0 DUP2 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x160E JUMPI PUSH1 0x40 MLOAD PUSH4 0x52E56FDF PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x7AB JUMP JUMPDEST PUSH0 DUP3 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD PUSH2 0x1633 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH2 0x1BD1 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SLOAD PUSH2 0x164D SWAP1 PUSH0 SWAP1 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1702 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0xA1 SHL PUSH1 0xFF PUSH1 0xA0 SHL NOT DUP3 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x3 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP3 PUSH2 0x1688 SWAP3 DUP5 SWAP3 SWAP2 AND SWAP1 PUSH2 0x1748 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP5 SWAP1 PUSH32 0xAE44E75C55E53FFF935759D2CD72009D85ED130F95829E8AAB2AD776EE29C45 SWAP1 PUSH0 SWAP1 LOG2 POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x7965DB0B PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x6CB JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ PUSH2 0x6CB JUMP JUMPDEST PUSH2 0x746 DUP2 CALLER PUSH2 0x1D04 JUMP JUMPDEST PUSH2 0x1700 PUSH0 PUSH0 PUSH2 0x1D3D JUMP JUMPDEST JUMP JUMPDEST DUP1 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x1714 JUMPI PUSH2 0x1714 PUSH2 0x224C JUMP JUMPDEST DUP3 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x1726 JUMPI PUSH2 0x1726 PUSH2 0x224C JUMP JUMPDEST EQ PUSH2 0x948 JUMPI DUP2 DUP2 PUSH1 0x40 MLOAD PUSH4 0x74104EF PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7AB SWAP3 SWAP2 SWAP1 PUSH2 0x2482 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP3 ADD DUP4 SWAP1 MSTORE PUSH2 0x17A7 SWAP2 DUP6 SWAP2 DUP3 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP2 POP PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x1DFC JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x17C6 DUP2 PUSH2 0x16EC JUMP JUMPDEST PUSH2 0x17D0 DUP4 DUP4 PUSH2 0x1E68 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0x17FF JUMPI PUSH1 0x40 MLOAD PUSH4 0x334BD919 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x17A7 DUP3 DUP3 PUSH2 0x1ECE JUMP JUMPDEST PUSH2 0x1811 PUSH2 0x1F0A JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA CALLER JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1883 JUMPI PUSH1 0x40 MLOAD PUSH4 0xD92E233D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH0 PUSH2 0x1890 PUSH2 0x1121 JUMP JUMPDEST PUSH2 0x1899 TIMESTAMP PUSH2 0x1F2D JUMP JUMPDEST PUSH2 0x18A3 SWAP2 SWAP1 PUSH2 0x24B1 JUMP JUMPDEST SWAP1 POP PUSH2 0x18AF DUP3 DUP3 PUSH2 0x1F5F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH6 0xFFFFFFFFFFFF DUP3 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH32 0x3377DC44241E779DD06AFAB5B788A35CA5F3B778836E2990BDB26A2A4B2E5ED6 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x1903 DUP3 PUSH2 0x1FDC JUMP JUMPDEST PUSH2 0x190C TIMESTAMP PUSH2 0x1F2D JUMP JUMPDEST PUSH2 0x1916 SWAP2 SWAP1 PUSH2 0x24B1 JUMP JUMPDEST SWAP1 POP PUSH2 0x1922 DUP3 DUP3 PUSH2 0x1D3D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH6 0xFFFFFFFFFFFF DUP1 DUP6 AND DUP3 MSTORE DUP4 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0xF1038C18CF84A56E432FDBFAF746924B7EA511DFE03A6506A0CEBA4888788D9B SWAP2 ADD PUSH2 0x728 JUMP JUMPDEST PUSH2 0x1969 PUSH2 0x199E JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0x183E CALLER SWAP1 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1700 JUMPI PUSH1 0x40 MLOAD PUSH4 0xD93C0665 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH0 SUB PUSH2 0x746 JUMPI PUSH1 0x40 MLOAD PUSH4 0x3728B83D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x7AB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 DUP2 AND PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x64 DUP3 ADD DUP4 SWAP1 MSTORE PUSH2 0x17D0 SWAP2 DUP7 SWAP2 DUP3 AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH1 0x84 ADD PUSH2 0x1775 JUMP JUMPDEST PUSH2 0x1A26 PUSH2 0x2125 JUMP JUMPDEST POP PUSH1 0x8 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE DUP3 DUP2 MSTORE CALLER PUSH1 0x20 DUP1 DUP4 ADD SWAP2 DUP3 MSTORE PUSH0 DUP4 DUP6 ADD DUP2 DUP2 MSTORE PUSH1 0x60 DUP6 ADD DUP10 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 DUP2 AND PUSH1 0x80 DUP8 ADD MSTORE PUSH1 0xA0 DUP7 ADD DUP10 SWAP1 MSTORE DUP8 DUP4 MSTORE PUSH1 0x9 SWAP1 SWAP4 MSTORE SWAP5 SWAP1 KECCAK256 DUP4 MLOAD DUP2 SSTORE SWAP2 MLOAD PUSH1 0x1 DUP4 ADD DUP1 SLOAD SWAP2 SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP3 AND DUP2 OR DUP4 SSTORE SWAP5 MLOAD SWAP4 SWAP6 SWAP5 DUP7 SWAP5 SWAP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT AND OR PUSH1 0x1 PUSH1 0xA0 SHL DUP4 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x1ABA JUMPI PUSH2 0x1ABA PUSH2 0x224C JUMP JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x2 DUP3 ADD SSTORE PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0x3 DUP3 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0xA0 SWAP1 SWAP2 ADD MLOAD PUSH1 0x4 SWAP1 SWAP2 ADD SSTORE POP PUSH1 0x8 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH0 PUSH2 0x1B17 PUSH2 0x11BE JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x1B2C DUP2 PUSH6 0xFFFFFFFFFFFF AND ISZERO ISZERO SWAP1 JUMP JUMPDEST ISZERO DUP1 PUSH2 0x1B40 JUMPI POP TIMESTAMP PUSH6 0xFFFFFFFFFFFF DUP3 AND LT ISZERO JUMPDEST ISZERO PUSH2 0x1B68 JUMPI PUSH1 0x40 MLOAD PUSH4 0x19CA5EBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH6 0xFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x7AB JUMP JUMPDEST PUSH2 0x1B83 PUSH0 PUSH2 0x1B7E PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x1ECE JUMP JUMPDEST POP PUSH2 0x1B8E PUSH0 DUP4 PUSH2 0x1E68 JUMP JUMPDEST POP POP PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB NOT AND SWAP1 SSTORE POP JUMP JUMPDEST PUSH0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x1BBD DUP2 PUSH2 0x16EC JUMP JUMPDEST PUSH2 0x17D0 DUP4 DUP4 PUSH2 0x1ECE JUMP JUMPDEST PUSH2 0x1700 PUSH0 PUSH0 PUSH2 0x1F5F JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x948 JUMPI PUSH1 0x40 MLOAD PUSH4 0x95EED105 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x4 DUP4 ADD MSTORE DUP3 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x7AB JUMP JUMPDEST PUSH2 0x1C1E PUSH2 0x2125 JUMP JUMPDEST POP PUSH1 0x6 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE DUP3 DUP2 MSTORE CALLER PUSH1 0x20 DUP1 DUP4 ADD SWAP2 DUP3 MSTORE PUSH0 DUP4 DUP6 ADD DUP2 DUP2 MSTORE PUSH1 0x60 DUP6 ADD DUP10 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 DUP2 AND PUSH1 0x80 DUP8 ADD MSTORE PUSH1 0xA0 DUP7 ADD DUP10 SWAP1 MSTORE DUP8 DUP4 MSTORE PUSH1 0x7 SWAP1 SWAP4 MSTORE SWAP5 SWAP1 KECCAK256 DUP4 MLOAD DUP2 SSTORE SWAP2 MLOAD PUSH1 0x1 DUP4 ADD DUP1 SLOAD SWAP2 SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP3 AND DUP2 OR DUP4 SSTORE SWAP5 MLOAD SWAP4 SWAP6 SWAP5 DUP7 SWAP5 SWAP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT AND OR PUSH1 0x1 PUSH1 0xA0 SHL DUP4 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x1CB2 JUMPI PUSH2 0x1CB2 PUSH2 0x224C JUMP JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x2 DUP3 ADD SSTORE PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0x3 DUP3 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0xA0 SWAP1 SWAP2 ADD MLOAD PUSH1 0x4 SWAP1 SWAP2 ADD SSTORE POP PUSH1 0x6 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1D0E DUP3 DUP3 PUSH2 0xC9B JUMP JUMPDEST PUSH2 0x948 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE2517D3F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x7AB JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0xD0 SHL SWAP1 DIV PUSH6 0xFFFFFFFFFFFF AND DUP1 ISZERO PUSH2 0x1DBF JUMPI TIMESTAMP PUSH6 0xFFFFFFFFFFFF DUP3 AND LT ISZERO PUSH2 0x1D96 JUMPI PUSH1 0x2 SLOAD PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB AND PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 SWAP3 DIV PUSH6 0xFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0xD0 SHL MUL SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x1DBF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x2B1FA2EDAFE6F7B9E97C1A9E0C3660E645BEB2DCAA2D45BDBF9BEAF5472E1EC5 SWAP1 PUSH0 SWAP1 LOG1 JUMPDEST POP PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0xA0 SHL PUSH6 0xFFFFFFFFFFFF SWAP5 DUP6 AND MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB AND OR PUSH1 0x1 PUSH1 0xD0 SHL SWAP3 SWAP1 SWAP4 AND SWAP2 SWAP1 SWAP2 MUL SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH0 PUSH0 PUSH1 0x20 PUSH0 DUP5 MLOAD PUSH1 0x20 DUP7 ADD PUSH0 DUP9 GAS CALL DUP1 PUSH2 0x1E1B JUMPI PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY RETURNDATASIZE DUP2 REVERT JUMPDEST POP POP PUSH0 MLOAD RETURNDATASIZE SWAP2 POP DUP2 ISZERO PUSH2 0x1E32 JUMPI DUP1 PUSH1 0x1 EQ ISZERO PUSH2 0x1E3F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO JUMPDEST ISZERO PUSH2 0x17D0 JUMPI PUSH1 0x40 MLOAD PUSH4 0x5274AFE7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x7AB JUMP JUMPDEST PUSH0 DUP3 PUSH2 0x1EC4 JUMPI PUSH0 PUSH2 0x1E81 PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1EA8 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1FE1E13D PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND OR SWAP1 SSTORE JUMPDEST PUSH2 0x1B06 DUP4 DUP4 PUSH2 0x202D JUMP JUMPDEST PUSH0 DUP3 ISZERO DUP1 ISZERO PUSH2 0x1EEA JUMPI POP PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 AND EQ JUMPDEST ISZERO PUSH2 0x1F00 JUMPI PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE JUMPDEST PUSH2 0x1B06 DUP4 DUP4 PUSH2 0x20BC JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0xFF AND PUSH2 0x1700 JUMPI PUSH1 0x40 MLOAD PUSH4 0x8DFC202B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH6 0xFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1883 JUMPI PUSH1 0x40 MLOAD PUSH4 0x6DFCC65 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x30 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x7AB JUMP JUMPDEST PUSH0 PUSH2 0x1F68 PUSH2 0x11BE JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH6 0xFFFFFFFFFFFF DUP7 AND PUSH1 0x1 PUSH1 0xA0 SHL MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB NOT SWAP1 SWAP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND OR OR SWAP1 SSTORE SWAP2 POP PUSH2 0x1FAA SWAP1 POP DUP2 PUSH6 0xFFFFFFFFFFFF AND ISZERO ISZERO SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x17A7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8886EBFC4259ABDBC16601DD8FB5678E54878F47B3C34836CFC51154A9605109 SWAP1 PUSH0 SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH0 PUSH0 PUSH2 0x1FE6 PUSH2 0x1121 JUMP JUMPDEST SWAP1 POP DUP1 PUSH6 0xFFFFFFFFFFFF AND DUP4 PUSH6 0xFFFFFFFFFFFF AND GT PUSH2 0x200E JUMPI PUSH2 0x2009 DUP4 DUP3 PUSH2 0x24CF JUMP JUMPDEST PUSH2 0x1B06 JUMP JUMPDEST PUSH2 0x1B06 PUSH6 0xFFFFFFFFFFFF DUP5 AND PUSH3 0x69780 PUSH0 DUP3 DUP3 XOR DUP3 DUP5 LT MUL DUP3 XOR PUSH2 0x1B06 JUMP JUMPDEST PUSH0 PUSH2 0x2038 DUP4 DUP4 PUSH2 0xC9B JUMP JUMPDEST PUSH2 0x20B5 JUMPI PUSH0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x206D CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP PUSH1 0x1 PUSH2 0x6CB JUMP JUMPDEST POP PUSH0 PUSH2 0x6CB JUMP JUMPDEST PUSH0 PUSH2 0x20C7 DUP4 DUP4 PUSH2 0xC9B JUMP JUMPDEST ISZERO PUSH2 0x20B5 JUMPI PUSH0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP7 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 POP PUSH1 0x1 PUSH2 0x6CB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE PUSH0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP1 SWAP2 DUP3 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2170 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x1B06 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x746 JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x21A4 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1B06 DUP2 PUSH2 0x2187 JUMP JUMPDEST PUSH0 PUSH0 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x21C1 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP POP DUP2 CALLDATALOAD SWAP4 PUSH1 0x20 DUP4 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 SWAP1 SWAP3 ADD CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x21E8 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x746 JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH0 PUSH0 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2214 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x2226 DUP2 PUSH2 0x21EF JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2241 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1B06 DUP2 PUSH2 0x21EF JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x3 DUP2 LT PUSH2 0x227C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP1 MSTORE JUMP JUMPDEST DUP7 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0xC0 DUP2 ADD PUSH2 0x22A3 PUSH1 0x40 DUP4 ADD DUP8 PUSH2 0x2260 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 SWAP1 SWAP2 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x22D9 JUMPI PUSH0 PUSH0 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH0 PUSH0 PUSH0 PUSH0 PUSH0 PUSH0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x22F4 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP8 CALLDATALOAD PUSH2 0x22FF DUP2 PUSH2 0x21EF JUMP JUMPDEST SWAP7 POP PUSH1 0x20 DUP9 ADD CALLDATALOAD SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP4 POP PUSH2 0x2322 PUSH1 0x80 DUP10 ADD PUSH2 0x22C9 JUMP JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 PUSH1 0xA0 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0xC0 SWAP1 SWAP4 ADD CALLDATALOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x234F JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH6 0xFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1B06 JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH0 PUSH0 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2376 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x2381 DUP2 PUSH2 0x21EF JUMP JUMPDEST SWAP6 PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP6 POP PUSH1 0x40 SWAP1 SWAP5 ADD CALLDATALOAD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH0 PUSH0 PUSH0 PUSH0 PUSH0 PUSH0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x23AC JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP8 CALLDATALOAD SWAP7 POP PUSH1 0x20 DUP9 ADD CALLDATALOAD PUSH2 0x23BE DUP2 PUSH2 0x21EF JUMP JUMPDEST SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP4 POP PUSH2 0x2322 PUSH1 0x80 DUP10 ADD PUSH2 0x22C9 JUMP JUMPDEST PUSH0 PUSH0 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x23EC JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x23FE DUP2 PUSH2 0x21EF JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP8 DUP9 AND DUP2 MSTORE SWAP6 SWAP1 SWAP7 AND PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x40 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x60 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xFF AND PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xE0 ADD SWAP1 JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2460 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2477 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1B06 DUP2 PUSH2 0x2187 JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0x2490 DUP3 DUP6 PUSH2 0x2260 JUMP JUMPDEST PUSH2 0x1B06 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2260 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH6 0xFFFFFFFFFFFF DUP2 DUP2 AND DUP4 DUP3 AND ADD SWAP1 DUP2 GT ISZERO PUSH2 0x6CB JUMPI PUSH2 0x6CB PUSH2 0x249D JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF DUP3 DUP2 AND DUP3 DUP3 AND SUB SWAP1 DUP2 GT ISZERO PUSH2 0x6CB JUMPI PUSH2 0x6CB PUSH2 0x249D JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP2 PUSH10 0xA4BB078C4A4611F31B7C PUSH2 0x90DD JUMPDEST LOG0 PUSH12 0x88A77F654C0C16AFBEDD604D SUB PUSH20 0x64736F6C634300081C0033000000000000000000 STOP STOP STOP PUSH18 0x9709ECFA91A80626FF3989D68F67F5B1DD1 0x2D MSTORE8 PUSH6 0x7474696E6720 MSTORE8 GASLIMIT MSTORE JUMP BLOBHASH NUMBER GASLIMIT PUSH0 MSTORE 0x4F 0x4C GASLIMIT KECCAK256 PUSH2 0x6464 PUSH19 0x657373206F6E2052657175657374734D616E61 PUSH8 0x65722E2E2E536574 PUSH21 0x696E6720534552564943455F524F4C452061646472 PUSH6 0x7373206F6E20 0x25 PUSH20 0x2E2E2E507269636553746F72616765202870726F PUSH25 0x7929206465706C6F79656420746F2025734164647265737365 PUSH20 0x57686974656C697374206465706C6F7965642074 PUSH16 0x20257353657474696E67205345525649 NUMBER GASLIMIT PUSH0 MSTORE 0x4F 0x4C GASLIMIT KECCAK256 PUSH2 0x6464 PUSH19 0x657373206F6E20507269636553746F72616765 0x2E 0x2E 0x2E LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x1F 0xC2 INVALID MCOPY TSTORE 0x2C DIV 0xFC COINBASE PUSH2 0xCE55 0xF9 0x29 PUSH13 0x716F46A74D556894603B42FB7B SWAP12 0xC7 TLOAD CALLDATALOAD PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"3126:44:2:-:0;;;-1:-1:-1;;849:28:1;;;;;922:31:74;422:3689;922:31;;422:3689;922:31;;;-1:-1:-1;;;922:31:74;;;;;;;;:::i;:::-;-1:-1:-1;957:30:74;;;;;;;;;;;;-1:-1:-1;;;957:30:74;;;;;;;;;;:::i;:::-;-1:-1:-1;1038:9:74;992:55;;1103:9;1057:55;;1124:71;;;-1:-1:-1;;;;;;1124:71:74;;;1153:42;1124:71;;;;1233:64;;;;;1255:42;1233:64;;;1310:79;;;;;1347:42;1310:79;;;;;;1406:80;;;;;;;;;422:3689;;;;;;;;;;;;14:127:83;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:380;225:1;221:12;;;;268;;;289:61;;343:4;335:6;331:17;321:27;;289:61;396:2;388:6;385:14;365:18;362:38;359:161;;442:10;437:3;433:20;430:1;423:31;477:4;474:1;467:15;505:4;502:1;495:15;359:161;;146:380;;;:::o;657:518::-;759:2;754:3;751:11;748:421;;;795:5;792:1;785:16;839:4;836:1;826:18;909:2;897:10;893:19;890:1;886:27;880:4;876:38;945:4;933:10;930:20;927:47;;;-1:-1:-1;968:4:83;927:47;1023:2;1018:3;1014:12;1011:1;1007:20;1001:4;997:31;987:41;;1078:81;1096:2;1089:5;1086:13;1078:81;;;1155:1;1141:16;;1122:1;1111:13;1078:81;;;1082:3;;748:421;657:518;;;:::o;1351:1299::-;1471:10;;-1:-1:-1;;;;;1493:30:83;;1490:56;;;1526:18;;:::i;:::-;1555:97;1645:6;1605:38;1637:4;1631:11;1605:38;:::i;:::-;1599:4;1555:97;:::i;:::-;1701:4;1732:2;1721:14;;1749:1;1744:649;;;;2437:1;2454:6;2451:89;;;-1:-1:-1;2506:19:83;;;2500:26;2451:89;-1:-1:-1;;1308:1:83;1304:11;;;1300:24;1296:29;1286:40;1332:1;1328:11;;;1283:57;2553:81;;1714:930;;1744:649;604:1;597:14;;;641:4;628:18;;-1:-1:-1;;1780:20:83;;;1898:222;1912:7;1909:1;1906:14;1898:222;;;1994:19;;;1988:26;1973:42;;2101:4;2086:20;;;;2054:1;2042:14;;;;1928:12;1898:222;;;1902:3;2148:6;2139:7;2136:19;2133:201;;;2209:19;;;2203:26;-1:-1:-1;;2292:1:83;2288:14;;;2304:3;2284:24;2280:37;2276:42;2261:58;2246:74;;2133:201;-1:-1:-1;;;;2380:1:83;2364:14;;;2360:22;2347:36;;-1:-1:-1;1351:1299:83:o;:::-;422:3689:74;;;;;;","generatedSources":[{"ast":{"nativeSrc":"0:2652:83","nodeType":"YulBlock","src":"0:2652:83","statements":[{"nativeSrc":"6:3:83","nodeType":"YulBlock","src":"6:3:83","statements":[]},{"body":{"nativeSrc":"46:95:83","nodeType":"YulBlock","src":"46:95:83","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"63:1:83","nodeType":"YulLiteral","src":"63:1:83","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"70:3:83","nodeType":"YulLiteral","src":"70:3:83","type":"","value":"224"},{"kind":"number","nativeSrc":"75:10:83","nodeType":"YulLiteral","src":"75:10:83","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"66:3:83","nodeType":"YulIdentifier","src":"66:3:83"},"nativeSrc":"66:20:83","nodeType":"YulFunctionCall","src":"66:20:83"}],"functionName":{"name":"mstore","nativeSrc":"56:6:83","nodeType":"YulIdentifier","src":"56:6:83"},"nativeSrc":"56:31:83","nodeType":"YulFunctionCall","src":"56:31:83"},"nativeSrc":"56:31:83","nodeType":"YulExpressionStatement","src":"56:31:83"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"103:1:83","nodeType":"YulLiteral","src":"103:1:83","type":"","value":"4"},{"kind":"number","nativeSrc":"106:4:83","nodeType":"YulLiteral","src":"106:4:83","type":"","value":"0x41"}],"functionName":{"name":"mstore","nativeSrc":"96:6:83","nodeType":"YulIdentifier","src":"96:6:83"},"nativeSrc":"96:15:83","nodeType":"YulFunctionCall","src":"96:15:83"},"nativeSrc":"96:15:83","nodeType":"YulExpressionStatement","src":"96:15:83"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"127:1:83","nodeType":"YulLiteral","src":"127:1:83","type":"","value":"0"},{"kind":"number","nativeSrc":"130:4:83","nodeType":"YulLiteral","src":"130:4:83","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"120:6:83","nodeType":"YulIdentifier","src":"120:6:83"},"nativeSrc":"120:15:83","nodeType":"YulFunctionCall","src":"120:15:83"},"nativeSrc":"120:15:83","nodeType":"YulExpressionStatement","src":"120:15:83"}]},"name":"panic_error_0x41","nativeSrc":"14:127:83","nodeType":"YulFunctionDefinition","src":"14:127:83"},{"body":{"nativeSrc":"201:325:83","nodeType":"YulBlock","src":"201:325:83","statements":[{"nativeSrc":"211:22:83","nodeType":"YulAssignment","src":"211:22:83","value":{"arguments":[{"kind":"number","nativeSrc":"225:1:83","nodeType":"YulLiteral","src":"225:1:83","type":"","value":"1"},{"name":"data","nativeSrc":"228:4:83","nodeType":"YulIdentifier","src":"228:4:83"}],"functionName":{"name":"shr","nativeSrc":"221:3:83","nodeType":"YulIdentifier","src":"221:3:83"},"nativeSrc":"221:12:83","nodeType":"YulFunctionCall","src":"221:12:83"},"variableNames":[{"name":"length","nativeSrc":"211:6:83","nodeType":"YulIdentifier","src":"211:6:83"}]},{"nativeSrc":"242:38:83","nodeType":"YulVariableDeclaration","src":"242:38:83","value":{"arguments":[{"name":"data","nativeSrc":"272:4:83","nodeType":"YulIdentifier","src":"272:4:83"},{"kind":"number","nativeSrc":"278:1:83","nodeType":"YulLiteral","src":"278:1:83","type":"","value":"1"}],"functionName":{"name":"and","nativeSrc":"268:3:83","nodeType":"YulIdentifier","src":"268:3:83"},"nativeSrc":"268:12:83","nodeType":"YulFunctionCall","src":"268:12:83"},"variables":[{"name":"outOfPlaceEncoding","nativeSrc":"246:18:83","nodeType":"YulTypedName","src":"246:18:83","type":""}]},{"body":{"nativeSrc":"319:31:83","nodeType":"YulBlock","src":"319:31:83","statements":[{"nativeSrc":"321:27:83","nodeType":"YulAssignment","src":"321:27:83","value":{"arguments":[{"name":"length","nativeSrc":"335:6:83","nodeType":"YulIdentifier","src":"335:6:83"},{"kind":"number","nativeSrc":"343:4:83","nodeType":"YulLiteral","src":"343:4:83","type":"","value":"0x7f"}],"functionName":{"name":"and","nativeSrc":"331:3:83","nodeType":"YulIdentifier","src":"331:3:83"},"nativeSrc":"331:17:83","nodeType":"YulFunctionCall","src":"331:17:83"},"variableNames":[{"name":"length","nativeSrc":"321:6:83","nodeType":"YulIdentifier","src":"321:6:83"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"299:18:83","nodeType":"YulIdentifier","src":"299:18:83"}],"functionName":{"name":"iszero","nativeSrc":"292:6:83","nodeType":"YulIdentifier","src":"292:6:83"},"nativeSrc":"292:26:83","nodeType":"YulFunctionCall","src":"292:26:83"},"nativeSrc":"289:61:83","nodeType":"YulIf","src":"289:61:83"},{"body":{"nativeSrc":"409:111:83","nodeType":"YulBlock","src":"409:111:83","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"430:1:83","nodeType":"YulLiteral","src":"430:1:83","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"437:3:83","nodeType":"YulLiteral","src":"437:3:83","type":"","value":"224"},{"kind":"number","nativeSrc":"442:10:83","nodeType":"YulLiteral","src":"442:10:83","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"433:3:83","nodeType":"YulIdentifier","src":"433:3:83"},"nativeSrc":"433:20:83","nodeType":"YulFunctionCall","src":"433:20:83"}],"functionName":{"name":"mstore","nativeSrc":"423:6:83","nodeType":"YulIdentifier","src":"423:6:83"},"nativeSrc":"423:31:83","nodeType":"YulFunctionCall","src":"423:31:83"},"nativeSrc":"423:31:83","nodeType":"YulExpressionStatement","src":"423:31:83"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"474:1:83","nodeType":"YulLiteral","src":"474:1:83","type":"","value":"4"},{"kind":"number","nativeSrc":"477:4:83","nodeType":"YulLiteral","src":"477:4:83","type":"","value":"0x22"}],"functionName":{"name":"mstore","nativeSrc":"467:6:83","nodeType":"YulIdentifier","src":"467:6:83"},"nativeSrc":"467:15:83","nodeType":"YulFunctionCall","src":"467:15:83"},"nativeSrc":"467:15:83","nodeType":"YulExpressionStatement","src":"467:15:83"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"502:1:83","nodeType":"YulLiteral","src":"502:1:83","type":"","value":"0"},{"kind":"number","nativeSrc":"505:4:83","nodeType":"YulLiteral","src":"505:4:83","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"495:6:83","nodeType":"YulIdentifier","src":"495:6:83"},"nativeSrc":"495:15:83","nodeType":"YulFunctionCall","src":"495:15:83"},"nativeSrc":"495:15:83","nodeType":"YulExpressionStatement","src":"495:15:83"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"365:18:83","nodeType":"YulIdentifier","src":"365:18:83"},{"arguments":[{"name":"length","nativeSrc":"388:6:83","nodeType":"YulIdentifier","src":"388:6:83"},{"kind":"number","nativeSrc":"396:2:83","nodeType":"YulLiteral","src":"396:2:83","type":"","value":"32"}],"functionName":{"name":"lt","nativeSrc":"385:2:83","nodeType":"YulIdentifier","src":"385:2:83"},"nativeSrc":"385:14:83","nodeType":"YulFunctionCall","src":"385:14:83"}],"functionName":{"name":"eq","nativeSrc":"362:2:83","nodeType":"YulIdentifier","src":"362:2:83"},"nativeSrc":"362:38:83","nodeType":"YulFunctionCall","src":"362:38:83"},"nativeSrc":"359:161:83","nodeType":"YulIf","src":"359:161:83"}]},"name":"extract_byte_array_length","nativeSrc":"146:380:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"181:4:83","nodeType":"YulTypedName","src":"181:4:83","type":""}],"returnVariables":[{"name":"length","nativeSrc":"190:6:83","nodeType":"YulTypedName","src":"190:6:83","type":""}],"src":"146:380:83"},{"body":{"nativeSrc":"587:65:83","nodeType":"YulBlock","src":"587:65:83","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"604:1:83","nodeType":"YulLiteral","src":"604:1:83","type":"","value":"0"},{"name":"ptr","nativeSrc":"607:3:83","nodeType":"YulIdentifier","src":"607:3:83"}],"functionName":{"name":"mstore","nativeSrc":"597:6:83","nodeType":"YulIdentifier","src":"597:6:83"},"nativeSrc":"597:14:83","nodeType":"YulFunctionCall","src":"597:14:83"},"nativeSrc":"597:14:83","nodeType":"YulExpressionStatement","src":"597:14:83"},{"nativeSrc":"620:26:83","nodeType":"YulAssignment","src":"620:26:83","value":{"arguments":[{"kind":"number","nativeSrc":"638:1:83","nodeType":"YulLiteral","src":"638:1:83","type":"","value":"0"},{"kind":"number","nativeSrc":"641:4:83","nodeType":"YulLiteral","src":"641:4:83","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nativeSrc":"628:9:83","nodeType":"YulIdentifier","src":"628:9:83"},"nativeSrc":"628:18:83","nodeType":"YulFunctionCall","src":"628:18:83"},"variableNames":[{"name":"data","nativeSrc":"620:4:83","nodeType":"YulIdentifier","src":"620:4:83"}]}]},"name":"array_dataslot_string_storage","nativeSrc":"531:121:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nativeSrc":"570:3:83","nodeType":"YulTypedName","src":"570:3:83","type":""}],"returnVariables":[{"name":"data","nativeSrc":"578:4:83","nodeType":"YulTypedName","src":"578:4:83","type":""}],"src":"531:121:83"},{"body":{"nativeSrc":"738:437:83","nodeType":"YulBlock","src":"738:437:83","statements":[{"body":{"nativeSrc":"771:398:83","nodeType":"YulBlock","src":"771:398:83","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"792:1:83","nodeType":"YulLiteral","src":"792:1:83","type":"","value":"0"},{"name":"array","nativeSrc":"795:5:83","nodeType":"YulIdentifier","src":"795:5:83"}],"functionName":{"name":"mstore","nativeSrc":"785:6:83","nodeType":"YulIdentifier","src":"785:6:83"},"nativeSrc":"785:16:83","nodeType":"YulFunctionCall","src":"785:16:83"},"nativeSrc":"785:16:83","nodeType":"YulExpressionStatement","src":"785:16:83"},{"nativeSrc":"814:30:83","nodeType":"YulVariableDeclaration","src":"814:30:83","value":{"arguments":[{"kind":"number","nativeSrc":"836:1:83","nodeType":"YulLiteral","src":"836:1:83","type":"","value":"0"},{"kind":"number","nativeSrc":"839:4:83","nodeType":"YulLiteral","src":"839:4:83","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nativeSrc":"826:9:83","nodeType":"YulIdentifier","src":"826:9:83"},"nativeSrc":"826:18:83","nodeType":"YulFunctionCall","src":"826:18:83"},"variables":[{"name":"data","nativeSrc":"818:4:83","nodeType":"YulTypedName","src":"818:4:83","type":""}]},{"nativeSrc":"857:57:83","nodeType":"YulVariableDeclaration","src":"857:57:83","value":{"arguments":[{"name":"data","nativeSrc":"880:4:83","nodeType":"YulIdentifier","src":"880:4:83"},{"arguments":[{"kind":"number","nativeSrc":"890:1:83","nodeType":"YulLiteral","src":"890:1:83","type":"","value":"5"},{"arguments":[{"name":"startIndex","nativeSrc":"897:10:83","nodeType":"YulIdentifier","src":"897:10:83"},{"kind":"number","nativeSrc":"909:2:83","nodeType":"YulLiteral","src":"909:2:83","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"893:3:83","nodeType":"YulIdentifier","src":"893:3:83"},"nativeSrc":"893:19:83","nodeType":"YulFunctionCall","src":"893:19:83"}],"functionName":{"name":"shr","nativeSrc":"886:3:83","nodeType":"YulIdentifier","src":"886:3:83"},"nativeSrc":"886:27:83","nodeType":"YulFunctionCall","src":"886:27:83"}],"functionName":{"name":"add","nativeSrc":"876:3:83","nodeType":"YulIdentifier","src":"876:3:83"},"nativeSrc":"876:38:83","nodeType":"YulFunctionCall","src":"876:38:83"},"variables":[{"name":"deleteStart","nativeSrc":"861:11:83","nodeType":"YulTypedName","src":"861:11:83","type":""}]},{"body":{"nativeSrc":"951:23:83","nodeType":"YulBlock","src":"951:23:83","statements":[{"nativeSrc":"953:19:83","nodeType":"YulAssignment","src":"953:19:83","value":{"name":"data","nativeSrc":"968:4:83","nodeType":"YulIdentifier","src":"968:4:83"},"variableNames":[{"name":"deleteStart","nativeSrc":"953:11:83","nodeType":"YulIdentifier","src":"953:11:83"}]}]},"condition":{"arguments":[{"name":"startIndex","nativeSrc":"933:10:83","nodeType":"YulIdentifier","src":"933:10:83"},{"kind":"number","nativeSrc":"945:4:83","nodeType":"YulLiteral","src":"945:4:83","type":"","value":"0x20"}],"functionName":{"name":"lt","nativeSrc":"930:2:83","nodeType":"YulIdentifier","src":"930:2:83"},"nativeSrc":"930:20:83","nodeType":"YulFunctionCall","src":"930:20:83"},"nativeSrc":"927:47:83","nodeType":"YulIf","src":"927:47:83"},{"nativeSrc":"987:41:83","nodeType":"YulVariableDeclaration","src":"987:41:83","value":{"arguments":[{"name":"data","nativeSrc":"1001:4:83","nodeType":"YulIdentifier","src":"1001:4:83"},{"arguments":[{"kind":"number","nativeSrc":"1011:1:83","nodeType":"YulLiteral","src":"1011:1:83","type":"","value":"5"},{"arguments":[{"name":"len","nativeSrc":"1018:3:83","nodeType":"YulIdentifier","src":"1018:3:83"},{"kind":"number","nativeSrc":"1023:2:83","nodeType":"YulLiteral","src":"1023:2:83","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"1014:3:83","nodeType":"YulIdentifier","src":"1014:3:83"},"nativeSrc":"1014:12:83","nodeType":"YulFunctionCall","src":"1014:12:83"}],"functionName":{"name":"shr","nativeSrc":"1007:3:83","nodeType":"YulIdentifier","src":"1007:3:83"},"nativeSrc":"1007:20:83","nodeType":"YulFunctionCall","src":"1007:20:83"}],"functionName":{"name":"add","nativeSrc":"997:3:83","nodeType":"YulIdentifier","src":"997:3:83"},"nativeSrc":"997:31:83","nodeType":"YulFunctionCall","src":"997:31:83"},"variables":[{"name":"_1","nativeSrc":"991:2:83","nodeType":"YulTypedName","src":"991:2:83","type":""}]},{"nativeSrc":"1041:24:83","nodeType":"YulVariableDeclaration","src":"1041:24:83","value":{"name":"deleteStart","nativeSrc":"1054:11:83","nodeType":"YulIdentifier","src":"1054:11:83"},"variables":[{"name":"start","nativeSrc":"1045:5:83","nodeType":"YulTypedName","src":"1045:5:83","type":""}]},{"body":{"nativeSrc":"1139:20:83","nodeType":"YulBlock","src":"1139:20:83","statements":[{"expression":{"arguments":[{"name":"start","nativeSrc":"1148:5:83","nodeType":"YulIdentifier","src":"1148:5:83"},{"kind":"number","nativeSrc":"1155:1:83","nodeType":"YulLiteral","src":"1155:1:83","type":"","value":"0"}],"functionName":{"name":"sstore","nativeSrc":"1141:6:83","nodeType":"YulIdentifier","src":"1141:6:83"},"nativeSrc":"1141:16:83","nodeType":"YulFunctionCall","src":"1141:16:83"},"nativeSrc":"1141:16:83","nodeType":"YulExpressionStatement","src":"1141:16:83"}]},"condition":{"arguments":[{"name":"start","nativeSrc":"1089:5:83","nodeType":"YulIdentifier","src":"1089:5:83"},{"name":"_1","nativeSrc":"1096:2:83","nodeType":"YulIdentifier","src":"1096:2:83"}],"functionName":{"name":"lt","nativeSrc":"1086:2:83","nodeType":"YulIdentifier","src":"1086:2:83"},"nativeSrc":"1086:13:83","nodeType":"YulFunctionCall","src":"1086:13:83"},"nativeSrc":"1078:81:83","nodeType":"YulForLoop","post":{"nativeSrc":"1100:26:83","nodeType":"YulBlock","src":"1100:26:83","statements":[{"nativeSrc":"1102:22:83","nodeType":"YulAssignment","src":"1102:22:83","value":{"arguments":[{"name":"start","nativeSrc":"1115:5:83","nodeType":"YulIdentifier","src":"1115:5:83"},{"kind":"number","nativeSrc":"1122:1:83","nodeType":"YulLiteral","src":"1122:1:83","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"1111:3:83","nodeType":"YulIdentifier","src":"1111:3:83"},"nativeSrc":"1111:13:83","nodeType":"YulFunctionCall","src":"1111:13:83"},"variableNames":[{"name":"start","nativeSrc":"1102:5:83","nodeType":"YulIdentifier","src":"1102:5:83"}]}]},"pre":{"nativeSrc":"1082:3:83","nodeType":"YulBlock","src":"1082:3:83","statements":[]},"src":"1078:81:83"}]},"condition":{"arguments":[{"name":"len","nativeSrc":"754:3:83","nodeType":"YulIdentifier","src":"754:3:83"},{"kind":"number","nativeSrc":"759:2:83","nodeType":"YulLiteral","src":"759:2:83","type":"","value":"31"}],"functionName":{"name":"gt","nativeSrc":"751:2:83","nodeType":"YulIdentifier","src":"751:2:83"},"nativeSrc":"751:11:83","nodeType":"YulFunctionCall","src":"751:11:83"},"nativeSrc":"748:421:83","nodeType":"YulIf","src":"748:421:83"}]},"name":"clean_up_bytearray_end_slots_string_storage","nativeSrc":"657:518:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nativeSrc":"710:5:83","nodeType":"YulTypedName","src":"710:5:83","type":""},{"name":"len","nativeSrc":"717:3:83","nodeType":"YulTypedName","src":"717:3:83","type":""},{"name":"startIndex","nativeSrc":"722:10:83","nodeType":"YulTypedName","src":"722:10:83","type":""}],"src":"657:518:83"},{"body":{"nativeSrc":"1265:81:83","nodeType":"YulBlock","src":"1265:81:83","statements":[{"nativeSrc":"1275:65:83","nodeType":"YulAssignment","src":"1275:65:83","value":{"arguments":[{"arguments":[{"name":"data","nativeSrc":"1290:4:83","nodeType":"YulIdentifier","src":"1290:4:83"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"1308:1:83","nodeType":"YulLiteral","src":"1308:1:83","type":"","value":"3"},{"name":"len","nativeSrc":"1311:3:83","nodeType":"YulIdentifier","src":"1311:3:83"}],"functionName":{"name":"shl","nativeSrc":"1304:3:83","nodeType":"YulIdentifier","src":"1304:3:83"},"nativeSrc":"1304:11:83","nodeType":"YulFunctionCall","src":"1304:11:83"},{"arguments":[{"kind":"number","nativeSrc":"1321:1:83","nodeType":"YulLiteral","src":"1321:1:83","type":"","value":"0"}],"functionName":{"name":"not","nativeSrc":"1317:3:83","nodeType":"YulIdentifier","src":"1317:3:83"},"nativeSrc":"1317:6:83","nodeType":"YulFunctionCall","src":"1317:6:83"}],"functionName":{"name":"shr","nativeSrc":"1300:3:83","nodeType":"YulIdentifier","src":"1300:3:83"},"nativeSrc":"1300:24:83","nodeType":"YulFunctionCall","src":"1300:24:83"}],"functionName":{"name":"not","nativeSrc":"1296:3:83","nodeType":"YulIdentifier","src":"1296:3:83"},"nativeSrc":"1296:29:83","nodeType":"YulFunctionCall","src":"1296:29:83"}],"functionName":{"name":"and","nativeSrc":"1286:3:83","nodeType":"YulIdentifier","src":"1286:3:83"},"nativeSrc":"1286:40:83","nodeType":"YulFunctionCall","src":"1286:40:83"},{"arguments":[{"kind":"number","nativeSrc":"1332:1:83","nodeType":"YulLiteral","src":"1332:1:83","type":"","value":"1"},{"name":"len","nativeSrc":"1335:3:83","nodeType":"YulIdentifier","src":"1335:3:83"}],"functionName":{"name":"shl","nativeSrc":"1328:3:83","nodeType":"YulIdentifier","src":"1328:3:83"},"nativeSrc":"1328:11:83","nodeType":"YulFunctionCall","src":"1328:11:83"}],"functionName":{"name":"or","nativeSrc":"1283:2:83","nodeType":"YulIdentifier","src":"1283:2:83"},"nativeSrc":"1283:57:83","nodeType":"YulFunctionCall","src":"1283:57:83"},"variableNames":[{"name":"used","nativeSrc":"1275:4:83","nodeType":"YulIdentifier","src":"1275:4:83"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nativeSrc":"1180:166:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"1242:4:83","nodeType":"YulTypedName","src":"1242:4:83","type":""},{"name":"len","nativeSrc":"1248:3:83","nodeType":"YulTypedName","src":"1248:3:83","type":""}],"returnVariables":[{"name":"used","nativeSrc":"1256:4:83","nodeType":"YulTypedName","src":"1256:4:83","type":""}],"src":"1180:166:83"},{"body":{"nativeSrc":"1447:1203:83","nodeType":"YulBlock","src":"1447:1203:83","statements":[{"nativeSrc":"1457:24:83","nodeType":"YulVariableDeclaration","src":"1457:24:83","value":{"arguments":[{"name":"src","nativeSrc":"1477:3:83","nodeType":"YulIdentifier","src":"1477:3:83"}],"functionName":{"name":"mload","nativeSrc":"1471:5:83","nodeType":"YulIdentifier","src":"1471:5:83"},"nativeSrc":"1471:10:83","nodeType":"YulFunctionCall","src":"1471:10:83"},"variables":[{"name":"newLen","nativeSrc":"1461:6:83","nodeType":"YulTypedName","src":"1461:6:83","type":""}]},{"body":{"nativeSrc":"1524:22:83","nodeType":"YulBlock","src":"1524:22:83","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"1526:16:83","nodeType":"YulIdentifier","src":"1526:16:83"},"nativeSrc":"1526:18:83","nodeType":"YulFunctionCall","src":"1526:18:83"},"nativeSrc":"1526:18:83","nodeType":"YulExpressionStatement","src":"1526:18:83"}]},"condition":{"arguments":[{"name":"newLen","nativeSrc":"1496:6:83","nodeType":"YulIdentifier","src":"1496:6:83"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"1512:2:83","nodeType":"YulLiteral","src":"1512:2:83","type":"","value":"64"},{"kind":"number","nativeSrc":"1516:1:83","nodeType":"YulLiteral","src":"1516:1:83","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"1508:3:83","nodeType":"YulIdentifier","src":"1508:3:83"},"nativeSrc":"1508:10:83","nodeType":"YulFunctionCall","src":"1508:10:83"},{"kind":"number","nativeSrc":"1520:1:83","nodeType":"YulLiteral","src":"1520:1:83","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"1504:3:83","nodeType":"YulIdentifier","src":"1504:3:83"},"nativeSrc":"1504:18:83","nodeType":"YulFunctionCall","src":"1504:18:83"}],"functionName":{"name":"gt","nativeSrc":"1493:2:83","nodeType":"YulIdentifier","src":"1493:2:83"},"nativeSrc":"1493:30:83","nodeType":"YulFunctionCall","src":"1493:30:83"},"nativeSrc":"1490:56:83","nodeType":"YulIf","src":"1490:56:83"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"1599:4:83","nodeType":"YulIdentifier","src":"1599:4:83"},{"arguments":[{"arguments":[{"name":"slot","nativeSrc":"1637:4:83","nodeType":"YulIdentifier","src":"1637:4:83"}],"functionName":{"name":"sload","nativeSrc":"1631:5:83","nodeType":"YulIdentifier","src":"1631:5:83"},"nativeSrc":"1631:11:83","nodeType":"YulFunctionCall","src":"1631:11:83"}],"functionName":{"name":"extract_byte_array_length","nativeSrc":"1605:25:83","nodeType":"YulIdentifier","src":"1605:25:83"},"nativeSrc":"1605:38:83","nodeType":"YulFunctionCall","src":"1605:38:83"},{"name":"newLen","nativeSrc":"1645:6:83","nodeType":"YulIdentifier","src":"1645:6:83"}],"functionName":{"name":"clean_up_bytearray_end_slots_string_storage","nativeSrc":"1555:43:83","nodeType":"YulIdentifier","src":"1555:43:83"},"nativeSrc":"1555:97:83","nodeType":"YulFunctionCall","src":"1555:97:83"},"nativeSrc":"1555:97:83","nodeType":"YulExpressionStatement","src":"1555:97:83"},{"nativeSrc":"1661:18:83","nodeType":"YulVariableDeclaration","src":"1661:18:83","value":{"kind":"number","nativeSrc":"1678:1:83","nodeType":"YulLiteral","src":"1678:1:83","type":"","value":"0"},"variables":[{"name":"srcOffset","nativeSrc":"1665:9:83","nodeType":"YulTypedName","src":"1665:9:83","type":""}]},{"nativeSrc":"1688:17:83","nodeType":"YulAssignment","src":"1688:17:83","value":{"kind":"number","nativeSrc":"1701:4:83","nodeType":"YulLiteral","src":"1701:4:83","type":"","value":"0x20"},"variableNames":[{"name":"srcOffset","nativeSrc":"1688:9:83","nodeType":"YulIdentifier","src":"1688:9:83"}]},{"cases":[{"body":{"nativeSrc":"1751:642:83","nodeType":"YulBlock","src":"1751:642:83","statements":[{"nativeSrc":"1765:35:83","nodeType":"YulVariableDeclaration","src":"1765:35:83","value":{"arguments":[{"name":"newLen","nativeSrc":"1784:6:83","nodeType":"YulIdentifier","src":"1784:6:83"},{"arguments":[{"kind":"number","nativeSrc":"1796:2:83","nodeType":"YulLiteral","src":"1796:2:83","type":"","value":"31"}],"functionName":{"name":"not","nativeSrc":"1792:3:83","nodeType":"YulIdentifier","src":"1792:3:83"},"nativeSrc":"1792:7:83","nodeType":"YulFunctionCall","src":"1792:7:83"}],"functionName":{"name":"and","nativeSrc":"1780:3:83","nodeType":"YulIdentifier","src":"1780:3:83"},"nativeSrc":"1780:20:83","nodeType":"YulFunctionCall","src":"1780:20:83"},"variables":[{"name":"loopEnd","nativeSrc":"1769:7:83","nodeType":"YulTypedName","src":"1769:7:83","type":""}]},{"nativeSrc":"1813:49:83","nodeType":"YulVariableDeclaration","src":"1813:49:83","value":{"arguments":[{"name":"slot","nativeSrc":"1857:4:83","nodeType":"YulIdentifier","src":"1857:4:83"}],"functionName":{"name":"array_dataslot_string_storage","nativeSrc":"1827:29:83","nodeType":"YulIdentifier","src":"1827:29:83"},"nativeSrc":"1827:35:83","nodeType":"YulFunctionCall","src":"1827:35:83"},"variables":[{"name":"dstPtr","nativeSrc":"1817:6:83","nodeType":"YulTypedName","src":"1817:6:83","type":""}]},{"nativeSrc":"1875:10:83","nodeType":"YulVariableDeclaration","src":"1875:10:83","value":{"kind":"number","nativeSrc":"1884:1:83","nodeType":"YulLiteral","src":"1884:1:83","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"1879:1:83","nodeType":"YulTypedName","src":"1879:1:83","type":""}]},{"body":{"nativeSrc":"1955:165:83","nodeType":"YulBlock","src":"1955:165:83","statements":[{"expression":{"arguments":[{"name":"dstPtr","nativeSrc":"1980:6:83","nodeType":"YulIdentifier","src":"1980:6:83"},{"arguments":[{"arguments":[{"name":"src","nativeSrc":"1998:3:83","nodeType":"YulIdentifier","src":"1998:3:83"},{"name":"srcOffset","nativeSrc":"2003:9:83","nodeType":"YulIdentifier","src":"2003:9:83"}],"functionName":{"name":"add","nativeSrc":"1994:3:83","nodeType":"YulIdentifier","src":"1994:3:83"},"nativeSrc":"1994:19:83","nodeType":"YulFunctionCall","src":"1994:19:83"}],"functionName":{"name":"mload","nativeSrc":"1988:5:83","nodeType":"YulIdentifier","src":"1988:5:83"},"nativeSrc":"1988:26:83","nodeType":"YulFunctionCall","src":"1988:26:83"}],"functionName":{"name":"sstore","nativeSrc":"1973:6:83","nodeType":"YulIdentifier","src":"1973:6:83"},"nativeSrc":"1973:42:83","nodeType":"YulFunctionCall","src":"1973:42:83"},"nativeSrc":"1973:42:83","nodeType":"YulExpressionStatement","src":"1973:42:83"},{"nativeSrc":"2032:24:83","nodeType":"YulAssignment","src":"2032:24:83","value":{"arguments":[{"name":"dstPtr","nativeSrc":"2046:6:83","nodeType":"YulIdentifier","src":"2046:6:83"},{"kind":"number","nativeSrc":"2054:1:83","nodeType":"YulLiteral","src":"2054:1:83","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"2042:3:83","nodeType":"YulIdentifier","src":"2042:3:83"},"nativeSrc":"2042:14:83","nodeType":"YulFunctionCall","src":"2042:14:83"},"variableNames":[{"name":"dstPtr","nativeSrc":"2032:6:83","nodeType":"YulIdentifier","src":"2032:6:83"}]},{"nativeSrc":"2073:33:83","nodeType":"YulAssignment","src":"2073:33:83","value":{"arguments":[{"name":"srcOffset","nativeSrc":"2090:9:83","nodeType":"YulIdentifier","src":"2090:9:83"},{"kind":"number","nativeSrc":"2101:4:83","nodeType":"YulLiteral","src":"2101:4:83","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2086:3:83","nodeType":"YulIdentifier","src":"2086:3:83"},"nativeSrc":"2086:20:83","nodeType":"YulFunctionCall","src":"2086:20:83"},"variableNames":[{"name":"srcOffset","nativeSrc":"2073:9:83","nodeType":"YulIdentifier","src":"2073:9:83"}]}]},"condition":{"arguments":[{"name":"i","nativeSrc":"1909:1:83","nodeType":"YulIdentifier","src":"1909:1:83"},{"name":"loopEnd","nativeSrc":"1912:7:83","nodeType":"YulIdentifier","src":"1912:7:83"}],"functionName":{"name":"lt","nativeSrc":"1906:2:83","nodeType":"YulIdentifier","src":"1906:2:83"},"nativeSrc":"1906:14:83","nodeType":"YulFunctionCall","src":"1906:14:83"},"nativeSrc":"1898:222:83","nodeType":"YulForLoop","post":{"nativeSrc":"1921:21:83","nodeType":"YulBlock","src":"1921:21:83","statements":[{"nativeSrc":"1923:17:83","nodeType":"YulAssignment","src":"1923:17:83","value":{"arguments":[{"name":"i","nativeSrc":"1932:1:83","nodeType":"YulIdentifier","src":"1932:1:83"},{"kind":"number","nativeSrc":"1935:4:83","nodeType":"YulLiteral","src":"1935:4:83","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1928:3:83","nodeType":"YulIdentifier","src":"1928:3:83"},"nativeSrc":"1928:12:83","nodeType":"YulFunctionCall","src":"1928:12:83"},"variableNames":[{"name":"i","nativeSrc":"1923:1:83","nodeType":"YulIdentifier","src":"1923:1:83"}]}]},"pre":{"nativeSrc":"1902:3:83","nodeType":"YulBlock","src":"1902:3:83","statements":[]},"src":"1898:222:83"},{"body":{"nativeSrc":"2168:166:83","nodeType":"YulBlock","src":"2168:166:83","statements":[{"nativeSrc":"2186:43:83","nodeType":"YulVariableDeclaration","src":"2186:43:83","value":{"arguments":[{"arguments":[{"name":"src","nativeSrc":"2213:3:83","nodeType":"YulIdentifier","src":"2213:3:83"},{"name":"srcOffset","nativeSrc":"2218:9:83","nodeType":"YulIdentifier","src":"2218:9:83"}],"functionName":{"name":"add","nativeSrc":"2209:3:83","nodeType":"YulIdentifier","src":"2209:3:83"},"nativeSrc":"2209:19:83","nodeType":"YulFunctionCall","src":"2209:19:83"}],"functionName":{"name":"mload","nativeSrc":"2203:5:83","nodeType":"YulIdentifier","src":"2203:5:83"},"nativeSrc":"2203:26:83","nodeType":"YulFunctionCall","src":"2203:26:83"},"variables":[{"name":"lastValue","nativeSrc":"2190:9:83","nodeType":"YulTypedName","src":"2190:9:83","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nativeSrc":"2253:6:83","nodeType":"YulIdentifier","src":"2253:6:83"},{"arguments":[{"name":"lastValue","nativeSrc":"2265:9:83","nodeType":"YulIdentifier","src":"2265:9:83"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"2292:1:83","nodeType":"YulLiteral","src":"2292:1:83","type":"","value":"3"},{"name":"newLen","nativeSrc":"2295:6:83","nodeType":"YulIdentifier","src":"2295:6:83"}],"functionName":{"name":"shl","nativeSrc":"2288:3:83","nodeType":"YulIdentifier","src":"2288:3:83"},"nativeSrc":"2288:14:83","nodeType":"YulFunctionCall","src":"2288:14:83"},{"kind":"number","nativeSrc":"2304:3:83","nodeType":"YulLiteral","src":"2304:3:83","type":"","value":"248"}],"functionName":{"name":"and","nativeSrc":"2284:3:83","nodeType":"YulIdentifier","src":"2284:3:83"},"nativeSrc":"2284:24:83","nodeType":"YulFunctionCall","src":"2284:24:83"},{"arguments":[{"kind":"number","nativeSrc":"2314:1:83","nodeType":"YulLiteral","src":"2314:1:83","type":"","value":"0"}],"functionName":{"name":"not","nativeSrc":"2310:3:83","nodeType":"YulIdentifier","src":"2310:3:83"},"nativeSrc":"2310:6:83","nodeType":"YulFunctionCall","src":"2310:6:83"}],"functionName":{"name":"shr","nativeSrc":"2280:3:83","nodeType":"YulIdentifier","src":"2280:3:83"},"nativeSrc":"2280:37:83","nodeType":"YulFunctionCall","src":"2280:37:83"}],"functionName":{"name":"not","nativeSrc":"2276:3:83","nodeType":"YulIdentifier","src":"2276:3:83"},"nativeSrc":"2276:42:83","nodeType":"YulFunctionCall","src":"2276:42:83"}],"functionName":{"name":"and","nativeSrc":"2261:3:83","nodeType":"YulIdentifier","src":"2261:3:83"},"nativeSrc":"2261:58:83","nodeType":"YulFunctionCall","src":"2261:58:83"}],"functionName":{"name":"sstore","nativeSrc":"2246:6:83","nodeType":"YulIdentifier","src":"2246:6:83"},"nativeSrc":"2246:74:83","nodeType":"YulFunctionCall","src":"2246:74:83"},"nativeSrc":"2246:74:83","nodeType":"YulExpressionStatement","src":"2246:74:83"}]},"condition":{"arguments":[{"name":"loopEnd","nativeSrc":"2139:7:83","nodeType":"YulIdentifier","src":"2139:7:83"},{"name":"newLen","nativeSrc":"2148:6:83","nodeType":"YulIdentifier","src":"2148:6:83"}],"functionName":{"name":"lt","nativeSrc":"2136:2:83","nodeType":"YulIdentifier","src":"2136:2:83"},"nativeSrc":"2136:19:83","nodeType":"YulFunctionCall","src":"2136:19:83"},"nativeSrc":"2133:201:83","nodeType":"YulIf","src":"2133:201:83"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"2354:4:83","nodeType":"YulIdentifier","src":"2354:4:83"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"2368:1:83","nodeType":"YulLiteral","src":"2368:1:83","type":"","value":"1"},{"name":"newLen","nativeSrc":"2371:6:83","nodeType":"YulIdentifier","src":"2371:6:83"}],"functionName":{"name":"shl","nativeSrc":"2364:3:83","nodeType":"YulIdentifier","src":"2364:3:83"},"nativeSrc":"2364:14:83","nodeType":"YulFunctionCall","src":"2364:14:83"},{"kind":"number","nativeSrc":"2380:1:83","nodeType":"YulLiteral","src":"2380:1:83","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"2360:3:83","nodeType":"YulIdentifier","src":"2360:3:83"},"nativeSrc":"2360:22:83","nodeType":"YulFunctionCall","src":"2360:22:83"}],"functionName":{"name":"sstore","nativeSrc":"2347:6:83","nodeType":"YulIdentifier","src":"2347:6:83"},"nativeSrc":"2347:36:83","nodeType":"YulFunctionCall","src":"2347:36:83"},"nativeSrc":"2347:36:83","nodeType":"YulExpressionStatement","src":"2347:36:83"}]},"nativeSrc":"1744:649:83","nodeType":"YulCase","src":"1744:649:83","value":{"kind":"number","nativeSrc":"1749:1:83","nodeType":"YulLiteral","src":"1749:1:83","type":"","value":"1"}},{"body":{"nativeSrc":"2410:234:83","nodeType":"YulBlock","src":"2410:234:83","statements":[{"nativeSrc":"2424:14:83","nodeType":"YulVariableDeclaration","src":"2424:14:83","value":{"kind":"number","nativeSrc":"2437:1:83","nodeType":"YulLiteral","src":"2437:1:83","type":"","value":"0"},"variables":[{"name":"value","nativeSrc":"2428:5:83","nodeType":"YulTypedName","src":"2428:5:83","type":""}]},{"body":{"nativeSrc":"2473:67:83","nodeType":"YulBlock","src":"2473:67:83","statements":[{"nativeSrc":"2491:35:83","nodeType":"YulAssignment","src":"2491:35:83","value":{"arguments":[{"arguments":[{"name":"src","nativeSrc":"2510:3:83","nodeType":"YulIdentifier","src":"2510:3:83"},{"name":"srcOffset","nativeSrc":"2515:9:83","nodeType":"YulIdentifier","src":"2515:9:83"}],"functionName":{"name":"add","nativeSrc":"2506:3:83","nodeType":"YulIdentifier","src":"2506:3:83"},"nativeSrc":"2506:19:83","nodeType":"YulFunctionCall","src":"2506:19:83"}],"functionName":{"name":"mload","nativeSrc":"2500:5:83","nodeType":"YulIdentifier","src":"2500:5:83"},"nativeSrc":"2500:26:83","nodeType":"YulFunctionCall","src":"2500:26:83"},"variableNames":[{"name":"value","nativeSrc":"2491:5:83","nodeType":"YulIdentifier","src":"2491:5:83"}]}]},"condition":{"name":"newLen","nativeSrc":"2454:6:83","nodeType":"YulIdentifier","src":"2454:6:83"},"nativeSrc":"2451:89:83","nodeType":"YulIf","src":"2451:89:83"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"2560:4:83","nodeType":"YulIdentifier","src":"2560:4:83"},{"arguments":[{"name":"value","nativeSrc":"2619:5:83","nodeType":"YulIdentifier","src":"2619:5:83"},{"name":"newLen","nativeSrc":"2626:6:83","nodeType":"YulIdentifier","src":"2626:6:83"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nativeSrc":"2566:52:83","nodeType":"YulIdentifier","src":"2566:52:83"},"nativeSrc":"2566:67:83","nodeType":"YulFunctionCall","src":"2566:67:83"}],"functionName":{"name":"sstore","nativeSrc":"2553:6:83","nodeType":"YulIdentifier","src":"2553:6:83"},"nativeSrc":"2553:81:83","nodeType":"YulFunctionCall","src":"2553:81:83"},"nativeSrc":"2553:81:83","nodeType":"YulExpressionStatement","src":"2553:81:83"}]},"nativeSrc":"2402:242:83","nodeType":"YulCase","src":"2402:242:83","value":"default"}],"expression":{"arguments":[{"name":"newLen","nativeSrc":"1724:6:83","nodeType":"YulIdentifier","src":"1724:6:83"},{"kind":"number","nativeSrc":"1732:2:83","nodeType":"YulLiteral","src":"1732:2:83","type":"","value":"31"}],"functionName":{"name":"gt","nativeSrc":"1721:2:83","nodeType":"YulIdentifier","src":"1721:2:83"},"nativeSrc":"1721:14:83","nodeType":"YulFunctionCall","src":"1721:14:83"},"nativeSrc":"1714:930:83","nodeType":"YulSwitch","src":"1714:930:83"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nativeSrc":"1351:1299:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nativeSrc":"1432:4:83","nodeType":"YulTypedName","src":"1432:4:83","type":""},{"name":"src","nativeSrc":"1438:3:83","nodeType":"YulTypedName","src":"1438:3:83","type":""}],"src":"1351:1299:83"}]},"contents":"{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            mstore(0, array)\n            let data := keccak256(0, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _1 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _1) { start := add(start, 1) }\n            { sstore(start, 0) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        srcOffset := 0x20\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 0x20)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n}","id":83,"language":"Yul","name":"#utility.yul"}],"linkReferences":{}},"deployedBytecode":{"functionDebugData":{"@IS_SCRIPT_99":{"entryPoint":null,"id":99,"parameterSlots":0,"returnSlots":0},"@_castToPure_14055":{"entryPoint":null,"id":14055,"parameterSlots":1,"returnSlots":1},"@_deployFromBytecode_49389":{"entryPoint":9670,"id":49389,"parameterSlots":1,"returnSlots":1},"@_deploy_49375":{"entryPoint":3506,"id":49375,"parameterSlots":2,"returnSlots":1},"@_parseLine_50423":{"entryPoint":9182,"id":50423,"parameterSlots":3,"returnSlots":1},"@_sendLogPayloadImplementation_14038":{"entryPoint":3043,"id":14038,"parameterSlots":1,"returnSlots":0},"@_sendLogPayload_14067":{"entryPoint":2912,"id":14067,"parameterSlots":1,"returnSlots":0},"@_toFileName_51437":{"entryPoint":10894,"id":51437,"parameterSlots":1,"returnSlots":1},"@_toLicenseType_50196":{"entryPoint":11692,"id":50196,"parameterSlots":1,"returnSlots":1},"@_toShortName_51541":{"entryPoint":10100,"id":51541,"parameterSlots":1,"returnSlots":1},"@_validate_48960":{"entryPoint":9687,"id":48960,"parameterSlots":3,"returnSlots":0},"@buildDeployCommand_50025":{"entryPoint":5281,"id":50025,"parameterSlots":4,"returnSlots":1},"@buildValidateCommand_49286":{"entryPoint":13544,"id":49286,"parameterSlots":3,"returnSlots":1},"@count_51035":{"entryPoint":15339,"id":51035,"parameterSlots":2,"returnSlots":1},"@deployImplementation_47916":{"entryPoint":3074,"id":47916,"parameterSlots":2,"returnSlots":1},"@deployImplementation_48540":{"entryPoint":3132,"id":48540,"parameterSlots":2,"returnSlots":1},"@deployUUPSProxy_47484":{"entryPoint":2921,"id":47484,"parameterSlots":3,"returnSlots":1},"@deployUUPSProxy_47505":{"entryPoint":2736,"id":47505,"parameterSlots":2,"returnSlots":1},"@deploy_49318":{"entryPoint":3085,"id":49318,"parameterSlots":3,"returnSlots":1},"@deploy_49518":{"entryPoint":3158,"id":49518,"parameterSlots":3,"returnSlots":1},"@endsWith_51000":{"entryPoint":11363,"id":51000,"parameterSlots":2,"returnSlots":1},"@equal_42169":{"entryPoint":15691,"id":42169,"parameterSlots":2,"returnSlots":1},"@getBuildInfoFile_51331":{"entryPoint":4892,"id":51331,"parameterSlots":3,"returnSlots":1},"@getContractInfo_51228":{"entryPoint":3863,"id":51228,"parameterSlots":2,"returnSlots":1},"@getFullyQualifiedName_51090":{"entryPoint":15727,"id":51090,"parameterSlots":2,"returnSlots":1},"@getOutDir_51355":{"entryPoint":3714,"id":51355,"parameterSlots":0,"returnSlots":1},"@log10_45129":{"entryPoint":15476,"id":45129,"parameterSlots":1,"returnSlots":1},"@log_14652":{"entryPoint":2842,"id":14652,"parameterSlots":1,"returnSlots":0},"@log_14765":{"entryPoint":2598,"id":14765,"parameterSlots":2,"returnSlots":0},"@log_14799":{"entryPoint":2667,"id":14799,"parameterSlots":2,"returnSlots":0},"@log_14833":{"entryPoint":2525,"id":14833,"parameterSlots":2,"returnSlots":0},"@log_15449":{"entryPoint":2766,"id":15449,"parameterSlots":3,"returnSlots":0},"@runAsBashCommand_51718":{"entryPoint":8790,"id":51718,"parameterSlots":1,"returnSlots":1},"@run_52066":{"entryPoint":105,"id":52066,"parameterSlots":0,"returnSlots":0},"@toBashCommand_51633":{"entryPoint":13233,"id":51633,"parameterSlots":2,"returnSlots":1},"@toString_41918":{"entryPoint":11549,"id":41918,"parameterSlots":1,"returnSlots":1},"@validateImplementation_48516":{"entryPoint":3703,"id":48516,"parameterSlots":2,"returnSlots":0},"abi_decode_bytes_fromMemory":{"entryPoint":16942,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address_fromMemory":{"entryPoint":16046,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_array$_t_string_memory_ptr_$dyn_memory_ptr_fromMemory":{"entryPoint":18950,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":17448,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32_fromMemory":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes_memory_ptr_fromMemory":{"entryPoint":17055,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptr_fromMemory":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_struct$_FfiResult_$9129_memory_ptr_fromMemory":{"entryPoint":18329,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":16023,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_string":{"entryPoint":16761,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_string_memory_ptr":{"entryPoint":16483,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_string_storage":{"entryPoint":16134,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_bytes_memory_ptr_t_bytes_memory_ptr__to_t_bytes_memory_ptr_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":17104,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_681afa780d17da29203322b473d3f210a7d621259a4e6ce9e403f5a266ff719a__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":20355,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_69ae65ff9142d8f87b3884b153358f78dcd4f6339bb046b9a6d16c966fa813af__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":17823,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_96d280011b274d9410ea6c6fc28e2bb076b01d2fac329c49c4b29a719ec4650c_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":20455,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_fba9715e477e68952d3f1df7a185b3708aadad50ec10cc793973864023868527_t_string_memory_ptr_t_stringliteral_fba9715e477e68952d3f1df7a185b3708aadad50ec10cc793973864023868527_t_string_memory_ptr_t_stringliteral_fba9715e477e68952d3f1df7a185b3708aadad50ec10cc793973864023868527_t_string_memory_ptr_t_stringliteral_94311adc0a0cd4e10be11b23bd4316b8cffa4adf693e8f96f5c075aa439a7972__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":17292,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_08801615ab40adc93bf881a8fa998cec8215450529dace7649c906794b645fd9_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":19542,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_29a2b74f226f0ae680d4b1730e672f85f1c84ce9f2c45ff21557229ab3df8027_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":19417,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_3b0c29718fa0ccfd3c548e0fdf398a1d76969c362a61df53627e5e4f64fab1e8_t_string_memory_ptr_t_stringliteral_dd0e6e5fb2dfed5daf937831e40458612ea423d5675571cc5b1b64fd260d1245__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":17479,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_3f120aa75756516f8ad13d558a5b9e5a44bb19eefe0388ce8c7f36f6df8edea5_t_string_memory_ptr_t_stringliteral_9a274a4ef728d0f993bc2f4dc24a093c4d7da9d1cb0dff5da2bf5cfca4271809__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":19874,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_45942a044068f475a72b247d918918cfb3543fa9d2f925dce5c26b7172dbe289_t_string_memory_ptr_t_stringliteral_aa9d79cc8375f222c2818bc0c013f6b7c3934b6f21aedb1df102a8f780a1b664_t_string_memory_ptr_t_stringliteral_6e9f33448a4153023cdaf3eb759f1afdc24aba433a3e18b683f8c04a6eaa69f0__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":17124,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_45942a044068f475a72b247d918918cfb3543fa9d2f925dce5c26b7172dbe289_t_string_memory_ptr_t_stringliteral_e64009107d042bdc478cc69a5433e4573ea2e8a23a46646c0ee241e30c888e73_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":16784,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_459e684ed08b96f40b9b516154105232b46d6e25e3ebbcc2460d0ad2691a0f84_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":20406,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_47a92f1f2e2401ec3324f84072908fea4ea6788425ad1f8f366b1db3c55810d9_t_string_memory_ptr_t_stringliteral_93bcd8f909ee99a96370a8190ddeafae0a627cb872c93cfdab495c157ddc6c8f_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":19299,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_6e9f33448a4153023cdaf3eb759f1afdc24aba433a3e18b683f8c04a6eaa69f0_t_string_memory_ptr_t_stringliteral_6e9f33448a4153023cdaf3eb759f1afdc24aba433a3e18b683f8c04a6eaa69f0__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":17785,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_7c24507b5303926943f349dcca7bb8333d10cd816dcad3e2e8bb5cb2df222ca7_t_string_memory_ptr_t_stringliteral_93bcd8f909ee99a96370a8190ddeafae0a627cb872c93cfdab495c157ddc6c8f_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":19151,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_911dd02035025c2cb695e87f546c8657a33a4f437472b320b67efab6662a5c76_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":18018,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_9645b1309bf78e4558cd11f0c8b7c479bbb946c623d04c306a8843ee1cc47506_t_string_memory_ptr_t_stringliteral_3b53890135633717feb8747563f231c42249fa1cfe7d1f04d5790e40902f3b91__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":18501,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_97996f6d547fd3154e3c44156fcd12ba2952d6646db5187f6bd117ff435085a8_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":17861,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_9acc65371218b2be388de4c512999c5773d7c7e8cfe55ef8b9c7f869e0e7945b_t_string_memory_ptr_t_stringliteral_aad8893e597421c55956295138eb041c0150d1e2975daa37e4c3a126e8685848__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":17717,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_a70b4d22eeee20f8bb7a39d4040bcf9ebd66e88382efee55cf50875396c44658_t_string_memory_ptr_t_stringliteral_7a5a2e05f2bc8368a75d6eecdcd03c3949dfdb0c1c10cca4a5feac5e5b4cc170_t_string_memory_ptr_t_stringliteral_eac7c85eba44d81e2f5546a595c99c2433fd28fa81a701d817ae87beaa906f14__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":20046,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_address_t_array$_t_address_$dyn_memory_ptr__to_t_address_t_address_t_address_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":16368,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_address_t_bytes_memory_ptr__to_t_address_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":16718,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_array$_t_string_memory_ptr_$dyn_memory_ptr__to_t_array$_t_string_memory_ptr_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":18230,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":16700,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr_t_address__to_t_string_memory_ptr_t_address__fromStack_reversed":{"entryPoint":16529,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed":{"entryPoint":16603,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr_t_string_memory_ptr_t_address__to_t_string_memory_ptr_t_string_memory_ptr_t_address__fromStack_reversed":{"entryPoint":16639,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr_t_stringliteral_0ec1952d7acb1df54d89163ca83f1d7b360061eb9c0c5c501b4eac52c5c807e4__to_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed":{"entryPoint":17653,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr_t_stringliteral_0ef9d8f8804d174666011a394cab7901679a8944d24249fd148a6a36071151f8__to_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed":{"entryPoint":19247,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr_t_stringliteral_0f3ac612dde053e2dba53344fdd4fdfcedab8a75b1f141a9e2889b50a75851e1__to_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed":{"entryPoint":17584,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr_t_stringliteral_39bf027dd97f3bae0cf8cfb909695ec63313a9bd61ad52fc7f52cf565b141da8__to_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed":{"entryPoint":19358,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr_t_stringliteral_6e9f33448a4153023cdaf3eb759f1afdc24aba433a3e18b683f8c04a6eaa69f0_t_stringliteral_9104361da4a0d729c7b0f207387eef9f9e34470af38c160ad972369226db1fea__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed":{"entryPoint":18085,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr_t_stringliteral_94311adc0a0cd4e10be11b23bd4316b8cffa4adf693e8f96f5c075aa439a7972_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed":{"entryPoint":19800,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr_t_stringliteral_94ac7d5548e308c1d3c62d3cec2f12ac4e8340c7ba9c9bd462561ccfdd974d98__to_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed":{"entryPoint":17392,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr_t_stringliteral_96d280011b274d9410ea6c6fc28e2bb076b01d2fac329c49c4b29a719ec4650c__to_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed":{"entryPoint":19675,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr_t_stringliteral_c50cad6f8b1c8a54a5c76e3eca57f2748d547818bfac18403e7911bf23fc8166__to_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed":{"entryPoint":19484,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr_t_stringliteral_e4899d98551d0eedd3839d89cdef847f3de976f02aecec9c64bb534483e2fdc1_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed":{"entryPoint":19602,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr_t_stringliteral_fba9715e477e68952d3f1df7a185b3708aadad50ec10cc793973864023868527__to_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed":{"entryPoint":19728,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr_t_uint256__to_t_string_memory_ptr_t_uint256__fromStack_reversed":{"entryPoint":16570,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_string_storage_t_string_storage__to_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed":{"entryPoint":16292,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_stringliteral_24539e734dcb001ba7c33c80423f2ee30ce04105a5ff31966733164624aa2d38__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_2ef6555c4d06f7a53d2dd092327f3256a8d6f18aff592d5349c12226686be6c5__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_524873d67beb7637903c52887510c8a7ea71785147c24441a8c36e6df12a4c44_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed":{"entryPoint":18167,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_ae11223e55da1785bb01a018df547ee9df83f6bfc03bcf9ee05fa29541f23f06_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed":{"entryPoint":17240,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_f48c71a4d559c08a669fad0de76519ac5cb5f320e5ef8890570d6dc61c117609__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"allocate_memory":{"entryPoint":16894,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_memory_3969":{"entryPoint":16854,"id":null,"parameterSlots":0,"returnSlots":1},"array_dataslot_string_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_string":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":19781,"id":null,"parameterSlots":2,"returnSlots":1},"extract_byte_array_length":{"entryPoint":16084,"id":null,"parameterSlots":1,"returnSlots":1},"increment_t_uint16":{"entryPoint":20383,"id":null,"parameterSlots":1,"returnSlots":1},"increment_t_uint8":{"entryPoint":17988,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":17968,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":16348,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":16328,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x51":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0}},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x34 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xC0406226 EQ PUSH2 0x38 JUMPI DUP1 PUSH4 0xF8CCBF47 EQ PUSH2 0x42 JUMPI JUMPDEST PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0x40 PUSH2 0x69 JUMP JUMPDEST STOP JUMPDEST PUSH1 0xC SLOAD PUSH2 0x55 SWAP1 PUSH3 0x10000 SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xC1978D1F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xB PUSH1 0x24 DUP3 ADD MSTORE PUSH11 0x505249564154455F4B4559 PUSH1 0xA8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH0 SWAP1 PUSH0 MLOAD PUSH1 0x20 PUSH2 0x7E43 PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SWAP1 PUSH4 0xC1978D1F SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xCD JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xF1 SWAP2 SWAP1 PUSH2 0x3E97 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH3 0x5E79B7 PUSH1 0xE0 SHL SUB NOT DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE SWAP1 SWAP2 POP PUSH0 SWAP1 PUSH0 MLOAD PUSH1 0x20 PUSH2 0x7E43 PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SWAP1 PUSH4 0xFFA18649 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x140 JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x164 SWAP2 SWAP1 PUSH2 0x3EAE JUMP JUMPDEST SWAP1 POP PUSH0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND BALANCE SWAP1 POP PUSH2 0x1A4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xE DUP2 MSTORE PUSH1 0x20 ADD PUSH14 0x4465706C6F796572202D3E202573 PUSH1 0x90 SHL DUP2 MSTORE POP DUP4 PUSH2 0x9DD JUMP JUMPDEST PUSH2 0x1D3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xD DUP2 MSTORE PUSH1 0x20 ADD PUSH13 0x42616C616E6365202D3E202573 PUSH1 0x98 SHL DUP2 MSTORE POP DUP3 PUSH2 0xA26 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xCE817D47 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH0 MLOAD PUSH1 0x20 PUSH2 0x7E43 PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SWAP1 PUSH4 0xCE817D47 SWAP1 PUSH1 0x24 ADD PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x216 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x228 JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH2 0x2EB PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x15 DUP2 MSTORE PUSH1 0x20 ADD PUSH21 0x2232B83637BCB4B7339012B9903A37B5B2B7171717 PUSH1 0x59 SHL DUP2 MSTORE POP PUSH1 0xE DUP1 SLOAD PUSH2 0x26A SWAP1 PUSH2 0x3ED4 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x296 SWAP1 PUSH2 0x3ED4 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2E1 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2B8 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2E1 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2C4 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP PUSH2 0xA6B JUMP JUMPDEST PUSH0 PUSH2 0x35B PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xF DUP2 MSTORE PUSH1 0x20 ADD PUSH15 0x14DA5B5C1B19551BDAD95B8B9CDBDB PUSH1 0x8A SHL DUP2 MSTORE POP PUSH1 0xD PUSH1 0xE PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x32C SWAP3 SWAP2 SWAP1 PUSH2 0x3FA4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x266C45BB PUSH1 0xE1 SHL OR SWAP1 MSTORE PUSH2 0xAB0 JUMP JUMPDEST SWAP1 POP PUSH2 0x425 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x19 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x2573202870726F787929206465706C6F79656420746F20257300000000000000 DUP2 MSTORE POP PUSH1 0xE DUP1 SLOAD PUSH2 0x3A3 SWAP1 PUSH2 0x3ED4 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x3CF SWAP1 PUSH2 0x3ED4 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x41A JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3F1 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x41A JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x3FD JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP4 PUSH2 0xACE JUMP JUMPDEST PUSH2 0x463 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x19 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4465706C6F79696E6720507269636553746F726167652E2E2E00000000000000 DUP2 MSTORE POP PUSH2 0xB1A JUMP JUMPDEST PUSH0 PUSH2 0x4DF PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x10 DUP2 MSTORE PUSH1 0x20 ADD PUSH16 0x141C9A58D954DD1BDC9859D94B9CDBDB PUSH1 0x82 SHL DUP2 MSTORE POP PUSH1 0xF SLOAD PUSH1 0x10 SLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x4B0 SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x7251808B PUSH1 0xE1 SHL OR SWAP1 MSTORE PUSH2 0xAB0 JUMP JUMPDEST SWAP1 POP PUSH2 0x503 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x23 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x7EBA PUSH1 0x23 SWAP2 CODECOPY DUP3 PUSH2 0x9DD JUMP JUMPDEST PUSH2 0x524 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2F DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x7EFE PUSH1 0x2F SWAP2 CODECOPY PUSH2 0xB1A JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x2F2FF15D DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA20E7D47 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x573 JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x597 SWAP2 SWAP1 PUSH2 0x3E97 JUMP JUMPDEST PUSH1 0x14 SLOAD PUSH1 0x40 MLOAD PUSH1 0xE0 DUP5 SWAP1 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5DE JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x5F0 JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH2 0x632 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1F DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4465706C6F79696E672041646472657373657357686974656C6973742E2E2E00 DUP2 MSTORE POP PUSH2 0xB1A JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD PUSH2 0x63F SWAP1 PUSH2 0x3DAE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH2 0x658 JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP SWAP1 POP PUSH2 0x67D PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x7EDD PUSH1 0x21 SWAP2 CODECOPY DUP3 PUSH2 0x9DD JUMP JUMPDEST PUSH2 0x6BB PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1C DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4465706C6F79696E672052657175657374734D616E616765722E2E2E00000000 DUP2 MSTORE POP PUSH2 0xB1A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH0 SWAP2 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP POP PUSH1 0x12 SLOAD DUP3 MLOAD SWAP3 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 DUP4 SWAP2 POP PUSH0 SWAP1 PUSH2 0x6FB JUMPI PUSH2 0x6FB PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x20 SWAP2 DUP3 MUL SWAP3 SWAP1 SWAP3 ADD ADD MSTORE PUSH1 0x11 SLOAD PUSH1 0x40 MLOAD PUSH0 SWAP3 DUP9 SWAP3 AND SWAP1 DUP6 SWAP1 DUP6 SWAP1 PUSH2 0x72A SWAP1 PUSH2 0x3DBB JUMP JUMPDEST PUSH2 0x737 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3FF0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH2 0x750 JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP SWAP1 POP PUSH2 0x792 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1E DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x52657175657374734D616E61676572206465706C6F79656420746F2025730000 DUP2 MSTORE POP DUP3 PUSH2 0x9DD JUMP JUMPDEST PUSH2 0x7B3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x32 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x7E63 PUSH1 0x32 SWAP2 CODECOPY PUSH2 0xB1A JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x2F2FF15D DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA20E7D47 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7FE JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x822 SWAP2 SWAP1 PUSH2 0x3E97 JUMP JUMPDEST PUSH1 0x13 SLOAD PUSH1 0x40 MLOAD PUSH1 0xE0 DUP5 SWAP1 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x869 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x87B JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH2 0x8A8 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x7E95 PUSH1 0x25 SWAP2 CODECOPY PUSH1 0xE DUP1 SLOAD PUSH2 0x26A SWAP1 PUSH2 0x3ED4 JUMP JUMPDEST PUSH0 DUP7 SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x2F2FF15D DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA20E7D47 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8F7 JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x91B SWAP2 SWAP1 PUSH2 0x3E97 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x960 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x972 JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH0 MLOAD PUSH1 0x20 PUSH2 0x7E43 PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x76EADD36 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x9BB JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x9CD JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xA22 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x9F3 SWAP3 SWAP2 SWAP1 PUSH2 0x4091 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x319AF333 PUSH1 0xE0 SHL OR SWAP1 MSTORE PUSH2 0xB60 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xA22 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xA3C SWAP3 SWAP2 SWAP1 PUSH2 0x40BA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x2D839CB3 PUSH1 0xE2 SHL OR SWAP1 MSTORE PUSH2 0xB60 JUMP JUMPDEST PUSH2 0xA22 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xA81 SWAP3 SWAP2 SWAP1 PUSH2 0x40DB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x4B5C4277 PUSH1 0xE0 SHL OR SWAP1 MSTORE PUSH2 0xB60 JUMP JUMPDEST PUSH0 PUSH2 0xAB9 PUSH2 0x3DC8 JUMP JUMPDEST PUSH2 0xAC4 DUP5 DUP5 DUP4 PUSH2 0xB69 JUMP JUMPDEST SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xB15 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xAE6 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x40FF JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x95ED0195 PUSH1 0xE0 SHL OR SWAP1 MSTORE PUSH2 0xB60 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0xB5D DUP2 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xB2E SWAP2 SWAP1 PUSH2 0x413C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x104C13EB PUSH1 0xE2 SHL OR SWAP1 MSTORE PUSH2 0xB60 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0xB5D DUP2 PUSH2 0xBE3 JUMP JUMPDEST PUSH0 PUSH0 PUSH2 0xB75 DUP6 DUP5 PUSH2 0xC02 JUMP JUMPDEST SWAP1 POP PUSH2 0xBD8 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1D DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4552433139363750726F78792E736F6C3A4552433139363750726F7879000000 DUP2 MSTORE POP DUP3 DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xBC3 SWAP3 SWAP2 SWAP1 PUSH2 0x414E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP6 PUSH2 0xC0D JUMP JUMPDEST SWAP2 POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH11 0x636F6E736F6C652E6C6F67 SWAP1 POP PUSH0 PUSH0 DUP4 MLOAD PUSH1 0x20 DUP6 ADD DUP5 GAS STATICCALL POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0xBDC DUP4 DUP4 PUSH2 0xC3C JUMP JUMPDEST PUSH2 0x120 DUP2 ADD MLOAD MLOAD PUSH0 SWAP1 ISZERO PUSH2 0xC32 JUMPI PUSH2 0xC2B DUP5 DUP5 DUP5 PUSH2 0x120 ADD MLOAD PUSH2 0xC56 JUMP JUMPDEST SWAP1 POP PUSH2 0xBDC JUMP JUMPDEST PUSH2 0xC2B DUP5 DUP5 PUSH2 0xDB2 JUMP JUMPDEST PUSH0 PUSH2 0xC47 DUP4 DUP4 PUSH2 0xE77 JUMP JUMPDEST PUSH2 0xBDC DUP4 DUP4 PUSH1 0x40 ADD MLOAD DUP5 PUSH2 0xC0D JUMP JUMPDEST PUSH0 PUSH0 PUSH2 0xC60 PUSH2 0xE82 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0xC6D DUP7 DUP4 PUSH2 0xF17 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0xC83 DUP3 PUSH1 0x60 ADD MLOAD DUP4 PUSH1 0x20 ADD MLOAD DUP6 PUSH2 0x131C JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0xC92 DUP4 DUP4 DUP10 DUP10 PUSH2 0x14A1 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0xC9E DUP3 PUSH2 0x2256 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD DUP2 MLOAD SWAP2 SWAP3 POP SWAP1 PUSH1 0x3 SIGNEXTEND ISZERO PUSH2 0xCF7 JUMPI DUP10 DUP3 PUSH1 0x40 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xCC8 SWAP3 SWAP2 SWAP1 PUSH2 0x4190 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH2 0xCEE SWAP2 PUSH1 0x4 ADD PUSH2 0x413C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH2 0xD31 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x15 DUP2 MSTORE PUSH1 0x20 ADD PUSH21 0x2232B83637BCB2B2103A379030B2323932B9B99D1 PUSH1 0x5D SHL DUP2 MSTORE POP DUP4 PUSH1 0x1 PUSH2 0x23DE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xC6CE059D PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH0 MLOAD PUSH1 0x20 PUSH2 0x7E43 PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SWAP1 PUSH4 0xC6CE059D SWAP1 PUSH2 0xD64 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x413C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD7F JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xDA3 SWAP2 SWAP1 PUSH2 0x3EAE JUMP JUMPDEST SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x8D1CC925 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 SWAP1 DUP2 SWAP1 PUSH0 MLOAD PUSH1 0x20 PUSH2 0x7E43 PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SWAP1 PUSH4 0x8D1CC925 SWAP1 PUSH2 0xDE6 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x413C JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE00 JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xE27 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x429F JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0xE54 DUP3 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xE40 SWAP3 SWAP2 SWAP1 PUSH2 0x42D0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH2 0x25C6 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xAC4 JUMPI DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xCC8 SWAP3 SWAP2 SWAP1 PUSH2 0x42E4 JUMP JUMPDEST PUSH2 0xA22 DUP3 DUP3 PUSH0 PUSH2 0x25D7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x3 DUP2 MSTORE PUSH3 0x1BDD5D PUSH1 0xEA SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 MLOAD PUSH4 0x34515CDB PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x60 SWAP2 PUSH0 MLOAD PUSH1 0x20 PUSH2 0x7E43 PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SWAP2 DUP3 SWAP1 PUSH4 0xD145736C SWAP1 PUSH2 0xECF SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x4358 JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xEE9 JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xF10 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x429F JUMP JUMPDEST SWAP3 POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0xF49 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH0 PUSH0 MLOAD PUSH1 0x20 PUSH2 0x7E43 PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SWAP1 POP PUSH2 0xF8C PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH2 0xF95 DUP6 PUSH2 0x2774 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH0 PUSH2 0xFA4 DUP7 PUSH2 0x2A8E JUMP JUMPDEST SWAP1 POP PUSH0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD930A0E6 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xFE2 JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1009 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x429F JUMP JUMPDEST DUP7 DUP4 DUP6 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1023 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x438C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH4 0x60F9BB11 PUSH1 0xE0 SHL DUP3 MSTORE SWAP2 POP PUSH0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 PUSH4 0x60F9BB11 SWAP1 PUSH2 0x1061 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x413C JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x107B JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x10A2 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x429F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x6DA11AFB PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 PUSH4 0xDB4235F6 SWAP1 PUSH2 0x10D1 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x43F0 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x10EC JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1110 SWAP2 SWAP1 PUSH2 0x4428 JUMP JUMPDEST PUSH2 0x1125 JUMPI DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xCC8 SWAP2 SWAP1 PUSH2 0x4447 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x9389F59 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 PUSH4 0x49C4FAC8 SWAP1 PUSH2 0x1151 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x44B0 JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x116B JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1192 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x429F JUMP JUMPDEST DUP5 MSTORE PUSH1 0x40 MLOAD PUSH4 0x6DA11AFB PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 PUSH4 0xDB4235F6 SWAP1 PUSH2 0x11C0 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x44F5 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x11DB JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x11FF SWAP2 SWAP1 PUSH2 0x4428 JUMP JUMPDEST ISZERO PUSH2 0x1277 JUMPI PUSH1 0x40 MLOAD PUSH4 0x9389F59 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 PUSH4 0x49C4FAC8 SWAP1 PUSH2 0x1230 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x44F5 JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x124A JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1271 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x429F JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MSTORE JUMPDEST DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x49C4FAC8 DUP3 DUP7 PUSH0 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x129B SWAP2 SWAP1 PUSH2 0x4535 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12C7 SWAP3 SWAP2 SWAP1 PUSH2 0x40DB JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x12E1 JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1308 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x429F JUMP JUMPDEST PUSH1 0x60 DUP6 ADD MSTORE POP PUSH1 0x80 DUP4 ADD MSTORE POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x4 DUP1 DUP3 MSTORE PUSH1 0xA0 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH0 SWAP2 SWAP1 DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x1337 JUMPI SWAP1 POP POP SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH4 0x6772657 PUSH1 0xE4 SHL DUP2 MSTORE POP DUP2 PUSH0 DUP2 MLOAD DUP2 LT PUSH2 0x137D JUMPI PUSH2 0x137D PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0xB5C9B PUSH1 0xEA SHL DUP2 MSTORE POP DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x13B7 JUMPI PUSH2 0x13B7 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x13D3 SWAP2 SWAP1 PUSH2 0x4579 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 PUSH1 0x2 DUP2 MLOAD DUP2 LT PUSH2 0x13F5 JUMPI PUSH2 0x13F5 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1411 SWAP2 SWAP1 PUSH2 0x459F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 PUSH1 0x3 DUP2 MLOAD DUP2 LT PUSH2 0x1433 JUMPI PUSH2 0x1433 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH0 PUSH2 0x1448 DUP3 PUSH2 0x2256 JUMP JUMPDEST SWAP1 POP PUSH0 DUP2 PUSH1 0x20 ADD MLOAD SWAP1 POP PUSH2 0x1482 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH5 0x173539B7B7 PUSH1 0xD9 SHL DUP2 MSTORE POP DUP3 PUSH2 0x2C63 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1497 JUMPI DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xCC8 SWAP2 SWAP1 PUSH2 0x45C5 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0xA0 DUP2 ADD MLOAD MLOAD PUSH1 0x60 SWAP1 PUSH0 MLOAD PUSH1 0x20 PUSH2 0x7E43 PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SWAP1 ISZERO PUSH2 0x15F0 JUMPI DUP3 PUSH1 0x20 ADD MLOAD ISZERO PUSH2 0x155C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x58 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54686520606C6963656E73655479706560206F7074696F6E2063616E6E6F7420 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x62652075736564207768656E207468652060736B6970566572696679536F7572 PUSH1 0x64 DUP3 ADD MSTORE PUSH32 0x6365436F646560206F7074696F6E206973206074727565600000000000000000 PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 ADD PUSH2 0xCEE JUMP JUMPDEST DUP3 PUSH1 0xC0 ADD MLOAD ISZERO PUSH2 0x15F0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x53 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54686520606C6963656E73655479706560206F7074696F6E2063616E6E6F7420 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x62652075736564207768656E207468652060736B69704C6963656E7365547970 PUSH1 0x64 DUP3 ADD MSTORE PUSH19 0x32B01037B83A34B7B71034B990303A393AB2B PUSH1 0x6D SHL PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 ADD PUSH2 0xCEE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xFF DUP1 DUP3 MSTORE PUSH2 0x2000 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH0 SWAP2 DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x1608 JUMPI POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x3 DUP2 MSTORE PUSH3 0xDCE0F PUSH1 0xEB SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 SWAP2 POP PUSH0 SWAP1 DUP3 DUP3 PUSH2 0x1646 DUP2 PUSH2 0x4644 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x165B JUMPI PUSH2 0x165B PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xE DUP2 MSTORE PUSH1 0x20 ADD PUSH14 0x302E302E312D616C7068612E313 PUSH1 0x94 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x169D SWAP2 SWAP1 PUSH2 0x4662 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP3 DUP3 DUP1 PUSH2 0x16B8 SWAP1 PUSH2 0x4644 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x16CD JUMPI PUSH2 0x16CD PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x6 DUP2 MSTORE PUSH1 0x20 ADD PUSH6 0x6465706C6F79 PUSH1 0xD0 SHL DUP2 MSTORE POP DUP3 DUP3 DUP1 PUSH2 0x1703 SWAP1 PUSH2 0x4644 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1718 JUMPI PUSH2 0x1718 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xE DUP2 MSTORE PUSH1 0x20 ADD PUSH14 0x2D2D636F6E74726163744E616D65 PUSH1 0x90 SHL DUP2 MSTORE POP DUP3 DUP3 DUP1 PUSH2 0x1756 SWAP1 PUSH2 0x4644 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x176B JUMPI PUSH2 0x176B PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP8 PUSH1 0x20 ADD MLOAD DUP3 DUP3 DUP1 PUSH2 0x1787 SWAP1 PUSH2 0x4644 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x179C JUMPI PUSH2 0x179C PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xE DUP2 MSTORE PUSH1 0x20 ADD PUSH14 0x5A5AC6DEDCE8E4C2C6E8A0C2E8D PUSH1 0x93 SHL DUP2 MSTORE POP DUP3 DUP3 DUP1 PUSH2 0x17DA SWAP1 PUSH2 0x4644 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x17EF JUMPI PUSH2 0x17EF PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE DUP8 MLOAD DUP3 DUP3 PUSH2 0x1807 DUP2 PUSH2 0x4644 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x181C JUMPI PUSH2 0x181C PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x9 DUP2 MSTORE PUSH1 0x20 ADD PUSH9 0xB4B58DA185A5B9259 PUSH1 0xBA SHL DUP2 MSTORE POP DUP3 DUP3 DUP1 PUSH2 0x1855 SWAP1 PUSH2 0x4644 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x186A JUMPI PUSH2 0x186A PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH2 0x187E CHAINID PUSH2 0x2D1D JUMP JUMPDEST DUP3 DUP3 PUSH2 0x1889 DUP2 PUSH2 0x4644 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x189E JUMPI PUSH2 0x189E PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xF DUP2 MSTORE PUSH1 0x20 ADD PUSH15 0x2D2D6275696C64496E666F46696C65 PUSH1 0x88 SHL DUP2 MSTORE POP DUP3 DUP3 DUP1 PUSH2 0x18DD SWAP1 PUSH2 0x4644 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x18F2 JUMPI PUSH2 0x18F2 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP7 DUP3 DUP3 DUP1 PUSH2 0x190A SWAP1 PUSH2 0x4644 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x191F JUMPI PUSH2 0x191F PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE DUP6 MLOAD ISZERO PUSH2 0x1A21 JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x15 DUP2 MSTORE PUSH21 0x2D2D636F6E7374727563746F7242797465636F6465 PUSH1 0x58 SHL PUSH1 0x20 DUP3 ADD MSTORE DUP3 DUP3 PUSH2 0x1968 DUP2 PUSH2 0x4644 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x197D JUMPI PUSH2 0x197D PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x40 MLOAD PUSH4 0x71AAD10D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x71AAD10D SWAP1 PUSH2 0x19B4 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x413C JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x19CE JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x19F5 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x429F JUMP JUMPDEST DUP3 DUP3 PUSH2 0x1A00 DUP2 PUSH2 0x4644 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1A15 JUMPI PUSH2 0x1A15 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP JUMPDEST DUP5 PUSH1 0x20 ADD MLOAD ISZERO PUSH2 0x1ACE JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x12 DUP2 MSTORE PUSH18 0x2D2D766572696679536F75726365436F6465 PUSH1 0x70 SHL PUSH1 0x20 DUP3 ADD MSTORE DUP3 DUP3 PUSH2 0x1A5F DUP2 PUSH2 0x4644 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1A74 JUMPI PUSH2 0x1A74 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH5 0x66616C7365 PUSH1 0xD8 SHL DUP2 MSTORE POP DUP3 DUP3 DUP1 PUSH2 0x1AA9 SWAP1 PUSH2 0x4644 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1ABE JUMPI PUSH2 0x1ABE PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH2 0x1C17 JUMP JUMPDEST PUSH1 0xA0 DUP6 ADD MLOAD MLOAD ISZERO PUSH2 0x1B58 JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xD DUP2 MSTORE PUSH13 0x2D2D6C6963656E736554797065 PUSH1 0x98 SHL PUSH1 0x20 DUP3 ADD MSTORE DUP3 DUP3 PUSH2 0x1B08 DUP2 PUSH2 0x4644 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1B1D JUMPI PUSH2 0x1B1D PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP5 PUSH1 0xA0 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1B3D SWAP2 SWAP1 PUSH2 0x4579 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP3 DUP3 DUP1 PUSH2 0x1AA9 SWAP1 PUSH2 0x4644 JUMP JUMPDEST DUP5 PUSH1 0xC0 ADD MLOAD ISZERO DUP1 ISZERO PUSH2 0x1B6E JUMPI POP PUSH1 0x40 DUP9 ADD MLOAD MLOAD ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x1C17 JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xD DUP2 MSTORE PUSH13 0x2D2D6C6963656E736554797065 PUSH1 0x98 SHL PUSH1 0x20 DUP3 ADD MSTORE DUP3 DUP3 PUSH2 0x1BA2 DUP2 PUSH2 0x4644 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1BB7 JUMPI PUSH2 0x1BB7 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH2 0x1BCB DUP9 PUSH2 0x2DAC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1BDB SWAP2 SWAP1 PUSH2 0x4579 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP3 DUP3 DUP1 PUSH2 0x1BF6 SWAP1 PUSH2 0x4644 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1C0B JUMPI PUSH2 0x1C0B PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP JUMPDEST PUSH1 0x40 DUP6 ADD MLOAD MLOAD ISZERO PUSH2 0x1CA1 JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xB DUP2 MSTORE PUSH11 0xB4B5C995B185E595C9259 PUSH1 0xAA SHL PUSH1 0x20 DUP3 ADD MSTORE DUP3 DUP3 PUSH2 0x1C4F DUP2 PUSH2 0x4644 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1C64 JUMPI PUSH2 0x1C64 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP5 PUSH1 0x40 ADD MLOAD DUP3 DUP3 DUP1 PUSH2 0x1C80 SWAP1 PUSH2 0x4644 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1C95 JUMPI PUSH2 0x1C95 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP JUMPDEST PUSH1 0x60 DUP6 ADD MLOAD ISZERO PUSH2 0x1D8E JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x6 DUP2 MSTORE PUSH6 0xB4B5CD85B1D PUSH1 0xD2 SHL PUSH1 0x20 DUP3 ADD MSTORE DUP3 DUP3 PUSH2 0x1CD3 DUP2 PUSH2 0x4644 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1CE8 JUMPI PUSH2 0x1CE8 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x60 DUP6 ADD MLOAD PUSH1 0x40 MLOAD PUSH4 0x1623433D PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xB11A19E8 SWAP1 PUSH1 0x24 ADD PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1D3B JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1D62 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x429F JUMP JUMPDEST DUP3 DUP3 PUSH2 0x1D6D DUP2 PUSH2 0x4644 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1D82 JUMPI PUSH2 0x1D82 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP JUMPDEST PUSH1 0xE0 DUP6 ADD MLOAD MLOAD ISZERO PUSH2 0x1E21 JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xA DUP2 MSTORE PUSH10 0xB4B59D85CD31A5B5A5D PUSH1 0xB2 SHL PUSH1 0x20 DUP3 ADD MSTORE DUP3 DUP3 PUSH2 0x1DC5 DUP2 PUSH2 0x4644 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1DDA JUMPI PUSH2 0x1DDA PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH2 0x1DF5 DUP6 PUSH1 0xE0 ADD MLOAD PUSH0 ADD MLOAD PUSH2 0x2D1D JUMP JUMPDEST DUP3 DUP3 PUSH2 0x1E00 DUP2 PUSH2 0x4644 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1E15 JUMPI PUSH2 0x1E15 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP JUMPDEST PUSH1 0xE0 DUP6 ADD MLOAD PUSH1 0x20 ADD MLOAD ISZERO PUSH2 0x1EB8 JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xA DUP2 MSTORE PUSH10 0x2D2D6761735072696365 PUSH1 0xB0 SHL PUSH1 0x20 DUP3 ADD MSTORE DUP3 DUP3 PUSH2 0x1E5B DUP2 PUSH2 0x4644 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1E70 JUMPI PUSH2 0x1E70 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH2 0x1E8C DUP6 PUSH1 0xE0 ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH2 0x2D1D JUMP JUMPDEST DUP3 DUP3 PUSH2 0x1E97 DUP2 PUSH2 0x4644 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1EAC JUMPI PUSH2 0x1EAC PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP JUMPDEST PUSH1 0xE0 DUP6 ADD MLOAD PUSH1 0x40 ADD MLOAD ISZERO PUSH2 0x1F53 JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xE DUP2 MSTORE PUSH14 0x2D2D6D6178466565506572476173 PUSH1 0x90 SHL PUSH1 0x20 DUP3 ADD MSTORE DUP3 DUP3 PUSH2 0x1EF6 DUP2 PUSH2 0x4644 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1F0B JUMPI PUSH2 0x1F0B PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH2 0x1F27 DUP6 PUSH1 0xE0 ADD MLOAD PUSH1 0x40 ADD MLOAD PUSH2 0x2D1D JUMP JUMPDEST DUP3 DUP3 PUSH2 0x1F32 DUP2 PUSH2 0x4644 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1F47 JUMPI PUSH2 0x1F47 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP JUMPDEST PUSH1 0xE0 DUP6 ADD MLOAD PUSH1 0x60 ADD MLOAD ISZERO PUSH2 0x1FF6 JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x16 DUP2 MSTORE PUSH22 0x2D2D6D61785072696F72697479466565506572476173 PUSH1 0x50 SHL PUSH1 0x20 DUP3 ADD MSTORE DUP3 DUP3 PUSH2 0x1F99 DUP2 PUSH2 0x4644 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1FAE JUMPI PUSH2 0x1FAE PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH2 0x1FCA DUP6 PUSH1 0xE0 ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH2 0x2D1D JUMP JUMPDEST DUP3 DUP3 PUSH2 0x1FD5 DUP2 PUSH2 0x4644 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1FEA JUMPI PUSH2 0x1FEA PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP JUMPDEST PUSH2 0x100 DUP6 ADD MLOAD MLOAD ISZERO PUSH2 0x210C JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xA DUP2 MSTORE PUSH10 0x2D2D6D65746164617461 PUSH1 0xB0 SHL PUSH1 0x20 DUP3 ADD MSTORE DUP3 DUP3 PUSH2 0x202E DUP2 PUSH2 0x4644 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x2043 JUMPI PUSH2 0x2043 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH2 0x100 DUP6 ADD MLOAD PUSH1 0x40 MLOAD PUSH4 0x7005681F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP2 PUSH4 0xE00AD03E SWAP2 PUSH2 0x207F SWAP2 SWAP1 PUSH1 0x4 ADD PUSH2 0x46A5 JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2099 JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x20C0 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x429F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x20D0 SWAP2 SWAP1 PUSH2 0x4579 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP3 DUP3 DUP1 PUSH2 0x20EB SWAP1 PUSH2 0x4644 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x2100 JUMPI PUSH2 0x2100 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x8 DUP2 MSTORE PUSH8 0x1696B7B934B3B4B7 PUSH1 0xC1 SHL PUSH1 0x20 DUP3 ADD MSTORE DUP3 DUP3 PUSH2 0x2136 DUP2 PUSH2 0x4644 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x214B JUMPI PUSH2 0x214B PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x7 DUP2 MSTORE PUSH1 0x20 ADD PUSH7 0x466F756E647279 PUSH1 0xC8 SHL DUP2 MSTORE POP DUP3 DUP3 DUP1 PUSH2 0x2182 SWAP1 PUSH2 0x4644 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x2197 JUMPI PUSH2 0x2197 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH0 DUP2 PUSH1 0xFF AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x21BE JUMPI PUSH2 0x21BE PUSH2 0x3FC8 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x21F1 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x21DC JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH0 JUMPDEST DUP3 PUSH1 0xFF AND DUP2 PUSH1 0xFF AND LT ISZERO PUSH2 0x2249 JUMPI DUP4 DUP2 PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x2219 JUMPI PUSH2 0x2219 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x2236 JUMPI PUSH2 0x2236 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x21F6 JUMP JUMPDEST POP SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x227C PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH0 PUSH1 0x3 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x4 DUP1 DUP3 MSTORE PUSH4 0xC4C2E6D PUSH1 0xE3 SHL PUSH1 0x20 DUP4 ADD MSTORE SWAP2 MLOAD PUSH4 0x34515CDB PUSH1 0xE2 SHL DUP2 MSTORE PUSH0 MLOAD PUSH1 0x20 PUSH2 0x7E43 PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SWAP3 PUSH0 SWAP2 DUP5 SWAP2 PUSH4 0xD145736C SWAP2 PUSH2 0x22C8 SWAP2 DUP7 SWAP2 ADD PUSH2 0x46F7 JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x22E2 JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x2309 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x429F JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0x2316 DUP7 DUP4 PUSH2 0x33B1 JUMP JUMPDEST SWAP1 POP PUSH0 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF45C1CE7 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2345 SWAP2 SWAP1 PUSH2 0x4736 JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2360 JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x2387 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4799 JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP PUSH1 0x3 SIGNEXTEND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x23A0 JUMPI POP PUSH1 0x20 DUP2 ADD MLOAD MLOAD ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x23AF JUMPI POP PUSH1 0x40 DUP2 ADD MLOAD MLOAD ISZERO JUMPDEST ISZERO PUSH2 0x1497 JUMPI DUP2 PUSH0 DUP2 MLOAD DUP2 LT PUSH2 0x23C6 JUMPI PUSH2 0x23C6 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xCC8 SWAP2 SWAP1 PUSH2 0x4845 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xFEC62BB PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x60 SWAP1 PUSH0 MLOAD PUSH1 0x20 PUSH2 0x7E43 PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SWAP1 DUP2 SWAP1 PUSH4 0x3FB18AEC SWAP1 PUSH2 0x2415 SWAP1 DUP8 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x40DB JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2431 JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2455 SWAP2 SWAP1 PUSH2 0x4428 JUMP JUMPDEST ISZERO PUSH2 0x2598 JUMPI PUSH1 0x40 MLOAD PUSH4 0x8BB75533 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x8BB75533 SWAP1 PUSH2 0x248A SWAP1 DUP9 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x40DB JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x24A4 JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x24CB SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4A06 JUMP JUMPDEST SWAP1 POP PUSH1 0x2 DUP2 MLOAD GT ISZERO PUSH2 0x24EA JUMPI DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xCC8 SWAP3 SWAP2 SWAP1 PUSH2 0x4ACF JUMP JUMPDEST PUSH0 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x24FE JUMPI PUSH2 0x24FE PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x8BB75533 DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2534 SWAP2 SWAP1 PUSH2 0x4B2F JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x254E JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x2575 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4A06 JUMP JUMPDEST PUSH0 DUP2 MLOAD DUP2 LT PUSH2 0x2586 JUMPI PUSH2 0x2586 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP4 POP POP POP POP PUSH2 0xBDC JUMP JUMPDEST DUP3 ISZERO PUSH2 0x25B1 JUMPI DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xCC8 SWAP3 SWAP2 SWAP1 PUSH2 0x4B63 JUMP JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH0 DUP2 MSTORE PUSH2 0xBDC JUMP JUMPDEST PUSH0 PUSH0 DUP3 MLOAD PUSH1 0x20 DUP5 ADD PUSH0 CREATE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP2 PUSH2 0x100 ADD MLOAD ISZERO PUSH2 0x25E7 JUMPI POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x25F3 DUP5 DUP5 DUP5 PUSH2 0x34E8 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0x25FF DUP3 PUSH2 0x2256 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD DUP2 MLOAD SWAP2 SWAP3 POP SWAP1 PUSH0 MLOAD PUSH1 0x20 PUSH2 0x7E43 PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SWAP1 PUSH1 0x3 SIGNEXTEND PUSH0 SUB PUSH2 0x26C5 JUMPI PUSH1 0x40 MLOAD PUSH4 0xFEC62BB PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0x3FB18AEC SWAP1 PUSH2 0x264E SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x4B9E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x266A JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x268E SWAP2 SWAP1 PUSH2 0x4428 JUMP JUMPDEST ISZERO PUSH2 0x26B4 JUMPI PUSH1 0x40 DUP4 ADD MLOAD MLOAD ISZERO PUSH2 0x26AB JUMPI PUSH2 0x26AB DUP4 PUSH1 0x40 ADD MLOAD PUSH2 0xB1A JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xCC8 SWAP2 SWAP1 PUSH2 0x4BD9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xFEC62BB PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0x3FB18AEC SWAP1 PUSH2 0x26F1 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x4C1C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x270D JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2731 SWAP2 SWAP1 PUSH2 0x4428 JUMP JUMPDEST ISZERO PUSH2 0x275F JUMPI PUSH1 0x40 DUP4 ADD MLOAD MLOAD ISZERO PUSH2 0x274E JUMPI PUSH2 0x274E DUP4 PUSH1 0x40 ADD MLOAD PUSH2 0xB1A JUMP JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xCC8 SWAP2 SWAP1 PUSH2 0x4C56 JUMP JUMPDEST DUP3 PUSH1 0x40 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xCC8 SWAP2 SWAP1 PUSH2 0x4BD9 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH4 0xB9CDBDB PUSH1 0xE2 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 SWAP1 PUSH0 MLOAD PUSH1 0x20 PUSH2 0x7E43 PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SWAP1 PUSH2 0x27AC SWAP1 DUP5 SWAP1 PUSH2 0x2C63 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x27DD JUMPI POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH4 0xB9CDBDB PUSH1 0xE2 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x27D9 SWAP1 DUP5 SWAP1 PUSH2 0x3BEB JUMP JUMPDEST PUSH1 0x1 EQ JUMPDEST ISZERO PUSH2 0x284F JUMPI PUSH1 0x40 MLOAD PUSH4 0x7005681F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0xE00AD03E SWAP1 PUSH2 0x280E SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x4C92 JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2828 JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xBDC SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x429F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x1 DUP2 MSTORE PUSH1 0x1D PUSH1 0xF9 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x2872 SWAP1 DUP5 SWAP1 PUSH2 0x3BEB JUMP JUMPDEST PUSH1 0x1 SUB PUSH2 0x2908 JUMPI PUSH1 0x40 MLOAD PUSH4 0x8BB75533 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0x8BB75533 SWAP1 PUSH2 0x28A5 SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x4CDB JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x28BF JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x28E6 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4A06 JUMP JUMPDEST PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x28F8 JUMPI PUSH2 0x28F8 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x5 DUP2 MSTORE PUSH5 0x173539B7B7 PUSH1 0xD9 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x292F SWAP1 DUP5 SWAP1 PUSH2 0x2C63 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2961 JUMPI POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x5 DUP2 MSTORE PUSH5 0x173539B7B7 PUSH1 0xD9 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x295D SWAP1 DUP5 SWAP1 PUSH2 0x3BEB JUMP JUMPDEST PUSH1 0x1 EQ JUMPDEST ISZERO PUSH2 0x2A77 JUMPI PUSH1 0x40 MLOAD PUSH4 0x8BB75533 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x8BB75533 SWAP1 PUSH2 0x2994 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x4D10 JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x29AE JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x29D5 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4A06 JUMP JUMPDEST SWAP1 POP PUSH0 DUP2 PUSH1 0x1 DUP4 MLOAD PUSH2 0x29E7 SWAP2 SWAP1 PUSH2 0x4D45 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x29F7 JUMPI PUSH2 0x29F7 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xE00AD03E DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2A2D SWAP2 SWAP1 PUSH2 0x4D58 JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2A47 JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x2A6E SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x429F JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xCC8 SWAP2 SWAP1 PUSH2 0x4DA2 JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH4 0xB9CDBDB PUSH1 0xE2 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 SWAP1 PUSH0 MLOAD PUSH1 0x20 PUSH2 0x7E43 PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SWAP1 PUSH2 0x2AC6 SWAP1 DUP5 SWAP1 PUSH2 0x2C63 JUMP JUMPDEST ISZERO PUSH2 0x2AD2 JUMPI POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x1 DUP2 MSTORE PUSH1 0x1D PUSH1 0xF9 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x2AF5 SWAP1 DUP5 SWAP1 PUSH2 0x3BEB JUMP JUMPDEST PUSH1 0x1 SUB PUSH2 0x2B7A JUMPI PUSH1 0x40 MLOAD PUSH4 0x8BB75533 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0x8BB75533 SWAP1 PUSH2 0x2B28 SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x4CDB JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2B42 JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x2B69 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4A06 JUMP JUMPDEST PUSH0 DUP2 MLOAD DUP2 LT PUSH2 0x28F8 JUMPI PUSH2 0x28F8 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x5 DUP2 MSTORE PUSH5 0x173539B7B7 PUSH1 0xD9 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x2BA1 SWAP1 DUP5 SWAP1 PUSH2 0x2C63 JUMP JUMPDEST ISZERO PUSH2 0x2A77 JUMPI PUSH1 0x40 MLOAD PUSH4 0x8BB75533 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x8BB75533 SWAP1 PUSH2 0x2BD4 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x4D10 JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2BEE JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x2C15 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4A06 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP2 MLOAD GT ISZERO PUSH2 0x2C51 JUMPI DUP1 PUSH1 0x2 DUP3 MLOAD PUSH2 0x2C30 SWAP2 SWAP1 PUSH2 0x4D45 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x2C40 JUMPI PUSH2 0x2C40 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST POP DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xCC8 SWAP2 SWAP1 PUSH2 0x4DA2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x8BB75533 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 SWAP1 PUSH0 MLOAD PUSH1 0x20 PUSH2 0x7E43 PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SWAP1 DUP3 SWAP1 DUP3 SWAP1 PUSH4 0x8BB75533 SWAP1 PUSH2 0x2C9B SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x40DB JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2CB5 JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x2CDC SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4A06 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP2 MLOAD GT DUP1 ISZERO PUSH2 0x2A6E JUMPI POP DUP1 PUSH1 0x1 DUP3 MLOAD PUSH2 0x2CF9 SWAP2 SWAP1 PUSH2 0x4D45 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x2D09 JUMPI PUSH2 0x2D09 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD PUSH0 EQ SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH0 PUSH2 0x2D29 DUP4 PUSH2 0x3C74 JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x2D47 JUMPI PUSH2 0x2D47 PUSH2 0x3FC8 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2D71 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH0 NOT ADD PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0x2D7B JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 ADD MLOAD DUP2 MLOAD DUP1 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0xA DUP3 MSTORE PUSH10 0x1553931250D15394D151 PUSH1 0xB2 SHL PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x60 SWAP2 PUSH2 0x2DDF SWAP1 DUP3 SWAP1 PUSH2 0x3D4B JUMP JUMPDEST ISZERO PUSH2 0x2E06 JUMPI POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH4 0x4E6F6E65 PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x9 DUP2 MSTORE PUSH9 0x556E6C6963656E7365 PUSH1 0xB8 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x2E31 SWAP1 DUP3 SWAP1 PUSH2 0x3D4B JUMP JUMPDEST ISZERO PUSH2 0x2E5D JUMPI POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x9 DUP2 MSTORE PUSH9 0x556E6C6963656E7365 PUSH1 0xB8 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x3 DUP2 MSTORE PUSH3 0x135255 PUSH1 0xEA SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x2E82 SWAP1 DUP3 SWAP1 PUSH2 0x3D4B JUMP JUMPDEST ISZERO PUSH2 0x2EA8 JUMPI POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x3 DUP2 MSTORE PUSH3 0x135255 PUSH1 0xEA SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xC DUP2 MSTORE PUSH12 0x47504C2D322E302D6F6E6C79 PUSH1 0xA0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x2ED6 SWAP1 DUP3 SWAP1 PUSH2 0x3D4B JUMP JUMPDEST DUP1 PUSH2 0x2F0E JUMPI POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x10 DUP2 MSTORE PUSH16 0x23A8261699171816B7B916B630BA32B9 PUSH1 0x81 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x2F0E SWAP1 DUP3 SWAP1 PUSH2 0x3D4B JUMP JUMPDEST ISZERO PUSH2 0x2F3A JUMPI POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x9 DUP2 MSTORE PUSH9 0x23A72A9023A8263B19 PUSH1 0xB9 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xC DUP2 MSTORE PUSH12 0x47504C2D332E302D6F6E6C79 PUSH1 0xA0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x2F68 SWAP1 DUP3 SWAP1 PUSH2 0x3D4B JUMP JUMPDEST DUP1 PUSH2 0x2FA0 JUMPI POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x10 DUP2 MSTORE PUSH16 0x23A8261699971816B7B916B630BA32B9 PUSH1 0x81 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x2FA0 SWAP1 DUP3 SWAP1 PUSH2 0x3D4B JUMP JUMPDEST ISZERO PUSH2 0x2FCC JUMPI POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x9 DUP2 MSTORE PUSH9 0x474E552047504C7633 PUSH1 0xB8 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xD DUP2 MSTORE PUSH13 0x4C47504C2D322E312D6F6E6C79 PUSH1 0x98 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x2FFB SWAP1 DUP3 SWAP1 PUSH2 0x3D4B JUMP JUMPDEST DUP1 PUSH2 0x3034 JUMPI POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x11 DUP2 MSTORE PUSH17 0x2623A8261699171896B7B916B630BA32B9 PUSH1 0x79 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x3034 SWAP1 DUP3 SWAP1 PUSH2 0x3D4B JUMP JUMPDEST ISZERO PUSH2 0x3063 JUMPI POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xC DUP2 MSTORE PUSH12 0x474E55204C47504C76322E31 PUSH1 0xA0 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xD DUP2 MSTORE PUSH13 0x4C47504C2D332E302D6F6E6C79 PUSH1 0x98 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x3092 SWAP1 DUP3 SWAP1 PUSH2 0x3D4B JUMP JUMPDEST DUP1 PUSH2 0x30CB JUMPI POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x11 DUP2 MSTORE PUSH17 0x2623A8261699971816B7B916B630BA32B9 PUSH1 0x79 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x30CB SWAP1 DUP3 SWAP1 PUSH2 0x3D4B JUMP JUMPDEST ISZERO PUSH2 0x30F8 JUMPI POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xA DUP2 MSTORE PUSH10 0x474E55204C47504C7633 PUSH1 0xB0 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xC DUP2 MSTORE PUSH12 0x4253442D322D436C61757365 PUSH1 0xA0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x3126 SWAP1 DUP3 SWAP1 PUSH2 0x3D4B JUMP JUMPDEST ISZERO PUSH2 0x3155 JUMPI POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xC DUP2 MSTORE PUSH12 0x4253442D322D436C61757365 PUSH1 0xA0 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xC DUP2 MSTORE PUSH12 0x4253442D332D436C61757365 PUSH1 0xA0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x3183 SWAP1 DUP3 SWAP1 PUSH2 0x3D4B JUMP JUMPDEST ISZERO PUSH2 0x31B2 JUMPI POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xC DUP2 MSTORE PUSH12 0x4253442D332D436C61757365 PUSH1 0xA0 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x7 DUP2 MSTORE PUSH7 0x4D504C2D322E3 PUSH1 0xCC SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x31DB SWAP1 DUP3 SWAP1 PUSH2 0x3D4B JUMP JUMPDEST ISZERO PUSH2 0x3205 JUMPI POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x7 DUP2 MSTORE PUSH7 0x4D504C2D322E3 PUSH1 0xCC SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x7 DUP2 MSTORE PUSH7 0x4F534C2D332E3 PUSH1 0xCC SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x322E SWAP1 DUP3 SWAP1 PUSH2 0x3D4B JUMP JUMPDEST ISZERO PUSH2 0x3258 JUMPI POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x7 DUP2 MSTORE PUSH7 0x4F534C2D332E3 PUSH1 0xCC SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xA DUP2 MSTORE PUSH10 0x4170616368652D322E3 PUSH1 0xB4 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x3284 SWAP1 DUP3 SWAP1 PUSH2 0x3D4B JUMP JUMPDEST ISZERO PUSH2 0x32B1 JUMPI POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xA DUP2 MSTORE PUSH10 0x4170616368652D322E3 PUSH1 0xB4 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xD DUP2 MSTORE PUSH13 0x4147504C2D332E302D6F6E6C79 PUSH1 0x98 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x32E0 SWAP1 DUP3 SWAP1 PUSH2 0x3D4B JUMP JUMPDEST DUP1 PUSH2 0x3319 JUMPI POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x11 DUP2 MSTORE PUSH17 0x20A3A8261699971816B7B916B630BA32B9 PUSH1 0x79 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x3319 SWAP1 DUP3 SWAP1 PUSH2 0x3D4B JUMP JUMPDEST ISZERO PUSH2 0x3346 JUMPI POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xA DUP2 MSTORE PUSH10 0x474E55204147504C7633 PUSH1 0xB0 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x8 DUP2 MSTORE PUSH8 0x4255534C2D312E31 PUSH1 0xC0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x3370 SWAP1 DUP3 SWAP1 PUSH2 0x3D4B JUMP JUMPDEST ISZERO PUSH2 0x339A JUMPI POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x7 DUP2 MSTORE PUSH7 0x42534C20312E31 PUSH1 0xC8 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 DUP5 ADD MLOAD DUP5 MLOAD SWAP2 MLOAD PUSH2 0xCC8 SWAP3 SWAP1 PUSH1 0x20 ADD PUSH2 0x4E4E JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x343B JUMPI DUP2 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x33D2 JUMPI PUSH2 0x33D2 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x33EB SWAP3 SWAP2 SWAP1 PUSH2 0x42D0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP2 POP PUSH1 0x1 DUP6 MLOAD PUSH2 0x340A SWAP2 SWAP1 PUSH2 0x4D45 JUMP JUMPDEST DUP2 EQ PUSH2 0x3433 JUMPI DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3421 SWAP2 SWAP1 PUSH2 0x4F83 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP2 POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x33B6 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x3 DUP1 DUP3 MSTORE PUSH1 0x80 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH0 SWAP2 DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x3453 JUMPI SWAP1 POP POP SWAP1 POP DUP4 DUP2 PUSH0 DUP2 MLOAD DUP2 LT PUSH2 0x347D JUMPI PUSH2 0x347D PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2D63 PUSH1 0xF0 SHL DUP2 MSTORE POP DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x34B6 JUMPI PUSH2 0x34B6 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP2 DUP2 PUSH1 0x2 DUP2 MLOAD DUP2 LT PUSH2 0x34D5 JUMPI PUSH2 0x34D5 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH0 PUSH2 0x34F3 PUSH2 0xE82 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH3 0x10000 DUP1 DUP3 MSTORE PUSH3 0x200020 DUP3 ADD SWAP1 SWAP3 MSTORE SWAP2 SWAP3 POP PUSH0 SWAP2 SWAP1 DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x3512 JUMPI POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x3 DUP2 MSTORE PUSH3 0xDCE0F PUSH1 0xEB SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 SWAP2 POP PUSH0 SWAP1 DUP3 DUP3 PUSH2 0x3550 DUP2 PUSH2 0x4F9F JUMP JUMPDEST SWAP4 POP PUSH2 0xFFFF AND DUP2 MLOAD DUP2 LT PUSH2 0x3566 JUMPI PUSH2 0x3566 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x7 DUP2 MSTORE PUSH1 0x20 ADD PUSH7 0x5E312E33372E3 PUSH1 0xCC SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x35A1 SWAP2 SWAP1 PUSH2 0x4FB6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP3 DUP3 DUP1 PUSH2 0x35BC SWAP1 PUSH2 0x4F9F JUMP JUMPDEST SWAP4 POP PUSH2 0xFFFF AND DUP2 MLOAD DUP2 LT PUSH2 0x35D2 JUMPI PUSH2 0x35D2 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x8 DUP2 MSTORE PUSH1 0x20 ADD PUSH8 0x76616C6964617465 PUSH1 0xC0 SHL DUP2 MSTORE POP DUP3 DUP3 DUP1 PUSH2 0x360A SWAP1 PUSH2 0x4F9F JUMP JUMPDEST SWAP4 POP PUSH2 0xFFFF AND DUP2 MLOAD DUP2 LT PUSH2 0x3620 JUMPI PUSH2 0x3620 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x363C SWAP2 SWAP1 PUSH2 0x459F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP3 DUP3 DUP1 PUSH2 0x3657 SWAP1 PUSH2 0x4F9F JUMP JUMPDEST SWAP4 POP PUSH2 0xFFFF AND DUP2 MLOAD DUP2 LT PUSH2 0x366D JUMPI PUSH2 0x366D PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xA DUP2 MSTORE PUSH1 0x20 ADD PUSH10 0xB4B58DBDB9D1C9858DD PUSH1 0xB2 SHL DUP2 MSTORE POP DUP3 DUP3 DUP1 PUSH2 0x36A7 SWAP1 PUSH2 0x4F9F JUMP JUMPDEST SWAP4 POP PUSH2 0xFFFF AND DUP2 MLOAD DUP2 LT PUSH2 0x36BD JUMPI PUSH2 0x36BD PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH2 0x36D2 DUP8 DUP5 PUSH2 0x3D6F JUMP JUMPDEST DUP3 DUP3 PUSH2 0x36DD DUP2 PUSH2 0x4F9F JUMP JUMPDEST SWAP4 POP PUSH2 0xFFFF AND DUP2 MLOAD DUP2 LT PUSH2 0x36F3 JUMPI PUSH2 0x36F3 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP7 MLOAD MLOAD SWAP1 DUP8 ADD MLOAD MLOAD SWAP1 ISZERO DUP1 ISZERO SWAP2 ISZERO ISZERO SWAP1 PUSH2 0x37D2 JUMPI PUSH0 DUP2 PUSH2 0x372D JUMPI DUP9 MLOAD PUSH2 0x3728 SWAP1 DUP8 PUSH2 0x3D6F JUMP JUMPDEST PUSH2 0x3730 JUMP JUMPDEST DUP9 MLOAD JUMPDEST SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xB DUP2 MSTORE PUSH1 0x20 ADD PUSH11 0x2D2D7265666572656E6365 PUSH1 0xA8 SHL DUP2 MSTORE POP DUP6 DUP6 DUP1 PUSH2 0x3762 SWAP1 PUSH2 0x4F9F JUMP JUMPDEST SWAP7 POP PUSH2 0xFFFF AND DUP2 MLOAD DUP2 LT PUSH2 0x3778 JUMPI PUSH2 0x3778 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP1 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3794 SWAP2 SWAP1 PUSH2 0x4579 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP6 DUP6 DUP1 PUSH2 0x37AF SWAP1 PUSH2 0x4F9F JUMP JUMPDEST SWAP7 POP PUSH2 0xFFFF AND DUP2 MLOAD DUP2 LT PUSH2 0x37C5 JUMPI PUSH2 0x37C5 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP POP JUMPDEST DUP1 ISZERO PUSH2 0x388A JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x18 DUP2 MSTORE PUSH32 0x2D2D7265666572656E63654275696C64496E666F446972730000000000000000 PUSH1 0x20 DUP3 ADD MSTORE DUP5 DUP5 PUSH2 0x3817 DUP2 PUSH2 0x4F9F JUMP JUMPDEST SWAP6 POP PUSH2 0xFFFF AND DUP2 MLOAD DUP2 LT PUSH2 0x382D JUMPI PUSH2 0x382D PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP8 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x384D SWAP2 SWAP1 PUSH2 0x4579 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP5 DUP5 DUP1 PUSH2 0x3868 SWAP1 PUSH2 0x4F9F JUMP JUMPDEST SWAP6 POP PUSH2 0xFFFF AND DUP2 MLOAD DUP2 LT PUSH2 0x387E JUMPI PUSH2 0x387E PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP JUMPDEST PUSH0 JUMPDEST DUP9 PUSH1 0x60 ADD MLOAD MLOAD DUP2 PUSH1 0xFF AND LT ISZERO PUSH2 0x3975 JUMPI PUSH0 DUP10 PUSH1 0x60 ADD MLOAD DUP3 PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x38B6 JUMPI PUSH2 0x38B6 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP1 MLOAD PUSH0 EQ PUSH2 0x3962 JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x9 DUP2 MSTORE PUSH9 0x2D2D6578636C756465 PUSH1 0xB8 SHL PUSH1 0x20 DUP3 ADD MSTORE DUP7 DUP7 PUSH2 0x38F3 DUP2 PUSH2 0x4F9F JUMP JUMPDEST SWAP8 POP PUSH2 0xFFFF AND DUP2 MLOAD DUP2 LT PUSH2 0x3909 JUMPI PUSH2 0x3909 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP1 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3925 SWAP2 SWAP1 PUSH2 0x4579 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP7 DUP7 DUP1 PUSH2 0x3940 SWAP1 PUSH2 0x4F9F JUMP JUMPDEST SWAP8 POP PUSH2 0xFFFF AND DUP2 MLOAD DUP2 LT PUSH2 0x3956 JUMPI PUSH2 0x3956 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP JUMPDEST POP DUP1 PUSH2 0x396D DUP2 PUSH2 0x4644 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x388C JUMP JUMPDEST POP DUP8 PUSH1 0xE0 ADD MLOAD ISZERO PUSH2 0x39E5 JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x18 DUP2 MSTORE PUSH32 0x2D2D756E73616665536B697053746F72616765436865636B0000000000000000 PUSH1 0x20 DUP3 ADD MSTORE DUP5 DUP5 PUSH2 0x39BF DUP2 PUSH2 0x4F9F JUMP JUMPDEST SWAP6 POP PUSH2 0xFFFF AND DUP2 MLOAD DUP2 LT PUSH2 0x39D5 JUMPI PUSH2 0x39D5 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH2 0x3A41 JUMP JUMPDEST DUP7 ISZERO PUSH2 0x3A41 JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x12 DUP2 MSTORE PUSH18 0x2D2D726571756972655265666572656E6365 PUSH1 0x70 SHL PUSH1 0x20 DUP3 ADD MSTORE DUP5 DUP5 PUSH2 0x3A1F DUP2 PUSH2 0x4F9F JUMP JUMPDEST SWAP6 POP PUSH2 0xFFFF AND DUP2 MLOAD DUP2 LT PUSH2 0x3A35 JUMPI PUSH2 0x3A35 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP JUMPDEST PUSH1 0x80 DUP9 ADD MLOAD MLOAD ISZERO PUSH2 0x3ACF JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xD DUP2 MSTORE PUSH13 0x2D2D756E73616665416C6C6F77 PUSH1 0x98 SHL PUSH1 0x20 DUP3 ADD MSTORE DUP5 DUP5 PUSH2 0x3A7B DUP2 PUSH2 0x4F9F JUMP JUMPDEST SWAP6 POP PUSH2 0xFFFF AND DUP2 MLOAD DUP2 LT PUSH2 0x3A91 JUMPI PUSH2 0x3A91 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP8 PUSH1 0x80 ADD MLOAD DUP5 DUP5 DUP1 PUSH2 0x3AAD SWAP1 PUSH2 0x4F9F JUMP JUMPDEST SWAP6 POP PUSH2 0xFFFF AND DUP2 MLOAD DUP2 LT PUSH2 0x3AC3 JUMPI PUSH2 0x3AC3 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP JUMPDEST DUP8 PUSH1 0xA0 ADD MLOAD ISZERO PUSH2 0x3B31 JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x14 DUP2 MSTORE PUSH20 0x2D2D756E73616665416C6C6F7752656E616D6573 PUSH1 0x60 SHL PUSH1 0x20 DUP3 ADD MSTORE DUP5 DUP5 PUSH2 0x3B0F DUP2 PUSH2 0x4F9F JUMP JUMPDEST SWAP6 POP PUSH2 0xFFFF AND DUP2 MLOAD DUP2 LT PUSH2 0x3B25 JUMPI PUSH2 0x3B25 PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP JUMPDEST PUSH0 DUP4 PUSH2 0xFFFF AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x3B4E JUMPI PUSH2 0x3B4E PUSH2 0x3FC8 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3B81 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x3B6C JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH0 JUMPDEST DUP5 PUSH2 0xFFFF AND DUP2 PUSH2 0xFFFF AND LT ISZERO PUSH2 0x3BDD JUMPI DUP6 DUP2 PUSH2 0xFFFF AND DUP2 MLOAD DUP2 LT PUSH2 0x3BAC JUMPI PUSH2 0x3BAC PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 PUSH2 0xFFFF AND DUP2 MLOAD DUP2 LT PUSH2 0x3BCA JUMPI PUSH2 0x3BCA PUSH2 0x3FDC JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x3B86 JUMP JUMPDEST POP SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x8BB75533 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 SWAP1 PUSH0 MLOAD PUSH1 0x20 PUSH2 0x7E43 PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SWAP1 DUP3 SWAP1 DUP3 SWAP1 PUSH4 0x8BB75533 SWAP1 PUSH2 0x3C23 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x40DB JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3C3D JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x3C64 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4A06 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP2 MLOAD PUSH2 0x2A6E SWAP2 SWAP1 PUSH2 0x4D45 JUMP JUMPDEST PUSH0 DUP1 PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 LT PUSH2 0x3CB2 JUMPI PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x3CDE JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x3CFC JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x3D14 JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x3D28 JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x3D3A JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0xAC8 JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD DUP4 MLOAD EQ DUP1 ISZERO PUSH2 0xBDC JUMPI POP POP DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 DUP3 MLOAD SWAP3 SWAP1 SWAP2 ADD SWAP2 SWAP1 SWAP2 KECCAK256 EQ SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH0 PUSH2 0x3D7C DUP5 DUP5 PUSH2 0xF17 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP1 DUP4 ADD MLOAD PUSH1 0x40 MLOAD SWAP4 SWAP5 POP PUSH2 0x3D96 SWAP4 SWAP1 SWAP2 ADD PUSH2 0x4FE7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x4C4 DUP1 PUSH2 0x5007 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH2 0x2978 DUP1 PUSH2 0x54CB DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x140 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3E1F PUSH2 0x3E24 JUMP JUMPDEST SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x120 ADD PUSH1 0x40 MSTORE DUP1 PUSH0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3E8A PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH0 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3EA7 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3EBE JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xBDC JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x3EE8 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x2A88 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST DUP1 SLOAD PUSH0 SWAP1 PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x3F1E JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x3F3C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST DUP2 DUP7 MSTORE PUSH1 0x20 DUP7 ADD DUP2 DUP1 ISZERO PUSH2 0x3F57 JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x3F6D JUMPI PUSH2 0x3F99 JUMP JUMPDEST PUSH1 0xFF NOT DUP6 AND DUP3 MSTORE DUP4 ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD SWAP6 POP PUSH2 0x3F99 JUMP JUMPDEST PUSH0 DUP8 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 PUSH0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x3F93 JUMPI DUP2 SLOAD DUP5 DUP3 ADD MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD PUSH2 0x3F77 JUMP JUMPDEST DUP4 ADD SWAP7 POP POP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH0 PUSH2 0x3FB6 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x3F06 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xBD8 DUP2 DUP6 PUSH2 0x3F06 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 DUP2 AND PUSH1 0x20 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 DUP5 AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP4 ADD DUP2 SWAP1 MSTORE DUP4 MLOAD SWAP1 DUP4 ADD DUP2 SWAP1 MSTORE PUSH0 SWAP2 DUP5 ADD SWAP1 PUSH1 0xA0 DUP5 ADD SWAP1 DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x4055 JUMPI DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x402E JUMP JUMPDEST POP SWAP1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD DUP1 DUP5 MSTORE DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP7 ADD MCOPY PUSH0 PUSH1 0x20 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH0 PUSH2 0x40A3 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x4063 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x20 DUP4 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH0 PUSH2 0x40CC PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x4063 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x20 DUP4 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH0 PUSH2 0x40ED PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x4063 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xBD8 DUP2 DUP6 PUSH2 0x4063 JUMP JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH0 PUSH2 0x4111 PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x4063 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x4123 DUP2 DUP7 PUSH2 0x4063 JUMP JUMPDEST SWAP2 POP POP PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x40 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH0 PUSH2 0xBDC PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x4063 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH0 SWAP1 PUSH2 0x4171 SWAP1 DUP4 ADD DUP5 PUSH2 0x4063 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD DUP1 PUSH1 0x20 DUP5 ADD DUP6 MCOPY PUSH0 SWAP4 ADD SWAP3 DUP4 MSTORE POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4661696C656420746F206465706C6F7920636F6E747261637420000000000000 DUP2 MSTORE PUSH0 PUSH2 0x41C1 PUSH1 0x1A DUP4 ADD DUP6 PUSH2 0x4179 JUMP JUMPDEST PUSH2 0x1D1 PUSH1 0xF5 SHL DUP2 MSTORE PUSH2 0xBD8 PUSH1 0x2 DUP3 ADD DUP6 PUSH2 0x4179 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x60 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x41F8 JUMPI PUSH2 0x41F8 PUSH2 0x3FC8 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x4226 JUMPI PUSH2 0x4226 PUSH2 0x3FC8 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x423D JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x20 DUP4 ADD PUSH0 PUSH0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP5 GT ISZERO PUSH2 0x425C JUMPI PUSH2 0x425C PUSH2 0x3FC8 JUMP JUMPDEST POP PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD PUSH2 0x4271 DUP2 PUSH2 0x41FE JUMP JUMPDEST SWAP2 POP POP DUP3 DUP2 MSTORE DUP6 DUP4 DUP4 ADD GT ISZERO PUSH2 0x4285 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP3 DUP3 PUSH1 0x20 DUP4 ADD MCOPY PUSH0 SWAP3 DUP2 ADD PUSH1 0x20 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x42AF JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x42C4 JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0xAC4 DUP5 DUP3 DUP6 ADD PUSH2 0x422E JUMP JUMPDEST PUSH0 PUSH2 0x4171 PUSH2 0x42DE DUP4 DUP7 PUSH2 0x4179 JUMP JUMPDEST DUP5 PUSH2 0x4179 JUMP JUMPDEST PUSH32 0x4661696C656420746F206465706C6F7920636F6E747261637420000000000000 DUP2 MSTORE PUSH0 PUSH2 0x4315 PUSH1 0x1A DUP4 ADD DUP6 PUSH2 0x4179 JUMP JUMPDEST PUSH32 0x207573696E6720636F6E7374727563746F722064617461202200000000000000 DUP2 MSTORE PUSH2 0x4345 PUSH1 0x19 DUP3 ADD DUP6 PUSH2 0x4179 JUMP JUMPDEST PUSH1 0x11 PUSH1 0xF9 SHL DUP2 MSTORE PUSH1 0x1 ADD SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0xB PUSH1 0x40 DUP3 ADD MSTORE PUSH11 0x1193D55391149657D3D555 PUSH1 0xAA SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x20 DUP3 ADD MSTORE PUSH0 PUSH2 0xBDC PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x4063 JUMP JUMPDEST PUSH0 PUSH2 0x4397 DUP3 DUP8 PUSH2 0x4179 JUMP JUMPDEST PUSH1 0x2F PUSH1 0xF8 SHL DUP2 MSTORE PUSH2 0x43AB PUSH1 0x1 DUP3 ADD DUP8 PUSH2 0x4179 JUMP JUMPDEST SWAP1 POP PUSH1 0x2F PUSH1 0xF8 SHL DUP2 MSTORE PUSH2 0x43C1 PUSH1 0x1 DUP3 ADD DUP7 PUSH2 0x4179 JUMP JUMPDEST SWAP1 POP PUSH1 0x2F PUSH1 0xF8 SHL DUP2 MSTORE PUSH2 0x43D7 PUSH1 0x1 DUP3 ADD DUP6 PUSH2 0x4179 JUMP JUMPDEST PUSH5 0x173539B7B7 PUSH1 0xD9 SHL DUP2 MSTORE PUSH1 0x5 ADD SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH0 PUSH2 0x4402 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x4063 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x4 DUP2 MSTORE PUSH4 0xB985CDD PUSH1 0xE2 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4438 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xBDC JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH32 0x436F756C64206E6F742066696E642041535420696E2061727469666163742000 DUP2 MSTORE PUSH0 PUSH2 0x4478 PUSH1 0x1F DUP4 ADD DUP5 PUSH2 0x4179 JUMP JUMPDEST PUSH32 0x2E205365742060617374203D20747275656020696E20666F756E6472792E746F DUP2 MSTORE PUSH2 0x1B5B PUSH1 0xF2 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x22 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH0 PUSH2 0x44C2 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x4063 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x11 DUP2 MSTORE PUSH17 0x5CC2E6E85CC2C4E6DED8EAE8CAA0C2E8D PUSH1 0x7B SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH0 PUSH2 0x4507 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x4063 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0xC DUP2 MSTORE PUSH12 0x2E6173742E6C6963656E7365 PUSH1 0xA0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0x2E6D657461646174612E736F75726365732E5B27 PUSH1 0x60 SHL DUP2 MSTORE PUSH0 PUSH2 0x455D PUSH1 0x14 DUP4 ADD DUP5 PUSH2 0x4179 JUMP JUMPDEST PUSH12 0x13AE9735B2B1B1B0B5991A9B PUSH1 0xA1 SHL DUP2 MSTORE PUSH1 0xC ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x11 PUSH1 0xF9 SHL DUP2 MSTORE PUSH0 PUSH2 0x458E PUSH1 0x1 DUP4 ADD DUP5 PUSH2 0x4179 JUMP JUMPDEST PUSH1 0x11 PUSH1 0xF9 SHL DUP2 MSTORE PUSH1 0x1 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x45AA DUP3 DUP5 PUSH2 0x4179 JUMP JUMPDEST PUSH11 0x2F6275696C642D696E666F PUSH1 0xA8 SHL DUP2 MSTORE PUSH1 0xB ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x436F756C64206E6F742066696E64206275696C642D696E666F2066696C652077 DUP2 MSTORE PUSH32 0x697468206D61746368696E6720736F7572636520636F6465206861736820666F PUSH1 0x20 DUP3 ADD MSTORE PUSH11 0x391031B7B73A3930B1BA1 PUSH1 0xAD SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH0 PUSH2 0xBDC PUSH1 0x4B DUP4 ADD DUP5 PUSH2 0x4179 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH1 0xFF DUP3 AND PUSH1 0xFF DUP2 SUB PUSH2 0x4659 JUMPI PUSH2 0x4659 PUSH2 0x4630 JUMP JUMPDEST PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x406F70656E7A657070656C696E2F646566656E6465722D6465706C6F792D636C DUP2 MSTORE PUSH9 0x1A595B9D0B58DB1A5 PUSH1 0xBE SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH0 PUSH2 0xBDC PUSH1 0x29 DUP4 ADD DUP5 PUSH2 0x4179 JUMP JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH0 PUSH2 0x46B7 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x4063 JUMP JUMPDEST DUP3 DUP2 SUB DUP1 PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x1 DUP3 MSTORE PUSH1 0x11 PUSH1 0xF9 SHL PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP2 ADD PUSH1 0x40 DUP6 ADD MSTORE POP PUSH1 0x2 PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x2E11 PUSH1 0xF1 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP2 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x16 PUSH1 0x40 DUP3 ADD MSTORE PUSH22 0x9EA08A9CB48AA0A08A98929CBE8482A690BEA082A89 PUSH1 0x53 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x20 DUP3 ADD MSTORE PUSH0 PUSH2 0xBDC PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x4063 JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD PUSH1 0x20 DUP4 MSTORE DUP1 DUP5 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 DUP6 ADD SWAP2 POP PUSH1 0x40 DUP2 PUSH1 0x5 SHL DUP7 ADD ADD SWAP3 POP PUSH1 0x20 DUP7 ADD PUSH0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x478D JUMPI PUSH1 0x3F NOT DUP8 DUP7 SUB ADD DUP5 MSTORE PUSH2 0x4778 DUP6 DUP4 MLOAD PUSH2 0x4063 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x475C JUMP JUMPDEST POP SWAP3 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x47A9 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x47BE JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP3 ADD PUSH1 0x60 DUP2 DUP6 SUB SLT ISZERO PUSH2 0x47CF JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0x47D7 PUSH2 0x41D6 JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x3 SIGNEXTEND DUP2 EQ PUSH2 0x47E7 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x4801 JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0x480D DUP7 DUP3 DUP6 ADD PUSH2 0x422E JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x482B JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0x4837 DUP7 DUP3 DUP6 ADD PUSH2 0x422E JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x4661696C656420746F2072756E206261736820636F6D6D616E64207769746820 DUP2 MSTORE PUSH1 0x11 PUSH1 0xF9 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH0 PUSH2 0x4880 PUSH1 0x21 DUP4 ADD DUP5 PUSH2 0x4179 JUMP JUMPDEST PUSH32 0x222E20496620796F7520617265207573696E672057696E646F77732C20736574 DUP2 MSTORE PUSH32 0x20746865204F50454E5A455050454C494E5F424153485F5041544820656E7669 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x726F6E6D656E74207661726961626C6520746F207468652066756C6C79207175 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x616C69666965642070617468206F662074686520626173682065786563757461 PUSH1 0x60 DUP3 ADD MSTORE PUSH32 0x626C652E20466F72206578616D706C652C20696620796F752061726520757369 PUSH1 0x80 DUP3 ADD MSTORE PUSH32 0x6E672047697420666F722057696E646F77732C206164642074686520666F6C6C PUSH1 0xA0 DUP3 ADD MSTORE PUSH32 0x6F77696E67206C696E6520696E20746865202E656E762066696C65206F662079 PUSH1 0xC0 DUP3 ADD MSTORE PUSH32 0x6F75722070726F6A65637420287573696E6720666F727761726420736C617368 PUSH1 0xE0 DUP3 ADD MSTORE PUSH32 0x6573293A0A4F50454E5A455050454C494E5F424153485F504154483D22433A2F PUSH2 0x100 DUP3 ADD MSTORE PUSH32 0x50726F6772616D2046696C65732F4769742F62696E2F62617368220000000000 PUSH2 0x120 DUP3 ADD MSTORE PUSH2 0x13B ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4A16 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x4A2B JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP3 ADD PUSH1 0x1F DUP2 ADD DUP5 SGT PUSH2 0x4A3B JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x4A54 JUMPI PUSH2 0x4A54 PUSH2 0x3FC8 JUMP JUMPDEST DUP1 PUSH1 0x5 SHL PUSH2 0x4A64 PUSH1 0x20 DUP3 ADD PUSH2 0x41FE JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP2 DUP5 ADD DUP2 ADD SWAP3 SWAP1 DUP2 ADD SWAP1 DUP8 DUP5 GT ISZERO PUSH2 0x4A7F JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH1 0x20 DUP6 ADD SWAP3 POP JUMPDEST DUP4 DUP4 LT ISZERO PUSH2 0x4AC4 JUMPI DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x4AA3 JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0x4AB2 DUP10 PUSH1 0x20 DUP4 DUP10 ADD ADD PUSH2 0x422E JUMP JUMPDEST DUP4 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x4A86 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x466F756E64206D756C7469706C65206F6363757272656E636573206F66207072 DUP2 MSTORE PUSH6 0x656669782027 PUSH1 0xD0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH0 PUSH2 0x4B0F PUSH1 0x26 DUP4 ADD DUP6 PUSH2 0x4179 JUMP JUMPDEST PUSH13 0x139034B71037BABA383ABA1D1 PUSH1 0x9D SHL DUP2 MSTORE PUSH2 0xBD8 PUSH1 0xD DUP3 ADD DUP6 PUSH2 0x4179 JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH0 PUSH2 0x4B41 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x4063 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 SWAP4 DUP5 ADD MSTORE PUSH1 0x1 DUP2 MSTORE PUSH1 0x5 PUSH1 0xF9 SHL SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE POP PUSH1 0x40 ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4661696C656420746F2066696E64206C696E6520776974682070726566697820 DUP2 MSTORE PUSH1 0x27 PUSH1 0xF8 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH0 PUSH2 0x4B0F PUSH1 0x21 DUP4 ADD DUP6 PUSH2 0x4179 JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH0 PUSH2 0x4BB0 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x4063 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x7 DUP2 MSTORE PUSH7 0x53554343455353 PUSH1 0xC8 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4661696C656420746F2072756E2075706772616465207361666574792076616C DUP2 MSTORE PUSH9 0x34B230BA34B7B71D1 PUSH1 0xBD SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH0 PUSH2 0xBDC PUSH1 0x29 DUP4 ADD DUP5 PUSH2 0x4179 JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH0 PUSH2 0x4C2E PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x4063 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x6 DUP2 MSTORE PUSH6 0x119052531151 PUSH1 0xD2 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x55706772616465207361666574792076616C69646174696F6E206661696C6564 DUP2 MSTORE PUSH2 0x1D05 PUSH1 0xF1 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH0 PUSH2 0xBDC PUSH1 0x22 DUP4 ADD DUP5 PUSH2 0x4179 JUMP JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH0 PUSH2 0x4CA4 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x4063 JUMP JUMPDEST DUP3 DUP2 SUB DUP1 PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x4 DUP3 MSTORE PUSH4 0xB9CDBDB PUSH1 0xE2 SHL PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP2 ADD PUSH1 0x40 DUP6 ADD MSTORE POP PUSH0 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH0 PUSH2 0x4CED PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x4063 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x1 DUP2 MSTORE PUSH1 0x1D PUSH1 0xF9 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH0 PUSH2 0x4D22 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x4063 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x1 DUP2 MSTORE PUSH1 0x2F PUSH1 0xF8 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0xAC8 JUMPI PUSH2 0xAC8 PUSH2 0x4630 JUMP JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH0 PUSH2 0x4D6A PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x4063 JUMP JUMPDEST DUP3 DUP2 SUB DUP1 PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x5 DUP3 MSTORE PUSH5 0x173539B7B7 PUSH1 0xD9 SHL PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP2 ADD PUSH1 0x40 DUP6 ADD MSTORE POP PUSH0 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH14 0x21B7B73A3930B1BA103730B6B29 PUSH1 0x95 SHL DUP2 MSTORE PUSH0 PUSH2 0x4DC4 PUSH1 0xE DUP4 ADD DUP5 PUSH2 0x4179 JUMP JUMPDEST PUSH32 0x206D75737420626520696E2074686520666F726D6174204D79436F6E74726163 DUP2 MSTORE PUSH32 0x742E736F6C3A4D79436F6E7472616374206F72204D79436F6E74726163742E73 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x6F6C206F72206F75742F4D79436F6E74726163742E736F6C2F4D79436F6E7472 PUSH1 0x40 DUP3 ADD MSTORE PUSH8 0x30B1BA173539B7B7 PUSH1 0xC1 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x68 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x53504458206C6963656E7365206964656E746966696572200000000000000000 DUP2 MSTORE PUSH0 PUSH2 0x4E7F PUSH1 0x18 DUP4 ADD DUP6 PUSH2 0x4179 JUMP JUMPDEST PUSH4 0x1034B71 PUSH1 0xE5 SHL DUP2 MSTORE PUSH2 0x4E96 PUSH1 0x4 DUP3 ADD DUP6 PUSH2 0x4179 JUMP JUMPDEST PUSH32 0x20646F6573206E6F74206C6F6F6B206C696B65206120737570706F7274656420 DUP2 MSTORE PUSH32 0x6C6963656E736520666F7220626C6F636B206578706C6F726572207665726966 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x69636174696F6E2E205573652074686520606C6963656E73655479706560206F PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x7074696F6E20746F20737065636966792061206C6963656E736520747970652C PUSH1 0x60 DUP3 ADD MSTORE PUSH32 0x206F7220736574207468652060736B69704C6963656E73655479706560206F70 PUSH1 0x80 DUP3 ADD MSTORE PUSH32 0x74696F6E20746F2060747275656020746F20736B69702E000000000000000000 PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xB7 ADD SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x4F8E DUP3 DUP5 PUSH2 0x4179 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xFD SHL DUP2 MSTORE PUSH1 0x1 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0xFFFF DUP3 AND PUSH2 0xFFFF DUP2 SUB PUSH2 0x4659 JUMPI PUSH2 0x4659 PUSH2 0x4630 JUMP JUMPDEST PUSH32 0x406F70656E7A657070656C696E2F75706772616465732D636F72654000000000 DUP2 MSTORE PUSH0 PUSH2 0xBDC PUSH1 0x1C DUP4 ADD DUP5 PUSH2 0x4179 JUMP JUMPDEST PUSH0 PUSH2 0x4FF2 DUP3 DUP6 PUSH2 0x4179 JUMP JUMPDEST PUSH1 0x1D PUSH1 0xF9 SHL DUP2 MSTORE PUSH2 0xBD8 PUSH1 0x1 DUP3 ADD DUP6 PUSH2 0x4179 JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xE JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP CALLER DUP1 PUSH1 0x33 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3A DUP2 PUSH1 0x3F JUMP JUMPDEST POP PUSH1 0xA8 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE PUSH1 0x56 DUP2 PUSH1 0x59 JUMP JUMPDEST POP JUMP JUMPDEST PUSH0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x40F DUP1 PUSH2 0xB5 PUSH0 CODECOPY PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x85 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xC4740A95 GT PUSH2 0x58 JUMPI DUP1 PUSH4 0xC4740A95 EQ PUSH2 0xFF JUMPI DUP1 PUSH4 0xE30C3978 EQ PUSH2 0x112 JUMPI DUP1 PUSH4 0xE89B0E1E EQ PUSH2 0x123 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x136 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x89 JUMPI DUP1 PUSH4 0x79BA5097 EQ PUSH2 0x93 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x9B JUMPI DUP1 PUSH4 0xB23BC7D7 EQ PUSH2 0xC4 JUMPI JUMPDEST PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0x91 PUSH2 0x149 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x91 PUSH2 0x15C JUMP JUMPDEST PUSH0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xEF PUSH2 0xD2 CALLDATASIZE PUSH1 0x4 PUSH2 0x3AC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xBB JUMP JUMPDEST PUSH2 0x91 PUSH2 0x10D CALLDATASIZE PUSH1 0x4 PUSH2 0x3AC JUMP JUMPDEST PUSH2 0x1A5 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xA7 JUMP JUMPDEST PUSH2 0x91 PUSH2 0x131 CALLDATASIZE PUSH1 0x4 PUSH2 0x3AC JUMP JUMPDEST PUSH2 0x22B JUMP JUMPDEST PUSH2 0x91 PUSH2 0x144 CALLDATASIZE PUSH1 0x4 PUSH2 0x3AC JUMP JUMPDEST PUSH2 0x2AD JUMP JUMPDEST PUSH2 0x151 PUSH2 0x31D JUMP JUMPDEST PUSH2 0x15A PUSH0 PUSH2 0x349 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1 SLOAD CALLER SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 EQ PUSH2 0x199 JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1A2 DUP2 PUSH2 0x349 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x1AD PUSH2 0x31D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1D4 JUMPI PUSH1 0x40 MLOAD PUSH4 0xD92E233D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE SWAP1 MLOAD SWAP2 DUP3 MSTORE PUSH32 0xBF2E373B8263F701E10EFCAC80EA442AFCB29C6852B3A42B0B46CC8EDAAF54A7 SWAP2 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0x233 PUSH2 0x31D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x25A JUMPI PUSH1 0x40 MLOAD PUSH4 0xD92E233D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE SWAP1 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x8F42195A0BBFA58954BE4349DEB9EFC38BDB9C298E529F705F8BC1E38BCE0399 SWAP2 ADD PUSH2 0x220 JUMP JUMPDEST PUSH2 0x2B5 PUSH2 0x31D JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 SWAP2 AND DUP2 OR SWAP1 SWAP2 SSTORE PUSH2 0x2E5 PUSH0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x38D16B8CAC22D99FC7C124B9CD0DE2D3FA1FAEF420BFE791D8C362D765E22700 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x15A JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x190 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE PUSH2 0x1A2 DUP2 PUSH0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3BC JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x3D2 JUMPI PUSH0 PUSH0 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA9 0xCF 0xD4 0xD8 PUSH7 0xA60382AF4E425E 0xAE DIV 0x4D SWAP8 DUP14 DUP7 NOT DUP16 0xED SAR 0xBE BLOBHASH BLOBBASEFEE LOG0 0xBC MULMOD GAS 0xE6 0xB2 0xC9 PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER PUSH1 0xA0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x2978 CODESIZE SUB DUP1 PUSH2 0x2978 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2E SWAP2 PUSH2 0x30A JUMP JUMPDEST PUSH3 0x15180 CALLER DUP1 PUSH2 0x58 JUMPI PUSH1 0x40 MLOAD PUSH4 0x61164011 PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB AND PUSH1 0x1 PUSH1 0xD0 SHL PUSH6 0xFFFFFFFFFFFF DUP6 AND MUL OR SWAP1 SSTORE PUSH2 0x81 PUSH0 DUP3 PUSH2 0x199 JUMP JUMPDEST POP POP POP PUSH2 0x93 DUP5 PUSH2 0x208 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x80 MSTORE PUSH2 0xA8 DUP4 PUSH2 0x208 JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH2 0x100 MUL PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0xD8 DUP3 PUSH2 0x208 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x18F JUMPI PUSH0 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x116 JUMPI PUSH2 0x116 PUSH2 0x406 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH2 0x12F DUP2 PUSH2 0x208 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EXTCODESIZE PUSH0 SUB PUSH2 0x165 JUMPI PUSH1 0x40 MLOAD PUSH4 0x73306803 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x4F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE ADD PUSH2 0xFA JUMP JUMPDEST POP POP POP POP POP PUSH2 0x41A JUMP JUMPDEST PUSH0 DUP3 PUSH2 0x1F5 JUMPI PUSH0 PUSH2 0x1B2 PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1D9 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1FE1E13D PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND OR SWAP1 SSTORE JUMPDEST PUSH2 0x1FF DUP4 DUP4 PUSH2 0x234 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x230 JUMPI PUSH1 0x40 MLOAD PUSH4 0xD92E233D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x2D4 JUMPI PUSH0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x28C CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP PUSH1 0x1 PUSH2 0x202 JUMP JUMPDEST POP PUSH0 PUSH2 0x202 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x2F1 JUMPI PUSH0 PUSH0 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH0 PUSH0 PUSH0 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x31D JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0x326 DUP6 PUSH2 0x2DB JUMP JUMPDEST SWAP4 POP PUSH2 0x334 PUSH1 0x20 DUP7 ADD PUSH2 0x2DB JUMP JUMPDEST SWAP3 POP PUSH2 0x342 PUSH1 0x40 DUP7 ADD PUSH2 0x2DB JUMP JUMPDEST PUSH1 0x60 DUP7 ADD MLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x35D JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP6 ADD PUSH1 0x1F DUP2 ADD DUP8 SGT PUSH2 0x36D JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x386 JUMPI PUSH2 0x386 PUSH2 0x2F6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x5 DUP3 SWAP1 SHL SWAP1 PUSH1 0x3F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x3B4 JUMPI PUSH2 0x3B4 PUSH2 0x2F6 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 DUP3 MSTORE PUSH1 0x20 DUP2 DUP5 ADD DUP2 ADD SWAP3 SWAP1 DUP2 ADD DUP11 DUP5 GT ISZERO PUSH2 0x3D1 JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH1 0x20 DUP6 ADD SWAP5 POP JUMPDEST DUP4 DUP6 LT ISZERO PUSH2 0x3F7 JUMPI PUSH2 0x3E9 DUP6 PUSH2 0x2DB JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 ADD PUSH2 0x3D8 JUMP JUMPDEST POP SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x80 MLOAD PUSH2 0x2523 PUSH2 0x455 PUSH0 CODECOPY PUSH0 DUP2 DUP2 PUSH2 0x56D ADD MSTORE DUP2 DUP2 PUSH2 0x882 ADD MSTORE DUP2 DUP2 PUSH2 0xFB3 ADD MSTORE DUP2 DUP2 PUSH2 0x12B2 ADD MSTORE DUP2 DUP2 PUSH2 0x1328 ADD MSTORE PUSH2 0x1513 ADD MSTORE PUSH2 0x2523 PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x276 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x156 JUMPI DUP1 PUSH4 0xCC8463C8 GT PUSH2 0xCA JUMPI DUP1 PUSH4 0xE744092E GT PUSH2 0x84 JUMPI DUP1 PUSH4 0xE744092E EQ PUSH2 0x626 JUMPI DUP1 PUSH4 0xEC6686AD EQ PUSH2 0x648 JUMPI DUP1 PUSH4 0xF0F44260 EQ PUSH2 0x65B JUMPI DUP1 PUSH4 0xF67E6070 EQ PUSH2 0x66E JUMPI DUP1 PUSH4 0xF9052BEA EQ PUSH2 0x681 JUMPI DUP1 PUSH4 0xFF5528E0 EQ PUSH2 0x694 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP1 PUSH4 0xCC8463C8 EQ PUSH2 0x5BA JUMPI DUP1 PUSH4 0xCEFC1429 EQ PUSH2 0x5C2 JUMPI DUP1 PUSH4 0xCF6EEFB7 EQ PUSH2 0x5CA JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x5F8 JUMPI DUP1 PUSH4 0xD602B9FD EQ PUSH2 0x60B JUMPI DUP1 PUSH4 0xE3F4CE55 EQ PUSH2 0x613 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP1 PUSH4 0xA20E7D47 GT PUSH2 0x11B JUMPI DUP1 PUSH4 0xA20E7D47 EQ PUSH2 0x527 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x54E JUMPI DUP1 PUSH4 0xA46E82D2 EQ PUSH2 0x555 JUMPI DUP1 PUSH4 0xA693577C EQ PUSH2 0x568 JUMPI DUP1 PUSH4 0xAAFA2D69 EQ PUSH2 0x58F JUMPI DUP1 PUSH4 0xC5F956AF EQ PUSH2 0x5A2 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x4BF JUMPI DUP1 PUSH4 0x90469A9D EQ PUSH2 0x4C7 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x4DA JUMPI DUP1 PUSH4 0x986D7A69 EQ PUSH2 0x4ED JUMPI DUP1 PUSH4 0xA1EDA53C EQ PUSH2 0x500 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP1 PUSH4 0x424E6575 GT PUSH2 0x1ED JUMPI DUP1 PUSH4 0x6406C10C GT PUSH2 0x1B2 JUMPI DUP1 PUSH4 0x6406C10C EQ PUSH2 0x411 JUMPI DUP1 PUSH4 0x649A5EC7 EQ PUSH2 0x463 JUMPI DUP1 PUSH4 0x6FF1C9BC EQ PUSH2 0x476 JUMPI DUP1 PUSH4 0x77BEF613 EQ PUSH2 0x489 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x492 JUMPI DUP1 PUSH4 0x84EF8FFC EQ PUSH2 0x49A JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP1 PUSH4 0x424E6575 EQ PUSH2 0x373 JUMPI DUP1 PUSH4 0x5676659B EQ PUSH2 0x3D7 JUMPI DUP1 PUSH4 0x5C6A9384 EQ PUSH2 0x3EA JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x3F3 JUMPI DUP1 PUSH4 0x634E93DA EQ PUSH2 0x3FE JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP1 PUSH4 0x19B2A6B9 GT PUSH2 0x23E JUMPI DUP1 PUSH4 0x19B2A6B9 EQ PUSH2 0x2EF JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x302 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x332 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x345 JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x358 JUMPI DUP1 PUSH4 0x4178617F EQ PUSH2 0x360 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x27A JUMPI DUP1 PUSH4 0x22D63FB EQ PUSH2 0x2A2 JUMPI DUP1 PUSH4 0x52D9E7E EQ PUSH2 0x2BE JUMPI DUP1 PUSH4 0xAA6220B EQ PUSH2 0x2D3 JUMPI DUP1 PUSH4 0x184D69AB EQ PUSH2 0x2DB JUMPI JUMPDEST PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0x28D PUSH2 0x288 CALLDATASIZE PUSH1 0x4 PUSH2 0x2160 JUMP JUMPDEST PUSH2 0x6A7 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH3 0x69780 JUMPDEST PUSH1 0x40 MLOAD PUSH6 0xFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x299 JUMP JUMPDEST PUSH2 0x2D1 PUSH2 0x2CC CALLDATASIZE PUSH1 0x4 PUSH2 0x2194 JUMP JUMPDEST PUSH2 0x6D1 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2D1 PUSH2 0x734 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH2 0x28D SWAP1 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x2D1 PUSH2 0x2FD CALLDATASIZE PUSH1 0x4 PUSH2 0x21AF JUMP JUMPDEST PUSH2 0x749 JUMP JUMPDEST PUSH2 0x324 PUSH2 0x310 CALLDATASIZE PUSH1 0x4 PUSH2 0x21D8 JUMP JUMPDEST PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x299 JUMP JUMPDEST PUSH2 0x2D1 PUSH2 0x340 CALLDATASIZE PUSH1 0x4 PUSH2 0x2203 JUMP JUMPDEST PUSH2 0x920 JUMP JUMPDEST PUSH2 0x2D1 PUSH2 0x353 CALLDATASIZE PUSH1 0x4 PUSH2 0x2203 JUMP JUMPDEST PUSH2 0x94C JUMP JUMPDEST PUSH2 0x2D1 PUSH2 0x9F2 JUMP JUMPDEST PUSH2 0x2D1 PUSH2 0x36E CALLDATASIZE PUSH1 0x4 PUSH2 0x2231 JUMP JUMPDEST PUSH2 0xA04 JUMP JUMPDEST PUSH2 0x3C5 PUSH2 0x381 CALLDATASIZE PUSH1 0x4 PUSH2 0x21D8 JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 DUP5 ADD SLOAD PUSH1 0x4 SWAP1 SWAP5 ADD SLOAD SWAP3 SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND SWAP5 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 SWAP5 DIV PUSH1 0xFF AND SWAP4 SWAP2 AND SWAP1 DUP7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x299 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2280 JUMP JUMPDEST PUSH2 0x2D1 PUSH2 0x3E5 CALLDATASIZE PUSH1 0x4 PUSH2 0x22DE JUMP JUMPDEST PUSH2 0xAA0 JUMP JUMPDEST PUSH2 0x324 PUSH1 0x6 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0xFF AND PUSH2 0x28D JUMP JUMPDEST PUSH2 0x2D1 PUSH2 0x40C CALLDATASIZE PUSH1 0x4 PUSH2 0x2231 JUMP JUMPDEST PUSH2 0xB18 JUMP JUMPDEST PUSH2 0x3C5 PUSH2 0x41F CALLDATASIZE PUSH1 0x4 PUSH2 0x21D8 JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 DUP5 ADD SLOAD PUSH1 0x4 SWAP1 SWAP5 ADD SLOAD SWAP3 SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND SWAP5 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 SWAP5 DIV PUSH1 0xFF AND SWAP4 SWAP2 AND SWAP1 DUP7 JUMP JUMPDEST PUSH2 0x2D1 PUSH2 0x471 CALLDATASIZE PUSH1 0x4 PUSH2 0x233F JUMP JUMPDEST PUSH2 0xB2B JUMP JUMPDEST PUSH2 0x2D1 PUSH2 0x484 CALLDATASIZE PUSH1 0x4 PUSH2 0x2231 JUMP JUMPDEST PUSH2 0xB3E JUMP JUMPDEST PUSH2 0x324 PUSH1 0x8 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x2D1 PUSH2 0xC0D JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x299 JUMP JUMPDEST PUSH2 0x4A7 PUSH2 0xC1F JUMP JUMPDEST PUSH2 0x2D1 PUSH2 0x4D5 CALLDATASIZE PUSH1 0x4 PUSH2 0x2231 JUMP JUMPDEST PUSH2 0xC37 JUMP JUMPDEST PUSH2 0x28D PUSH2 0x4E8 CALLDATASIZE PUSH1 0x4 PUSH2 0x2203 JUMP JUMPDEST PUSH2 0xC9B JUMP JUMPDEST PUSH2 0x2D1 PUSH2 0x4FB CALLDATASIZE PUSH1 0x4 PUSH2 0x2364 JUMP JUMPDEST PUSH2 0xCC3 JUMP JUMPDEST PUSH2 0x508 PUSH2 0xE62 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH6 0xFFFFFFFFFFFF SWAP4 DUP5 AND DUP2 MSTORE SWAP3 SWAP1 SWAP2 AND PUSH1 0x20 DUP4 ADD MSTORE ADD PUSH2 0x299 JUMP JUMPDEST PUSH2 0x324 PUSH32 0xD8A7A79547AF723EE3E12B59A480111268D8969C634E1A34A144D2C8B91D635B DUP2 JUMP JUMPDEST PUSH2 0x324 PUSH0 DUP2 JUMP JUMPDEST PUSH2 0x2D1 PUSH2 0x563 CALLDATASIZE PUSH1 0x4 PUSH2 0x21AF JUMP JUMPDEST PUSH2 0xEB4 JUMP JUMPDEST PUSH2 0x4A7 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x2D1 PUSH2 0x59D CALLDATASIZE PUSH1 0x4 PUSH2 0x2231 JUMP JUMPDEST PUSH2 0x108A JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH2 0x4A7 SWAP1 PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x2A7 PUSH2 0x1121 JUMP JUMPDEST PUSH2 0x2D1 PUSH2 0x117F JUMP JUMPDEST PUSH2 0x5D2 PUSH2 0x11BE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND DUP4 MSTORE PUSH6 0xFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x20 DUP4 ADD MSTORE ADD PUSH2 0x299 JUMP JUMPDEST PUSH2 0x2D1 PUSH2 0x606 CALLDATASIZE PUSH1 0x4 PUSH2 0x2203 JUMP JUMPDEST PUSH2 0x11DF JUMP JUMPDEST PUSH2 0x2D1 PUSH2 0x1207 JUMP JUMPDEST PUSH2 0x2D1 PUSH2 0x621 CALLDATASIZE PUSH1 0x4 PUSH2 0x21D8 JUMP JUMPDEST PUSH2 0x1219 JUMP JUMPDEST PUSH2 0x28D PUSH2 0x634 CALLDATASIZE PUSH1 0x4 PUSH2 0x2231 JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 MSTORE PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x2D1 PUSH2 0x656 CALLDATASIZE PUSH1 0x4 PUSH2 0x2396 JUMP JUMPDEST PUSH2 0x1319 JUMP JUMPDEST PUSH2 0x2D1 PUSH2 0x669 CALLDATASIZE PUSH1 0x4 PUSH2 0x2231 JUMP JUMPDEST PUSH2 0x13A7 JUMP JUMPDEST PUSH2 0x2D1 PUSH2 0x67C CALLDATASIZE PUSH1 0x4 PUSH2 0x23DA JUMP JUMPDEST PUSH2 0x1411 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH2 0x4A7 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x2D1 PUSH2 0x6A2 CALLDATASIZE PUSH1 0x4 PUSH2 0x21D8 JUMP JUMPDEST PUSH2 0x15D2 JUMP JUMPDEST PUSH0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x18A4C3C3 PUSH1 0xE1 SHL EQ DUP1 PUSH2 0x6CB JUMPI POP PUSH2 0x6CB DUP3 PUSH2 0x16B8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x6DB DUP2 PUSH2 0x16EC JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD DUP4 ISZERO ISZERO PUSH1 0x1 PUSH1 0xA0 SHL MUL PUSH1 0xFF PUSH1 0xA0 SHL NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x411283AE1B0E68089790510EB77CCAD9B761295BE576637799607C8AE066FE9F SWAP1 PUSH2 0x728 SWAP1 DUP5 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x73E DUP2 PUSH2 0x16EC JUMP JUMPDEST PUSH2 0x746 PUSH2 0x16F6 JUMP JUMPDEST POP JUMP JUMPDEST PUSH32 0xD8A7A79547AF723EE3E12B59A480111268D8969C634E1A34A144D2C8B91D635B PUSH2 0x773 DUP2 PUSH2 0x16EC JUMP JUMPDEST PUSH0 DUP4 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD DUP4 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x7B4 JUMPI PUSH1 0x40 MLOAD PUSH4 0x52E56FDF PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP5 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD SWAP1 SWAP2 PUSH2 0x7DB SWAP2 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1702 JUMP JUMPDEST DUP1 PUSH1 0x4 ADD SLOAD DUP5 LT ISZERO PUSH2 0x80D JUMPI PUSH1 0x4 DUP1 DUP3 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0xDA975475 PUSH1 0xE0 SHL DUP2 MSTORE SWAP2 DUP3 ADD DUP7 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x7AB JUMP JUMPDEST PUSH1 0x1 DUP2 ADD DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND PUSH1 0x1 PUSH1 0xA0 SHL OR SWAP1 SSTORE PUSH1 0x3 DUP1 DUP3 ADD SLOAD SWAP1 SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP3 PUSH2 0x850 SWAP3 DUP5 SWAP3 PUSH2 0x100 SWAP1 SWAP2 DIV SWAP1 SWAP2 AND SWAP1 PUSH2 0x1748 JUMP JUMPDEST PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0x7ED9DB59 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP8 SWAP1 MSTORE PUSH32 0x0 SWAP2 DUP3 AND SWAP1 PUSH4 0x7ED9DB59 SWAP1 PUSH1 0x64 ADD PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8C5 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x8D7 JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP DUP7 DUP9 PUSH32 0x2F78B4436CBDCAE9D74F9F2699396A3D28CD2AB069518D23BE6B25CD29E49963 DUP9 PUSH1 0x40 MLOAD PUSH2 0x90E SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP2 PUSH2 0x93E JUMPI PUSH1 0x40 MLOAD PUSH4 0x1FE1E13D PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x948 DUP3 DUP3 PUSH2 0x17AC JUMP JUMPDEST POP POP JUMP JUMPDEST DUP2 ISZERO DUP1 ISZERO PUSH2 0x967 JUMPI POP PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND SWAP2 AND EQ JUMPDEST ISZERO PUSH2 0x9E8 JUMPI PUSH0 PUSH0 PUSH2 0x976 PUSH2 0x11BE JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO ISZERO DUP1 PUSH2 0x998 JUMPI POP PUSH6 0xFFFFFFFFFFFF DUP2 AND ISZERO JUMPDEST DUP1 PUSH2 0x9AB JUMPI POP TIMESTAMP PUSH6 0xFFFFFFFFFFFF DUP3 AND LT ISZERO JUMPDEST ISZERO PUSH2 0x9D3 JUMPI PUSH1 0x40 MLOAD PUSH4 0x19CA5EBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH6 0xFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x7AB JUMP JUMPDEST POP POP PUSH1 0x1 DUP1 SLOAD PUSH6 0xFFFFFFFFFFFF PUSH1 0xA0 SHL NOT AND SWAP1 SSTORE JUMPDEST PUSH2 0x948 DUP3 DUP3 PUSH2 0x17D6 JUMP JUMPDEST PUSH0 PUSH2 0x9FC DUP2 PUSH2 0x16EC JUMP JUMPDEST PUSH2 0x746 PUSH2 0x1809 JUMP JUMPDEST PUSH0 PUSH2 0xA0E DUP2 PUSH2 0x16EC JUMP JUMPDEST PUSH2 0xA17 DUP3 PUSH2 0x185B JUMP JUMPDEST POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EXTCODESIZE PUSH0 SUB PUSH2 0xA4D JUMPI PUSH1 0x40 MLOAD PUSH4 0x73306803 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x7AB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE SWAP1 MLOAD SWAP2 DUP3 MSTORE PUSH32 0xF849D00BC67E9E4BF072DF9680646C59B8C5380160834C2E1D4896CE5EC81F75 SWAP2 ADD PUSH2 0x728 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xD505ACCF PUSH1 0xE0 SHL DUP2 MSTORE DUP8 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0xD505ACCF SWAP1 PUSH2 0xADA SWAP1 CALLER SWAP1 ADDRESS SWAP1 DUP13 SWAP1 DUP12 SWAP1 DUP12 SWAP1 DUP12 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0x240F JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xAF1 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xB02 JUMPI POP PUSH1 0x1 JUMPDEST POP PUSH2 0xB0E DUP9 DUP9 DUP9 PUSH2 0xCC3 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0xB22 DUP2 PUSH2 0x16EC JUMP JUMPDEST PUSH2 0x948 DUP3 PUSH2 0x1887 JUMP JUMPDEST PUSH0 PUSH2 0xB35 DUP2 PUSH2 0x16EC JUMP JUMPDEST PUSH2 0x948 DUP3 PUSH2 0x18F9 JUMP JUMPDEST PUSH0 PUSH2 0xB48 DUP2 PUSH2 0x16EC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xB8C JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xBB0 SWAP2 SWAP1 PUSH2 0x2450 JUMP JUMPDEST SWAP1 POP PUSH2 0xBC6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND CALLER DUP4 PUSH2 0x1748 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE PUSH32 0x2E39961A70A10F4D46383948095AC2752B3EE642A7C76AA827410AAFF08C2E51 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0xC17 DUP2 PUSH2 0x16EC JUMP JUMPDEST PUSH2 0x746 PUSH2 0x1961 JUMP JUMPDEST PUSH0 PUSH2 0xC32 PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH2 0xC41 DUP2 PUSH2 0x16EC JUMP JUMPDEST PUSH2 0xC4A DUP3 PUSH2 0x185B JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE SWAP1 MLOAD SWAP2 DUP3 MSTORE PUSH32 0xBF996B4FD74F0C7159BB017B1DB415B0D9A6F13129F46D0B93309D170B78DF31 SWAP2 ADD PUSH2 0x728 JUMP JUMPDEST PUSH0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND DUP1 ISZERO PUSH2 0xD44 JUMPI POP PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0xB23BC7D7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xB23BC7D7 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD1E JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xD42 SWAP2 SWAP1 PUSH2 0x2467 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0xD64 JUMPI PUSH1 0x40 MLOAD PUSH4 0x30AC863D PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x7AB JUMP JUMPDEST DUP3 PUSH2 0xD6E DUP2 PUSH2 0x185B JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xDB2 JUMPI PUSH1 0x40 MLOAD PUSH4 0x94403B7 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x7AB JUMP JUMPDEST PUSH2 0xDBA PUSH2 0x199E JUMP JUMPDEST PUSH2 0xDC3 DUP4 PUSH2 0x19C2 JUMP JUMPDEST PUSH2 0xDD8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND CALLER ADDRESS DUP7 PUSH2 0x19E5 JUMP JUMPDEST PUSH0 PUSH2 0xDE4 DUP6 DUP6 DUP6 PUSH2 0x1A1E JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH0 ADD MLOAD PUSH32 0x7F382249E1E2D2BE5B5E769BBD3ABD8E092FC5932A37D3819055E2C88C8540F8 DUP4 PUSH1 0x80 ADD MLOAD DUP5 PUSH1 0x60 ADD MLOAD DUP6 PUSH1 0xA0 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0xE53 SWAP4 SWAP3 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH0 SWAP1 PUSH1 0x1 PUSH1 0xD0 SHL SWAP1 DIV PUSH6 0xFFFFFFFFFFFF AND DUP1 ISZERO ISZERO DUP1 ISZERO PUSH2 0xE8D JUMPI POP TIMESTAMP PUSH6 0xFFFFFFFFFFFF DUP3 AND LT ISZERO JUMPDEST PUSH2 0xE98 JUMPI PUSH0 PUSH0 PUSH2 0xEAC JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH6 0xFFFFFFFFFFFF AND DUP2 JUMPDEST SWAP2 POP SWAP2 POP SWAP1 SWAP2 JUMP JUMPDEST PUSH32 0xD8A7A79547AF723EE3E12B59A480111268D8969C634E1A34A144D2C8B91D635B PUSH2 0xEDE DUP2 PUSH2 0x16EC JUMP JUMPDEST PUSH0 DUP4 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD DUP4 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xF1A JUMPI PUSH1 0x40 MLOAD PUSH4 0xE0A3CFF5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x7AB JUMP JUMPDEST PUSH0 DUP5 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD SWAP1 SWAP2 PUSH2 0xF41 SWAP2 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1702 JUMP JUMPDEST DUP1 PUSH1 0x4 ADD SLOAD DUP5 LT ISZERO PUSH2 0xF73 JUMPI PUSH1 0x4 DUP1 DUP3 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0x70998595 PUSH1 0xE1 SHL DUP2 MSTORE SWAP2 DUP3 ADD DUP7 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x7AB JUMP JUMPDEST PUSH1 0x1 DUP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL PUSH1 0xFF PUSH1 0xA0 SHL NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE PUSH1 0x2 DUP2 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0xD1AA41D PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP9 SWAP1 MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0x346A9074 SWAP1 PUSH1 0x64 ADD PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xFFE JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1010 JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 DUP7 ADD SLOAD SWAP2 DUP7 ADD SLOAD PUSH2 0x1041 SWAP5 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP4 POP PUSH2 0x100 SWAP1 SWAP2 DIV DUP2 AND SWAP2 AND DUP9 PUSH2 0x19E5 JUMP JUMPDEST PUSH1 0x2 DUP3 ADD SLOAD PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP8 SWAP1 MSTORE DUP8 SWAP2 PUSH32 0xBF79CE6FFDA2B262D7C1D31CDE3FBDE100C49885BE80BA25764DC18E0256B54F SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x1094 DUP2 PUSH2 0x16EC JUMP JUMPDEST PUSH2 0x109D DUP3 PUSH2 0x185B JUMP JUMPDEST POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EXTCODESIZE PUSH0 SUB PUSH2 0x10D3 JUMPI PUSH1 0x40 MLOAD PUSH4 0x54B1211F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x7AB JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0xE462DC805CB3FFEB7C059557B4FE0B57A01A6C6CA928941561BAF95E8834EF20 SWAP1 PUSH1 0x20 ADD PUSH2 0x728 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH0 SWAP1 PUSH1 0x1 PUSH1 0xD0 SHL SWAP1 DIV PUSH6 0xFFFFFFFFFFFF AND DUP1 ISZERO ISZERO DUP1 ISZERO PUSH2 0x114B JUMPI POP TIMESTAMP PUSH6 0xFFFFFFFFFFFF DUP3 AND LT JUMPDEST PUSH2 0x1166 JUMPI PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0xD0 SHL SWAP1 DIV PUSH6 0xFFFFFFFFFFFF AND PUSH2 0x1179 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH6 0xFFFFFFFFFFFF AND JUMPDEST SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH0 PUSH2 0x1188 PUSH2 0x11BE JUMP JUMPDEST POP SWAP1 POP CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ PUSH2 0x11B6 JUMPI PUSH1 0x40 MLOAD PUSH4 0x61164011 PUSH1 0xE1 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x7AB JUMP JUMPDEST PUSH2 0x746 PUSH2 0x1B0D JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP2 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 SWAP2 DIV PUSH6 0xFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST DUP2 PUSH2 0x11FD JUMPI PUSH1 0x40 MLOAD PUSH4 0x1FE1E13D PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x948 DUP3 DUP3 PUSH2 0x1BA3 JUMP JUMPDEST PUSH0 PUSH2 0x1211 DUP2 PUSH2 0x16EC JUMP JUMPDEST PUSH2 0x746 PUSH2 0x1BC7 JUMP JUMPDEST PUSH0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1255 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE0A3CFF5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x7AB JUMP JUMPDEST PUSH0 DUP3 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD PUSH2 0x127A SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH2 0x1BD1 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SLOAD PUSH2 0x1294 SWAP1 PUSH0 SWAP1 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1702 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0xA1 SHL PUSH1 0xFF PUSH1 0xA0 SHL NOT DUP3 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x2 DUP3 ADD SLOAD PUSH32 0x0 SWAP2 PUSH2 0x12E9 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP3 AND SWAP1 PUSH2 0x1748 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP5 SWAP1 PUSH32 0xD4AD51F415EBCB45BD9F8DFD5DB6D35F987FDF5EBB909BCC3322990F140BC88E SWAP1 PUSH0 SWAP1 LOG2 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xD505ACCF PUSH1 0xE0 SHL DUP2 MSTORE PUSH32 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0xD505ACCF SWAP1 PUSH2 0x1373 SWAP1 CALLER SWAP1 ADDRESS SWAP1 DUP14 SWAP1 DUP12 SWAP1 DUP12 SWAP1 DUP12 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0x240F JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x138A JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x139B JUMPI POP PUSH1 0x1 JUMPDEST POP PUSH2 0xB0E DUP9 DUP9 DUP9 PUSH2 0x1411 JUMP JUMPDEST PUSH0 PUSH2 0x13B1 DUP2 PUSH2 0x16EC JUMP JUMPDEST PUSH2 0x13BA DUP3 PUSH2 0x185B JUMP JUMPDEST POP PUSH1 0x3 DUP1 SLOAD PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT AND PUSH2 0x100 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x3C864541EF71378C6229510ED90F376565EE42D9C5E0904A984A9E863E6DB44F SWAP1 PUSH1 0x20 ADD PUSH2 0x728 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND DUP1 ISZERO PUSH2 0x1492 JUMPI POP PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0xB23BC7D7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xB23BC7D7 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x146C JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1490 SWAP2 SWAP1 PUSH2 0x2467 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x14B2 JUMPI PUSH1 0x40 MLOAD PUSH4 0x30AC863D PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x7AB JUMP JUMPDEST DUP2 PUSH2 0x14BC DUP2 PUSH2 0x185B JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1500 JUMPI PUSH1 0x40 MLOAD PUSH4 0x94403B7 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x7AB JUMP JUMPDEST PUSH2 0x1508 PUSH2 0x199E JUMP JUMPDEST PUSH2 0x1511 DUP5 PUSH2 0x19C2 JUMP JUMPDEST PUSH32 0x0 PUSH2 0x1547 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND CALLER ADDRESS DUP9 PUSH2 0x19E5 JUMP JUMPDEST PUSH0 PUSH2 0x1553 DUP6 DUP8 DUP7 PUSH2 0x1C16 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH0 ADD MLOAD PUSH32 0x9FDC4F6581C246C961BFA60D4A4D0D0F26A4BC0D47082A0F628BC8C92EA98F4 DUP4 PUSH1 0x80 ADD MLOAD DUP5 PUSH1 0x60 ADD MLOAD DUP6 PUSH1 0xA0 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x15C2 SWAP4 SWAP3 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP JUMP JUMPDEST PUSH0 DUP2 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x160E JUMPI PUSH1 0x40 MLOAD PUSH4 0x52E56FDF PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x7AB JUMP JUMPDEST PUSH0 DUP3 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD PUSH2 0x1633 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH2 0x1BD1 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SLOAD PUSH2 0x164D SWAP1 PUSH0 SWAP1 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1702 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0xA1 SHL PUSH1 0xFF PUSH1 0xA0 SHL NOT DUP3 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x3 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP3 PUSH2 0x1688 SWAP3 DUP5 SWAP3 SWAP2 AND SWAP1 PUSH2 0x1748 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP5 SWAP1 PUSH32 0xAE44E75C55E53FFF935759D2CD72009D85ED130F95829E8AAB2AD776EE29C45 SWAP1 PUSH0 SWAP1 LOG2 POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x7965DB0B PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x6CB JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ PUSH2 0x6CB JUMP JUMPDEST PUSH2 0x746 DUP2 CALLER PUSH2 0x1D04 JUMP JUMPDEST PUSH2 0x1700 PUSH0 PUSH0 PUSH2 0x1D3D JUMP JUMPDEST JUMP JUMPDEST DUP1 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x1714 JUMPI PUSH2 0x1714 PUSH2 0x224C JUMP JUMPDEST DUP3 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x1726 JUMPI PUSH2 0x1726 PUSH2 0x224C JUMP JUMPDEST EQ PUSH2 0x948 JUMPI DUP2 DUP2 PUSH1 0x40 MLOAD PUSH4 0x74104EF PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7AB SWAP3 SWAP2 SWAP1 PUSH2 0x2482 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP3 ADD DUP4 SWAP1 MSTORE PUSH2 0x17A7 SWAP2 DUP6 SWAP2 DUP3 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP2 POP PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x1DFC JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x17C6 DUP2 PUSH2 0x16EC JUMP JUMPDEST PUSH2 0x17D0 DUP4 DUP4 PUSH2 0x1E68 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0x17FF JUMPI PUSH1 0x40 MLOAD PUSH4 0x334BD919 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x17A7 DUP3 DUP3 PUSH2 0x1ECE JUMP JUMPDEST PUSH2 0x1811 PUSH2 0x1F0A JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA CALLER JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1883 JUMPI PUSH1 0x40 MLOAD PUSH4 0xD92E233D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH0 PUSH2 0x1890 PUSH2 0x1121 JUMP JUMPDEST PUSH2 0x1899 TIMESTAMP PUSH2 0x1F2D JUMP JUMPDEST PUSH2 0x18A3 SWAP2 SWAP1 PUSH2 0x24B1 JUMP JUMPDEST SWAP1 POP PUSH2 0x18AF DUP3 DUP3 PUSH2 0x1F5F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH6 0xFFFFFFFFFFFF DUP3 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH32 0x3377DC44241E779DD06AFAB5B788A35CA5F3B778836E2990BDB26A2A4B2E5ED6 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x1903 DUP3 PUSH2 0x1FDC JUMP JUMPDEST PUSH2 0x190C TIMESTAMP PUSH2 0x1F2D JUMP JUMPDEST PUSH2 0x1916 SWAP2 SWAP1 PUSH2 0x24B1 JUMP JUMPDEST SWAP1 POP PUSH2 0x1922 DUP3 DUP3 PUSH2 0x1D3D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH6 0xFFFFFFFFFFFF DUP1 DUP6 AND DUP3 MSTORE DUP4 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0xF1038C18CF84A56E432FDBFAF746924B7EA511DFE03A6506A0CEBA4888788D9B SWAP2 ADD PUSH2 0x728 JUMP JUMPDEST PUSH2 0x1969 PUSH2 0x199E JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0x183E CALLER SWAP1 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1700 JUMPI PUSH1 0x40 MLOAD PUSH4 0xD93C0665 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH0 SUB PUSH2 0x746 JUMPI PUSH1 0x40 MLOAD PUSH4 0x3728B83D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x7AB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 DUP2 AND PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x64 DUP3 ADD DUP4 SWAP1 MSTORE PUSH2 0x17D0 SWAP2 DUP7 SWAP2 DUP3 AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH1 0x84 ADD PUSH2 0x1775 JUMP JUMPDEST PUSH2 0x1A26 PUSH2 0x2125 JUMP JUMPDEST POP PUSH1 0x8 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE DUP3 DUP2 MSTORE CALLER PUSH1 0x20 DUP1 DUP4 ADD SWAP2 DUP3 MSTORE PUSH0 DUP4 DUP6 ADD DUP2 DUP2 MSTORE PUSH1 0x60 DUP6 ADD DUP10 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 DUP2 AND PUSH1 0x80 DUP8 ADD MSTORE PUSH1 0xA0 DUP7 ADD DUP10 SWAP1 MSTORE DUP8 DUP4 MSTORE PUSH1 0x9 SWAP1 SWAP4 MSTORE SWAP5 SWAP1 KECCAK256 DUP4 MLOAD DUP2 SSTORE SWAP2 MLOAD PUSH1 0x1 DUP4 ADD DUP1 SLOAD SWAP2 SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP3 AND DUP2 OR DUP4 SSTORE SWAP5 MLOAD SWAP4 SWAP6 SWAP5 DUP7 SWAP5 SWAP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT AND OR PUSH1 0x1 PUSH1 0xA0 SHL DUP4 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x1ABA JUMPI PUSH2 0x1ABA PUSH2 0x224C JUMP JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x2 DUP3 ADD SSTORE PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0x3 DUP3 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0xA0 SWAP1 SWAP2 ADD MLOAD PUSH1 0x4 SWAP1 SWAP2 ADD SSTORE POP PUSH1 0x8 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH0 PUSH2 0x1B17 PUSH2 0x11BE JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x1B2C DUP2 PUSH6 0xFFFFFFFFFFFF AND ISZERO ISZERO SWAP1 JUMP JUMPDEST ISZERO DUP1 PUSH2 0x1B40 JUMPI POP TIMESTAMP PUSH6 0xFFFFFFFFFFFF DUP3 AND LT ISZERO JUMPDEST ISZERO PUSH2 0x1B68 JUMPI PUSH1 0x40 MLOAD PUSH4 0x19CA5EBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH6 0xFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x7AB JUMP JUMPDEST PUSH2 0x1B83 PUSH0 PUSH2 0x1B7E PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x1ECE JUMP JUMPDEST POP PUSH2 0x1B8E PUSH0 DUP4 PUSH2 0x1E68 JUMP JUMPDEST POP POP PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB NOT AND SWAP1 SSTORE POP JUMP JUMPDEST PUSH0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x1BBD DUP2 PUSH2 0x16EC JUMP JUMPDEST PUSH2 0x17D0 DUP4 DUP4 PUSH2 0x1ECE JUMP JUMPDEST PUSH2 0x1700 PUSH0 PUSH0 PUSH2 0x1F5F JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x948 JUMPI PUSH1 0x40 MLOAD PUSH4 0x95EED105 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x4 DUP4 ADD MSTORE DUP3 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x7AB JUMP JUMPDEST PUSH2 0x1C1E PUSH2 0x2125 JUMP JUMPDEST POP PUSH1 0x6 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE DUP3 DUP2 MSTORE CALLER PUSH1 0x20 DUP1 DUP4 ADD SWAP2 DUP3 MSTORE PUSH0 DUP4 DUP6 ADD DUP2 DUP2 MSTORE PUSH1 0x60 DUP6 ADD DUP10 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 DUP2 AND PUSH1 0x80 DUP8 ADD MSTORE PUSH1 0xA0 DUP7 ADD DUP10 SWAP1 MSTORE DUP8 DUP4 MSTORE PUSH1 0x7 SWAP1 SWAP4 MSTORE SWAP5 SWAP1 KECCAK256 DUP4 MLOAD DUP2 SSTORE SWAP2 MLOAD PUSH1 0x1 DUP4 ADD DUP1 SLOAD SWAP2 SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP3 AND DUP2 OR DUP4 SSTORE SWAP5 MLOAD SWAP4 SWAP6 SWAP5 DUP7 SWAP5 SWAP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT AND OR PUSH1 0x1 PUSH1 0xA0 SHL DUP4 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x1CB2 JUMPI PUSH2 0x1CB2 PUSH2 0x224C JUMP JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x2 DUP3 ADD SSTORE PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0x3 DUP3 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0xA0 SWAP1 SWAP2 ADD MLOAD PUSH1 0x4 SWAP1 SWAP2 ADD SSTORE POP PUSH1 0x6 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1D0E DUP3 DUP3 PUSH2 0xC9B JUMP JUMPDEST PUSH2 0x948 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE2517D3F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x7AB JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0xD0 SHL SWAP1 DIV PUSH6 0xFFFFFFFFFFFF AND DUP1 ISZERO PUSH2 0x1DBF JUMPI TIMESTAMP PUSH6 0xFFFFFFFFFFFF DUP3 AND LT ISZERO PUSH2 0x1D96 JUMPI PUSH1 0x2 SLOAD PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB AND PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 SWAP3 DIV PUSH6 0xFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0xD0 SHL MUL SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x1DBF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x2B1FA2EDAFE6F7B9E97C1A9E0C3660E645BEB2DCAA2D45BDBF9BEAF5472E1EC5 SWAP1 PUSH0 SWAP1 LOG1 JUMPDEST POP PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0xA0 SHL PUSH6 0xFFFFFFFFFFFF SWAP5 DUP6 AND MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB AND OR PUSH1 0x1 PUSH1 0xD0 SHL SWAP3 SWAP1 SWAP4 AND SWAP2 SWAP1 SWAP2 MUL SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH0 PUSH0 PUSH1 0x20 PUSH0 DUP5 MLOAD PUSH1 0x20 DUP7 ADD PUSH0 DUP9 GAS CALL DUP1 PUSH2 0x1E1B JUMPI PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY RETURNDATASIZE DUP2 REVERT JUMPDEST POP POP PUSH0 MLOAD RETURNDATASIZE SWAP2 POP DUP2 ISZERO PUSH2 0x1E32 JUMPI DUP1 PUSH1 0x1 EQ ISZERO PUSH2 0x1E3F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO JUMPDEST ISZERO PUSH2 0x17D0 JUMPI PUSH1 0x40 MLOAD PUSH4 0x5274AFE7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x7AB JUMP JUMPDEST PUSH0 DUP3 PUSH2 0x1EC4 JUMPI PUSH0 PUSH2 0x1E81 PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1EA8 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1FE1E13D PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND OR SWAP1 SSTORE JUMPDEST PUSH2 0x1B06 DUP4 DUP4 PUSH2 0x202D JUMP JUMPDEST PUSH0 DUP3 ISZERO DUP1 ISZERO PUSH2 0x1EEA JUMPI POP PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 AND EQ JUMPDEST ISZERO PUSH2 0x1F00 JUMPI PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE JUMPDEST PUSH2 0x1B06 DUP4 DUP4 PUSH2 0x20BC JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0xFF AND PUSH2 0x1700 JUMPI PUSH1 0x40 MLOAD PUSH4 0x8DFC202B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH6 0xFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1883 JUMPI PUSH1 0x40 MLOAD PUSH4 0x6DFCC65 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x30 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x7AB JUMP JUMPDEST PUSH0 PUSH2 0x1F68 PUSH2 0x11BE JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH6 0xFFFFFFFFFFFF DUP7 AND PUSH1 0x1 PUSH1 0xA0 SHL MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB NOT SWAP1 SWAP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND OR OR SWAP1 SSTORE SWAP2 POP PUSH2 0x1FAA SWAP1 POP DUP2 PUSH6 0xFFFFFFFFFFFF AND ISZERO ISZERO SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x17A7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8886EBFC4259ABDBC16601DD8FB5678E54878F47B3C34836CFC51154A9605109 SWAP1 PUSH0 SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH0 PUSH0 PUSH2 0x1FE6 PUSH2 0x1121 JUMP JUMPDEST SWAP1 POP DUP1 PUSH6 0xFFFFFFFFFFFF AND DUP4 PUSH6 0xFFFFFFFFFFFF AND GT PUSH2 0x200E JUMPI PUSH2 0x2009 DUP4 DUP3 PUSH2 0x24CF JUMP JUMPDEST PUSH2 0x1B06 JUMP JUMPDEST PUSH2 0x1B06 PUSH6 0xFFFFFFFFFFFF DUP5 AND PUSH3 0x69780 PUSH0 DUP3 DUP3 XOR DUP3 DUP5 LT MUL DUP3 XOR PUSH2 0x1B06 JUMP JUMPDEST PUSH0 PUSH2 0x2038 DUP4 DUP4 PUSH2 0xC9B JUMP JUMPDEST PUSH2 0x20B5 JUMPI PUSH0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x206D CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP PUSH1 0x1 PUSH2 0x6CB JUMP JUMPDEST POP PUSH0 PUSH2 0x6CB JUMP JUMPDEST PUSH0 PUSH2 0x20C7 DUP4 DUP4 PUSH2 0xC9B JUMP JUMPDEST ISZERO PUSH2 0x20B5 JUMPI PUSH0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP7 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 POP PUSH1 0x1 PUSH2 0x6CB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE PUSH0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP1 SWAP2 DUP3 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2170 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x1B06 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x746 JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x21A4 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1B06 DUP2 PUSH2 0x2187 JUMP JUMPDEST PUSH0 PUSH0 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x21C1 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP POP DUP2 CALLDATALOAD SWAP4 PUSH1 0x20 DUP4 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 SWAP1 SWAP3 ADD CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x21E8 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x746 JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH0 PUSH0 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2214 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x2226 DUP2 PUSH2 0x21EF JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2241 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1B06 DUP2 PUSH2 0x21EF JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x3 DUP2 LT PUSH2 0x227C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP1 MSTORE JUMP JUMPDEST DUP7 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0xC0 DUP2 ADD PUSH2 0x22A3 PUSH1 0x40 DUP4 ADD DUP8 PUSH2 0x2260 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 SWAP1 SWAP2 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x22D9 JUMPI PUSH0 PUSH0 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH0 PUSH0 PUSH0 PUSH0 PUSH0 PUSH0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x22F4 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP8 CALLDATALOAD PUSH2 0x22FF DUP2 PUSH2 0x21EF JUMP JUMPDEST SWAP7 POP PUSH1 0x20 DUP9 ADD CALLDATALOAD SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP4 POP PUSH2 0x2322 PUSH1 0x80 DUP10 ADD PUSH2 0x22C9 JUMP JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 PUSH1 0xA0 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0xC0 SWAP1 SWAP4 ADD CALLDATALOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x234F JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH6 0xFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1B06 JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH0 PUSH0 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2376 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x2381 DUP2 PUSH2 0x21EF JUMP JUMPDEST SWAP6 PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP6 POP PUSH1 0x40 SWAP1 SWAP5 ADD CALLDATALOAD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH0 PUSH0 PUSH0 PUSH0 PUSH0 PUSH0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x23AC JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP8 CALLDATALOAD SWAP7 POP PUSH1 0x20 DUP9 ADD CALLDATALOAD PUSH2 0x23BE DUP2 PUSH2 0x21EF JUMP JUMPDEST SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP4 POP PUSH2 0x2322 PUSH1 0x80 DUP10 ADD PUSH2 0x22C9 JUMP JUMPDEST PUSH0 PUSH0 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x23EC JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x23FE DUP2 PUSH2 0x21EF JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP8 DUP9 AND DUP2 MSTORE SWAP6 SWAP1 SWAP7 AND PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x40 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x60 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xFF AND PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xE0 ADD SWAP1 JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2460 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2477 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1B06 DUP2 PUSH2 0x2187 JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0x2490 DUP3 DUP6 PUSH2 0x2260 JUMP JUMPDEST PUSH2 0x1B06 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2260 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH6 0xFFFFFFFFFFFF DUP2 DUP2 AND DUP4 DUP3 AND ADD SWAP1 DUP2 GT ISZERO PUSH2 0x6CB JUMPI PUSH2 0x6CB PUSH2 0x249D JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF DUP3 DUP2 AND DUP3 DUP3 AND SUB SWAP1 DUP2 GT ISZERO PUSH2 0x6CB JUMPI PUSH2 0x6CB PUSH2 0x249D JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP2 PUSH10 0xA4BB078C4A4611F31B7C PUSH2 0x90DD JUMPDEST LOG0 PUSH12 0x88A77F654C0C16AFBEDD604D SUB PUSH20 0x64736F6C634300081C0033000000000000000000 STOP STOP STOP PUSH18 0x9709ECFA91A80626FF3989D68F67F5B1DD1 0x2D MSTORE8 PUSH6 0x7474696E6720 MSTORE8 GASLIMIT MSTORE JUMP BLOBHASH NUMBER GASLIMIT PUSH0 MSTORE 0x4F 0x4C GASLIMIT KECCAK256 PUSH2 0x6464 PUSH19 0x657373206F6E2052657175657374734D616E61 PUSH8 0x65722E2E2E536574 PUSH21 0x696E6720534552564943455F524F4C452061646472 PUSH6 0x7373206F6E20 0x25 PUSH20 0x2E2E2E507269636553746F72616765202870726F PUSH25 0x7929206465706C6F79656420746F2025734164647265737365 PUSH20 0x57686974656C697374206465706C6F7965642074 PUSH16 0x20257353657474696E67205345525649 NUMBER GASLIMIT PUSH0 MSTORE 0x4F 0x4C GASLIMIT KECCAK256 PUSH2 0x6464 PUSH19 0x657373206F6E20507269636553746F72616765 0x2E 0x2E 0x2E LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x1F 0xC2 INVALID MCOPY TSTORE 0x2C DIV 0xFC COINBASE PUSH2 0xCE55 0xF9 0x29 PUSH13 0x716F46A74D556894603B42FB7B SWAP12 0xC7 TLOAD CALLDATALOAD PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"422:3689:74:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1964:2145;;;:::i;:::-;;849:28:1;;;;;;;;;;;;;;;179:14:83;;172:22;154:41;;142:2;127:18;849:28:1;;;;;;;1964:2145:74;2021:25;;-1:-1:-1;;;2021:25:74;;563:2:83;2021:25:74;;;545:21:83;602:2;582:18;;;575:30;-1:-1:-1;;;621:18:83;;;614:41;1992:26:74;;-1:-1:-1;;;;;;;;;;;336:42:0;2021:10:74;;672:18:83;;2021:25:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2078:27;;-1:-1:-1;;;;;;2078:27:74;;;;;1036:25:83;;;1992:54:74;;-1:-1:-1;2052:23:74;;-1:-1:-1;;;;;;;;;;;336:42:0;2078:7:74;;1009:18:83;;2078:27:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2052:53;;2111:23;2137:15;-1:-1:-1;;;;;2137:23:74;;2111:49;;2166:46;;;;;;;;;;;;;;-1:-1:-1;;;2166:46:74;;;2196:15;2166:11;:46::i;:::-;2218:45;;;;;;;;;;;;;;-1:-1:-1;;;2218:45:74;;;2247:15;2218:11;:45::i;:::-;2270:37;;-1:-1:-1;;;2270:37:74;;;;;1036:25:83;;;-1:-1:-1;;;;;;;;;;;336:42:0;2270:17:74;;1009:18:83;;2270:37:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2314:50;;;;;;;;;;;;;;-1:-1:-1;;;2314:50:74;;;2351:12;2314:50;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:11;:50::i;:::-;2370:18;2391:129;;;;;;;;;;;;;;-1:-1:-1;;;2391:129:74;;;2488:10;2500:12;2448:66;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;2448:66:74;;;;;;;;;;;;;;-1:-1:-1;;;;;2448:66:74;-1:-1:-1;;;2448:66:74;;;2391:24;:129::i;:::-;2370:150;;2526:75;;;;;;;;;;;;;;;;;;2567:12;2526:75;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2589:10;2526:11;:75::i;:::-;2608:40;;;;;;;;;;;;;;;;;;:11;:40::i;:::-;2654:25;2682:179;;;;;;;;;;;;;;-1:-1:-1;;;2682:179:74;;;2781:35;;2818;;2740:115;;;;;;;;3481:25:83;;;3537:2;3522:18;;3515:34;3469:2;3454:18;;3307:248;2740:115:74;;;;-1:-1:-1;;2740:115:74;;;;;;;;;;;;;;-1:-1:-1;;;;;2740:115:74;-1:-1:-1;;;2740:115:74;;;2682:24;:179::i;:::-;2654:207;;2867:78;;;;;;;;;;;;;;;;;;2926:17;2867:11;:78::i;:::-;2951:62;;;;;;;;;;;;;;;;;;:11;:62::i;:::-;3019:25;3060:17;3019:59;;3084:12;-1:-1:-1;;;;;3084:22:74;;3107:12;-1:-1:-1;;;;;3107:25:74;;:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3136;;3084:80;;;;;;-1:-1:-1;;;;;;3084:80:74;;;;;;3923:25:83;;;;-1:-1:-1;;;;;3136:27:74;3964:18:83;;;3957:60;3896:18;;3084:80:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3171:46;;;;;;;;;;;;;;;;;;:11;:46::i;:::-;3223:37;3263:24;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;3223:64;;3293:77;;;;;;;;;;;;;;;;;;3350:18;3293:11;:77::i;:::-;3377:43;;;;;;;;;;;;;;;;;;:11;:43::i;:::-;3457:16;;;3471:1;3457:16;;;;;;;;;3426:28;;3457:16;;;;;;;;;-1:-1:-1;;3496:11:74;;3479:14;;;;-1:-1:-1;;;;;;3496:11:74;;3479:14;;-1:-1:-1;3496:11:74;;3479:14;;;;:::i;:::-;-1:-1:-1;;;;;3479:28:74;;;:14;;;;;;;;;:28;3588:18;;3547:102;;3513:31;;3575:10;;3588:18;;3616;;3637:11;;3547:102;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;3513:136;;3655:71;;;;;;;;;;;;;;;;;;3709:15;3655:11;:71::i;:::-;3732:65;;;;;;;;;;;;;;;;;;:11;:65::i;:::-;3803:15;-1:-1:-1;;;;;3803:25:74;;3829:15;-1:-1:-1;;;;;3829:28:74;;:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3861:26;;3803:85;;;;;;-1:-1:-1;;;;;;3803:85:74;;;;;;3923:25:83;;;;-1:-1:-1;;;;;3861:26:74;3964:18:83;;;3957:60;3896:18;;3803:85:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3895:66;;;;;;;;;;;;;;;;;;3948:12;3895:66;;;;;:::i;:::-;3967:17;3999:10;3967:43;;4016:5;-1:-1:-1;;;;;4016:15:74;;4032:5;-1:-1:-1;;;;;4032:18:74;;:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4016:63;;-1:-1:-1;;;;;;4016:63:74;;;;;;;;;;3923:25:83;;;;-1:-1:-1;;;;;3984:32:83;;3964:18;;;3957:60;3896:18;;4016:63:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;;;;;;4086:16:74;;:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1986:2123;;;;;;;;;;1964:2145::o;7740:145:11:-;7807:71;7870:2;7874;7823:54;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;7823:54:11;;;;;;;;;;;;;;-1:-1:-1;;;;;7823:54:11;-1:-1:-1;;;7823:54:11;;;7807:15;:71::i;:::-;7740:145;;:::o;7139:::-;7206:71;7269:2;7273;7222:54;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;7222:54:11;;;;;;;;;;;;;;-1:-1:-1;;;;;7222:54:11;-1:-1:-1;;;7222:54:11;;;7206:15;:71::i;7439:150::-;7512:70;7574:2;7578;7528:53;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;7528:53:11;;;;;;;;;;;;;;-1:-1:-1;;;;;7528:53:11;-1:-1:-1;;;7528:53:11;;;7512:15;:70::i;2113:215:65:-;2214:7;2233:19;;:::i;:::-;2269:52;2285:12;2299:15;2316:4;2269:15;:52::i;:::-;2262:59;;;2113:215;;;;;:::o;12983:174:11:-;13068:82;13138:2;13142;13146;13084:65;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;13084:65:11;;;;;;;;;;;;;;-1:-1:-1;;;;;13084:65:11;-1:-1:-1;;;13084:65:11;;;13068:15;:82::i;:::-;12983:174;;;:::o;6191:121::-;6246:59;6301:2;6262:42;;;;;;;;:::i;:::-;;;;-1:-1:-1;;6262:42:11;;;;;;;;;;;;;;-1:-1:-1;;;;;6262:42:11;-1:-1:-1;;;6262:42:11;;;6246:15;:59::i;:::-;6191:121;:::o;851:129::-;922:51;965:7;934:29;922:51::i;1295:336:65:-;1447:7;1466:12;1481:40;1502:12;1516:4;1481:20;:40::i;:::-;1466:55;;1539:85;;;;;;;;;;;;;;;;;;1595:4;1601:15;1584:33;;;;;;;;;:::i;:::-;;;;;;;;;;;;;1619:4;1539:11;:85::i;:::-;1532:92;;;1295:336;;;;;;:::o;180:463:11:-;265:22;131:42;265:40;;594:1;571;541:7;535:14;510:2;501:7;497:16;461:14;434:5;402:211;381:246;367:270;180:463;:::o;16788:175:65:-;16885:7;16911:45;16937:12;16951:4;16911:25;:45::i;20042:380:66:-;20208:13;;;;:31;20185:7;;20204:212;;;20262:67;20284:12;20298:15;20315:4;:13;;;20262:21;:67::i;:::-;20255:74;;;;20204:212;20367:38;20375:12;20389:15;20367:7;:38::i;9842:230::-;9939:7;9958:42;9981:12;9995:4;9958:22;:42::i;:::-;10017:48;10024:12;10038:4;:20;;;10060:4;10017:6;:48::i;596:1052:67:-;755:7;774:20;797:17;:15;:17::i;:::-;774:40;;824:32;859:43;881:12;895:6;859:21;:43::i;:::-;824:78;;912:27;942:129;978:12;:27;;;1019:12;:22;;;1055:6;942:22;:129::i;:::-;912:159;;1082:22;1107:78;1126:12;1140:13;1155:15;1172:12;1107:18;:78::i;:::-;1082:103;;1196:26;1225:30;1248:6;1225:22;:30::i;:::-;1295:13;;;;1324:15;;1196:59;;-1:-1:-1;1295:13:67;1324:20;;;1320:156;;1421:12;1448:6;:13;;;1374:89;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;1374:89:67;;;;;;;;;;-1:-1:-1;;;1360:105:67;;;;;;;:::i;:::-;;;;;;;;1320:156;1486:29;1518:49;;;;;;;;;;;;;;-1:-1:-1;;;1518:49:67;;;1554:6;1562:4;1518:10;:49::i;:::-;1584:57;;-1:-1:-1;;;1584:57:67;;1486:81;;-1:-1:-1;;;;;;;;;;;;861:42:69;1584:40:67;;:57;;1486:81;;1584:57;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1577:64;596:1052;-1:-1:-1;;;;;;;;;;;596:1052:67:o;20428:745:66:-;20567:49;;-1:-1:-1;;;20567:49:66;;20520:7;;;;-1:-1:-1;;;;;;;;;;;861:42:69;20567:35:66;;:49;;20603:12;;20567:49;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;20567:49:66;;;;;;;;;;;;:::i;:::-;20539:77;;20626:23;20652:68;20689:12;20703:15;20672:47;;;;;;;;;:::i;:::-;;;;;;;;;;;;;20652:19;:68::i;:::-;20626:94;-1:-1:-1;;;;;;20734:29:66;;20730:405;;20927:12;21025:15;20831:261;;;;;;;;;:::i;9327:143::-;9427:36;9437:12;9451:4;9457:5;9427:9;:36::i;4994:206:69:-;5103:35;;;;;;;;;;;-1:-1:-1;;;5103:35:69;;;;5155:38;;-1:-1:-1;;;5155:38:69;;5038:13;;-1:-1:-1;;;;;;;;;;;861:42:69;;;5155:8;;:38;;5103:35;;5155:38;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;5155:38:69;;;;;;;;;;;;:::i;:::-;5148:45;;;;4994:206;:::o;2078:1403::-;2198:19;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2198:19:69;2229:5;-1:-1:-1;;;;;;;;;;;2229:29:69;;2269:24;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2269:24:69;2321:26;2334:12;2321;:26::i;:::-;2304:14;;;:43;2358:22;2383:25;2395:12;2383:11;:25::i;:::-;2358:50;;2419:26;2485:2;-1:-1:-1;;;;;2485:14:69;;:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2485:16:69;;;;;;;;;;;;:::i;:::-;2508:6;2521:8;2536:4;:14;;;2468:92;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;2468:92:69;;;;;;;;;;-1:-1:-1;;;2609:25:69;;2468:92;-1:-1:-1;2580:26:69;;-1:-1:-1;;;;;2609:11:69;;;;;:25;;2468:92;;2609:25;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2609:25:69;;;;;;;;;;;;:::i;:::-;2650:38;;-1:-1:-1;;;2650:38:69;;2580:54;;-1:-1:-1;;;;;;2650:16:69;;;;;:38;;2580:54;;2650:38;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2645:351;;2857:12;2756:197;;;;;;;;:::i;2645:351::-;3025:53;;-1:-1:-1;;;3025:53:69;;-1:-1:-1;;;;;3025:18:69;;;;;:53;;3044:12;;3025:53;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3025:53:69;;;;;;;;;;;;:::i;:::-;3005:73;;3092:46;;-1:-1:-1;;;3092:46:69;;-1:-1:-1;;;;;3092:16:69;;;;;:46;;3109:12;;3092:46;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3088:140;;;3169:48;;-1:-1:-1;;;3169:48:69;;-1:-1:-1;;;;;3169:18:69;;;;;:48;;3188:12;;3169:48;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3169:48:69;;;;;;;;;;;;:::i;:::-;3154:12;;;:63;3088:140;3259:2;-1:-1:-1;;;;;3259:18:69;;3291:12;3365:4;:17;;;3324:75;;;;;;;;:::i;:::-;;;;;;;;;;;;;3259:151;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3259:151:69;;;;;;;;;;;;:::i;:::-;3237:19;;;:173;-1:-1:-1;3420:17:69;;;:32;-1:-1:-1;3237:19:69;2078:1403;-1:-1:-1;;;;2078:1403:69:o;3965:893::-;4169:15;;;4182:1;4169:15;;;;;;;;;4119:13;;4144:22;;4169:15;;;;;;;;;;;;;;;;;;;;;4144:40;;4194:18;;;;;;;;;;;;;-1:-1:-1;;;4194:18:69;;;:6;4201:1;4194:9;;;;;;;;:::i;:::-;;;;;;:18;;;;4222:17;;;;;;;;;;;;;-1:-1:-1;;;4222:17:69;;;:6;4229:1;4222:9;;;;;;;;:::i;:::-;;;;;;:17;;;;4290:14;4268:42;;;;;;;;:::i;:::-;;;;;;;;;;;;;4249:6;4256:1;4249:9;;;;;;;;:::i;:::-;;;;;;:62;;;;4357:6;4340:39;;;;;;;;:::i;:::-;;;;;;;;;;;;;4321:6;4328:1;4321:9;;;;;;;;:::i;:::-;;;;;;:59;;;;4391:26;4420:24;4437:6;4420:16;:24::i;:::-;4391:53;;4454:20;4484:6;:13;;;4454:44;;4514:24;;;;;;;;;;;;;;-1:-1:-1;;;4514:24:69;;;:6;:15;;:24;;;;:::i;:::-;4509:319;;4751:12;4606:179;;;;;;;;:::i;4509:319::-;4845:6;3965:893;-1:-1:-1;;;;;;3965:893:69:o;1654:3874:67:-;1956:24;;;;1950:38;1873:15;;-1:-1:-1;;;;;;;;;;;861:42:69;1950:43:67;1946:409;;2013:12;:33;;;2009:336;;;2066:98;;-1:-1:-1;;;2066:98:67;;17346:2:83;2066:98:67;;;17328:21:83;17385:2;17365:18;;;17358:30;17424:34;17404:18;;;17397:62;17495:34;17475:18;;;17468:62;17567:26;17546:19;;;17539:55;17611:19;;2066:98:67;17144:492:83;2009:336:67;2189:12;:28;;;2185:160;;;2237:93;;-1:-1:-1;;;2237:93:67;;17843:2:83;2237:93:67;;;17825:21:83;17882:2;17862:18;;;17855:30;17921:34;17901:18;;;17894:62;17992:34;17972:18;;;17965:62;-1:-1:-1;;;18043:19:83;;;18036:50;18103:19;;2237:93:67;17641:487:83;2185:160:67;2396:17;;;2409:3;2396:17;;;;;;;;;2365:28;;2396:17;;;;;;;;;;;;;;;;;-1:-1:-1;;2446:25:67;;;;;;;;;;;;-1:-1:-1;;;2446:25:67;;;;2365:48;;-1:-1:-1;;;2365:48:67;-1:-1:-1;2459:3:67;-1:-1:-1;2459:3:67;:::i;:::-;;;2446:17;;;;;;;;;;:::i;:::-;;;;;;:25;;;;2583:35;;;;;;;;;;;;;-1:-1:-1;;;2583:35:67;;;2521:98;;;;;;;;:::i;:::-;;;;;;;;;;;;;2481:12;2494:3;;;;;:::i;:::-;;;2481:17;;;;;;;;;;:::i;:::-;;;;;;:148;;;;2639:28;;;;;;;;;;;;;-1:-1:-1;;;2639:28:67;;;:12;2652:3;;;;;:::i;:::-;;;2639:17;;;;;;;;;;:::i;:::-;;;;;;:28;;;;2677:36;;;;;;;;;;;;;-1:-1:-1;;;2677:36:67;;;:12;2690:3;;;;;:::i;:::-;;;2677:17;;;;;;;;;;:::i;:::-;;;;;;:36;;;;2743:12;:22;;;2723:12;2736:3;;;;;:::i;:::-;;;2723:17;;;;;;;;;;:::i;:::-;;;;;;:42;;;;2775:36;;;;;;;;;;;;;-1:-1:-1;;;2775:36:67;;;:12;2788:3;;;;;:::i;:::-;;;2775:17;;;;;;;;;;:::i;:::-;;;;;;;;;;:36;2841:25;;2821:12;2834:3;;;;:::i;:::-;;;2821:17;;;;;;;;;;:::i;:::-;;;;;;:45;;;;2876:31;;;;;;;;;;;;;-1:-1:-1;;;2876:31:67;;;:12;2889:3;;;;;:::i;:::-;;;2876:17;;;;;;;;;;:::i;:::-;;;;;;:31;;;;2937;2954:13;2937:16;:31::i;:::-;2917:12;2930:3;;;;:::i;:::-;;;2917:17;;;;;;;;;;:::i;:::-;;;;;;:51;;;;2978:37;;;;;;;;;;;;;-1:-1:-1;;;2978:37:67;;;:12;2991:3;;;;;:::i;:::-;;;2978:17;;;;;;;;;;:::i;:::-;;;;;;:37;;;;3045:13;3025:12;3038:3;;;;;:::i;:::-;;;3025:17;;;;;;;;;;:::i;:::-;;;;;;;;;;:33;3072:22;;:26;3068:162;;3114:43;;;;;;;;;;;;-1:-1:-1;;;3114:43:67;;;;:12;3127:3;;;;:::i;:::-;;;3114:17;;;;;;;;;;:::i;:::-;;;;;;;;;;:43;3191:28;;-1:-1:-1;;;3191:28:67;;-1:-1:-1;;;;;3191:11:67;;;;;:28;;3203:15;;3191:28;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3191:28:67;;;;;;;;;;;;:::i;:::-;3171:12;3184:3;;;;:::i;:::-;;;3171:17;;;;;;;;;;:::i;:::-;;;;;;:48;;;;3068:162;3243:12;:33;;;3239:596;;;3292:40;;;;;;;;;;;;-1:-1:-1;;;3292:40:67;;;;:12;3305:3;;;;:::i;:::-;;;3292:17;;;;;;;;;;:::i;:::-;;;;;;:40;;;;3346:27;;;;;;;;;;;;;-1:-1:-1;;;3346:27:67;;;:12;3359:3;;;;;:::i;:::-;;;3346:17;;;;;;;;;;:::i;:::-;;;;;;:27;;;;3239:596;;;3400:24;;;;3394:38;:43;3390:445;;3453:35;;;;;;;;;;;;-1:-1:-1;;;3453:35:67;;;;:12;3466:3;;;;:::i;:::-;;;3453:17;;;;;;;;;;:::i;:::-;;;;;;:35;;;;3551:12;:24;;;3529:52;;;;;;;;:::i;:::-;;;;;;;;;;;;;3502:12;3515:3;;;;;:::i;3390:445::-;3604:12;:28;;;3603:29;:72;;;;-1:-1:-1;3642:20:67;;;;3636:34;:39;;3603:72;3599:236;;;3691:35;;;;;;;;;;;;-1:-1:-1;;;3691:35:67;;;;:12;3704:3;;;;:::i;:::-;;;3691:17;;;;;;;;;;:::i;:::-;;;;;;:35;;;;3789:28;3804:12;3789:14;:28::i;:::-;3767:56;;;;;;;;:::i;:::-;;;;;;;;;;;;;3740:12;3753:3;;;;;:::i;:::-;;;3740:17;;;;;;;;;;:::i;:::-;;;;;;:84;;;;3599:236;3854:22;;;;3848:36;:41;3844:161;;3905:33;;;;;;;;;;;;-1:-1:-1;;;3905:33:67;;;;:12;3918:3;;;;:::i;:::-;;;3905:17;;;;;;;;;;:::i;:::-;;;;;;:33;;;;3972:12;:22;;;3952:12;3965:3;;;;;:::i;:::-;;;3952:17;;;;;;;;;;:::i;:::-;;;;;;:42;;;;3844:161;4018:17;;;;:22;4014:145;;4056:28;;;;;;;;;;;;-1:-1:-1;;;4056:28:67;;;;:12;4069:3;;;;:::i;:::-;;;4056:17;;;;;;;;;;:::i;:::-;;;;;;;;;;:28;4130:17;;;;4118:30;;-1:-1:-1;;;4118:30:67;;;;;1036:25:83;;;;-1:-1:-1;;;;;4118:11:67;;;;;1009:18:83;;4118:30:67;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;4118:30:67;;;;;;;;;;;;:::i;:::-;4098:12;4111:3;;;;:::i;:::-;;;4098:17;;;;;;;;;;:::i;:::-;;;;;;:50;;;;4014:145;4172:24;;;;:33;:38;4168:186;;4226:32;;;;;;;;;;;;-1:-1:-1;;;4226:32:67;;;;:12;4239:3;;;;:::i;:::-;;;4226:17;;;;;;;;;;:::i;:::-;;;;;;:32;;;;4292:51;4309:12;:24;;;:33;;;4292:16;:51::i;:::-;4272:12;4285:3;;;;:::i;:::-;;;4272:17;;;;;;;;;;:::i;:::-;;;;;;:71;;;;4168:186;4367:24;;;;:33;;;:38;4363:186;;4421:32;;;;;;;;;;;;-1:-1:-1;;;4421:32:67;;;;:12;4434:3;;;;:::i;:::-;;;4421:17;;;;;;;;;;:::i;:::-;;;;;;:32;;;;4487:51;4504:12;:24;;;:33;;;4487:16;:51::i;:::-;4467:12;4480:3;;;;:::i;:::-;;;4467:17;;;;;;;;;;:::i;:::-;;;;;;:71;;;;4363:186;4562:24;;;;:37;;;:42;4558:198;;4620:36;;;;;;;;;;;;-1:-1:-1;;;4620:36:67;;;;:12;4633:3;;;;:::i;:::-;;;4620:17;;;;;;;;;;:::i;:::-;;;;;;:36;;;;4690:55;4707:12;:24;;;:37;;;4690:16;:55::i;:::-;4670:12;4683:3;;;;:::i;:::-;;;4670:17;;;;;;;;;;:::i;:::-;;;;;;:75;;;;4558:198;4769:24;;;;:45;;;:50;4765:222;;4835:44;;;;;;;;;;;;-1:-1:-1;;;4835:44:67;;;;:12;4848:3;;;;:::i;:::-;;;4835:17;;;;;;;;;;:::i;:::-;;;;;;:44;;;;4913:63;4930:12;:24;;;:45;;;4913:16;:63::i;:::-;4893:12;4906:3;;;;:::i;:::-;;;4893:17;;;;;;;;;;:::i;:::-;;;;;;:83;;;;4765:222;5006:21;;;;5000:35;:40;4996:218;;5056:32;;;;;;;;;;;;-1:-1:-1;;;5056:32:67;;;;:12;5069:3;;;;:::i;:::-;;;5056:17;;;;;;;;;;:::i;:::-;;;;;;;;;;:32;5162:21;;;;5151:45;;-1:-1:-1;;;5151:45:67;;-1:-1:-1;;;;;5151:10:67;;;;;:45;;5162:21;5151:45;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;5151:45:67;;;;;;;;;;;;:::i;:::-;5129:73;;;;;;;;:::i;:::-;;;;;;;;;;;;;5102:12;5115:3;;;;;:::i;:::-;;;5102:17;;;;;;;;;;:::i;:::-;;;;;;:101;;;;4996:218;5223:30;;;;;;;;;;;;-1:-1:-1;;;5223:30:67;;;;:12;5236:3;;;;:::i;:::-;;;5223:17;;;;;;;;;;:::i;:::-;;;;;;:30;;;;5263:29;;;;;;;;;;;;;-1:-1:-1;;;5263:29:67;;;:12;5276:3;;;;;:::i;:::-;;;5263:17;;;;;;;;;;:::i;:::-;;;;;;:29;;;;5366:22;5404:1;5391:15;;-1:-1:-1;;;;;5391:15:67;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5366:40:67;-1:-1:-1;5421:7:67;5416:82;5438:1;5434:5;;:1;:5;;;5416:82;;;5472:12;5485:1;5472:15;;;;;;;;;;:::i;:::-;;;;;;;5460:6;5467:1;5460:9;;;;;;;;;;:::i;:::-;;;;;;;;;;:27;5441:3;;5416:82;;;-1:-1:-1;5515:6:67;1654:3874;-1:-1:-1;;;;;;;;1654:3874:67:o;8232:1237:69:-;8300:19;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;8300:19:69;8370:38;;;;;;;;;;;;-1:-1:-1;;;8370:38:69;;;;8443:51;;-1:-1:-1;;;8443:51:69;;-1:-1:-1;;;;;;;;;;;861:42:69;8331:5;;861:42;;8443:8;;:51;;8370:38;;8443:51;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;8443:51:69;;;;;;;;;;;;:::i;:::-;8418:76;;8505:27;8535:31;8549:6;8557:8;8535:13;:31::i;:::-;8505:61;;8576:26;8605:2;-1:-1:-1;;;;;8605:9:69;;8615:11;8605:22;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;8605:22:69;;;;;;;;;;;;:::i;:::-;8641:15;;8576:51;;-1:-1:-1;8641:20:69;;;;;;:49;;-1:-1:-1;8665:13:69;;;;:20;:25;8641:49;:78;;;;-1:-1:-1;8694:13:69;;;;:20;:25;8641:78;8637:826;;;8996:11;9008:1;8996:14;;;;;;;;:::i;:::-;;;;;;;8893:483;;;;;;;;:::i;9087:1152:67:-;9295:35;;-1:-1:-1;;;9295:35:67;;9221:13;;-1:-1:-1;;;;;;;;;;;861:42:69;;;9295:11:67;;:35;;9307:6;;9315:14;;9295:35;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;9291:942;;;9423:32;;-1:-1:-1;;;9423:32:67;;9396:24;;-1:-1:-1;;;;;9423:8:67;;;;;:32;;9432:6;;9440:14;;9423:32;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;9423:32:67;;;;;;;;;;;;:::i;:::-;9396:59;;9491:1;9473:8;:15;:19;9469:395;;;9688:14;9777:6;9572:237;;;;;;;;;:::i;9469:395::-;9877:20;9900:8;9909:1;9900:11;;;;;;;;:::i;:::-;;;;;;;9877:34;;9972:2;-1:-1:-1;;;;;9972:8:67;;9981:6;9972:22;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;9972:22:67;;;;;;;;;;;;:::i;:::-;9995:1;9972:25;;;;;;;;:::i;:::-;;;;;;;9965:32;;;;;;;9291:942;10018:8;10014:219;;;10127:14;10160:6;10073:94;;;;;;;;;:::i;10014:219::-;-1:-1:-1;;10213:9:67;;;;;;;;;-1:-1:-1;10213:9:67;;;;21179:266:66;21248:7;21267:12;21398:8;21392:15;21387:2;21377:8;21373:17;21370:1;21363:45;21355:53;21179:266;-1:-1:-1;;;21179:266:66:o;15903:1676::-;16016:4;:24;;;16012:61;;;15903:1676;;;:::o;16012:61::-;16083:22;16108:58;16129:12;16143:4;16149:16;16108:20;:58::i;:::-;16083:83;;16176:26;16205:30;16228:6;16205:22;:30::i;:::-;16275:13;;;;16444:15;;16176:59;;-1:-1:-1;16275:13:66;-1:-1:-1;;;;;;;;;;;861:42:69;16444:20:66;;16245;16444;16440:1133;;16585:30;;-1:-1:-1;;;16585:30:66;;-1:-1:-1;;;;;16585:11:66;;;;;:30;;16597:6;;16585:30;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;16581:372;;;16639:13;;;;:20;:24;16635:156;;16738:34;16757:6;:13;;;16738:11;:34::i;:::-;16808:7;;;;15903:1676;;;:::o;16581:372::-;16929:6;16867:69;;;;;;;;:::i;16440:1133::-;16987:29;;-1:-1:-1;;;16987:29:66;;-1:-1:-1;;;;;16987:11:66;;;;;:29;;16999:6;;16987:29;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;16983:580;;;17040:13;;;;:20;:24;17036:156;;17139:34;17158:6;:13;;;17139:11;:34::i;:::-;17355:6;17299:63;;;;;;;;:::i;16983:580::-;17531:6;:13;;;17462:84;;;;;;;;:::i;6079:937:69:-;6211:21;;;;;;;;;;;;-1:-1:-1;;;6211:21:69;;;;6143:13;;-1:-1:-1;;;;;;;;;;;861:42:69;6211:21;;:4;;:13;:21::i;:::-;:48;;;;-1:-1:-1;6236:18:69;;;;;;;;;;;;-1:-1:-1;;;6236:18:69;;;;;;:4;;:10;:18::i;:::-;6258:1;6236:23;6211:48;6207:803;;;6282:28;;-1:-1:-1;;;6282:28:69;;-1:-1:-1;;;;;6282:10:69;;;;;:28;;6293:4;;6282:28;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6282:28:69;;;;;;;;;;;;:::i;6207:803::-;6331:15;;;;;;;;;;;;-1:-1:-1;;;6331:15:69;;;;;;:4;;:10;:15::i;:::-;6350:1;6331:20;6327:683;;6374:19;;-1:-1:-1;;;6374:19:69;;-1:-1:-1;;;;;6374:8:69;;;;;:19;;6383:4;;6374:19;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6374:19:69;;;;;;;;;;;;:::i;:::-;6394:1;6374:22;;;;;;;;:::i;:::-;;;;;;;6367:29;;;6079:937;;;:::o;6327:683::-;6417:22;;;;;;;;;;;;-1:-1:-1;;;6417:22:69;;;;;;:4;;:13;:22::i;:::-;:50;;;;-1:-1:-1;6443:19:69;;;;;;;;;;;;-1:-1:-1;;;6443:19:69;;;;;;:4;;:10;:19::i;:::-;6466:1;6443:24;6417:50;6413:597;;;6507:19;;-1:-1:-1;;;6507:19:69;;6483:21;;-1:-1:-1;;;;;6507:8:69;;;;;:19;;6516:4;;6507:19;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6507:19:69;;;;;;;;;;;;:::i;:::-;6483:43;;6540:22;6565:5;6586:1;6571:5;:12;:16;;;;:::i;:::-;6565:23;;;;;;;;:::i;:::-;;;;;;;6540:48;;6609:2;-1:-1:-1;;;;;6609:10:69;;6620:8;6609:33;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6609:33:69;;;;;;;;;;;;:::i;:::-;6602:40;6079:937;-1:-1:-1;;;;;6079:937:69:o;6413:597::-;6809:4;6725:242;;;;;;;;:::i;6413:597::-;6158:858;6079:937;;;:::o;5206:867::-;5337:21;;;;;;;;;;;;-1:-1:-1;;;5337:21:69;;;;5269:13;;-1:-1:-1;;;;;;;;;;;861:42:69;5337:21;;:4;;:13;:21::i;:::-;5333:734;;;-1:-1:-1;5381:4:69;;5206:867;-1:-1:-1;5206:867:69:o;5333:734::-;5406:15;;;;;;;;;;;;-1:-1:-1;;;5406:15:69;;;;;;:4;;:10;:15::i;:::-;5425:1;5406:20;5402:665;;5449:19;;-1:-1:-1;;;5449:19:69;;-1:-1:-1;;;;;5449:8:69;;;;;:19;;5458:4;;5449:19;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;5449:19:69;;;;;;;;;;;;:::i;:::-;5469:1;5449:22;;;;;;;;:::i;5402:665::-;5506:22;;;;;;;;;;;;-1:-1:-1;;;5506:22:69;;;;;;:4;;:13;:22::i;:::-;5502:214;;;5572:19;;-1:-1:-1;;;5572:19:69;;5548:21;;-1:-1:-1;;;;;5572:8:69;;;;;:19;;5581:4;;5572:19;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;5572:19:69;;;;;;;;;;;;:::i;:::-;5548:43;;5628:1;5613:5;:12;:16;5609:93;;;5660:5;5681:1;5666:5;:12;:16;;;;:::i;:::-;5660:23;;;;;;;;:::i;:::-;;;;;;;5653:30;;;;5206:867;;;:::o;5609:93::-;5530:186;5866:4;5782:242;;;;;;;;:::i;935:286:68:-;1107:25;;-1:-1:-1;;;1107:25:68;;1021:4;;-1:-1:-1;;;;;;;;;;;861:42:69;1021:4:68;;861:42:69;;1107:8:68;;:25;;1116:7;;1125:6;;1107:25;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1107:25:68;;;;;;;;;;;;:::i;:::-;1082:50;;1165:1;1149:6;:13;:17;:65;;;;;1176:6;1199:1;1183:6;:13;:17;;;;:::i;:::-;1176:25;;;;;;;;:::i;:::-;;;;;;;1170:39;1213:1;1170:44;1142:72;935:286;-1:-1:-1;;;;;935:286:68:o;1308:632:55:-;1364:13;1413:14;1430:17;1441:5;1430:10;:17::i;:::-;1450:1;1430:21;1413:38;;1465:20;1499:6;-1:-1:-1;;;;;1488:18:55;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1488:18:55;-1:-1:-1;1465:41:55;-1:-1:-1;1595:28:55;;;1611:2;1595:28;1650:247;-1:-1:-1;;1681:5:55;-1:-1:-1;;;1780:2:55;1769:14;;1764:32;1681:5;1751:46;1841:2;1832:11;;;-1:-1:-1;1861:21:55;1650:247;1861:21;-1:-1:-1;1917:6:55;1308:632;-1:-1:-1;;;1308:632:55:o;5565:1936:67:-;5689:20;;;;;5723:22;;;;;;;;;;;-1:-1:-1;;;5723:22:67;;;;5645:13;;5723:22;;5689:20;;5723:8;:22::i;:::-;5719:1776;;;-1:-1:-1;;5761:13:67;;;;;;;;;;;;-1:-1:-1;;;5761:13:67;;;;;5565:1936;-1:-1:-1;5565:1936:67:o;5719:1776::-;5795:21;;;;;;;;;;;;-1:-1:-1;;;5795:21:67;;;;;;:2;;:8;:21::i;:::-;5791:1704;;;-1:-1:-1;;5832:18:67;;;;;;;;;;;;-1:-1:-1;;;5832:18:67;;;;;5565:1936;-1:-1:-1;5565:1936:67:o;5791:1704::-;5871:15;;;;;;;;;;;;-1:-1:-1;;;5871:15:67;;;;;;:2;;:8;:15::i;:::-;5867:1628;;;-1:-1:-1;;5902:12:67;;;;;;;;;;;;-1:-1:-1;;;5902:12:67;;;;;5565:1936;-1:-1:-1;5565:1936:67:o;5867:1628::-;5935:24;;;;;;;;;;;;-1:-1:-1;;;5935:24:67;;;;;;:2;;:8;:24::i;:::-;:56;;;-1:-1:-1;5963:28:67;;;;;;;;;;;;-1:-1:-1;;;5963:28:67;;;;;;:2;;:8;:28::i;:::-;5931:1564;;;-1:-1:-1;;6007:18:67;;;;;;;;;;;;-1:-1:-1;;;6007:18:67;;;;;5565:1936;-1:-1:-1;5565:1936:67:o;5931:1564::-;6046:24;;;;;;;;;;;;-1:-1:-1;;;6046:24:67;;;;;;:2;;:8;:24::i;:::-;:56;;;-1:-1:-1;6074:28:67;;;;;;;;;;;;-1:-1:-1;;;6074:28:67;;;;;;:2;;:8;:28::i;:::-;6042:1453;;;-1:-1:-1;;6118:18:67;;;;;;;;;;;;-1:-1:-1;;;6118:18:67;;;;;5565:1936;-1:-1:-1;5565:1936:67:o;6042:1453::-;6157:25;;;;;;;;;;;;-1:-1:-1;;;6157:25:67;;;;;;:2;;:8;:25::i;:::-;:58;;;-1:-1:-1;6186:29:67;;;;;;;;;;;;-1:-1:-1;;;6186:29:67;;;;;;:2;;:8;:29::i;:::-;6153:1342;;;-1:-1:-1;;6231:21:67;;;;;;;;;;;;-1:-1:-1;;;6231:21:67;;;;;5565:1936;-1:-1:-1;5565:1936:67:o;6153:1342::-;6273:25;;;;;;;;;;;;-1:-1:-1;;;6273:25:67;;;;;;:2;;:8;:25::i;:::-;:58;;;-1:-1:-1;6302:29:67;;;;;;;;;;;;-1:-1:-1;;;6302:29:67;;;;;;:2;;:8;:29::i;:::-;6269:1226;;;-1:-1:-1;;6347:19:67;;;;;;;;;;;;-1:-1:-1;;;6347:19:67;;;;;5565:1936;-1:-1:-1;5565:1936:67:o;6269:1226::-;6387:24;;;;;;;;;;;;-1:-1:-1;;;6387:24:67;;;;;;:2;;:8;:24::i;:::-;6383:1112;;;-1:-1:-1;;6427:21:67;;;;;;;;;;;;-1:-1:-1;;;6427:21:67;;;;;5565:1936;-1:-1:-1;5565:1936:67:o;6383:1112::-;6469:24;;;;;;;;;;;;-1:-1:-1;;;6469:24:67;;;;;;:2;;:8;:24::i;:::-;6465:1030;;;-1:-1:-1;;6509:21:67;;;;;;;;;;;;-1:-1:-1;;;6509:21:67;;;;;5565:1936;-1:-1:-1;5565:1936:67:o;6465:1030::-;6551:19;;;;;;;;;;;;-1:-1:-1;;;6551:19:67;;;;;;:2;;:8;:19::i;:::-;6547:948;;;-1:-1:-1;;6586:16:67;;;;;;;;;;;;-1:-1:-1;;;6586:16:67;;;;;5565:1936;-1:-1:-1;5565:1936:67:o;6547:948::-;6623:19;;;;;;;;;;;;-1:-1:-1;;;6623:19:67;;;;;;:2;;:8;:19::i;:::-;6619:876;;;-1:-1:-1;;6658:16:67;;;;;;;;;;;;-1:-1:-1;;;6658:16:67;;;;;5565:1936;-1:-1:-1;5565:1936:67:o;6619:876::-;6695:22;;;;;;;;;;;;-1:-1:-1;;;6695:22:67;;;;;;:2;;:8;:22::i;:::-;6691:804;;;-1:-1:-1;;6733:19:67;;;;;;;;;;;;-1:-1:-1;;;6733:19:67;;;;;5565:1936;-1:-1:-1;5565:1936:67:o;6691:804::-;6773:25;;;;;;;;;;;;-1:-1:-1;;;6773:25:67;;;;;;:2;;:8;:25::i;:::-;:58;;;-1:-1:-1;6802:29:67;;;;;;;;;;;;-1:-1:-1;;;6802:29:67;;;;;;:2;;:8;:29::i;:::-;6769:726;;;-1:-1:-1;;6847:19:67;;;;;;;;;;;;-1:-1:-1;;;6847:19:67;;;;;5565:1936;-1:-1:-1;5565:1936:67:o;6769:726::-;6887:20;;;;;;;;;;;;-1:-1:-1;;;6887:20:67;;;;;;:2;;:8;:20::i;:::-;6883:612;;;-1:-1:-1;;6923:16:67;;;;;;;;;;;;-1:-1:-1;;;6923:16:67;;;;;5565:1936;-1:-1:-1;5565:1936:67:o;6883:612::-;7116:20;;;;;7194:25;;7022:430;;;;7194:25;7022:430;;;:::i;7388:595:69:-;7482:15;;7551:6;7546:266;7567:6;:13;7563:1;:17;7546:266;;;7641:13;7656:6;7663:1;7656:9;;;;;;;;:::i;:::-;;;;;;;7624:42;;;;;;;;;:::i;:::-;;;;;;;;;;;;;7601:66;;7706:1;7690:6;:13;:17;;;;:::i;:::-;7685:1;:22;7681:121;;7767:13;7750:36;;;;;;;;:::i;:::-;;;;;;;;;;;;;7727:60;;7681:121;7582:3;;7546:266;;;-1:-1:-1;7847:15:69;;;7860:1;7847:15;;;;;;;;;7822:22;;7847:15;;;;;;;;;;;;;;;;;;;;7822:40;;7884:8;7872:6;7879:1;7872:9;;;;;;;;:::i;:::-;;;;;;:20;;;;7902:16;;;;;;;;;;;;;-1:-1:-1;;;7902:16:69;;;:6;7909:1;7902:9;;;;;;;;:::i;:::-;;;;;;:16;;;;7940:13;7928:6;7935:1;7928:9;;;;;;;;:::i;:::-;;;;;;;;;;:25;7970:6;7388:595;-1:-1:-1;;;;7388:595:69:o;17585:2451:66:-;17740:15;17767:20;17790:17;:15;:17::i;:::-;17849:21;;;17862:7;17849:21;;;;;;;;;17767:40;;-1:-1:-1;17818:28:66;;17849:21;;;;;;;;;;;;;;;;;;-1:-1:-1;;17904:25:66;;;;;;;;;;;;-1:-1:-1;;;17904:25:66;;;;17818:52;;-1:-1:-1;;;17818:52:66;-1:-1:-1;17917:3:66;-1:-1:-1;17917:3:66;:::i;:::-;;;17904:17;;;;;;;;;;:::i;:::-;;;;;;:25;;;;18015:22;;;;;;;;;;;;;-1:-1:-1;;;18015:22:66;;;17966:72;;;;;;;;:::i;:::-;;;;;;;;;;;;;17939:12;17952:3;;;;;:::i;:::-;;;17939:17;;;;;;;;;;:::i;:::-;;;;;;:100;;;;18049:30;;;;;;;;;;;;;-1:-1:-1;;;18049:30:66;;;:12;18062:3;;;;;:::i;:::-;;;18049:17;;;;;;;;;;:::i;:::-;;;;;;:30;;;;18133:6;18116:39;;;;;;;;:::i;:::-;;;;;;;;;;;;;18089:12;18102:3;;;;;:::i;:::-;;;18089:17;;;;;;;;;;:::i;:::-;;;;;;:67;;;;18166:32;;;;;;;;;;;;;-1:-1:-1;;;18166:32:66;;;:12;18179:3;;;;;:::i;:::-;;;18166:17;;;;;;;;;;:::i;:::-;;;;;;:32;;;;18228:49;18256:12;18270:6;18228:27;:49::i;:::-;18208:12;18221:3;;;;:::i;:::-;;;18208:17;;;;;;;;;;:::i;:::-;;;;;;;;;;;:69;;;;18322:22;;18316:36;18405:26;;;;18399:40;18316:41;;;;;18399:45;;;18455:352;;18495:26;18524:24;:143;;18636:22;;18608:59;;18660:6;18608:27;:59::i;:::-;18524:143;;;18567:22;;18524:143;18495:172;;18681:33;;;;;;;;;;;;;-1:-1:-1;;;18681:33:66;;;:12;18694:3;;;;;:::i;:::-;;;18681:17;;;;;;;;;;:::i;:::-;;;;;;:33;;;;18777:12;18755:40;;;;;;;;:::i;:::-;;;;;;;;;;;;;18728:12;18741:3;;;;;:::i;:::-;;;18728:17;;;;;;;;;;:::i;:::-;;;;;;:68;;;;18481:326;18455:352;18821:24;18817:197;;;18861:46;;;;;;;;;;;;;;;;;:12;18874:3;;;;:::i;:::-;;;18861:17;;;;;;;;;;:::i;:::-;;;;;;:46;;;;18970:4;:26;;;18948:54;;;;;;;;:::i;:::-;;;;;;;;;;;;;18921:12;18934:3;;;;;:::i;:::-;;;18921:17;;;;;;;;;;:::i;:::-;;;;;;:82;;;;18817:197;19029:7;19024:302;19046:4;:12;;;:19;19042:1;:23;;;19024:302;;;19086:21;19110:4;:12;;;19123:1;19110:15;;;;;;;;;;:::i;:::-;;;;;;;19086:39;;19149:7;19143:21;19168:1;19143:26;19139:177;;19189:31;;;;;;;;;;;;-1:-1:-1;;;19189:31:66;;;;:12;19202:3;;;;:::i;:::-;;;19189:17;;;;;;;;;;:::i;:::-;;;;;;:31;;;;19287:7;19265:35;;;;;;;;:::i;:::-;;;;;;;;;;;;;19238:12;19251:3;;;;;:::i;:::-;;;19238:17;;;;;;;;;;:::i;:::-;;;;;;:63;;;;19139:177;-1:-1:-1;19067:3:66;;;;:::i;:::-;;;;19024:302;;;;19340:4;:27;;;19336:197;;;19383:46;;;;;;;;;;;;;;;;;:12;19396:3;;;;:::i;:::-;;;19383:17;;;;;;;;;;:::i;:::-;;;;;;:46;;;;19336:197;;;19450:16;19446:87;;;19482:40;;;;;;;;;;;;-1:-1:-1;;;19482:40:66;;;;:12;19495:3;;;;:::i;:::-;;;19482:17;;;;;;;;;;:::i;:::-;;;;;;:40;;;;19446:87;19553:16;;;;19547:30;:35;19543:151;;19598:35;;;;;;;;;;;;-1:-1:-1;;;19598:35:66;;;;:12;19611:3;;;;:::i;:::-;;;19598:17;;;;;;;;;;:::i;:::-;;;;;;:35;;;;19667:4;:16;;;19647:12;19660:3;;;;;:::i;:::-;;;19647:17;;;;;;;;;;:::i;:::-;;;;;;:36;;;;19543:151;19708:4;:23;;;19704:96;;;19747:42;;;;;;;;;;;;-1:-1:-1;;;19747:42:66;;;;:12;19760:3;;;;:::i;:::-;;;19747:17;;;;;;;;;;:::i;:::-;;;;;;:42;;;;19704:96;19873:22;19911:1;19898:15;;-1:-1:-1;;;;;19898:15:66;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;19873:40:66;-1:-1:-1;19928:8:66;19923:83;19946:1;19942:5;;:1;:5;;;19923:83;;;19980:12;19993:1;19980:15;;;;;;;;;;:::i;:::-;;;;;;;19968:6;19975:1;19968:9;;;;;;;;;;:::i;:::-;;;;;;;;;;:27;19949:3;;19923:83;;;-1:-1:-1;20023:6:66;17585:2451;-1:-1:-1;;;;;;;;;17585:2451:66:o;1344:238:68:-;1516:25;;-1:-1:-1;;;1516:25:68;;1427:7;;-1:-1:-1;;;;;;;;;;;861:42:69;1427:7:68;;861:42:69;;1516:8:68;;:25;;1525:7;;1534:6;;1516:25;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1516:25:68;;;;;;;;;;;;:::i;:::-;1491:50;;1574:1;1558:6;:13;:17;;;;:::i;29154:916:60:-;29207:7;;-1:-1:-1;;;29282:17:60;;29278:103;;-1:-1:-1;;;29319:17:60;;;-1:-1:-1;29364:2:60;29354:12;29278:103;29407:8;29398:5;:17;29394:103;;29444:8;29435:17;;;-1:-1:-1;29480:2:60;29470:12;29394:103;29523:8;29514:5;:17;29510:103;;29560:8;29551:17;;;-1:-1:-1;29596:2:60;29586:12;29510:103;29639:7;29630:5;:16;29626:100;;29675:7;29666:16;;;-1:-1:-1;29710:1:60;29700:11;29626:100;29752:7;29743:5;:16;29739:100;;29788:7;29779:16;;;-1:-1:-1;29823:1:60;29813:11;29739:100;29865:7;29856:5;:16;29852:100;;29901:7;29892:16;;;-1:-1:-1;29936:1:60;29926:11;29852:100;29978:7;29969:5;:16;29965:66;;30015:1;30005:11;30057:6;29154:916;-1:-1:-1;;29154:916:60:o;4418:182:55:-;4490:4;4538:1;4532:15;4519:1;4513:15;:34;:80;;;;-1:-1:-1;;4574:19:55;;;;;;;4551;;;;;;;;;;:42;;4418:182::o;1338:303:69:-;1464:13;1489:24;1516:37;1532:12;1546:6;1516:15;:37::i;:::-;1594:17;;1618:14;;;;;1577:56;;1489:64;;-1:-1:-1;1577:56:69;;1618:14;;1577:56;;:::i;:::-;;;;;;;;;;;;;1563:71;;;1338:303;;;;:::o;-1:-1:-1:-;;;;;;;;:::o;:::-;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;701:184:83:-;771:6;824:2;812:9;803:7;799:23;795:32;792:52;;;840:1;837;830:12;792:52;-1:-1:-1;863:16:83;;701:184;-1:-1:-1;701:184:83:o;1072:290::-;1142:6;1195:2;1183:9;1174:7;1170:23;1166:32;1163:52;;;1211:1;1208;1201:12;1163:52;1237:16;;-1:-1:-1;;;;;1282:31:83;;1272:42;;1262:70;;1328:1;1325;1318:12;1367:380;1446:1;1442:12;;;;1489;;;1510:61;;1564:4;1556:6;1552:17;1542:27;;1510:61;1617:2;1609:6;1606:14;1586:18;1583:38;1580:161;;1663:10;1658:3;1654:20;1651:1;1644:31;1698:4;1695:1;1688:15;1726:4;1723:1;1716:15;1878:1026;1963:12;;1928:3;;2022:1;2018:17;;;;2070;;;2096:61;;2150:4;2142:6;2138:17;2128:27;;2096:61;2203:2;2195:6;2192:14;2172:18;2169:38;2166:161;;2249:10;2244:3;2240:20;2237:1;2230:31;2284:4;2281:1;2274:15;2312:4;2309:1;2302:15;2166:161;293:19;;;345:4;336:14;;2413:18;2440:132;;;;2586:1;2581:317;;;;2406:492;;2440:132;-1:-1:-1;;2475:24:83;;2461:39;;2545:14;;2538:22;2535:1;2531:30;2520:42;;;-1:-1:-1;2440:132:83;;2581:317;1825:1;1818:14;;;1862:4;1849:18;;2675:1;2689:166;2703:6;2700:1;2697:13;2689:166;;;2783:14;;2768:13;;;2761:37;2839:1;2826:15;;;;2725:2;2718:10;2689:166;;;2875:13;;;-1:-1:-1;;2406:492:83;;;;;;1878:1026;;;;:::o;2909:393::-;3100:2;3089:9;3082:21;3063:4;3126:53;3175:2;3164:9;3160:18;3152:6;3126:53;:::i;:::-;3227:9;3219:6;3215:22;3210:2;3199:9;3195:18;3188:50;3255:41;3289:6;3281;3255:41;:::i;4028:127::-;4089:10;4084:3;4080:20;4077:1;4070:31;4120:4;4117:1;4110:15;4144:4;4141:1;4134:15;4160:127;4221:10;4216:3;4212:20;4209:1;4202:31;4252:4;4249:1;4242:15;4276:4;4273:1;4266:15;4292:931;-1:-1:-1;;;;;4597:32:83;;;4579:51;;4666:32;;;4661:2;4646:18;;;4639:60;;;;4735:32;;;4730:2;4715:18;;4708:60;4566:3;4799:2;4784:18;;4777:31;;;4857:13;;4551:19;;;4879:22;;;4518:4;;4959:15;;;4617:3;4917:19;;;4518:4;5002:195;5016:6;5013:1;5010:13;5002:195;;;5081:13;;-1:-1:-1;;;;;5077:39:83;5065:52;;5146:2;5172:15;;;;5137:12;;;;5113:1;5031:9;5002:195;;;-1:-1:-1;5214:3:83;;4292:931;-1:-1:-1;;;;;;;;4292:931:83:o;5228:300::-;5281:3;5319:5;5313:12;5346:6;5341:3;5334:19;5402:6;5395:4;5388:5;5384:16;5377:4;5372:3;5368:14;5362:47;5454:1;5447:4;5438:6;5433:3;5429:16;5425:27;5418:38;5517:4;5510:2;5506:7;5501:2;5493:6;5489:15;5485:29;5480:3;5476:39;5472:50;5465:57;;;5228:300;;;;:::o;5533:328::-;5710:2;5699:9;5692:21;5673:4;5730:56;5782:2;5771:9;5767:18;5759:6;5730:56;:::i;:::-;5722:64;;5851:1;5847;5842:3;5838:11;5834:19;5826:6;5822:32;5817:2;5806:9;5802:18;5795:60;5533:328;;;;;:::o;5866:302::-;6043:2;6032:9;6025:21;6006:4;6063:56;6115:2;6104:9;6100:18;6092:6;6063:56;:::i;:::-;6055:64;;6155:6;6150:2;6139:9;6135:18;6128:34;5866:302;;;;;:::o;6173:405::-;6370:2;6359:9;6352:21;6333:4;6396:56;6448:2;6437:9;6433:18;6425:6;6396:56;:::i;:::-;6500:9;6492:6;6488:22;6483:2;6472:9;6468:18;6461:50;6528:44;6565:6;6557;6528:44;:::i;6583:502::-;6808:2;6797:9;6790:21;6771:4;6834:56;6886:2;6875:9;6871:18;6863:6;6834:56;:::i;:::-;6938:9;6930:6;6926:22;6921:2;6910:9;6906:18;6899:50;6966:44;7003:6;6995;6966:44;:::i;:::-;6958:52;;;7075:1;7071;7066:3;7062:11;7058:19;7050:6;7046:32;7041:2;7030:9;7026:18;7019:60;6583:502;;;;;;:::o;7090:231::-;7239:2;7228:9;7221:21;7202:4;7259:56;7311:2;7300:9;7296:18;7288:6;7259:56;:::i;7326:326::-;-1:-1:-1;;;;;7501:32:83;;7483:51;;7570:2;7565;7550:18;;7543:30;;;-1:-1:-1;;7590:56:83;;7627:18;;7619:6;7590:56;:::i;:::-;7582:64;7326:326;-1:-1:-1;;;;7326:326:83:o;7657:212::-;7699:3;7737:5;7731:12;7781:6;7774:4;7767:5;7763:16;7758:3;7752:36;7843:1;7807:16;;7832:13;;;-1:-1:-1;7807:16:83;;7657:212;-1:-1:-1;7657:212:83:o;7874:582::-;8285:28;8280:3;8273:41;8255:3;8333:39;8368:2;8363:3;8359:12;8351:6;8333:39;:::i;:::-;-1:-1:-1;;;8388:2:83;8381:16;8413:37;8447:1;8443:2;8439:10;8431:6;8413:37;:::i;8461:253::-;8533:2;8527:9;8575:4;8563:17;;-1:-1:-1;;;;;8595:34:83;;8631:22;;;8592:62;8589:88;;;8657:18;;:::i;:::-;8693:2;8686:22;8461:253;:::o;8719:275::-;8790:2;8784:9;8855:2;8836:13;;-1:-1:-1;;8832:27:83;8820:40;;-1:-1:-1;;;;;8875:34:83;;8911:22;;;8872:62;8869:88;;;8937:18;;:::i;:::-;8973:2;8966:22;8719:275;;-1:-1:-1;8719:275:83:o;8999:626::-;9052:5;9105:3;9098:4;9090:6;9086:17;9082:27;9072:55;;9123:1;9120;9113:12;9072:55;9156:6;9150:13;9195:4;9187:6;9183:17;9224:1;9246;-1:-1:-1;;;;;9262:6:83;9259:30;9256:56;;;9292:18;;:::i;:::-;-1:-1:-1;9358:2:83;9337:15;;-1:-1:-1;;9333:29:83;9364:4;9329:40;9389:21;9329:40;9389:21;:::i;:::-;9378:32;;;9435:6;9426:7;9419:23;9475:3;9466:6;9461:3;9457:16;9454:25;9451:45;;;9492:1;9489;9482:12;9451:45;9536:6;9531:3;9524:4;9515:7;9511:18;9505:38;9592:1;9563:20;;;9585:4;9559:31;9552:42;;;;-1:-1:-1;9567:7:83;8999:626;-1:-1:-1;;;8999:626:83:o;9630:335::-;9709:6;9762:2;9750:9;9741:7;9737:23;9733:32;9730:52;;;9778:1;9775;9768:12;9730:52;9811:9;9805:16;-1:-1:-1;;;;;9836:6:83;9833:30;9830:50;;;9876:1;9873;9866:12;9830:50;9899:60;9951:7;9942:6;9931:9;9927:22;9899:60;:::i;9970:263::-;10145:3;10170:57;10196:30;10222:3;10214:6;10196:30;:::i;:::-;10188:6;10170:57;:::i;10238:808::-;10750:28;10745:3;10738:41;10720:3;10798:39;10833:2;10828:3;10824:12;10816:6;10798:39;:::i;:::-;10857:66;10853:2;10846:78;10943:38;10977:2;10973;10969:11;10961:6;10943:38;:::i;:::-;-1:-1:-1;;;10990:24:83;;11038:1;11030:10;;10238:808;-1:-1:-1;;;;;10238:808:83:o;11051:464::-;11301:2;11290:9;11283:21;11340:2;11335;11324:9;11320:18;11313:30;-1:-1:-1;;;11374:2:83;11363:9;11359:18;11352:41;11431:3;11424:4;11413:9;11409:20;11402:33;11264:4;11452:57;11504:3;11493:9;11489:19;11481:6;11452:57;:::i;11861:1037::-;12540:3;12568:30;12594:3;12586:6;12568:30;:::i;:::-;-1:-1:-1;;;12614:2:83;12607:15;12641:37;12675:1;12671:2;12667:10;12659:6;12641:37;:::i;:::-;12631:47;;-1:-1:-1;;;12694:2:83;12687:15;12721:37;12755:1;12751:2;12747:10;12739:6;12721:37;:::i;:::-;12711:47;;-1:-1:-1;;;12774:2:83;12767:15;12801:37;12835:1;12831:2;12827:10;12819:6;12801:37;:::i;:::-;-1:-1:-1;;;12847:19:83;;12890:1;12882:10;;11861:1037;-1:-1:-1;;;;;;;11861:1037:83:o;12903:495::-;13153:2;13142:9;13135:21;13116:4;13179:56;13231:2;13220:9;13216:18;13208:6;13179:56;:::i;:::-;13283:9;13275:6;13271:22;13266:2;13255:9;13251:18;13244:50;13318:1;13310:6;13303:17;-1:-1:-1;;;13348:2:83;13340:6;13336:15;13329:31;13389:2;13381:6;13377:15;13369:23;;;12903:495;;;;:::o;13403:277::-;13470:6;13523:2;13511:9;13502:7;13498:23;13494:32;13491:52;;;13539:1;13536;13529:12;13491:52;13571:9;13565:16;13624:5;13617:13;13610:21;13603:5;13600:32;13590:60;;13646:1;13643;13636:12;13685:577;14048:33;14043:3;14036:46;14018:3;14101:39;14136:2;14131:3;14127:12;14119:6;14101:39;:::i;:::-;14160:34;14149:46;;-1:-1:-1;;;14219:2:83;14211:11;;14204:25;14253:2;14245:11;;13685:577;-1:-1:-1;;;13685:577:83:o;14267:509::-;14517:2;14506:9;14499:21;14480:4;14543:56;14595:2;14584:9;14580:18;14572:6;14543:56;:::i;:::-;14647:9;14639:6;14635:22;14630:2;14619:9;14615:18;14608:50;14682:2;14674:6;14667:18;-1:-1:-1;;;14713:2:83;14705:6;14701:15;14694:44;14767:2;14759:6;14755:15;14747:23;;;14267:509;;;;:::o;14781:504::-;15031:2;15020:9;15013:21;14994:4;15057:56;15109:2;15098:9;15094:18;15086:6;15057:56;:::i;:::-;15161:9;15153:6;15149:22;15144:2;15133:9;15129:18;15122:50;15196:2;15188:6;15181:18;-1:-1:-1;;;15227:2:83;15219:6;15215:15;15208:39;15276:2;15268:6;15264:15;15256:23;;;14781:504;;;;:::o;15290:512::-;-1:-1:-1;;;15648:3:83;15641:35;15623:3;15695:39;15730:2;15725:3;15721:12;15713:6;15695:39;:::i;:::-;-1:-1:-1;;;15743:26:83;;15793:2;15785:11;;15290:512;-1:-1:-1;;;15290:512:83:o;15807:498::-;-1:-1:-1;;;16158:25:83;;16140:3;16202:38;16237:1;16228:11;;16220:6;16202:38;:::i;:::-;-1:-1:-1;;;16249:24:83;;16297:1;16289:10;;15807:498;-1:-1:-1;;;15807:498:83:o;16310:357::-;16542:3;16570:30;16596:3;16588:6;16570:30;:::i;:::-;-1:-1:-1;;;16609:25:83;;16658:2;16650:11;;16310:357;-1:-1:-1;;;16310:357:83:o;16672:467::-;16934:34;16929:3;16922:47;16999:34;16994:2;16989:3;16985:12;16978:56;-1:-1:-1;;;17059:2:83;17054:3;17050:12;17043:35;16904:3;17094:39;17129:2;17124:3;17120:12;17112:6;17094:39;:::i;18133:127::-;18194:10;18189:3;18185:20;18182:1;18175:31;18225:4;18222:1;18215:15;18249:4;18246:1;18239:15;18265:175;18302:3;18346:4;18339:5;18335:16;18375:4;18366:7;18363:17;18360:43;;18383:18;;:::i;:::-;18432:1;18419:15;;18265:175;-1:-1:-1;;18265:175:83:o;18445:400::-;18707:34;18702:3;18695:47;-1:-1:-1;;;18767:2:83;18762:3;18758:12;18751:33;18677:3;18800:39;18835:2;18830:3;18826:12;18818:6;18800:39;:::i;19266:756::-;19617:2;19606:9;19599:21;19580:4;19643:56;19695:2;19684:9;19680:18;19672:6;19643:56;:::i;:::-;19730:9;19722:6;19718:22;19776:2;19771;19760:9;19756:18;19749:30;19803:1;19795:6;19788:17;19847:2;19842:3;19838:12;19833:2;19825:6;19821:15;19814:37;19895:2;19891;19887:11;19882:2;19871:9;19867:18;19860:39;;19932:1;19927:2;19919:6;19915:15;19908:26;19976:5;19971:3;19967:15;19962:2;19954:6;19950:15;19943:40;20012:3;20004:6;20000:16;19992:24;;;19266:756;;;;:::o;20027:475::-;20277:2;20266:9;20259:21;20316:2;20311;20300:9;20296:18;20289:30;-1:-1:-1;;;20350:2:83;20339:9;20335:18;20328:52;20418:3;20411:4;20400:9;20396:20;20389:33;20240:4;20439:57;20491:3;20480:9;20476:19;20468:6;20439:57;:::i;20507:793::-;20669:4;20717:2;20706:9;20702:18;20747:2;20736:9;20729:21;20770:6;20805;20799:13;20836:6;20828;20821:22;20874:2;20863:9;20859:18;20852:25;;20936:2;20926:6;20923:1;20919:14;20908:9;20904:30;20900:39;20886:53;;20974:2;20966:6;20962:15;20995:1;21005:266;21019:6;21016:1;21013:13;21005:266;;;21112:2;21108:7;21096:9;21088:6;21084:22;21080:36;21075:3;21068:49;21140:51;21184:6;21175;21169:13;21140:51;:::i;:::-;21130:61;-1:-1:-1;21226:2:83;21249:12;;;;21214:15;;;;;21041:1;21034:9;21005:266;;;-1:-1:-1;21288:6:83;;20507:793;-1:-1:-1;;;;;;20507:793:83:o;21305:959::-;21402:6;21455:2;21443:9;21434:7;21430:23;21426:32;21423:52;;;21471:1;21468;21461:12;21423:52;21504:9;21498:16;-1:-1:-1;;;;;21529:6:83;21526:30;21523:50;;;21569:1;21566;21559:12;21523:50;21592:22;;21648:4;21630:16;;;21626:27;21623:47;;;21666:1;21663;21656:12;21623:47;21692:22;;:::i;:::-;21744:2;21738:9;21792:7;21789:1;21778:22;21769:7;21766:35;21756:63;;21815:1;21812;21805:12;21756:63;21828:22;;21889:2;21881:11;;21875:18;-1:-1:-1;;;;;21905:32:83;;21902:52;;;21950:1;21947;21940:12;21902:52;21986:55;22033:7;22022:8;22018:2;22014:17;21986:55;:::i;:::-;21981:2;21974:5;21970:14;21963:79;;22081:2;22077;22073:11;22067:18;-1:-1:-1;;;;;22100:8:83;22097:32;22094:52;;;22142:1;22139;22132:12;22094:52;22178:55;22225:7;22214:8;22210:2;22206:17;22178:55;:::i;:::-;22173:2;22162:14;;22155:79;-1:-1:-1;22166:5:83;21305:959;-1:-1:-1;;;;21305:959:83:o;22269:1266::-;22632:34;22620:47;;-1:-1:-1;;;22692:2:83;22683:12;;22676:34;-1:-1:-1;22729:39:83;22764:2;22755:12;;22747:6;22729:39;:::i;:::-;22788:66;22777:78;;22884:34;22879:2;22871:11;;22864:55;22948:34;22943:2;22935:11;;22928:55;23012:34;23007:2;22999:11;;22992:55;23077:34;23071:3;23063:12;;23056:56;23142:34;23136:3;23128:12;;23121:56;23207:34;23201:3;23193:12;;23186:56;23272:34;23266:3;23258:12;;23251:56;23337:66;23331:3;23323:12;;23316:88;23434:66;23428:3;23420:12;;23413:88;23525:3;23517:12;;22269:1266;-1:-1:-1;;;22269:1266:83:o;23540:1103::-;23645:6;23698:2;23686:9;23677:7;23673:23;23669:32;23666:52;;;23714:1;23711;23704:12;23666:52;23747:9;23741:16;-1:-1:-1;;;;;23772:6:83;23769:30;23766:50;;;23812:1;23809;23802:12;23766:50;23835:22;;23888:4;23880:13;;23876:27;-1:-1:-1;23866:55:83;;23917:1;23914;23907:12;23866:55;23950:2;23944:9;-1:-1:-1;;;;;23968:6:83;23965:30;23962:56;;;23998:18;;:::i;:::-;24044:6;24041:1;24037:14;24071:28;24095:2;24091;24087:11;24071:28;:::i;:::-;24133:19;;;24177:2;24207:11;;;24203:20;;;24168:12;;;;24235:19;;;24232:39;;;24267:1;24264;24257:12;24232:39;24299:2;24295;24291:11;24280:22;;24311:302;24327:6;24322:3;24319:15;24311:302;;;24406:3;24400:10;-1:-1:-1;;;;;24429:11:83;24426:35;24423:55;;;24474:1;24471;24464:12;24423:55;24503:67;24562:7;24557:2;24543:11;24539:2;24535:20;24531:29;24503:67;:::i;:::-;24491:80;;-1:-1:-1;24600:2:83;24344:12;;;;24591;;;;24311:302;;;24632:5;23540:1103;-1:-1:-1;;;;;;;23540:1103:83:o;24648:639::-;25059:34;25054:3;25047:47;-1:-1:-1;;;25119:2:83;25114:3;25110:12;25103:30;25029:3;25152:39;25187:2;25182:3;25178:12;25170:6;25152:39;:::i;:::-;-1:-1:-1;;;25207:2:83;25200:27;25243:38;25277:2;25273;25269:11;25261:6;25243:38;:::i;25292:500::-;25542:2;25531:9;25524:21;25505:4;25568:56;25620:2;25609:9;25605:18;25597:6;25568:56;:::i;:::-;25660:22;;;25655:2;25640:18;;;25633:50;25707:1;25692:17;;-1:-1:-1;;;25725:15:83;;;25718:36;;;;-1:-1:-1;25783:2:83;25771:15;;25292:500;-1:-1:-1;25292:500:83:o;25797:634::-;26208:34;26203:3;26196:47;-1:-1:-1;;;26268:2:83;26263:3;26259:12;26252:25;26178:3;26296:39;26331:2;26326:3;26322:12;26314:6;26296:39;:::i;26436:498::-;26686:2;26675:9;26668:21;26649:4;26712:56;26764:2;26753:9;26749:18;26741:6;26712:56;:::i;:::-;26816:9;26808:6;26804:22;26799:2;26788:9;26784:18;26777:50;26851:1;26843:6;26836:17;-1:-1:-1;;;26881:2:83;26873:6;26869:15;26862:34;26925:2;26917:6;26913:15;26905:23;;;26436:498;;;;:::o;26939:400::-;27201:34;27196:3;27189:47;-1:-1:-1;;;27261:2:83;27256:3;27252:12;27245:33;27171:3;27294:39;27329:2;27324:3;27320:12;27312:6;27294:39;:::i;27344:497::-;27594:2;27583:9;27576:21;27557:4;27620:56;27672:2;27661:9;27657:18;27649:6;27620:56;:::i;:::-;27724:9;27716:6;27712:22;27707:2;27696:9;27692:18;27685:50;27759:1;27751:6;27744:17;-1:-1:-1;;;27789:2:83;27781:6;27777:15;27770:33;27832:2;27824:6;27820:15;27812:23;;;27344:497;;;;:::o;27846:403::-;28108:34;28096:47;;-1:-1:-1;;;28168:2:83;28159:12;;28152:36;-1:-1:-1;28204:39:83;28239:2;28230:12;;28222:6;28204:39;:::i;28254:700::-;28605:2;28594:9;28587:21;28568:4;28631:56;28683:2;28672:9;28668:18;28660:6;28631:56;:::i;:::-;28718:9;28710:6;28706:22;28764:2;28759;28748:9;28744:18;28737:30;28791:1;28783:6;28776:17;-1:-1:-1;;;28821:2:83;28813:6;28809:15;28802:31;28877:2;28873;28869:11;28864:2;28853:9;28849:18;28842:39;;28914:1;28909:2;28901:6;28897:15;28890:26;28945:2;28937:6;28933:15;28925:23;;;28254:700;;;;:::o;28959:492::-;29209:2;29198:9;29191:21;29172:4;29235:56;29287:2;29276:9;29272:18;29264:6;29235:56;:::i;:::-;29339:9;29331:6;29327:22;29322:2;29311:9;29307:18;29300:50;29374:1;29366:6;29359:17;-1:-1:-1;;;29404:2:83;29396:6;29392:15;29385:28;29442:2;29434:6;29430:15;29422:23;;;28959:492;;;;:::o;29456:::-;29706:2;29695:9;29688:21;29669:4;29732:56;29784:2;29773:9;29769:18;29761:6;29732:56;:::i;:::-;29836:9;29828:6;29824:22;29819:2;29808:9;29804:18;29797:50;29871:1;29863:6;29856:17;-1:-1:-1;;;29901:2:83;29893:6;29889:15;29882:28;29939:2;29931:6;29927:15;29919:23;;;29456:492;;;;:::o;29953:128::-;30020:9;;;30041:11;;;30038:37;;;30055:18;;:::i;30086:701::-;30437:2;30426:9;30419:21;30400:4;30463:56;30515:2;30504:9;30500:18;30492:6;30463:56;:::i;:::-;30550:9;30542:6;30538:22;30596:2;30591;30580:9;30576:18;30569:30;30623:1;30615:6;30608:17;-1:-1:-1;;;30653:2:83;30645:6;30641:15;30634:32;30710:2;30706;30702:11;30697:2;30686:9;30682:18;30675:39;;30747:1;30742:2;30734:6;30730:15;30723:26;30778:2;30770:6;30766:15;30758:23;;;30086:701;;;;:::o;30792:695::-;-1:-1:-1;;;31150:3:83;31143:29;31125:3;31191:39;31226:2;31221:3;31217:12;31209:6;31191:39;:::i;:::-;31250:34;31239:46;;31314:34;31309:2;31301:11;;31294:55;31378:34;31373:2;31365:11;;31358:55;-1:-1:-1;;;31437:2:83;31429:11;;31422:31;31477:3;31469:12;;30792:695;-1:-1:-1;;;30792:695:83:o;31624:1082::-;32136:26;32131:3;32124:39;32106:3;32182:39;32217:2;32212:3;32208:12;32200:6;32182:39;:::i;:::-;-1:-1:-1;;;32237:2:83;32230:18;32267:37;32301:1;32297:2;32293:10;32285:6;32267:37;:::i;:::-;32324:34;32313:46;;32388:34;32383:2;32375:11;;32368:55;32452:34;32447:2;32439:11;;32432:55;32516:34;32511:2;32503:11;;32496:55;32581:34;32575:3;32567:12;;32560:56;32646:25;32640:3;32632:12;;32625:47;32696:3;32688:12;;31624:1082;-1:-1:-1;;;;;31624:1082:83:o;32983:346::-;33215:3;33243:30;33269:3;33261:6;33243:30;:::i;:::-;-1:-1:-1;;;33282:15:83;;33321:1;33313:10;;32983:346;-1:-1:-1;;;32983:346:83:o;33334:180::-;33372:3;33416:6;33409:5;33405:18;33447:6;33438:7;33435:19;33432:45;;33457:18;;:::i;33519:354::-;33781:30;33776:3;33769:43;33751:3;33828:39;33863:2;33858:3;33854:12;33846:6;33828:39;:::i;33878:421::-;34158:3;34186:30;34212:3;34204:6;34186:30;:::i;:::-;-1:-1:-1;;;34232:2:83;34225:15;34256:37;34290:1;34286:2;34282:10;34274:6;34256:37;:::i","generatedSources":[{"ast":{"nativeSrc":"0:34433:83","nodeType":"YulBlock","src":"0:34433:83","statements":[{"nativeSrc":"6:3:83","nodeType":"YulBlock","src":"6:3:83","statements":[]},{"body":{"nativeSrc":"109:92:83","nodeType":"YulBlock","src":"109:92:83","statements":[{"nativeSrc":"119:26:83","nodeType":"YulAssignment","src":"119:26:83","value":{"arguments":[{"name":"headStart","nativeSrc":"131:9:83","nodeType":"YulIdentifier","src":"131:9:83"},{"kind":"number","nativeSrc":"142:2:83","nodeType":"YulLiteral","src":"142:2:83","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"127:3:83","nodeType":"YulIdentifier","src":"127:3:83"},"nativeSrc":"127:18:83","nodeType":"YulFunctionCall","src":"127:18:83"},"variableNames":[{"name":"tail","nativeSrc":"119:4:83","nodeType":"YulIdentifier","src":"119:4:83"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"161:9:83","nodeType":"YulIdentifier","src":"161:9:83"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"186:6:83","nodeType":"YulIdentifier","src":"186:6:83"}],"functionName":{"name":"iszero","nativeSrc":"179:6:83","nodeType":"YulIdentifier","src":"179:6:83"},"nativeSrc":"179:14:83","nodeType":"YulFunctionCall","src":"179:14:83"}],"functionName":{"name":"iszero","nativeSrc":"172:6:83","nodeType":"YulIdentifier","src":"172:6:83"},"nativeSrc":"172:22:83","nodeType":"YulFunctionCall","src":"172:22:83"}],"functionName":{"name":"mstore","nativeSrc":"154:6:83","nodeType":"YulIdentifier","src":"154:6:83"},"nativeSrc":"154:41:83","nodeType":"YulFunctionCall","src":"154:41:83"},"nativeSrc":"154:41:83","nodeType":"YulExpressionStatement","src":"154:41:83"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"14:187:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"78:9:83","nodeType":"YulTypedName","src":"78:9:83","type":""},{"name":"value0","nativeSrc":"89:6:83","nodeType":"YulTypedName","src":"89:6:83","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"100:4:83","nodeType":"YulTypedName","src":"100:4:83","type":""}],"src":"14:187:83"},{"body":{"nativeSrc":"283:73:83","nodeType":"YulBlock","src":"283:73:83","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"300:3:83","nodeType":"YulIdentifier","src":"300:3:83"},{"name":"length","nativeSrc":"305:6:83","nodeType":"YulIdentifier","src":"305:6:83"}],"functionName":{"name":"mstore","nativeSrc":"293:6:83","nodeType":"YulIdentifier","src":"293:6:83"},"nativeSrc":"293:19:83","nodeType":"YulFunctionCall","src":"293:19:83"},"nativeSrc":"293:19:83","nodeType":"YulExpressionStatement","src":"293:19:83"},{"nativeSrc":"321:29:83","nodeType":"YulAssignment","src":"321:29:83","value":{"arguments":[{"name":"pos","nativeSrc":"340:3:83","nodeType":"YulIdentifier","src":"340:3:83"},{"kind":"number","nativeSrc":"345:4:83","nodeType":"YulLiteral","src":"345:4:83","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"336:3:83","nodeType":"YulIdentifier","src":"336:3:83"},"nativeSrc":"336:14:83","nodeType":"YulFunctionCall","src":"336:14:83"},"variableNames":[{"name":"updated_pos","nativeSrc":"321:11:83","nodeType":"YulIdentifier","src":"321:11:83"}]}]},"name":"array_storeLengthForEncoding_string","nativeSrc":"206:150:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"251:3:83","nodeType":"YulTypedName","src":"251:3:83","type":""},{"name":"length","nativeSrc":"256:6:83","nodeType":"YulTypedName","src":"256:6:83","type":""}],"returnVariables":[{"name":"updated_pos","nativeSrc":"267:11:83","nodeType":"YulTypedName","src":"267:11:83","type":""}],"src":"206:150:83"},{"body":{"nativeSrc":"535:161:83","nodeType":"YulBlock","src":"535:161:83","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"552:9:83","nodeType":"YulIdentifier","src":"552:9:83"},{"kind":"number","nativeSrc":"563:2:83","nodeType":"YulLiteral","src":"563:2:83","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"545:6:83","nodeType":"YulIdentifier","src":"545:6:83"},"nativeSrc":"545:21:83","nodeType":"YulFunctionCall","src":"545:21:83"},"nativeSrc":"545:21:83","nodeType":"YulExpressionStatement","src":"545:21:83"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"586:9:83","nodeType":"YulIdentifier","src":"586:9:83"},{"kind":"number","nativeSrc":"597:2:83","nodeType":"YulLiteral","src":"597:2:83","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"582:3:83","nodeType":"YulIdentifier","src":"582:3:83"},"nativeSrc":"582:18:83","nodeType":"YulFunctionCall","src":"582:18:83"},{"kind":"number","nativeSrc":"602:2:83","nodeType":"YulLiteral","src":"602:2:83","type":"","value":"11"}],"functionName":{"name":"mstore","nativeSrc":"575:6:83","nodeType":"YulIdentifier","src":"575:6:83"},"nativeSrc":"575:30:83","nodeType":"YulFunctionCall","src":"575:30:83"},"nativeSrc":"575:30:83","nodeType":"YulExpressionStatement","src":"575:30:83"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"625:9:83","nodeType":"YulIdentifier","src":"625:9:83"},{"kind":"number","nativeSrc":"636:2:83","nodeType":"YulLiteral","src":"636:2:83","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"621:3:83","nodeType":"YulIdentifier","src":"621:3:83"},"nativeSrc":"621:18:83","nodeType":"YulFunctionCall","src":"621:18:83"},{"hexValue":"505249564154455f4b4559","kind":"string","nativeSrc":"641:13:83","nodeType":"YulLiteral","src":"641:13:83","type":"","value":"PRIVATE_KEY"}],"functionName":{"name":"mstore","nativeSrc":"614:6:83","nodeType":"YulIdentifier","src":"614:6:83"},"nativeSrc":"614:41:83","nodeType":"YulFunctionCall","src":"614:41:83"},"nativeSrc":"614:41:83","nodeType":"YulExpressionStatement","src":"614:41:83"},{"nativeSrc":"664:26:83","nodeType":"YulAssignment","src":"664:26:83","value":{"arguments":[{"name":"headStart","nativeSrc":"676:9:83","nodeType":"YulIdentifier","src":"676:9:83"},{"kind":"number","nativeSrc":"687:2:83","nodeType":"YulLiteral","src":"687:2:83","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"672:3:83","nodeType":"YulIdentifier","src":"672:3:83"},"nativeSrc":"672:18:83","nodeType":"YulFunctionCall","src":"672:18:83"},"variableNames":[{"name":"tail","nativeSrc":"664:4:83","nodeType":"YulIdentifier","src":"664:4:83"}]}]},"name":"abi_encode_tuple_t_stringliteral_2ef6555c4d06f7a53d2dd092327f3256a8d6f18aff592d5349c12226686be6c5__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"361:335:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"512:9:83","nodeType":"YulTypedName","src":"512:9:83","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"526:4:83","nodeType":"YulTypedName","src":"526:4:83","type":""}],"src":"361:335:83"},{"body":{"nativeSrc":"782:103:83","nodeType":"YulBlock","src":"782:103:83","statements":[{"body":{"nativeSrc":"828:16:83","nodeType":"YulBlock","src":"828:16:83","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"837:1:83","nodeType":"YulLiteral","src":"837:1:83","type":"","value":"0"},{"kind":"number","nativeSrc":"840:1:83","nodeType":"YulLiteral","src":"840:1:83","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"830:6:83","nodeType":"YulIdentifier","src":"830:6:83"},"nativeSrc":"830:12:83","nodeType":"YulFunctionCall","src":"830:12:83"},"nativeSrc":"830:12:83","nodeType":"YulExpressionStatement","src":"830:12:83"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"803:7:83","nodeType":"YulIdentifier","src":"803:7:83"},{"name":"headStart","nativeSrc":"812:9:83","nodeType":"YulIdentifier","src":"812:9:83"}],"functionName":{"name":"sub","nativeSrc":"799:3:83","nodeType":"YulIdentifier","src":"799:3:83"},"nativeSrc":"799:23:83","nodeType":"YulFunctionCall","src":"799:23:83"},{"kind":"number","nativeSrc":"824:2:83","nodeType":"YulLiteral","src":"824:2:83","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"795:3:83","nodeType":"YulIdentifier","src":"795:3:83"},"nativeSrc":"795:32:83","nodeType":"YulFunctionCall","src":"795:32:83"},"nativeSrc":"792:52:83","nodeType":"YulIf","src":"792:52:83"},{"nativeSrc":"853:26:83","nodeType":"YulAssignment","src":"853:26:83","value":{"arguments":[{"name":"headStart","nativeSrc":"869:9:83","nodeType":"YulIdentifier","src":"869:9:83"}],"functionName":{"name":"mload","nativeSrc":"863:5:83","nodeType":"YulIdentifier","src":"863:5:83"},"nativeSrc":"863:16:83","nodeType":"YulFunctionCall","src":"863:16:83"},"variableNames":[{"name":"value0","nativeSrc":"853:6:83","nodeType":"YulIdentifier","src":"853:6:83"}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nativeSrc":"701:184:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"748:9:83","nodeType":"YulTypedName","src":"748:9:83","type":""},{"name":"dataEnd","nativeSrc":"759:7:83","nodeType":"YulTypedName","src":"759:7:83","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"771:6:83","nodeType":"YulTypedName","src":"771:6:83","type":""}],"src":"701:184:83"},{"body":{"nativeSrc":"991:76:83","nodeType":"YulBlock","src":"991:76:83","statements":[{"nativeSrc":"1001:26:83","nodeType":"YulAssignment","src":"1001:26:83","value":{"arguments":[{"name":"headStart","nativeSrc":"1013:9:83","nodeType":"YulIdentifier","src":"1013:9:83"},{"kind":"number","nativeSrc":"1024:2:83","nodeType":"YulLiteral","src":"1024:2:83","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1009:3:83","nodeType":"YulIdentifier","src":"1009:3:83"},"nativeSrc":"1009:18:83","nodeType":"YulFunctionCall","src":"1009:18:83"},"variableNames":[{"name":"tail","nativeSrc":"1001:4:83","nodeType":"YulIdentifier","src":"1001:4:83"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1043:9:83","nodeType":"YulIdentifier","src":"1043:9:83"},{"name":"value0","nativeSrc":"1054:6:83","nodeType":"YulIdentifier","src":"1054:6:83"}],"functionName":{"name":"mstore","nativeSrc":"1036:6:83","nodeType":"YulIdentifier","src":"1036:6:83"},"nativeSrc":"1036:25:83","nodeType":"YulFunctionCall","src":"1036:25:83"},"nativeSrc":"1036:25:83","nodeType":"YulExpressionStatement","src":"1036:25:83"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nativeSrc":"890:177:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"960:9:83","nodeType":"YulTypedName","src":"960:9:83","type":""},{"name":"value0","nativeSrc":"971:6:83","nodeType":"YulTypedName","src":"971:6:83","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"982:4:83","nodeType":"YulTypedName","src":"982:4:83","type":""}],"src":"890:177:83"},{"body":{"nativeSrc":"1153:209:83","nodeType":"YulBlock","src":"1153:209:83","statements":[{"body":{"nativeSrc":"1199:16:83","nodeType":"YulBlock","src":"1199:16:83","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1208:1:83","nodeType":"YulLiteral","src":"1208:1:83","type":"","value":"0"},{"kind":"number","nativeSrc":"1211:1:83","nodeType":"YulLiteral","src":"1211:1:83","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1201:6:83","nodeType":"YulIdentifier","src":"1201:6:83"},"nativeSrc":"1201:12:83","nodeType":"YulFunctionCall","src":"1201:12:83"},"nativeSrc":"1201:12:83","nodeType":"YulExpressionStatement","src":"1201:12:83"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1174:7:83","nodeType":"YulIdentifier","src":"1174:7:83"},{"name":"headStart","nativeSrc":"1183:9:83","nodeType":"YulIdentifier","src":"1183:9:83"}],"functionName":{"name":"sub","nativeSrc":"1170:3:83","nodeType":"YulIdentifier","src":"1170:3:83"},"nativeSrc":"1170:23:83","nodeType":"YulFunctionCall","src":"1170:23:83"},{"kind":"number","nativeSrc":"1195:2:83","nodeType":"YulLiteral","src":"1195:2:83","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"1166:3:83","nodeType":"YulIdentifier","src":"1166:3:83"},"nativeSrc":"1166:32:83","nodeType":"YulFunctionCall","src":"1166:32:83"},"nativeSrc":"1163:52:83","nodeType":"YulIf","src":"1163:52:83"},{"nativeSrc":"1224:29:83","nodeType":"YulVariableDeclaration","src":"1224:29:83","value":{"arguments":[{"name":"headStart","nativeSrc":"1243:9:83","nodeType":"YulIdentifier","src":"1243:9:83"}],"functionName":{"name":"mload","nativeSrc":"1237:5:83","nodeType":"YulIdentifier","src":"1237:5:83"},"nativeSrc":"1237:16:83","nodeType":"YulFunctionCall","src":"1237:16:83"},"variables":[{"name":"value","nativeSrc":"1228:5:83","nodeType":"YulTypedName","src":"1228:5:83","type":""}]},{"body":{"nativeSrc":"1316:16:83","nodeType":"YulBlock","src":"1316:16:83","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1325:1:83","nodeType":"YulLiteral","src":"1325:1:83","type":"","value":"0"},{"kind":"number","nativeSrc":"1328:1:83","nodeType":"YulLiteral","src":"1328:1:83","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1318:6:83","nodeType":"YulIdentifier","src":"1318:6:83"},"nativeSrc":"1318:12:83","nodeType":"YulFunctionCall","src":"1318:12:83"},"nativeSrc":"1318:12:83","nodeType":"YulExpressionStatement","src":"1318:12:83"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"1275:5:83","nodeType":"YulIdentifier","src":"1275:5:83"},{"arguments":[{"name":"value","nativeSrc":"1286:5:83","nodeType":"YulIdentifier","src":"1286:5:83"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"1301:3:83","nodeType":"YulLiteral","src":"1301:3:83","type":"","value":"160"},{"kind":"number","nativeSrc":"1306:1:83","nodeType":"YulLiteral","src":"1306:1:83","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"1297:3:83","nodeType":"YulIdentifier","src":"1297:3:83"},"nativeSrc":"1297:11:83","nodeType":"YulFunctionCall","src":"1297:11:83"},{"kind":"number","nativeSrc":"1310:1:83","nodeType":"YulLiteral","src":"1310:1:83","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"1293:3:83","nodeType":"YulIdentifier","src":"1293:3:83"},"nativeSrc":"1293:19:83","nodeType":"YulFunctionCall","src":"1293:19:83"}],"functionName":{"name":"and","nativeSrc":"1282:3:83","nodeType":"YulIdentifier","src":"1282:3:83"},"nativeSrc":"1282:31:83","nodeType":"YulFunctionCall","src":"1282:31:83"}],"functionName":{"name":"eq","nativeSrc":"1272:2:83","nodeType":"YulIdentifier","src":"1272:2:83"},"nativeSrc":"1272:42:83","nodeType":"YulFunctionCall","src":"1272:42:83"}],"functionName":{"name":"iszero","nativeSrc":"1265:6:83","nodeType":"YulIdentifier","src":"1265:6:83"},"nativeSrc":"1265:50:83","nodeType":"YulFunctionCall","src":"1265:50:83"},"nativeSrc":"1262:70:83","nodeType":"YulIf","src":"1262:70:83"},{"nativeSrc":"1341:15:83","nodeType":"YulAssignment","src":"1341:15:83","value":{"name":"value","nativeSrc":"1351:5:83","nodeType":"YulIdentifier","src":"1351:5:83"},"variableNames":[{"name":"value0","nativeSrc":"1341:6:83","nodeType":"YulIdentifier","src":"1341:6:83"}]}]},"name":"abi_decode_tuple_t_address_fromMemory","nativeSrc":"1072:290:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1119:9:83","nodeType":"YulTypedName","src":"1119:9:83","type":""},{"name":"dataEnd","nativeSrc":"1130:7:83","nodeType":"YulTypedName","src":"1130:7:83","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1142:6:83","nodeType":"YulTypedName","src":"1142:6:83","type":""}],"src":"1072:290:83"},{"body":{"nativeSrc":"1422:325:83","nodeType":"YulBlock","src":"1422:325:83","statements":[{"nativeSrc":"1432:22:83","nodeType":"YulAssignment","src":"1432:22:83","value":{"arguments":[{"kind":"number","nativeSrc":"1446:1:83","nodeType":"YulLiteral","src":"1446:1:83","type":"","value":"1"},{"name":"data","nativeSrc":"1449:4:83","nodeType":"YulIdentifier","src":"1449:4:83"}],"functionName":{"name":"shr","nativeSrc":"1442:3:83","nodeType":"YulIdentifier","src":"1442:3:83"},"nativeSrc":"1442:12:83","nodeType":"YulFunctionCall","src":"1442:12:83"},"variableNames":[{"name":"length","nativeSrc":"1432:6:83","nodeType":"YulIdentifier","src":"1432:6:83"}]},{"nativeSrc":"1463:38:83","nodeType":"YulVariableDeclaration","src":"1463:38:83","value":{"arguments":[{"name":"data","nativeSrc":"1493:4:83","nodeType":"YulIdentifier","src":"1493:4:83"},{"kind":"number","nativeSrc":"1499:1:83","nodeType":"YulLiteral","src":"1499:1:83","type":"","value":"1"}],"functionName":{"name":"and","nativeSrc":"1489:3:83","nodeType":"YulIdentifier","src":"1489:3:83"},"nativeSrc":"1489:12:83","nodeType":"YulFunctionCall","src":"1489:12:83"},"variables":[{"name":"outOfPlaceEncoding","nativeSrc":"1467:18:83","nodeType":"YulTypedName","src":"1467:18:83","type":""}]},{"body":{"nativeSrc":"1540:31:83","nodeType":"YulBlock","src":"1540:31:83","statements":[{"nativeSrc":"1542:27:83","nodeType":"YulAssignment","src":"1542:27:83","value":{"arguments":[{"name":"length","nativeSrc":"1556:6:83","nodeType":"YulIdentifier","src":"1556:6:83"},{"kind":"number","nativeSrc":"1564:4:83","nodeType":"YulLiteral","src":"1564:4:83","type":"","value":"0x7f"}],"functionName":{"name":"and","nativeSrc":"1552:3:83","nodeType":"YulIdentifier","src":"1552:3:83"},"nativeSrc":"1552:17:83","nodeType":"YulFunctionCall","src":"1552:17:83"},"variableNames":[{"name":"length","nativeSrc":"1542:6:83","nodeType":"YulIdentifier","src":"1542:6:83"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"1520:18:83","nodeType":"YulIdentifier","src":"1520:18:83"}],"functionName":{"name":"iszero","nativeSrc":"1513:6:83","nodeType":"YulIdentifier","src":"1513:6:83"},"nativeSrc":"1513:26:83","nodeType":"YulFunctionCall","src":"1513:26:83"},"nativeSrc":"1510:61:83","nodeType":"YulIf","src":"1510:61:83"},{"body":{"nativeSrc":"1630:111:83","nodeType":"YulBlock","src":"1630:111:83","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1651:1:83","nodeType":"YulLiteral","src":"1651:1:83","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"1658:3:83","nodeType":"YulLiteral","src":"1658:3:83","type":"","value":"224"},{"kind":"number","nativeSrc":"1663:10:83","nodeType":"YulLiteral","src":"1663:10:83","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"1654:3:83","nodeType":"YulIdentifier","src":"1654:3:83"},"nativeSrc":"1654:20:83","nodeType":"YulFunctionCall","src":"1654:20:83"}],"functionName":{"name":"mstore","nativeSrc":"1644:6:83","nodeType":"YulIdentifier","src":"1644:6:83"},"nativeSrc":"1644:31:83","nodeType":"YulFunctionCall","src":"1644:31:83"},"nativeSrc":"1644:31:83","nodeType":"YulExpressionStatement","src":"1644:31:83"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1695:1:83","nodeType":"YulLiteral","src":"1695:1:83","type":"","value":"4"},{"kind":"number","nativeSrc":"1698:4:83","nodeType":"YulLiteral","src":"1698:4:83","type":"","value":"0x22"}],"functionName":{"name":"mstore","nativeSrc":"1688:6:83","nodeType":"YulIdentifier","src":"1688:6:83"},"nativeSrc":"1688:15:83","nodeType":"YulFunctionCall","src":"1688:15:83"},"nativeSrc":"1688:15:83","nodeType":"YulExpressionStatement","src":"1688:15:83"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1723:1:83","nodeType":"YulLiteral","src":"1723:1:83","type":"","value":"0"},{"kind":"number","nativeSrc":"1726:4:83","nodeType":"YulLiteral","src":"1726:4:83","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"1716:6:83","nodeType":"YulIdentifier","src":"1716:6:83"},"nativeSrc":"1716:15:83","nodeType":"YulFunctionCall","src":"1716:15:83"},"nativeSrc":"1716:15:83","nodeType":"YulExpressionStatement","src":"1716:15:83"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"1586:18:83","nodeType":"YulIdentifier","src":"1586:18:83"},{"arguments":[{"name":"length","nativeSrc":"1609:6:83","nodeType":"YulIdentifier","src":"1609:6:83"},{"kind":"number","nativeSrc":"1617:2:83","nodeType":"YulLiteral","src":"1617:2:83","type":"","value":"32"}],"functionName":{"name":"lt","nativeSrc":"1606:2:83","nodeType":"YulIdentifier","src":"1606:2:83"},"nativeSrc":"1606:14:83","nodeType":"YulFunctionCall","src":"1606:14:83"}],"functionName":{"name":"eq","nativeSrc":"1583:2:83","nodeType":"YulIdentifier","src":"1583:2:83"},"nativeSrc":"1583:38:83","nodeType":"YulFunctionCall","src":"1583:38:83"},"nativeSrc":"1580:161:83","nodeType":"YulIf","src":"1580:161:83"}]},"name":"extract_byte_array_length","nativeSrc":"1367:380:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"1402:4:83","nodeType":"YulTypedName","src":"1402:4:83","type":""}],"returnVariables":[{"name":"length","nativeSrc":"1411:6:83","nodeType":"YulTypedName","src":"1411:6:83","type":""}],"src":"1367:380:83"},{"body":{"nativeSrc":"1808:65:83","nodeType":"YulBlock","src":"1808:65:83","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1825:1:83","nodeType":"YulLiteral","src":"1825:1:83","type":"","value":"0"},{"name":"ptr","nativeSrc":"1828:3:83","nodeType":"YulIdentifier","src":"1828:3:83"}],"functionName":{"name":"mstore","nativeSrc":"1818:6:83","nodeType":"YulIdentifier","src":"1818:6:83"},"nativeSrc":"1818:14:83","nodeType":"YulFunctionCall","src":"1818:14:83"},"nativeSrc":"1818:14:83","nodeType":"YulExpressionStatement","src":"1818:14:83"},{"nativeSrc":"1841:26:83","nodeType":"YulAssignment","src":"1841:26:83","value":{"arguments":[{"kind":"number","nativeSrc":"1859:1:83","nodeType":"YulLiteral","src":"1859:1:83","type":"","value":"0"},{"kind":"number","nativeSrc":"1862:4:83","nodeType":"YulLiteral","src":"1862:4:83","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nativeSrc":"1849:9:83","nodeType":"YulIdentifier","src":"1849:9:83"},"nativeSrc":"1849:18:83","nodeType":"YulFunctionCall","src":"1849:18:83"},"variableNames":[{"name":"data","nativeSrc":"1841:4:83","nodeType":"YulIdentifier","src":"1841:4:83"}]}]},"name":"array_dataslot_string_storage","nativeSrc":"1752:121:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nativeSrc":"1791:3:83","nodeType":"YulTypedName","src":"1791:3:83","type":""}],"returnVariables":[{"name":"data","nativeSrc":"1799:4:83","nodeType":"YulTypedName","src":"1799:4:83","type":""}],"src":"1752:121:83"},{"body":{"nativeSrc":"1936:968:83","nodeType":"YulBlock","src":"1936:968:83","statements":[{"nativeSrc":"1946:29:83","nodeType":"YulVariableDeclaration","src":"1946:29:83","value":{"arguments":[{"name":"value","nativeSrc":"1969:5:83","nodeType":"YulIdentifier","src":"1969:5:83"}],"functionName":{"name":"sload","nativeSrc":"1963:5:83","nodeType":"YulIdentifier","src":"1963:5:83"},"nativeSrc":"1963:12:83","nodeType":"YulFunctionCall","src":"1963:12:83"},"variables":[{"name":"slotValue","nativeSrc":"1950:9:83","nodeType":"YulTypedName","src":"1950:9:83","type":""}]},{"nativeSrc":"1984:15:83","nodeType":"YulVariableDeclaration","src":"1984:15:83","value":{"kind":"number","nativeSrc":"1998:1:83","nodeType":"YulLiteral","src":"1998:1:83","type":"","value":"0"},"variables":[{"name":"length","nativeSrc":"1988:6:83","nodeType":"YulTypedName","src":"1988:6:83","type":""}]},{"nativeSrc":"2008:27:83","nodeType":"YulAssignment","src":"2008:27:83","value":{"arguments":[{"kind":"number","nativeSrc":"2022:1:83","nodeType":"YulLiteral","src":"2022:1:83","type":"","value":"1"},{"name":"slotValue","nativeSrc":"2025:9:83","nodeType":"YulIdentifier","src":"2025:9:83"}],"functionName":{"name":"shr","nativeSrc":"2018:3:83","nodeType":"YulIdentifier","src":"2018:3:83"},"nativeSrc":"2018:17:83","nodeType":"YulFunctionCall","src":"2018:17:83"},"variableNames":[{"name":"length","nativeSrc":"2008:6:83","nodeType":"YulIdentifier","src":"2008:6:83"}]},{"nativeSrc":"2044:43:83","nodeType":"YulVariableDeclaration","src":"2044:43:83","value":{"arguments":[{"name":"slotValue","nativeSrc":"2074:9:83","nodeType":"YulIdentifier","src":"2074:9:83"},{"kind":"number","nativeSrc":"2085:1:83","nodeType":"YulLiteral","src":"2085:1:83","type":"","value":"1"}],"functionName":{"name":"and","nativeSrc":"2070:3:83","nodeType":"YulIdentifier","src":"2070:3:83"},"nativeSrc":"2070:17:83","nodeType":"YulFunctionCall","src":"2070:17:83"},"variables":[{"name":"outOfPlaceEncoding","nativeSrc":"2048:18:83","nodeType":"YulTypedName","src":"2048:18:83","type":""}]},{"body":{"nativeSrc":"2126:31:83","nodeType":"YulBlock","src":"2126:31:83","statements":[{"nativeSrc":"2128:27:83","nodeType":"YulAssignment","src":"2128:27:83","value":{"arguments":[{"name":"length","nativeSrc":"2142:6:83","nodeType":"YulIdentifier","src":"2142:6:83"},{"kind":"number","nativeSrc":"2150:4:83","nodeType":"YulLiteral","src":"2150:4:83","type":"","value":"0x7f"}],"functionName":{"name":"and","nativeSrc":"2138:3:83","nodeType":"YulIdentifier","src":"2138:3:83"},"nativeSrc":"2138:17:83","nodeType":"YulFunctionCall","src":"2138:17:83"},"variableNames":[{"name":"length","nativeSrc":"2128:6:83","nodeType":"YulIdentifier","src":"2128:6:83"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"2106:18:83","nodeType":"YulIdentifier","src":"2106:18:83"}],"functionName":{"name":"iszero","nativeSrc":"2099:6:83","nodeType":"YulIdentifier","src":"2099:6:83"},"nativeSrc":"2099:26:83","nodeType":"YulFunctionCall","src":"2099:26:83"},"nativeSrc":"2096:61:83","nodeType":"YulIf","src":"2096:61:83"},{"body":{"nativeSrc":"2216:111:83","nodeType":"YulBlock","src":"2216:111:83","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2237:1:83","nodeType":"YulLiteral","src":"2237:1:83","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"2244:3:83","nodeType":"YulLiteral","src":"2244:3:83","type":"","value":"224"},{"kind":"number","nativeSrc":"2249:10:83","nodeType":"YulLiteral","src":"2249:10:83","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"2240:3:83","nodeType":"YulIdentifier","src":"2240:3:83"},"nativeSrc":"2240:20:83","nodeType":"YulFunctionCall","src":"2240:20:83"}],"functionName":{"name":"mstore","nativeSrc":"2230:6:83","nodeType":"YulIdentifier","src":"2230:6:83"},"nativeSrc":"2230:31:83","nodeType":"YulFunctionCall","src":"2230:31:83"},"nativeSrc":"2230:31:83","nodeType":"YulExpressionStatement","src":"2230:31:83"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"2281:1:83","nodeType":"YulLiteral","src":"2281:1:83","type":"","value":"4"},{"kind":"number","nativeSrc":"2284:4:83","nodeType":"YulLiteral","src":"2284:4:83","type":"","value":"0x22"}],"functionName":{"name":"mstore","nativeSrc":"2274:6:83","nodeType":"YulIdentifier","src":"2274:6:83"},"nativeSrc":"2274:15:83","nodeType":"YulFunctionCall","src":"2274:15:83"},"nativeSrc":"2274:15:83","nodeType":"YulExpressionStatement","src":"2274:15:83"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"2309:1:83","nodeType":"YulLiteral","src":"2309:1:83","type":"","value":"0"},{"kind":"number","nativeSrc":"2312:4:83","nodeType":"YulLiteral","src":"2312:4:83","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"2302:6:83","nodeType":"YulIdentifier","src":"2302:6:83"},"nativeSrc":"2302:15:83","nodeType":"YulFunctionCall","src":"2302:15:83"},"nativeSrc":"2302:15:83","nodeType":"YulExpressionStatement","src":"2302:15:83"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"2172:18:83","nodeType":"YulIdentifier","src":"2172:18:83"},{"arguments":[{"name":"length","nativeSrc":"2195:6:83","nodeType":"YulIdentifier","src":"2195:6:83"},{"kind":"number","nativeSrc":"2203:2:83","nodeType":"YulLiteral","src":"2203:2:83","type":"","value":"32"}],"functionName":{"name":"lt","nativeSrc":"2192:2:83","nodeType":"YulIdentifier","src":"2192:2:83"},"nativeSrc":"2192:14:83","nodeType":"YulFunctionCall","src":"2192:14:83"}],"functionName":{"name":"eq","nativeSrc":"2169:2:83","nodeType":"YulIdentifier","src":"2169:2:83"},"nativeSrc":"2169:38:83","nodeType":"YulFunctionCall","src":"2169:38:83"},"nativeSrc":"2166:161:83","nodeType":"YulIf","src":"2166:161:83"},{"nativeSrc":"2336:61:83","nodeType":"YulVariableDeclaration","src":"2336:61:83","value":{"arguments":[{"name":"pos","nativeSrc":"2385:3:83","nodeType":"YulIdentifier","src":"2385:3:83"},{"name":"length","nativeSrc":"2390:6:83","nodeType":"YulIdentifier","src":"2390:6:83"}],"functionName":{"name":"array_storeLengthForEncoding_string","nativeSrc":"2349:35:83","nodeType":"YulIdentifier","src":"2349:35:83"},"nativeSrc":"2349:48:83","nodeType":"YulFunctionCall","src":"2349:48:83"},"variables":[{"name":"pos_1","nativeSrc":"2340:5:83","nodeType":"YulTypedName","src":"2340:5:83","type":""}]},{"cases":[{"body":{"nativeSrc":"2447:125:83","nodeType":"YulBlock","src":"2447:125:83","statements":[{"expression":{"arguments":[{"name":"pos_1","nativeSrc":"2468:5:83","nodeType":"YulIdentifier","src":"2468:5:83"},{"arguments":[{"name":"slotValue","nativeSrc":"2479:9:83","nodeType":"YulIdentifier","src":"2479:9:83"},{"arguments":[{"kind":"number","nativeSrc":"2494:3:83","nodeType":"YulLiteral","src":"2494:3:83","type":"","value":"255"}],"functionName":{"name":"not","nativeSrc":"2490:3:83","nodeType":"YulIdentifier","src":"2490:3:83"},"nativeSrc":"2490:8:83","nodeType":"YulFunctionCall","src":"2490:8:83"}],"functionName":{"name":"and","nativeSrc":"2475:3:83","nodeType":"YulIdentifier","src":"2475:3:83"},"nativeSrc":"2475:24:83","nodeType":"YulFunctionCall","src":"2475:24:83"}],"functionName":{"name":"mstore","nativeSrc":"2461:6:83","nodeType":"YulIdentifier","src":"2461:6:83"},"nativeSrc":"2461:39:83","nodeType":"YulFunctionCall","src":"2461:39:83"},"nativeSrc":"2461:39:83","nodeType":"YulExpressionStatement","src":"2461:39:83"},{"nativeSrc":"2513:49:83","nodeType":"YulAssignment","src":"2513:49:83","value":{"arguments":[{"name":"pos_1","nativeSrc":"2524:5:83","nodeType":"YulIdentifier","src":"2524:5:83"},{"arguments":[{"kind":"number","nativeSrc":"2535:1:83","nodeType":"YulLiteral","src":"2535:1:83","type":"","value":"5"},{"arguments":[{"arguments":[{"name":"length","nativeSrc":"2552:6:83","nodeType":"YulIdentifier","src":"2552:6:83"}],"functionName":{"name":"iszero","nativeSrc":"2545:6:83","nodeType":"YulIdentifier","src":"2545:6:83"},"nativeSrc":"2545:14:83","nodeType":"YulFunctionCall","src":"2545:14:83"}],"functionName":{"name":"iszero","nativeSrc":"2538:6:83","nodeType":"YulIdentifier","src":"2538:6:83"},"nativeSrc":"2538:22:83","nodeType":"YulFunctionCall","src":"2538:22:83"}],"functionName":{"name":"shl","nativeSrc":"2531:3:83","nodeType":"YulIdentifier","src":"2531:3:83"},"nativeSrc":"2531:30:83","nodeType":"YulFunctionCall","src":"2531:30:83"}],"functionName":{"name":"add","nativeSrc":"2520:3:83","nodeType":"YulIdentifier","src":"2520:3:83"},"nativeSrc":"2520:42:83","nodeType":"YulFunctionCall","src":"2520:42:83"},"variableNames":[{"name":"ret","nativeSrc":"2513:3:83","nodeType":"YulIdentifier","src":"2513:3:83"}]}]},"nativeSrc":"2440:132:83","nodeType":"YulCase","src":"2440:132:83","value":{"kind":"number","nativeSrc":"2445:1:83","nodeType":"YulLiteral","src":"2445:1:83","type":"","value":"0"}},{"body":{"nativeSrc":"2588:310:83","nodeType":"YulBlock","src":"2588:310:83","statements":[{"nativeSrc":"2602:51:83","nodeType":"YulVariableDeclaration","src":"2602:51:83","value":{"arguments":[{"name":"value","nativeSrc":"2647:5:83","nodeType":"YulIdentifier","src":"2647:5:83"}],"functionName":{"name":"array_dataslot_string_storage","nativeSrc":"2617:29:83","nodeType":"YulIdentifier","src":"2617:29:83"},"nativeSrc":"2617:36:83","nodeType":"YulFunctionCall","src":"2617:36:83"},"variables":[{"name":"dataPos","nativeSrc":"2606:7:83","nodeType":"YulTypedName","src":"2606:7:83","type":""}]},{"nativeSrc":"2666:10:83","nodeType":"YulVariableDeclaration","src":"2666:10:83","value":{"kind":"number","nativeSrc":"2675:1:83","nodeType":"YulLiteral","src":"2675:1:83","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"2670:1:83","nodeType":"YulTypedName","src":"2670:1:83","type":""}]},{"body":{"nativeSrc":"2743:112:83","nodeType":"YulBlock","src":"2743:112:83","statements":[{"expression":{"arguments":[{"arguments":[{"name":"pos_1","nativeSrc":"2772:5:83","nodeType":"YulIdentifier","src":"2772:5:83"},{"name":"i","nativeSrc":"2779:1:83","nodeType":"YulIdentifier","src":"2779:1:83"}],"functionName":{"name":"add","nativeSrc":"2768:3:83","nodeType":"YulIdentifier","src":"2768:3:83"},"nativeSrc":"2768:13:83","nodeType":"YulFunctionCall","src":"2768:13:83"},{"arguments":[{"name":"dataPos","nativeSrc":"2789:7:83","nodeType":"YulIdentifier","src":"2789:7:83"}],"functionName":{"name":"sload","nativeSrc":"2783:5:83","nodeType":"YulIdentifier","src":"2783:5:83"},"nativeSrc":"2783:14:83","nodeType":"YulFunctionCall","src":"2783:14:83"}],"functionName":{"name":"mstore","nativeSrc":"2761:6:83","nodeType":"YulIdentifier","src":"2761:6:83"},"nativeSrc":"2761:37:83","nodeType":"YulFunctionCall","src":"2761:37:83"},"nativeSrc":"2761:37:83","nodeType":"YulExpressionStatement","src":"2761:37:83"},{"nativeSrc":"2815:26:83","nodeType":"YulAssignment","src":"2815:26:83","value":{"arguments":[{"name":"dataPos","nativeSrc":"2830:7:83","nodeType":"YulIdentifier","src":"2830:7:83"},{"kind":"number","nativeSrc":"2839:1:83","nodeType":"YulLiteral","src":"2839:1:83","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"2826:3:83","nodeType":"YulIdentifier","src":"2826:3:83"},"nativeSrc":"2826:15:83","nodeType":"YulFunctionCall","src":"2826:15:83"},"variableNames":[{"name":"dataPos","nativeSrc":"2815:7:83","nodeType":"YulIdentifier","src":"2815:7:83"}]}]},"condition":{"arguments":[{"name":"i","nativeSrc":"2700:1:83","nodeType":"YulIdentifier","src":"2700:1:83"},{"name":"length","nativeSrc":"2703:6:83","nodeType":"YulIdentifier","src":"2703:6:83"}],"functionName":{"name":"lt","nativeSrc":"2697:2:83","nodeType":"YulIdentifier","src":"2697:2:83"},"nativeSrc":"2697:13:83","nodeType":"YulFunctionCall","src":"2697:13:83"},"nativeSrc":"2689:166:83","nodeType":"YulForLoop","post":{"nativeSrc":"2711:19:83","nodeType":"YulBlock","src":"2711:19:83","statements":[{"nativeSrc":"2713:15:83","nodeType":"YulAssignment","src":"2713:15:83","value":{"arguments":[{"name":"i","nativeSrc":"2722:1:83","nodeType":"YulIdentifier","src":"2722:1:83"},{"kind":"number","nativeSrc":"2725:2:83","nodeType":"YulLiteral","src":"2725:2:83","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2718:3:83","nodeType":"YulIdentifier","src":"2718:3:83"},"nativeSrc":"2718:10:83","nodeType":"YulFunctionCall","src":"2718:10:83"},"variableNames":[{"name":"i","nativeSrc":"2713:1:83","nodeType":"YulIdentifier","src":"2713:1:83"}]}]},"pre":{"nativeSrc":"2693:3:83","nodeType":"YulBlock","src":"2693:3:83","statements":[]},"src":"2689:166:83"},{"nativeSrc":"2868:20:83","nodeType":"YulAssignment","src":"2868:20:83","value":{"arguments":[{"name":"pos_1","nativeSrc":"2879:5:83","nodeType":"YulIdentifier","src":"2879:5:83"},{"name":"i","nativeSrc":"2886:1:83","nodeType":"YulIdentifier","src":"2886:1:83"}],"functionName":{"name":"add","nativeSrc":"2875:3:83","nodeType":"YulIdentifier","src":"2875:3:83"},"nativeSrc":"2875:13:83","nodeType":"YulFunctionCall","src":"2875:13:83"},"variableNames":[{"name":"ret","nativeSrc":"2868:3:83","nodeType":"YulIdentifier","src":"2868:3:83"}]}]},"nativeSrc":"2581:317:83","nodeType":"YulCase","src":"2581:317:83","value":{"kind":"number","nativeSrc":"2586:1:83","nodeType":"YulLiteral","src":"2586:1:83","type":"","value":"1"}}],"expression":{"name":"outOfPlaceEncoding","nativeSrc":"2413:18:83","nodeType":"YulIdentifier","src":"2413:18:83"},"nativeSrc":"2406:492:83","nodeType":"YulSwitch","src":"2406:492:83"}]},"name":"abi_encode_string_storage","nativeSrc":"1878:1026:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1913:5:83","nodeType":"YulTypedName","src":"1913:5:83","type":""},{"name":"pos","nativeSrc":"1920:3:83","nodeType":"YulTypedName","src":"1920:3:83","type":""}],"returnVariables":[{"name":"ret","nativeSrc":"1928:3:83","nodeType":"YulTypedName","src":"1928:3:83","type":""}],"src":"1878:1026:83"},{"body":{"nativeSrc":"3072:230:83","nodeType":"YulBlock","src":"3072:230:83","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"3089:9:83","nodeType":"YulIdentifier","src":"3089:9:83"},{"kind":"number","nativeSrc":"3100:2:83","nodeType":"YulLiteral","src":"3100:2:83","type":"","value":"64"}],"functionName":{"name":"mstore","nativeSrc":"3082:6:83","nodeType":"YulIdentifier","src":"3082:6:83"},"nativeSrc":"3082:21:83","nodeType":"YulFunctionCall","src":"3082:21:83"},"nativeSrc":"3082:21:83","nodeType":"YulExpressionStatement","src":"3082:21:83"},{"nativeSrc":"3112:67:83","nodeType":"YulVariableDeclaration","src":"3112:67:83","value":{"arguments":[{"name":"value0","nativeSrc":"3152:6:83","nodeType":"YulIdentifier","src":"3152:6:83"},{"arguments":[{"name":"headStart","nativeSrc":"3164:9:83","nodeType":"YulIdentifier","src":"3164:9:83"},{"kind":"number","nativeSrc":"3175:2:83","nodeType":"YulLiteral","src":"3175:2:83","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"3160:3:83","nodeType":"YulIdentifier","src":"3160:3:83"},"nativeSrc":"3160:18:83","nodeType":"YulFunctionCall","src":"3160:18:83"}],"functionName":{"name":"abi_encode_string_storage","nativeSrc":"3126:25:83","nodeType":"YulIdentifier","src":"3126:25:83"},"nativeSrc":"3126:53:83","nodeType":"YulFunctionCall","src":"3126:53:83"},"variables":[{"name":"tail_1","nativeSrc":"3116:6:83","nodeType":"YulTypedName","src":"3116:6:83","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3199:9:83","nodeType":"YulIdentifier","src":"3199:9:83"},{"kind":"number","nativeSrc":"3210:2:83","nodeType":"YulLiteral","src":"3210:2:83","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3195:3:83","nodeType":"YulIdentifier","src":"3195:3:83"},"nativeSrc":"3195:18:83","nodeType":"YulFunctionCall","src":"3195:18:83"},{"arguments":[{"name":"tail_1","nativeSrc":"3219:6:83","nodeType":"YulIdentifier","src":"3219:6:83"},{"name":"headStart","nativeSrc":"3227:9:83","nodeType":"YulIdentifier","src":"3227:9:83"}],"functionName":{"name":"sub","nativeSrc":"3215:3:83","nodeType":"YulIdentifier","src":"3215:3:83"},"nativeSrc":"3215:22:83","nodeType":"YulFunctionCall","src":"3215:22:83"}],"functionName":{"name":"mstore","nativeSrc":"3188:6:83","nodeType":"YulIdentifier","src":"3188:6:83"},"nativeSrc":"3188:50:83","nodeType":"YulFunctionCall","src":"3188:50:83"},"nativeSrc":"3188:50:83","nodeType":"YulExpressionStatement","src":"3188:50:83"},{"nativeSrc":"3247:49:83","nodeType":"YulAssignment","src":"3247:49:83","value":{"arguments":[{"name":"value1","nativeSrc":"3281:6:83","nodeType":"YulIdentifier","src":"3281:6:83"},{"name":"tail_1","nativeSrc":"3289:6:83","nodeType":"YulIdentifier","src":"3289:6:83"}],"functionName":{"name":"abi_encode_string_storage","nativeSrc":"3255:25:83","nodeType":"YulIdentifier","src":"3255:25:83"},"nativeSrc":"3255:41:83","nodeType":"YulFunctionCall","src":"3255:41:83"},"variableNames":[{"name":"tail","nativeSrc":"3247:4:83","nodeType":"YulIdentifier","src":"3247:4:83"}]}]},"name":"abi_encode_tuple_t_string_storage_t_string_storage__to_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed","nativeSrc":"2909:393:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3033:9:83","nodeType":"YulTypedName","src":"3033:9:83","type":""},{"name":"value1","nativeSrc":"3044:6:83","nodeType":"YulTypedName","src":"3044:6:83","type":""},{"name":"value0","nativeSrc":"3052:6:83","nodeType":"YulTypedName","src":"3052:6:83","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"3063:4:83","nodeType":"YulTypedName","src":"3063:4:83","type":""}],"src":"2909:393:83"},{"body":{"nativeSrc":"3436:119:83","nodeType":"YulBlock","src":"3436:119:83","statements":[{"nativeSrc":"3446:26:83","nodeType":"YulAssignment","src":"3446:26:83","value":{"arguments":[{"name":"headStart","nativeSrc":"3458:9:83","nodeType":"YulIdentifier","src":"3458:9:83"},{"kind":"number","nativeSrc":"3469:2:83","nodeType":"YulLiteral","src":"3469:2:83","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"3454:3:83","nodeType":"YulIdentifier","src":"3454:3:83"},"nativeSrc":"3454:18:83","nodeType":"YulFunctionCall","src":"3454:18:83"},"variableNames":[{"name":"tail","nativeSrc":"3446:4:83","nodeType":"YulIdentifier","src":"3446:4:83"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"3488:9:83","nodeType":"YulIdentifier","src":"3488:9:83"},{"name":"value0","nativeSrc":"3499:6:83","nodeType":"YulIdentifier","src":"3499:6:83"}],"functionName":{"name":"mstore","nativeSrc":"3481:6:83","nodeType":"YulIdentifier","src":"3481:6:83"},"nativeSrc":"3481:25:83","nodeType":"YulFunctionCall","src":"3481:25:83"},"nativeSrc":"3481:25:83","nodeType":"YulExpressionStatement","src":"3481:25:83"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3526:9:83","nodeType":"YulIdentifier","src":"3526:9:83"},{"kind":"number","nativeSrc":"3537:2:83","nodeType":"YulLiteral","src":"3537:2:83","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3522:3:83","nodeType":"YulIdentifier","src":"3522:3:83"},"nativeSrc":"3522:18:83","nodeType":"YulFunctionCall","src":"3522:18:83"},{"name":"value1","nativeSrc":"3542:6:83","nodeType":"YulIdentifier","src":"3542:6:83"}],"functionName":{"name":"mstore","nativeSrc":"3515:6:83","nodeType":"YulIdentifier","src":"3515:6:83"},"nativeSrc":"3515:34:83","nodeType":"YulFunctionCall","src":"3515:34:83"},"nativeSrc":"3515:34:83","nodeType":"YulExpressionStatement","src":"3515:34:83"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"3307:248:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3397:9:83","nodeType":"YulTypedName","src":"3397:9:83","type":""},{"name":"value1","nativeSrc":"3408:6:83","nodeType":"YulTypedName","src":"3408:6:83","type":""},{"name":"value0","nativeSrc":"3416:6:83","nodeType":"YulTypedName","src":"3416:6:83","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"3427:4:83","nodeType":"YulTypedName","src":"3427:4:83","type":""}],"src":"3307:248:83"},{"body":{"nativeSrc":"3641:103:83","nodeType":"YulBlock","src":"3641:103:83","statements":[{"body":{"nativeSrc":"3687:16:83","nodeType":"YulBlock","src":"3687:16:83","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3696:1:83","nodeType":"YulLiteral","src":"3696:1:83","type":"","value":"0"},{"kind":"number","nativeSrc":"3699:1:83","nodeType":"YulLiteral","src":"3699:1:83","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3689:6:83","nodeType":"YulIdentifier","src":"3689:6:83"},"nativeSrc":"3689:12:83","nodeType":"YulFunctionCall","src":"3689:12:83"},"nativeSrc":"3689:12:83","nodeType":"YulExpressionStatement","src":"3689:12:83"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3662:7:83","nodeType":"YulIdentifier","src":"3662:7:83"},{"name":"headStart","nativeSrc":"3671:9:83","nodeType":"YulIdentifier","src":"3671:9:83"}],"functionName":{"name":"sub","nativeSrc":"3658:3:83","nodeType":"YulIdentifier","src":"3658:3:83"},"nativeSrc":"3658:23:83","nodeType":"YulFunctionCall","src":"3658:23:83"},{"kind":"number","nativeSrc":"3683:2:83","nodeType":"YulLiteral","src":"3683:2:83","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"3654:3:83","nodeType":"YulIdentifier","src":"3654:3:83"},"nativeSrc":"3654:32:83","nodeType":"YulFunctionCall","src":"3654:32:83"},"nativeSrc":"3651:52:83","nodeType":"YulIf","src":"3651:52:83"},{"nativeSrc":"3712:26:83","nodeType":"YulAssignment","src":"3712:26:83","value":{"arguments":[{"name":"headStart","nativeSrc":"3728:9:83","nodeType":"YulIdentifier","src":"3728:9:83"}],"functionName":{"name":"mload","nativeSrc":"3722:5:83","nodeType":"YulIdentifier","src":"3722:5:83"},"nativeSrc":"3722:16:83","nodeType":"YulFunctionCall","src":"3722:16:83"},"variableNames":[{"name":"value0","nativeSrc":"3712:6:83","nodeType":"YulIdentifier","src":"3712:6:83"}]}]},"name":"abi_decode_tuple_t_bytes32_fromMemory","nativeSrc":"3560:184:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3607:9:83","nodeType":"YulTypedName","src":"3607:9:83","type":""},{"name":"dataEnd","nativeSrc":"3618:7:83","nodeType":"YulTypedName","src":"3618:7:83","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3630:6:83","nodeType":"YulTypedName","src":"3630:6:83","type":""}],"src":"3560:184:83"},{"body":{"nativeSrc":"3878:145:83","nodeType":"YulBlock","src":"3878:145:83","statements":[{"nativeSrc":"3888:26:83","nodeType":"YulAssignment","src":"3888:26:83","value":{"arguments":[{"name":"headStart","nativeSrc":"3900:9:83","nodeType":"YulIdentifier","src":"3900:9:83"},{"kind":"number","nativeSrc":"3911:2:83","nodeType":"YulLiteral","src":"3911:2:83","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"3896:3:83","nodeType":"YulIdentifier","src":"3896:3:83"},"nativeSrc":"3896:18:83","nodeType":"YulFunctionCall","src":"3896:18:83"},"variableNames":[{"name":"tail","nativeSrc":"3888:4:83","nodeType":"YulIdentifier","src":"3888:4:83"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"3930:9:83","nodeType":"YulIdentifier","src":"3930:9:83"},{"name":"value0","nativeSrc":"3941:6:83","nodeType":"YulIdentifier","src":"3941:6:83"}],"functionName":{"name":"mstore","nativeSrc":"3923:6:83","nodeType":"YulIdentifier","src":"3923:6:83"},"nativeSrc":"3923:25:83","nodeType":"YulFunctionCall","src":"3923:25:83"},"nativeSrc":"3923:25:83","nodeType":"YulExpressionStatement","src":"3923:25:83"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3968:9:83","nodeType":"YulIdentifier","src":"3968:9:83"},{"kind":"number","nativeSrc":"3979:2:83","nodeType":"YulLiteral","src":"3979:2:83","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3964:3:83","nodeType":"YulIdentifier","src":"3964:3:83"},"nativeSrc":"3964:18:83","nodeType":"YulFunctionCall","src":"3964:18:83"},{"arguments":[{"name":"value1","nativeSrc":"3988:6:83","nodeType":"YulIdentifier","src":"3988:6:83"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"4004:3:83","nodeType":"YulLiteral","src":"4004:3:83","type":"","value":"160"},{"kind":"number","nativeSrc":"4009:1:83","nodeType":"YulLiteral","src":"4009:1:83","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"4000:3:83","nodeType":"YulIdentifier","src":"4000:3:83"},"nativeSrc":"4000:11:83","nodeType":"YulFunctionCall","src":"4000:11:83"},{"kind":"number","nativeSrc":"4013:1:83","nodeType":"YulLiteral","src":"4013:1:83","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"3996:3:83","nodeType":"YulIdentifier","src":"3996:3:83"},"nativeSrc":"3996:19:83","nodeType":"YulFunctionCall","src":"3996:19:83"}],"functionName":{"name":"and","nativeSrc":"3984:3:83","nodeType":"YulIdentifier","src":"3984:3:83"},"nativeSrc":"3984:32:83","nodeType":"YulFunctionCall","src":"3984:32:83"}],"functionName":{"name":"mstore","nativeSrc":"3957:6:83","nodeType":"YulIdentifier","src":"3957:6:83"},"nativeSrc":"3957:60:83","nodeType":"YulFunctionCall","src":"3957:60:83"},"nativeSrc":"3957:60:83","nodeType":"YulExpressionStatement","src":"3957:60:83"}]},"name":"abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed","nativeSrc":"3749:274:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3839:9:83","nodeType":"YulTypedName","src":"3839:9:83","type":""},{"name":"value1","nativeSrc":"3850:6:83","nodeType":"YulTypedName","src":"3850:6:83","type":""},{"name":"value0","nativeSrc":"3858:6:83","nodeType":"YulTypedName","src":"3858:6:83","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"3869:4:83","nodeType":"YulTypedName","src":"3869:4:83","type":""}],"src":"3749:274:83"},{"body":{"nativeSrc":"4060:95:83","nodeType":"YulBlock","src":"4060:95:83","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4077:1:83","nodeType":"YulLiteral","src":"4077:1:83","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"4084:3:83","nodeType":"YulLiteral","src":"4084:3:83","type":"","value":"224"},{"kind":"number","nativeSrc":"4089:10:83","nodeType":"YulLiteral","src":"4089:10:83","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"4080:3:83","nodeType":"YulIdentifier","src":"4080:3:83"},"nativeSrc":"4080:20:83","nodeType":"YulFunctionCall","src":"4080:20:83"}],"functionName":{"name":"mstore","nativeSrc":"4070:6:83","nodeType":"YulIdentifier","src":"4070:6:83"},"nativeSrc":"4070:31:83","nodeType":"YulFunctionCall","src":"4070:31:83"},"nativeSrc":"4070:31:83","nodeType":"YulExpressionStatement","src":"4070:31:83"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"4117:1:83","nodeType":"YulLiteral","src":"4117:1:83","type":"","value":"4"},{"kind":"number","nativeSrc":"4120:4:83","nodeType":"YulLiteral","src":"4120:4:83","type":"","value":"0x41"}],"functionName":{"name":"mstore","nativeSrc":"4110:6:83","nodeType":"YulIdentifier","src":"4110:6:83"},"nativeSrc":"4110:15:83","nodeType":"YulFunctionCall","src":"4110:15:83"},"nativeSrc":"4110:15:83","nodeType":"YulExpressionStatement","src":"4110:15:83"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"4141:1:83","nodeType":"YulLiteral","src":"4141:1:83","type":"","value":"0"},{"kind":"number","nativeSrc":"4144:4:83","nodeType":"YulLiteral","src":"4144:4:83","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"4134:6:83","nodeType":"YulIdentifier","src":"4134:6:83"},"nativeSrc":"4134:15:83","nodeType":"YulFunctionCall","src":"4134:15:83"},"nativeSrc":"4134:15:83","nodeType":"YulExpressionStatement","src":"4134:15:83"}]},"name":"panic_error_0x41","nativeSrc":"4028:127:83","nodeType":"YulFunctionDefinition","src":"4028:127:83"},{"body":{"nativeSrc":"4192:95:83","nodeType":"YulBlock","src":"4192:95:83","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4209:1:83","nodeType":"YulLiteral","src":"4209:1:83","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"4216:3:83","nodeType":"YulLiteral","src":"4216:3:83","type":"","value":"224"},{"kind":"number","nativeSrc":"4221:10:83","nodeType":"YulLiteral","src":"4221:10:83","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"4212:3:83","nodeType":"YulIdentifier","src":"4212:3:83"},"nativeSrc":"4212:20:83","nodeType":"YulFunctionCall","src":"4212:20:83"}],"functionName":{"name":"mstore","nativeSrc":"4202:6:83","nodeType":"YulIdentifier","src":"4202:6:83"},"nativeSrc":"4202:31:83","nodeType":"YulFunctionCall","src":"4202:31:83"},"nativeSrc":"4202:31:83","nodeType":"YulExpressionStatement","src":"4202:31:83"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"4249:1:83","nodeType":"YulLiteral","src":"4249:1:83","type":"","value":"4"},{"kind":"number","nativeSrc":"4252:4:83","nodeType":"YulLiteral","src":"4252:4:83","type":"","value":"0x32"}],"functionName":{"name":"mstore","nativeSrc":"4242:6:83","nodeType":"YulIdentifier","src":"4242:6:83"},"nativeSrc":"4242:15:83","nodeType":"YulFunctionCall","src":"4242:15:83"},"nativeSrc":"4242:15:83","nodeType":"YulExpressionStatement","src":"4242:15:83"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"4273:1:83","nodeType":"YulLiteral","src":"4273:1:83","type":"","value":"0"},{"kind":"number","nativeSrc":"4276:4:83","nodeType":"YulLiteral","src":"4276:4:83","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"4266:6:83","nodeType":"YulIdentifier","src":"4266:6:83"},"nativeSrc":"4266:15:83","nodeType":"YulFunctionCall","src":"4266:15:83"},"nativeSrc":"4266:15:83","nodeType":"YulExpressionStatement","src":"4266:15:83"}]},"name":"panic_error_0x32","nativeSrc":"4160:127:83","nodeType":"YulFunctionDefinition","src":"4160:127:83"},{"body":{"nativeSrc":"4527:696:83","nodeType":"YulBlock","src":"4527:696:83","statements":[{"nativeSrc":"4537:33:83","nodeType":"YulVariableDeclaration","src":"4537:33:83","value":{"arguments":[{"name":"headStart","nativeSrc":"4555:9:83","nodeType":"YulIdentifier","src":"4555:9:83"},{"kind":"number","nativeSrc":"4566:3:83","nodeType":"YulLiteral","src":"4566:3:83","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"4551:3:83","nodeType":"YulIdentifier","src":"4551:3:83"},"nativeSrc":"4551:19:83","nodeType":"YulFunctionCall","src":"4551:19:83"},"variables":[{"name":"tail_1","nativeSrc":"4541:6:83","nodeType":"YulTypedName","src":"4541:6:83","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4586:9:83","nodeType":"YulIdentifier","src":"4586:9:83"},{"arguments":[{"name":"value0","nativeSrc":"4601:6:83","nodeType":"YulIdentifier","src":"4601:6:83"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"4617:3:83","nodeType":"YulLiteral","src":"4617:3:83","type":"","value":"160"},{"kind":"number","nativeSrc":"4622:1:83","nodeType":"YulLiteral","src":"4622:1:83","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"4613:3:83","nodeType":"YulIdentifier","src":"4613:3:83"},"nativeSrc":"4613:11:83","nodeType":"YulFunctionCall","src":"4613:11:83"},{"kind":"number","nativeSrc":"4626:1:83","nodeType":"YulLiteral","src":"4626:1:83","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"4609:3:83","nodeType":"YulIdentifier","src":"4609:3:83"},"nativeSrc":"4609:19:83","nodeType":"YulFunctionCall","src":"4609:19:83"}],"functionName":{"name":"and","nativeSrc":"4597:3:83","nodeType":"YulIdentifier","src":"4597:3:83"},"nativeSrc":"4597:32:83","nodeType":"YulFunctionCall","src":"4597:32:83"}],"functionName":{"name":"mstore","nativeSrc":"4579:6:83","nodeType":"YulIdentifier","src":"4579:6:83"},"nativeSrc":"4579:51:83","nodeType":"YulFunctionCall","src":"4579:51:83"},"nativeSrc":"4579:51:83","nodeType":"YulExpressionStatement","src":"4579:51:83"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4650:9:83","nodeType":"YulIdentifier","src":"4650:9:83"},{"kind":"number","nativeSrc":"4661:2:83","nodeType":"YulLiteral","src":"4661:2:83","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4646:3:83","nodeType":"YulIdentifier","src":"4646:3:83"},"nativeSrc":"4646:18:83","nodeType":"YulFunctionCall","src":"4646:18:83"},{"arguments":[{"name":"value1","nativeSrc":"4670:6:83","nodeType":"YulIdentifier","src":"4670:6:83"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"4686:3:83","nodeType":"YulLiteral","src":"4686:3:83","type":"","value":"160"},{"kind":"number","nativeSrc":"4691:1:83","nodeType":"YulLiteral","src":"4691:1:83","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"4682:3:83","nodeType":"YulIdentifier","src":"4682:3:83"},"nativeSrc":"4682:11:83","nodeType":"YulFunctionCall","src":"4682:11:83"},{"kind":"number","nativeSrc":"4695:1:83","nodeType":"YulLiteral","src":"4695:1:83","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"4678:3:83","nodeType":"YulIdentifier","src":"4678:3:83"},"nativeSrc":"4678:19:83","nodeType":"YulFunctionCall","src":"4678:19:83"}],"functionName":{"name":"and","nativeSrc":"4666:3:83","nodeType":"YulIdentifier","src":"4666:3:83"},"nativeSrc":"4666:32:83","nodeType":"YulFunctionCall","src":"4666:32:83"}],"functionName":{"name":"mstore","nativeSrc":"4639:6:83","nodeType":"YulIdentifier","src":"4639:6:83"},"nativeSrc":"4639:60:83","nodeType":"YulFunctionCall","src":"4639:60:83"},"nativeSrc":"4639:60:83","nodeType":"YulExpressionStatement","src":"4639:60:83"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4719:9:83","nodeType":"YulIdentifier","src":"4719:9:83"},{"kind":"number","nativeSrc":"4730:2:83","nodeType":"YulLiteral","src":"4730:2:83","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"4715:3:83","nodeType":"YulIdentifier","src":"4715:3:83"},"nativeSrc":"4715:18:83","nodeType":"YulFunctionCall","src":"4715:18:83"},{"arguments":[{"name":"value2","nativeSrc":"4739:6:83","nodeType":"YulIdentifier","src":"4739:6:83"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"4755:3:83","nodeType":"YulLiteral","src":"4755:3:83","type":"","value":"160"},{"kind":"number","nativeSrc":"4760:1:83","nodeType":"YulLiteral","src":"4760:1:83","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"4751:3:83","nodeType":"YulIdentifier","src":"4751:3:83"},"nativeSrc":"4751:11:83","nodeType":"YulFunctionCall","src":"4751:11:83"},{"kind":"number","nativeSrc":"4764:1:83","nodeType":"YulLiteral","src":"4764:1:83","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"4747:3:83","nodeType":"YulIdentifier","src":"4747:3:83"},"nativeSrc":"4747:19:83","nodeType":"YulFunctionCall","src":"4747:19:83"}],"functionName":{"name":"and","nativeSrc":"4735:3:83","nodeType":"YulIdentifier","src":"4735:3:83"},"nativeSrc":"4735:32:83","nodeType":"YulFunctionCall","src":"4735:32:83"}],"functionName":{"name":"mstore","nativeSrc":"4708:6:83","nodeType":"YulIdentifier","src":"4708:6:83"},"nativeSrc":"4708:60:83","nodeType":"YulFunctionCall","src":"4708:60:83"},"nativeSrc":"4708:60:83","nodeType":"YulExpressionStatement","src":"4708:60:83"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4788:9:83","nodeType":"YulIdentifier","src":"4788:9:83"},{"kind":"number","nativeSrc":"4799:2:83","nodeType":"YulLiteral","src":"4799:2:83","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"4784:3:83","nodeType":"YulIdentifier","src":"4784:3:83"},"nativeSrc":"4784:18:83","nodeType":"YulFunctionCall","src":"4784:18:83"},{"kind":"number","nativeSrc":"4804:3:83","nodeType":"YulLiteral","src":"4804:3:83","type":"","value":"128"}],"functionName":{"name":"mstore","nativeSrc":"4777:6:83","nodeType":"YulIdentifier","src":"4777:6:83"},"nativeSrc":"4777:31:83","nodeType":"YulFunctionCall","src":"4777:31:83"},"nativeSrc":"4777:31:83","nodeType":"YulExpressionStatement","src":"4777:31:83"},{"nativeSrc":"4817:17:83","nodeType":"YulVariableDeclaration","src":"4817:17:83","value":{"name":"tail_1","nativeSrc":"4828:6:83","nodeType":"YulIdentifier","src":"4828:6:83"},"variables":[{"name":"pos","nativeSrc":"4821:3:83","nodeType":"YulTypedName","src":"4821:3:83","type":""}]},{"nativeSrc":"4843:27:83","nodeType":"YulVariableDeclaration","src":"4843:27:83","value":{"arguments":[{"name":"value3","nativeSrc":"4863:6:83","nodeType":"YulIdentifier","src":"4863:6:83"}],"functionName":{"name":"mload","nativeSrc":"4857:5:83","nodeType":"YulIdentifier","src":"4857:5:83"},"nativeSrc":"4857:13:83","nodeType":"YulFunctionCall","src":"4857:13:83"},"variables":[{"name":"length","nativeSrc":"4847:6:83","nodeType":"YulTypedName","src":"4847:6:83","type":""}]},{"expression":{"arguments":[{"name":"tail_1","nativeSrc":"4886:6:83","nodeType":"YulIdentifier","src":"4886:6:83"},{"name":"length","nativeSrc":"4894:6:83","nodeType":"YulIdentifier","src":"4894:6:83"}],"functionName":{"name":"mstore","nativeSrc":"4879:6:83","nodeType":"YulIdentifier","src":"4879:6:83"},"nativeSrc":"4879:22:83","nodeType":"YulFunctionCall","src":"4879:22:83"},"nativeSrc":"4879:22:83","nodeType":"YulExpressionStatement","src":"4879:22:83"},{"nativeSrc":"4910:26:83","nodeType":"YulAssignment","src":"4910:26:83","value":{"arguments":[{"name":"headStart","nativeSrc":"4921:9:83","nodeType":"YulIdentifier","src":"4921:9:83"},{"kind":"number","nativeSrc":"4932:3:83","nodeType":"YulLiteral","src":"4932:3:83","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"4917:3:83","nodeType":"YulIdentifier","src":"4917:3:83"},"nativeSrc":"4917:19:83","nodeType":"YulFunctionCall","src":"4917:19:83"},"variableNames":[{"name":"pos","nativeSrc":"4910:3:83","nodeType":"YulIdentifier","src":"4910:3:83"}]},{"nativeSrc":"4945:29:83","nodeType":"YulVariableDeclaration","src":"4945:29:83","value":{"arguments":[{"name":"value3","nativeSrc":"4963:6:83","nodeType":"YulIdentifier","src":"4963:6:83"},{"kind":"number","nativeSrc":"4971:2:83","nodeType":"YulLiteral","src":"4971:2:83","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4959:3:83","nodeType":"YulIdentifier","src":"4959:3:83"},"nativeSrc":"4959:15:83","nodeType":"YulFunctionCall","src":"4959:15:83"},"variables":[{"name":"srcPtr","nativeSrc":"4949:6:83","nodeType":"YulTypedName","src":"4949:6:83","type":""}]},{"nativeSrc":"4983:10:83","nodeType":"YulVariableDeclaration","src":"4983:10:83","value":{"kind":"number","nativeSrc":"4992:1:83","nodeType":"YulLiteral","src":"4992:1:83","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"4987:1:83","nodeType":"YulTypedName","src":"4987:1:83","type":""}]},{"body":{"nativeSrc":"5051:146:83","nodeType":"YulBlock","src":"5051:146:83","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"5072:3:83","nodeType":"YulIdentifier","src":"5072:3:83"},{"arguments":[{"arguments":[{"name":"srcPtr","nativeSrc":"5087:6:83","nodeType":"YulIdentifier","src":"5087:6:83"}],"functionName":{"name":"mload","nativeSrc":"5081:5:83","nodeType":"YulIdentifier","src":"5081:5:83"},"nativeSrc":"5081:13:83","nodeType":"YulFunctionCall","src":"5081:13:83"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"5104:3:83","nodeType":"YulLiteral","src":"5104:3:83","type":"","value":"160"},{"kind":"number","nativeSrc":"5109:1:83","nodeType":"YulLiteral","src":"5109:1:83","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"5100:3:83","nodeType":"YulIdentifier","src":"5100:3:83"},"nativeSrc":"5100:11:83","nodeType":"YulFunctionCall","src":"5100:11:83"},{"kind":"number","nativeSrc":"5113:1:83","nodeType":"YulLiteral","src":"5113:1:83","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"5096:3:83","nodeType":"YulIdentifier","src":"5096:3:83"},"nativeSrc":"5096:19:83","nodeType":"YulFunctionCall","src":"5096:19:83"}],"functionName":{"name":"and","nativeSrc":"5077:3:83","nodeType":"YulIdentifier","src":"5077:3:83"},"nativeSrc":"5077:39:83","nodeType":"YulFunctionCall","src":"5077:39:83"}],"functionName":{"name":"mstore","nativeSrc":"5065:6:83","nodeType":"YulIdentifier","src":"5065:6:83"},"nativeSrc":"5065:52:83","nodeType":"YulFunctionCall","src":"5065:52:83"},"nativeSrc":"5065:52:83","nodeType":"YulExpressionStatement","src":"5065:52:83"},{"nativeSrc":"5130:19:83","nodeType":"YulAssignment","src":"5130:19:83","value":{"arguments":[{"name":"pos","nativeSrc":"5141:3:83","nodeType":"YulIdentifier","src":"5141:3:83"},{"kind":"number","nativeSrc":"5146:2:83","nodeType":"YulLiteral","src":"5146:2:83","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5137:3:83","nodeType":"YulIdentifier","src":"5137:3:83"},"nativeSrc":"5137:12:83","nodeType":"YulFunctionCall","src":"5137:12:83"},"variableNames":[{"name":"pos","nativeSrc":"5130:3:83","nodeType":"YulIdentifier","src":"5130:3:83"}]},{"nativeSrc":"5162:25:83","nodeType":"YulAssignment","src":"5162:25:83","value":{"arguments":[{"name":"srcPtr","nativeSrc":"5176:6:83","nodeType":"YulIdentifier","src":"5176:6:83"},{"kind":"number","nativeSrc":"5184:2:83","nodeType":"YulLiteral","src":"5184:2:83","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5172:3:83","nodeType":"YulIdentifier","src":"5172:3:83"},"nativeSrc":"5172:15:83","nodeType":"YulFunctionCall","src":"5172:15:83"},"variableNames":[{"name":"srcPtr","nativeSrc":"5162:6:83","nodeType":"YulIdentifier","src":"5162:6:83"}]}]},"condition":{"arguments":[{"name":"i","nativeSrc":"5013:1:83","nodeType":"YulIdentifier","src":"5013:1:83"},{"name":"length","nativeSrc":"5016:6:83","nodeType":"YulIdentifier","src":"5016:6:83"}],"functionName":{"name":"lt","nativeSrc":"5010:2:83","nodeType":"YulIdentifier","src":"5010:2:83"},"nativeSrc":"5010:13:83","nodeType":"YulFunctionCall","src":"5010:13:83"},"nativeSrc":"5002:195:83","nodeType":"YulForLoop","post":{"nativeSrc":"5024:18:83","nodeType":"YulBlock","src":"5024:18:83","statements":[{"nativeSrc":"5026:14:83","nodeType":"YulAssignment","src":"5026:14:83","value":{"arguments":[{"name":"i","nativeSrc":"5035:1:83","nodeType":"YulIdentifier","src":"5035:1:83"},{"kind":"number","nativeSrc":"5038:1:83","nodeType":"YulLiteral","src":"5038:1:83","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"5031:3:83","nodeType":"YulIdentifier","src":"5031:3:83"},"nativeSrc":"5031:9:83","nodeType":"YulFunctionCall","src":"5031:9:83"},"variableNames":[{"name":"i","nativeSrc":"5026:1:83","nodeType":"YulIdentifier","src":"5026:1:83"}]}]},"pre":{"nativeSrc":"5006:3:83","nodeType":"YulBlock","src":"5006:3:83","statements":[]},"src":"5002:195:83"},{"nativeSrc":"5206:11:83","nodeType":"YulAssignment","src":"5206:11:83","value":{"name":"pos","nativeSrc":"5214:3:83","nodeType":"YulIdentifier","src":"5214:3:83"},"variableNames":[{"name":"tail","nativeSrc":"5206:4:83","nodeType":"YulIdentifier","src":"5206:4:83"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_address_t_array$_t_address_$dyn_memory_ptr__to_t_address_t_address_t_address_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed","nativeSrc":"4292:931:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4472:9:83","nodeType":"YulTypedName","src":"4472:9:83","type":""},{"name":"value3","nativeSrc":"4483:6:83","nodeType":"YulTypedName","src":"4483:6:83","type":""},{"name":"value2","nativeSrc":"4491:6:83","nodeType":"YulTypedName","src":"4491:6:83","type":""},{"name":"value1","nativeSrc":"4499:6:83","nodeType":"YulTypedName","src":"4499:6:83","type":""},{"name":"value0","nativeSrc":"4507:6:83","nodeType":"YulTypedName","src":"4507:6:83","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4518:4:83","nodeType":"YulTypedName","src":"4518:4:83","type":""}],"src":"4292:931:83"},{"body":{"nativeSrc":"5289:239:83","nodeType":"YulBlock","src":"5289:239:83","statements":[{"nativeSrc":"5299:26:83","nodeType":"YulVariableDeclaration","src":"5299:26:83","value":{"arguments":[{"name":"value","nativeSrc":"5319:5:83","nodeType":"YulIdentifier","src":"5319:5:83"}],"functionName":{"name":"mload","nativeSrc":"5313:5:83","nodeType":"YulIdentifier","src":"5313:5:83"},"nativeSrc":"5313:12:83","nodeType":"YulFunctionCall","src":"5313:12:83"},"variables":[{"name":"length","nativeSrc":"5303:6:83","nodeType":"YulTypedName","src":"5303:6:83","type":""}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"5341:3:83","nodeType":"YulIdentifier","src":"5341:3:83"},{"name":"length","nativeSrc":"5346:6:83","nodeType":"YulIdentifier","src":"5346:6:83"}],"functionName":{"name":"mstore","nativeSrc":"5334:6:83","nodeType":"YulIdentifier","src":"5334:6:83"},"nativeSrc":"5334:19:83","nodeType":"YulFunctionCall","src":"5334:19:83"},"nativeSrc":"5334:19:83","nodeType":"YulExpressionStatement","src":"5334:19:83"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"5372:3:83","nodeType":"YulIdentifier","src":"5372:3:83"},{"kind":"number","nativeSrc":"5377:4:83","nodeType":"YulLiteral","src":"5377:4:83","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"5368:3:83","nodeType":"YulIdentifier","src":"5368:3:83"},"nativeSrc":"5368:14:83","nodeType":"YulFunctionCall","src":"5368:14:83"},{"arguments":[{"name":"value","nativeSrc":"5388:5:83","nodeType":"YulIdentifier","src":"5388:5:83"},{"kind":"number","nativeSrc":"5395:4:83","nodeType":"YulLiteral","src":"5395:4:83","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"5384:3:83","nodeType":"YulIdentifier","src":"5384:3:83"},"nativeSrc":"5384:16:83","nodeType":"YulFunctionCall","src":"5384:16:83"},{"name":"length","nativeSrc":"5402:6:83","nodeType":"YulIdentifier","src":"5402:6:83"}],"functionName":{"name":"mcopy","nativeSrc":"5362:5:83","nodeType":"YulIdentifier","src":"5362:5:83"},"nativeSrc":"5362:47:83","nodeType":"YulFunctionCall","src":"5362:47:83"},"nativeSrc":"5362:47:83","nodeType":"YulExpressionStatement","src":"5362:47:83"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"5433:3:83","nodeType":"YulIdentifier","src":"5433:3:83"},{"name":"length","nativeSrc":"5438:6:83","nodeType":"YulIdentifier","src":"5438:6:83"}],"functionName":{"name":"add","nativeSrc":"5429:3:83","nodeType":"YulIdentifier","src":"5429:3:83"},"nativeSrc":"5429:16:83","nodeType":"YulFunctionCall","src":"5429:16:83"},{"kind":"number","nativeSrc":"5447:4:83","nodeType":"YulLiteral","src":"5447:4:83","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"5425:3:83","nodeType":"YulIdentifier","src":"5425:3:83"},"nativeSrc":"5425:27:83","nodeType":"YulFunctionCall","src":"5425:27:83"},{"kind":"number","nativeSrc":"5454:1:83","nodeType":"YulLiteral","src":"5454:1:83","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"5418:6:83","nodeType":"YulIdentifier","src":"5418:6:83"},"nativeSrc":"5418:38:83","nodeType":"YulFunctionCall","src":"5418:38:83"},"nativeSrc":"5418:38:83","nodeType":"YulExpressionStatement","src":"5418:38:83"},{"nativeSrc":"5465:57:83","nodeType":"YulAssignment","src":"5465:57:83","value":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"5480:3:83","nodeType":"YulIdentifier","src":"5480:3:83"},{"arguments":[{"arguments":[{"name":"length","nativeSrc":"5493:6:83","nodeType":"YulIdentifier","src":"5493:6:83"},{"kind":"number","nativeSrc":"5501:2:83","nodeType":"YulLiteral","src":"5501:2:83","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"5489:3:83","nodeType":"YulIdentifier","src":"5489:3:83"},"nativeSrc":"5489:15:83","nodeType":"YulFunctionCall","src":"5489:15:83"},{"arguments":[{"kind":"number","nativeSrc":"5510:2:83","nodeType":"YulLiteral","src":"5510:2:83","type":"","value":"31"}],"functionName":{"name":"not","nativeSrc":"5506:3:83","nodeType":"YulIdentifier","src":"5506:3:83"},"nativeSrc":"5506:7:83","nodeType":"YulFunctionCall","src":"5506:7:83"}],"functionName":{"name":"and","nativeSrc":"5485:3:83","nodeType":"YulIdentifier","src":"5485:3:83"},"nativeSrc":"5485:29:83","nodeType":"YulFunctionCall","src":"5485:29:83"}],"functionName":{"name":"add","nativeSrc":"5476:3:83","nodeType":"YulIdentifier","src":"5476:3:83"},"nativeSrc":"5476:39:83","nodeType":"YulFunctionCall","src":"5476:39:83"},{"kind":"number","nativeSrc":"5517:4:83","nodeType":"YulLiteral","src":"5517:4:83","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"5472:3:83","nodeType":"YulIdentifier","src":"5472:3:83"},"nativeSrc":"5472:50:83","nodeType":"YulFunctionCall","src":"5472:50:83"},"variableNames":[{"name":"end","nativeSrc":"5465:3:83","nodeType":"YulIdentifier","src":"5465:3:83"}]}]},"name":"abi_encode_string_memory_ptr","nativeSrc":"5228:300:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"5266:5:83","nodeType":"YulTypedName","src":"5266:5:83","type":""},{"name":"pos","nativeSrc":"5273:3:83","nodeType":"YulTypedName","src":"5273:3:83","type":""}],"returnVariables":[{"name":"end","nativeSrc":"5281:3:83","nodeType":"YulTypedName","src":"5281:3:83","type":""}],"src":"5228:300:83"},{"body":{"nativeSrc":"5682:179:83","nodeType":"YulBlock","src":"5682:179:83","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"5699:9:83","nodeType":"YulIdentifier","src":"5699:9:83"},{"kind":"number","nativeSrc":"5710:2:83","nodeType":"YulLiteral","src":"5710:2:83","type":"","value":"64"}],"functionName":{"name":"mstore","nativeSrc":"5692:6:83","nodeType":"YulIdentifier","src":"5692:6:83"},"nativeSrc":"5692:21:83","nodeType":"YulFunctionCall","src":"5692:21:83"},"nativeSrc":"5692:21:83","nodeType":"YulExpressionStatement","src":"5692:21:83"},{"nativeSrc":"5722:64:83","nodeType":"YulAssignment","src":"5722:64:83","value":{"arguments":[{"name":"value0","nativeSrc":"5759:6:83","nodeType":"YulIdentifier","src":"5759:6:83"},{"arguments":[{"name":"headStart","nativeSrc":"5771:9:83","nodeType":"YulIdentifier","src":"5771:9:83"},{"kind":"number","nativeSrc":"5782:2:83","nodeType":"YulLiteral","src":"5782:2:83","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"5767:3:83","nodeType":"YulIdentifier","src":"5767:3:83"},"nativeSrc":"5767:18:83","nodeType":"YulFunctionCall","src":"5767:18:83"}],"functionName":{"name":"abi_encode_string_memory_ptr","nativeSrc":"5730:28:83","nodeType":"YulIdentifier","src":"5730:28:83"},"nativeSrc":"5730:56:83","nodeType":"YulFunctionCall","src":"5730:56:83"},"variableNames":[{"name":"tail","nativeSrc":"5722:4:83","nodeType":"YulIdentifier","src":"5722:4:83"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5806:9:83","nodeType":"YulIdentifier","src":"5806:9:83"},{"kind":"number","nativeSrc":"5817:2:83","nodeType":"YulLiteral","src":"5817:2:83","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5802:3:83","nodeType":"YulIdentifier","src":"5802:3:83"},"nativeSrc":"5802:18:83","nodeType":"YulFunctionCall","src":"5802:18:83"},{"arguments":[{"name":"value1","nativeSrc":"5826:6:83","nodeType":"YulIdentifier","src":"5826:6:83"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"5842:3:83","nodeType":"YulLiteral","src":"5842:3:83","type":"","value":"160"},{"kind":"number","nativeSrc":"5847:1:83","nodeType":"YulLiteral","src":"5847:1:83","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"5838:3:83","nodeType":"YulIdentifier","src":"5838:3:83"},"nativeSrc":"5838:11:83","nodeType":"YulFunctionCall","src":"5838:11:83"},{"kind":"number","nativeSrc":"5851:1:83","nodeType":"YulLiteral","src":"5851:1:83","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"5834:3:83","nodeType":"YulIdentifier","src":"5834:3:83"},"nativeSrc":"5834:19:83","nodeType":"YulFunctionCall","src":"5834:19:83"}],"functionName":{"name":"and","nativeSrc":"5822:3:83","nodeType":"YulIdentifier","src":"5822:3:83"},"nativeSrc":"5822:32:83","nodeType":"YulFunctionCall","src":"5822:32:83"}],"functionName":{"name":"mstore","nativeSrc":"5795:6:83","nodeType":"YulIdentifier","src":"5795:6:83"},"nativeSrc":"5795:60:83","nodeType":"YulFunctionCall","src":"5795:60:83"},"nativeSrc":"5795:60:83","nodeType":"YulExpressionStatement","src":"5795:60:83"}]},"name":"abi_encode_tuple_t_string_memory_ptr_t_address__to_t_string_memory_ptr_t_address__fromStack_reversed","nativeSrc":"5533:328:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5643:9:83","nodeType":"YulTypedName","src":"5643:9:83","type":""},{"name":"value1","nativeSrc":"5654:6:83","nodeType":"YulTypedName","src":"5654:6:83","type":""},{"name":"value0","nativeSrc":"5662:6:83","nodeType":"YulTypedName","src":"5662:6:83","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"5673:4:83","nodeType":"YulTypedName","src":"5673:4:83","type":""}],"src":"5533:328:83"},{"body":{"nativeSrc":"6015:153:83","nodeType":"YulBlock","src":"6015:153:83","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"6032:9:83","nodeType":"YulIdentifier","src":"6032:9:83"},{"kind":"number","nativeSrc":"6043:2:83","nodeType":"YulLiteral","src":"6043:2:83","type":"","value":"64"}],"functionName":{"name":"mstore","nativeSrc":"6025:6:83","nodeType":"YulIdentifier","src":"6025:6:83"},"nativeSrc":"6025:21:83","nodeType":"YulFunctionCall","src":"6025:21:83"},"nativeSrc":"6025:21:83","nodeType":"YulExpressionStatement","src":"6025:21:83"},{"nativeSrc":"6055:64:83","nodeType":"YulAssignment","src":"6055:64:83","value":{"arguments":[{"name":"value0","nativeSrc":"6092:6:83","nodeType":"YulIdentifier","src":"6092:6:83"},{"arguments":[{"name":"headStart","nativeSrc":"6104:9:83","nodeType":"YulIdentifier","src":"6104:9:83"},{"kind":"number","nativeSrc":"6115:2:83","nodeType":"YulLiteral","src":"6115:2:83","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"6100:3:83","nodeType":"YulIdentifier","src":"6100:3:83"},"nativeSrc":"6100:18:83","nodeType":"YulFunctionCall","src":"6100:18:83"}],"functionName":{"name":"abi_encode_string_memory_ptr","nativeSrc":"6063:28:83","nodeType":"YulIdentifier","src":"6063:28:83"},"nativeSrc":"6063:56:83","nodeType":"YulFunctionCall","src":"6063:56:83"},"variableNames":[{"name":"tail","nativeSrc":"6055:4:83","nodeType":"YulIdentifier","src":"6055:4:83"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6139:9:83","nodeType":"YulIdentifier","src":"6139:9:83"},{"kind":"number","nativeSrc":"6150:2:83","nodeType":"YulLiteral","src":"6150:2:83","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6135:3:83","nodeType":"YulIdentifier","src":"6135:3:83"},"nativeSrc":"6135:18:83","nodeType":"YulFunctionCall","src":"6135:18:83"},{"name":"value1","nativeSrc":"6155:6:83","nodeType":"YulIdentifier","src":"6155:6:83"}],"functionName":{"name":"mstore","nativeSrc":"6128:6:83","nodeType":"YulIdentifier","src":"6128:6:83"},"nativeSrc":"6128:34:83","nodeType":"YulFunctionCall","src":"6128:34:83"},"nativeSrc":"6128:34:83","nodeType":"YulExpressionStatement","src":"6128:34:83"}]},"name":"abi_encode_tuple_t_string_memory_ptr_t_uint256__to_t_string_memory_ptr_t_uint256__fromStack_reversed","nativeSrc":"5866:302:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5976:9:83","nodeType":"YulTypedName","src":"5976:9:83","type":""},{"name":"value1","nativeSrc":"5987:6:83","nodeType":"YulTypedName","src":"5987:6:83","type":""},{"name":"value0","nativeSrc":"5995:6:83","nodeType":"YulTypedName","src":"5995:6:83","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"6006:4:83","nodeType":"YulTypedName","src":"6006:4:83","type":""}],"src":"5866:302:83"},{"body":{"nativeSrc":"6342:236:83","nodeType":"YulBlock","src":"6342:236:83","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"6359:9:83","nodeType":"YulIdentifier","src":"6359:9:83"},{"kind":"number","nativeSrc":"6370:2:83","nodeType":"YulLiteral","src":"6370:2:83","type":"","value":"64"}],"functionName":{"name":"mstore","nativeSrc":"6352:6:83","nodeType":"YulIdentifier","src":"6352:6:83"},"nativeSrc":"6352:21:83","nodeType":"YulFunctionCall","src":"6352:21:83"},"nativeSrc":"6352:21:83","nodeType":"YulExpressionStatement","src":"6352:21:83"},{"nativeSrc":"6382:70:83","nodeType":"YulVariableDeclaration","src":"6382:70:83","value":{"arguments":[{"name":"value0","nativeSrc":"6425:6:83","nodeType":"YulIdentifier","src":"6425:6:83"},{"arguments":[{"name":"headStart","nativeSrc":"6437:9:83","nodeType":"YulIdentifier","src":"6437:9:83"},{"kind":"number","nativeSrc":"6448:2:83","nodeType":"YulLiteral","src":"6448:2:83","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"6433:3:83","nodeType":"YulIdentifier","src":"6433:3:83"},"nativeSrc":"6433:18:83","nodeType":"YulFunctionCall","src":"6433:18:83"}],"functionName":{"name":"abi_encode_string_memory_ptr","nativeSrc":"6396:28:83","nodeType":"YulIdentifier","src":"6396:28:83"},"nativeSrc":"6396:56:83","nodeType":"YulFunctionCall","src":"6396:56:83"},"variables":[{"name":"tail_1","nativeSrc":"6386:6:83","nodeType":"YulTypedName","src":"6386:6:83","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6472:9:83","nodeType":"YulIdentifier","src":"6472:9:83"},{"kind":"number","nativeSrc":"6483:2:83","nodeType":"YulLiteral","src":"6483:2:83","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6468:3:83","nodeType":"YulIdentifier","src":"6468:3:83"},"nativeSrc":"6468:18:83","nodeType":"YulFunctionCall","src":"6468:18:83"},{"arguments":[{"name":"tail_1","nativeSrc":"6492:6:83","nodeType":"YulIdentifier","src":"6492:6:83"},{"name":"headStart","nativeSrc":"6500:9:83","nodeType":"YulIdentifier","src":"6500:9:83"}],"functionName":{"name":"sub","nativeSrc":"6488:3:83","nodeType":"YulIdentifier","src":"6488:3:83"},"nativeSrc":"6488:22:83","nodeType":"YulFunctionCall","src":"6488:22:83"}],"functionName":{"name":"mstore","nativeSrc":"6461:6:83","nodeType":"YulIdentifier","src":"6461:6:83"},"nativeSrc":"6461:50:83","nodeType":"YulFunctionCall","src":"6461:50:83"},"nativeSrc":"6461:50:83","nodeType":"YulExpressionStatement","src":"6461:50:83"},{"nativeSrc":"6520:52:83","nodeType":"YulAssignment","src":"6520:52:83","value":{"arguments":[{"name":"value1","nativeSrc":"6557:6:83","nodeType":"YulIdentifier","src":"6557:6:83"},{"name":"tail_1","nativeSrc":"6565:6:83","nodeType":"YulIdentifier","src":"6565:6:83"}],"functionName":{"name":"abi_encode_string_memory_ptr","nativeSrc":"6528:28:83","nodeType":"YulIdentifier","src":"6528:28:83"},"nativeSrc":"6528:44:83","nodeType":"YulFunctionCall","src":"6528:44:83"},"variableNames":[{"name":"tail","nativeSrc":"6520:4:83","nodeType":"YulIdentifier","src":"6520:4:83"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed","nativeSrc":"6173:405:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6303:9:83","nodeType":"YulTypedName","src":"6303:9:83","type":""},{"name":"value1","nativeSrc":"6314:6:83","nodeType":"YulTypedName","src":"6314:6:83","type":""},{"name":"value0","nativeSrc":"6322:6:83","nodeType":"YulTypedName","src":"6322:6:83","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"6333:4:83","nodeType":"YulTypedName","src":"6333:4:83","type":""}],"src":"6173:405:83"},{"body":{"nativeSrc":"6780:305:83","nodeType":"YulBlock","src":"6780:305:83","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"6797:9:83","nodeType":"YulIdentifier","src":"6797:9:83"},{"kind":"number","nativeSrc":"6808:2:83","nodeType":"YulLiteral","src":"6808:2:83","type":"","value":"96"}],"functionName":{"name":"mstore","nativeSrc":"6790:6:83","nodeType":"YulIdentifier","src":"6790:6:83"},"nativeSrc":"6790:21:83","nodeType":"YulFunctionCall","src":"6790:21:83"},"nativeSrc":"6790:21:83","nodeType":"YulExpressionStatement","src":"6790:21:83"},{"nativeSrc":"6820:70:83","nodeType":"YulVariableDeclaration","src":"6820:70:83","value":{"arguments":[{"name":"value0","nativeSrc":"6863:6:83","nodeType":"YulIdentifier","src":"6863:6:83"},{"arguments":[{"name":"headStart","nativeSrc":"6875:9:83","nodeType":"YulIdentifier","src":"6875:9:83"},{"kind":"number","nativeSrc":"6886:2:83","nodeType":"YulLiteral","src":"6886:2:83","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"6871:3:83","nodeType":"YulIdentifier","src":"6871:3:83"},"nativeSrc":"6871:18:83","nodeType":"YulFunctionCall","src":"6871:18:83"}],"functionName":{"name":"abi_encode_string_memory_ptr","nativeSrc":"6834:28:83","nodeType":"YulIdentifier","src":"6834:28:83"},"nativeSrc":"6834:56:83","nodeType":"YulFunctionCall","src":"6834:56:83"},"variables":[{"name":"tail_1","nativeSrc":"6824:6:83","nodeType":"YulTypedName","src":"6824:6:83","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6910:9:83","nodeType":"YulIdentifier","src":"6910:9:83"},{"kind":"number","nativeSrc":"6921:2:83","nodeType":"YulLiteral","src":"6921:2:83","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6906:3:83","nodeType":"YulIdentifier","src":"6906:3:83"},"nativeSrc":"6906:18:83","nodeType":"YulFunctionCall","src":"6906:18:83"},{"arguments":[{"name":"tail_1","nativeSrc":"6930:6:83","nodeType":"YulIdentifier","src":"6930:6:83"},{"name":"headStart","nativeSrc":"6938:9:83","nodeType":"YulIdentifier","src":"6938:9:83"}],"functionName":{"name":"sub","nativeSrc":"6926:3:83","nodeType":"YulIdentifier","src":"6926:3:83"},"nativeSrc":"6926:22:83","nodeType":"YulFunctionCall","src":"6926:22:83"}],"functionName":{"name":"mstore","nativeSrc":"6899:6:83","nodeType":"YulIdentifier","src":"6899:6:83"},"nativeSrc":"6899:50:83","nodeType":"YulFunctionCall","src":"6899:50:83"},"nativeSrc":"6899:50:83","nodeType":"YulExpressionStatement","src":"6899:50:83"},{"nativeSrc":"6958:52:83","nodeType":"YulAssignment","src":"6958:52:83","value":{"arguments":[{"name":"value1","nativeSrc":"6995:6:83","nodeType":"YulIdentifier","src":"6995:6:83"},{"name":"tail_1","nativeSrc":"7003:6:83","nodeType":"YulIdentifier","src":"7003:6:83"}],"functionName":{"name":"abi_encode_string_memory_ptr","nativeSrc":"6966:28:83","nodeType":"YulIdentifier","src":"6966:28:83"},"nativeSrc":"6966:44:83","nodeType":"YulFunctionCall","src":"6966:44:83"},"variableNames":[{"name":"tail","nativeSrc":"6958:4:83","nodeType":"YulIdentifier","src":"6958:4:83"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7030:9:83","nodeType":"YulIdentifier","src":"7030:9:83"},{"kind":"number","nativeSrc":"7041:2:83","nodeType":"YulLiteral","src":"7041:2:83","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"7026:3:83","nodeType":"YulIdentifier","src":"7026:3:83"},"nativeSrc":"7026:18:83","nodeType":"YulFunctionCall","src":"7026:18:83"},{"arguments":[{"name":"value2","nativeSrc":"7050:6:83","nodeType":"YulIdentifier","src":"7050:6:83"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"7066:3:83","nodeType":"YulLiteral","src":"7066:3:83","type":"","value":"160"},{"kind":"number","nativeSrc":"7071:1:83","nodeType":"YulLiteral","src":"7071:1:83","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"7062:3:83","nodeType":"YulIdentifier","src":"7062:3:83"},"nativeSrc":"7062:11:83","nodeType":"YulFunctionCall","src":"7062:11:83"},{"kind":"number","nativeSrc":"7075:1:83","nodeType":"YulLiteral","src":"7075:1:83","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"7058:3:83","nodeType":"YulIdentifier","src":"7058:3:83"},"nativeSrc":"7058:19:83","nodeType":"YulFunctionCall","src":"7058:19:83"}],"functionName":{"name":"and","nativeSrc":"7046:3:83","nodeType":"YulIdentifier","src":"7046:3:83"},"nativeSrc":"7046:32:83","nodeType":"YulFunctionCall","src":"7046:32:83"}],"functionName":{"name":"mstore","nativeSrc":"7019:6:83","nodeType":"YulIdentifier","src":"7019:6:83"},"nativeSrc":"7019:60:83","nodeType":"YulFunctionCall","src":"7019:60:83"},"nativeSrc":"7019:60:83","nodeType":"YulExpressionStatement","src":"7019:60:83"}]},"name":"abi_encode_tuple_t_string_memory_ptr_t_string_memory_ptr_t_address__to_t_string_memory_ptr_t_string_memory_ptr_t_address__fromStack_reversed","nativeSrc":"6583:502:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6733:9:83","nodeType":"YulTypedName","src":"6733:9:83","type":""},{"name":"value2","nativeSrc":"6744:6:83","nodeType":"YulTypedName","src":"6744:6:83","type":""},{"name":"value1","nativeSrc":"6752:6:83","nodeType":"YulTypedName","src":"6752:6:83","type":""},{"name":"value0","nativeSrc":"6760:6:83","nodeType":"YulTypedName","src":"6760:6:83","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"6771:4:83","nodeType":"YulTypedName","src":"6771:4:83","type":""}],"src":"6583:502:83"},{"body":{"nativeSrc":"7211:110:83","nodeType":"YulBlock","src":"7211:110:83","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"7228:9:83","nodeType":"YulIdentifier","src":"7228:9:83"},{"kind":"number","nativeSrc":"7239:2:83","nodeType":"YulLiteral","src":"7239:2:83","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"7221:6:83","nodeType":"YulIdentifier","src":"7221:6:83"},"nativeSrc":"7221:21:83","nodeType":"YulFunctionCall","src":"7221:21:83"},"nativeSrc":"7221:21:83","nodeType":"YulExpressionStatement","src":"7221:21:83"},{"nativeSrc":"7251:64:83","nodeType":"YulAssignment","src":"7251:64:83","value":{"arguments":[{"name":"value0","nativeSrc":"7288:6:83","nodeType":"YulIdentifier","src":"7288:6:83"},{"arguments":[{"name":"headStart","nativeSrc":"7300:9:83","nodeType":"YulIdentifier","src":"7300:9:83"},{"kind":"number","nativeSrc":"7311:2:83","nodeType":"YulLiteral","src":"7311:2:83","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7296:3:83","nodeType":"YulIdentifier","src":"7296:3:83"},"nativeSrc":"7296:18:83","nodeType":"YulFunctionCall","src":"7296:18:83"}],"functionName":{"name":"abi_encode_string_memory_ptr","nativeSrc":"7259:28:83","nodeType":"YulIdentifier","src":"7259:28:83"},"nativeSrc":"7259:56:83","nodeType":"YulFunctionCall","src":"7259:56:83"},"variableNames":[{"name":"tail","nativeSrc":"7251:4:83","nodeType":"YulIdentifier","src":"7251:4:83"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"7090:231:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7180:9:83","nodeType":"YulTypedName","src":"7180:9:83","type":""},{"name":"value0","nativeSrc":"7191:6:83","nodeType":"YulTypedName","src":"7191:6:83","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"7202:4:83","nodeType":"YulTypedName","src":"7202:4:83","type":""}],"src":"7090:231:83"},{"body":{"nativeSrc":"7473:179:83","nodeType":"YulBlock","src":"7473:179:83","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"7490:9:83","nodeType":"YulIdentifier","src":"7490:9:83"},{"arguments":[{"name":"value0","nativeSrc":"7505:6:83","nodeType":"YulIdentifier","src":"7505:6:83"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"7521:3:83","nodeType":"YulLiteral","src":"7521:3:83","type":"","value":"160"},{"kind":"number","nativeSrc":"7526:1:83","nodeType":"YulLiteral","src":"7526:1:83","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"7517:3:83","nodeType":"YulIdentifier","src":"7517:3:83"},"nativeSrc":"7517:11:83","nodeType":"YulFunctionCall","src":"7517:11:83"},{"kind":"number","nativeSrc":"7530:1:83","nodeType":"YulLiteral","src":"7530:1:83","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"7513:3:83","nodeType":"YulIdentifier","src":"7513:3:83"},"nativeSrc":"7513:19:83","nodeType":"YulFunctionCall","src":"7513:19:83"}],"functionName":{"name":"and","nativeSrc":"7501:3:83","nodeType":"YulIdentifier","src":"7501:3:83"},"nativeSrc":"7501:32:83","nodeType":"YulFunctionCall","src":"7501:32:83"}],"functionName":{"name":"mstore","nativeSrc":"7483:6:83","nodeType":"YulIdentifier","src":"7483:6:83"},"nativeSrc":"7483:51:83","nodeType":"YulFunctionCall","src":"7483:51:83"},"nativeSrc":"7483:51:83","nodeType":"YulExpressionStatement","src":"7483:51:83"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7554:9:83","nodeType":"YulIdentifier","src":"7554:9:83"},{"kind":"number","nativeSrc":"7565:2:83","nodeType":"YulLiteral","src":"7565:2:83","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7550:3:83","nodeType":"YulIdentifier","src":"7550:3:83"},"nativeSrc":"7550:18:83","nodeType":"YulFunctionCall","src":"7550:18:83"},{"kind":"number","nativeSrc":"7570:2:83","nodeType":"YulLiteral","src":"7570:2:83","type":"","value":"64"}],"functionName":{"name":"mstore","nativeSrc":"7543:6:83","nodeType":"YulIdentifier","src":"7543:6:83"},"nativeSrc":"7543:30:83","nodeType":"YulFunctionCall","src":"7543:30:83"},"nativeSrc":"7543:30:83","nodeType":"YulExpressionStatement","src":"7543:30:83"},{"nativeSrc":"7582:64:83","nodeType":"YulAssignment","src":"7582:64:83","value":{"arguments":[{"name":"value1","nativeSrc":"7619:6:83","nodeType":"YulIdentifier","src":"7619:6:83"},{"arguments":[{"name":"headStart","nativeSrc":"7631:9:83","nodeType":"YulIdentifier","src":"7631:9:83"},{"kind":"number","nativeSrc":"7642:2:83","nodeType":"YulLiteral","src":"7642:2:83","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"7627:3:83","nodeType":"YulIdentifier","src":"7627:3:83"},"nativeSrc":"7627:18:83","nodeType":"YulFunctionCall","src":"7627:18:83"}],"functionName":{"name":"abi_encode_string_memory_ptr","nativeSrc":"7590:28:83","nodeType":"YulIdentifier","src":"7590:28:83"},"nativeSrc":"7590:56:83","nodeType":"YulFunctionCall","src":"7590:56:83"},"variableNames":[{"name":"tail","nativeSrc":"7582:4:83","nodeType":"YulIdentifier","src":"7582:4:83"}]}]},"name":"abi_encode_tuple_t_address_t_bytes_memory_ptr__to_t_address_t_bytes_memory_ptr__fromStack_reversed","nativeSrc":"7326:326:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7434:9:83","nodeType":"YulTypedName","src":"7434:9:83","type":""},{"name":"value1","nativeSrc":"7445:6:83","nodeType":"YulTypedName","src":"7445:6:83","type":""},{"name":"value0","nativeSrc":"7453:6:83","nodeType":"YulTypedName","src":"7453:6:83","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"7464:4:83","nodeType":"YulTypedName","src":"7464:4:83","type":""}],"src":"7326:326:83"},{"body":{"nativeSrc":"7707:162:83","nodeType":"YulBlock","src":"7707:162:83","statements":[{"nativeSrc":"7717:26:83","nodeType":"YulVariableDeclaration","src":"7717:26:83","value":{"arguments":[{"name":"value","nativeSrc":"7737:5:83","nodeType":"YulIdentifier","src":"7737:5:83"}],"functionName":{"name":"mload","nativeSrc":"7731:5:83","nodeType":"YulIdentifier","src":"7731:5:83"},"nativeSrc":"7731:12:83","nodeType":"YulFunctionCall","src":"7731:12:83"},"variables":[{"name":"length","nativeSrc":"7721:6:83","nodeType":"YulTypedName","src":"7721:6:83","type":""}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"7758:3:83","nodeType":"YulIdentifier","src":"7758:3:83"},{"arguments":[{"name":"value","nativeSrc":"7767:5:83","nodeType":"YulIdentifier","src":"7767:5:83"},{"kind":"number","nativeSrc":"7774:4:83","nodeType":"YulLiteral","src":"7774:4:83","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"7763:3:83","nodeType":"YulIdentifier","src":"7763:3:83"},"nativeSrc":"7763:16:83","nodeType":"YulFunctionCall","src":"7763:16:83"},{"name":"length","nativeSrc":"7781:6:83","nodeType":"YulIdentifier","src":"7781:6:83"}],"functionName":{"name":"mcopy","nativeSrc":"7752:5:83","nodeType":"YulIdentifier","src":"7752:5:83"},"nativeSrc":"7752:36:83","nodeType":"YulFunctionCall","src":"7752:36:83"},"nativeSrc":"7752:36:83","nodeType":"YulExpressionStatement","src":"7752:36:83"},{"nativeSrc":"7797:26:83","nodeType":"YulVariableDeclaration","src":"7797:26:83","value":{"arguments":[{"name":"pos","nativeSrc":"7811:3:83","nodeType":"YulIdentifier","src":"7811:3:83"},{"name":"length","nativeSrc":"7816:6:83","nodeType":"YulIdentifier","src":"7816:6:83"}],"functionName":{"name":"add","nativeSrc":"7807:3:83","nodeType":"YulIdentifier","src":"7807:3:83"},"nativeSrc":"7807:16:83","nodeType":"YulFunctionCall","src":"7807:16:83"},"variables":[{"name":"_1","nativeSrc":"7801:2:83","nodeType":"YulTypedName","src":"7801:2:83","type":""}]},{"expression":{"arguments":[{"name":"_1","nativeSrc":"7839:2:83","nodeType":"YulIdentifier","src":"7839:2:83"},{"kind":"number","nativeSrc":"7843:1:83","nodeType":"YulLiteral","src":"7843:1:83","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"7832:6:83","nodeType":"YulIdentifier","src":"7832:6:83"},"nativeSrc":"7832:13:83","nodeType":"YulFunctionCall","src":"7832:13:83"},"nativeSrc":"7832:13:83","nodeType":"YulExpressionStatement","src":"7832:13:83"},{"nativeSrc":"7854:9:83","nodeType":"YulAssignment","src":"7854:9:83","value":{"name":"_1","nativeSrc":"7861:2:83","nodeType":"YulIdentifier","src":"7861:2:83"},"variableNames":[{"name":"end","nativeSrc":"7854:3:83","nodeType":"YulIdentifier","src":"7854:3:83"}]}]},"name":"abi_encode_string","nativeSrc":"7657:212:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"7684:5:83","nodeType":"YulTypedName","src":"7684:5:83","type":""},{"name":"pos","nativeSrc":"7691:3:83","nodeType":"YulTypedName","src":"7691:3:83","type":""}],"returnVariables":[{"name":"end","nativeSrc":"7699:3:83","nodeType":"YulTypedName","src":"7699:3:83","type":""}],"src":"7657:212:83"},{"body":{"nativeSrc":"8263:193:83","nodeType":"YulBlock","src":"8263:193:83","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"8280:3:83","nodeType":"YulIdentifier","src":"8280:3:83"},{"hexValue":"4661696c656420746f206465706c6f7920636f6e747261637420","kind":"string","nativeSrc":"8285:28:83","nodeType":"YulLiteral","src":"8285:28:83","type":"","value":"Failed to deploy contract "}],"functionName":{"name":"mstore","nativeSrc":"8273:6:83","nodeType":"YulIdentifier","src":"8273:6:83"},"nativeSrc":"8273:41:83","nodeType":"YulFunctionCall","src":"8273:41:83"},"nativeSrc":"8273:41:83","nodeType":"YulExpressionStatement","src":"8273:41:83"},{"nativeSrc":"8323:49:83","nodeType":"YulVariableDeclaration","src":"8323:49:83","value":{"arguments":[{"name":"value0","nativeSrc":"8351:6:83","nodeType":"YulIdentifier","src":"8351:6:83"},{"arguments":[{"name":"pos","nativeSrc":"8363:3:83","nodeType":"YulIdentifier","src":"8363:3:83"},{"kind":"number","nativeSrc":"8368:2:83","nodeType":"YulLiteral","src":"8368:2:83","type":"","value":"26"}],"functionName":{"name":"add","nativeSrc":"8359:3:83","nodeType":"YulIdentifier","src":"8359:3:83"},"nativeSrc":"8359:12:83","nodeType":"YulFunctionCall","src":"8359:12:83"}],"functionName":{"name":"abi_encode_string","nativeSrc":"8333:17:83","nodeType":"YulIdentifier","src":"8333:17:83"},"nativeSrc":"8333:39:83","nodeType":"YulFunctionCall","src":"8333:39:83"},"variables":[{"name":"_1","nativeSrc":"8327:2:83","nodeType":"YulTypedName","src":"8327:2:83","type":""}]},{"expression":{"arguments":[{"name":"_1","nativeSrc":"8388:2:83","nodeType":"YulIdentifier","src":"8388:2:83"},{"hexValue":"3a20","kind":"string","nativeSrc":"8392:4:83","nodeType":"YulLiteral","src":"8392:4:83","type":"","value":": "}],"functionName":{"name":"mstore","nativeSrc":"8381:6:83","nodeType":"YulIdentifier","src":"8381:6:83"},"nativeSrc":"8381:16:83","nodeType":"YulFunctionCall","src":"8381:16:83"},"nativeSrc":"8381:16:83","nodeType":"YulExpressionStatement","src":"8381:16:83"},{"nativeSrc":"8406:44:83","nodeType":"YulAssignment","src":"8406:44:83","value":{"arguments":[{"name":"value1","nativeSrc":"8431:6:83","nodeType":"YulIdentifier","src":"8431:6:83"},{"arguments":[{"name":"_1","nativeSrc":"8443:2:83","nodeType":"YulIdentifier","src":"8443:2:83"},{"kind":"number","nativeSrc":"8447:1:83","nodeType":"YulLiteral","src":"8447:1:83","type":"","value":"2"}],"functionName":{"name":"add","nativeSrc":"8439:3:83","nodeType":"YulIdentifier","src":"8439:3:83"},"nativeSrc":"8439:10:83","nodeType":"YulFunctionCall","src":"8439:10:83"}],"functionName":{"name":"abi_encode_string","nativeSrc":"8413:17:83","nodeType":"YulIdentifier","src":"8413:17:83"},"nativeSrc":"8413:37:83","nodeType":"YulFunctionCall","src":"8413:37:83"},"variableNames":[{"name":"end","nativeSrc":"8406:3:83","nodeType":"YulIdentifier","src":"8406:3:83"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_45942a044068f475a72b247d918918cfb3543fa9d2f925dce5c26b7172dbe289_t_string_memory_ptr_t_stringliteral_e64009107d042bdc478cc69a5433e4573ea2e8a23a46646c0ee241e30c888e73_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"7874:582:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"8231:3:83","nodeType":"YulTypedName","src":"8231:3:83","type":""},{"name":"value1","nativeSrc":"8236:6:83","nodeType":"YulTypedName","src":"8236:6:83","type":""},{"name":"value0","nativeSrc":"8244:6:83","nodeType":"YulTypedName","src":"8244:6:83","type":""}],"returnVariables":[{"name":"end","nativeSrc":"8255:3:83","nodeType":"YulTypedName","src":"8255:3:83","type":""}],"src":"7874:582:83"},{"body":{"nativeSrc":"8507:207:83","nodeType":"YulBlock","src":"8507:207:83","statements":[{"nativeSrc":"8517:19:83","nodeType":"YulAssignment","src":"8517:19:83","value":{"arguments":[{"kind":"number","nativeSrc":"8533:2:83","nodeType":"YulLiteral","src":"8533:2:83","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"8527:5:83","nodeType":"YulIdentifier","src":"8527:5:83"},"nativeSrc":"8527:9:83","nodeType":"YulFunctionCall","src":"8527:9:83"},"variableNames":[{"name":"memPtr","nativeSrc":"8517:6:83","nodeType":"YulIdentifier","src":"8517:6:83"}]},{"nativeSrc":"8545:35:83","nodeType":"YulVariableDeclaration","src":"8545:35:83","value":{"arguments":[{"name":"memPtr","nativeSrc":"8567:6:83","nodeType":"YulIdentifier","src":"8567:6:83"},{"kind":"number","nativeSrc":"8575:4:83","nodeType":"YulLiteral","src":"8575:4:83","type":"","value":"0x60"}],"functionName":{"name":"add","nativeSrc":"8563:3:83","nodeType":"YulIdentifier","src":"8563:3:83"},"nativeSrc":"8563:17:83","nodeType":"YulFunctionCall","src":"8563:17:83"},"variables":[{"name":"newFreePtr","nativeSrc":"8549:10:83","nodeType":"YulTypedName","src":"8549:10:83","type":""}]},{"body":{"nativeSrc":"8655:22:83","nodeType":"YulBlock","src":"8655:22:83","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"8657:16:83","nodeType":"YulIdentifier","src":"8657:16:83"},"nativeSrc":"8657:18:83","nodeType":"YulFunctionCall","src":"8657:18:83"},"nativeSrc":"8657:18:83","nodeType":"YulExpressionStatement","src":"8657:18:83"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nativeSrc":"8598:10:83","nodeType":"YulIdentifier","src":"8598:10:83"},{"kind":"number","nativeSrc":"8610:18:83","nodeType":"YulLiteral","src":"8610:18:83","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"8595:2:83","nodeType":"YulIdentifier","src":"8595:2:83"},"nativeSrc":"8595:34:83","nodeType":"YulFunctionCall","src":"8595:34:83"},{"arguments":[{"name":"newFreePtr","nativeSrc":"8634:10:83","nodeType":"YulIdentifier","src":"8634:10:83"},{"name":"memPtr","nativeSrc":"8646:6:83","nodeType":"YulIdentifier","src":"8646:6:83"}],"functionName":{"name":"lt","nativeSrc":"8631:2:83","nodeType":"YulIdentifier","src":"8631:2:83"},"nativeSrc":"8631:22:83","nodeType":"YulFunctionCall","src":"8631:22:83"}],"functionName":{"name":"or","nativeSrc":"8592:2:83","nodeType":"YulIdentifier","src":"8592:2:83"},"nativeSrc":"8592:62:83","nodeType":"YulFunctionCall","src":"8592:62:83"},"nativeSrc":"8589:88:83","nodeType":"YulIf","src":"8589:88:83"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"8693:2:83","nodeType":"YulLiteral","src":"8693:2:83","type":"","value":"64"},{"name":"newFreePtr","nativeSrc":"8697:10:83","nodeType":"YulIdentifier","src":"8697:10:83"}],"functionName":{"name":"mstore","nativeSrc":"8686:6:83","nodeType":"YulIdentifier","src":"8686:6:83"},"nativeSrc":"8686:22:83","nodeType":"YulFunctionCall","src":"8686:22:83"},"nativeSrc":"8686:22:83","nodeType":"YulExpressionStatement","src":"8686:22:83"}]},"name":"allocate_memory_3969","nativeSrc":"8461:253:83","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nativeSrc":"8496:6:83","nodeType":"YulTypedName","src":"8496:6:83","type":""}],"src":"8461:253:83"},{"body":{"nativeSrc":"8764:230:83","nodeType":"YulBlock","src":"8764:230:83","statements":[{"nativeSrc":"8774:19:83","nodeType":"YulAssignment","src":"8774:19:83","value":{"arguments":[{"kind":"number","nativeSrc":"8790:2:83","nodeType":"YulLiteral","src":"8790:2:83","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"8784:5:83","nodeType":"YulIdentifier","src":"8784:5:83"},"nativeSrc":"8784:9:83","nodeType":"YulFunctionCall","src":"8784:9:83"},"variableNames":[{"name":"memPtr","nativeSrc":"8774:6:83","nodeType":"YulIdentifier","src":"8774:6:83"}]},{"nativeSrc":"8802:58:83","nodeType":"YulVariableDeclaration","src":"8802:58:83","value":{"arguments":[{"name":"memPtr","nativeSrc":"8824:6:83","nodeType":"YulIdentifier","src":"8824:6:83"},{"arguments":[{"arguments":[{"name":"size","nativeSrc":"8840:4:83","nodeType":"YulIdentifier","src":"8840:4:83"},{"kind":"number","nativeSrc":"8846:2:83","nodeType":"YulLiteral","src":"8846:2:83","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"8836:3:83","nodeType":"YulIdentifier","src":"8836:3:83"},"nativeSrc":"8836:13:83","nodeType":"YulFunctionCall","src":"8836:13:83"},{"arguments":[{"kind":"number","nativeSrc":"8855:2:83","nodeType":"YulLiteral","src":"8855:2:83","type":"","value":"31"}],"functionName":{"name":"not","nativeSrc":"8851:3:83","nodeType":"YulIdentifier","src":"8851:3:83"},"nativeSrc":"8851:7:83","nodeType":"YulFunctionCall","src":"8851:7:83"}],"functionName":{"name":"and","nativeSrc":"8832:3:83","nodeType":"YulIdentifier","src":"8832:3:83"},"nativeSrc":"8832:27:83","nodeType":"YulFunctionCall","src":"8832:27:83"}],"functionName":{"name":"add","nativeSrc":"8820:3:83","nodeType":"YulIdentifier","src":"8820:3:83"},"nativeSrc":"8820:40:83","nodeType":"YulFunctionCall","src":"8820:40:83"},"variables":[{"name":"newFreePtr","nativeSrc":"8806:10:83","nodeType":"YulTypedName","src":"8806:10:83","type":""}]},{"body":{"nativeSrc":"8935:22:83","nodeType":"YulBlock","src":"8935:22:83","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"8937:16:83","nodeType":"YulIdentifier","src":"8937:16:83"},"nativeSrc":"8937:18:83","nodeType":"YulFunctionCall","src":"8937:18:83"},"nativeSrc":"8937:18:83","nodeType":"YulExpressionStatement","src":"8937:18:83"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nativeSrc":"8878:10:83","nodeType":"YulIdentifier","src":"8878:10:83"},{"kind":"number","nativeSrc":"8890:18:83","nodeType":"YulLiteral","src":"8890:18:83","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"8875:2:83","nodeType":"YulIdentifier","src":"8875:2:83"},"nativeSrc":"8875:34:83","nodeType":"YulFunctionCall","src":"8875:34:83"},{"arguments":[{"name":"newFreePtr","nativeSrc":"8914:10:83","nodeType":"YulIdentifier","src":"8914:10:83"},{"name":"memPtr","nativeSrc":"8926:6:83","nodeType":"YulIdentifier","src":"8926:6:83"}],"functionName":{"name":"lt","nativeSrc":"8911:2:83","nodeType":"YulIdentifier","src":"8911:2:83"},"nativeSrc":"8911:22:83","nodeType":"YulFunctionCall","src":"8911:22:83"}],"functionName":{"name":"or","nativeSrc":"8872:2:83","nodeType":"YulIdentifier","src":"8872:2:83"},"nativeSrc":"8872:62:83","nodeType":"YulFunctionCall","src":"8872:62:83"},"nativeSrc":"8869:88:83","nodeType":"YulIf","src":"8869:88:83"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"8973:2:83","nodeType":"YulLiteral","src":"8973:2:83","type":"","value":"64"},{"name":"newFreePtr","nativeSrc":"8977:10:83","nodeType":"YulIdentifier","src":"8977:10:83"}],"functionName":{"name":"mstore","nativeSrc":"8966:6:83","nodeType":"YulIdentifier","src":"8966:6:83"},"nativeSrc":"8966:22:83","nodeType":"YulFunctionCall","src":"8966:22:83"},"nativeSrc":"8966:22:83","nodeType":"YulExpressionStatement","src":"8966:22:83"}]},"name":"allocate_memory","nativeSrc":"8719:275:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nativeSrc":"8744:4:83","nodeType":"YulTypedName","src":"8744:4:83","type":""}],"returnVariables":[{"name":"memPtr","nativeSrc":"8753:6:83","nodeType":"YulTypedName","src":"8753:6:83","type":""}],"src":"8719:275:83"},{"body":{"nativeSrc":"9062:563:83","nodeType":"YulBlock","src":"9062:563:83","statements":[{"body":{"nativeSrc":"9111:16:83","nodeType":"YulBlock","src":"9111:16:83","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9120:1:83","nodeType":"YulLiteral","src":"9120:1:83","type":"","value":"0"},{"kind":"number","nativeSrc":"9123:1:83","nodeType":"YulLiteral","src":"9123:1:83","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9113:6:83","nodeType":"YulIdentifier","src":"9113:6:83"},"nativeSrc":"9113:12:83","nodeType":"YulFunctionCall","src":"9113:12:83"},"nativeSrc":"9113:12:83","nodeType":"YulExpressionStatement","src":"9113:12:83"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"9090:6:83","nodeType":"YulIdentifier","src":"9090:6:83"},{"kind":"number","nativeSrc":"9098:4:83","nodeType":"YulLiteral","src":"9098:4:83","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"9086:3:83","nodeType":"YulIdentifier","src":"9086:3:83"},"nativeSrc":"9086:17:83","nodeType":"YulFunctionCall","src":"9086:17:83"},{"name":"end","nativeSrc":"9105:3:83","nodeType":"YulIdentifier","src":"9105:3:83"}],"functionName":{"name":"slt","nativeSrc":"9082:3:83","nodeType":"YulIdentifier","src":"9082:3:83"},"nativeSrc":"9082:27:83","nodeType":"YulFunctionCall","src":"9082:27:83"}],"functionName":{"name":"iszero","nativeSrc":"9075:6:83","nodeType":"YulIdentifier","src":"9075:6:83"},"nativeSrc":"9075:35:83","nodeType":"YulFunctionCall","src":"9075:35:83"},"nativeSrc":"9072:55:83","nodeType":"YulIf","src":"9072:55:83"},{"nativeSrc":"9136:27:83","nodeType":"YulVariableDeclaration","src":"9136:27:83","value":{"arguments":[{"name":"offset","nativeSrc":"9156:6:83","nodeType":"YulIdentifier","src":"9156:6:83"}],"functionName":{"name":"mload","nativeSrc":"9150:5:83","nodeType":"YulIdentifier","src":"9150:5:83"},"nativeSrc":"9150:13:83","nodeType":"YulFunctionCall","src":"9150:13:83"},"variables":[{"name":"length","nativeSrc":"9140:6:83","nodeType":"YulTypedName","src":"9140:6:83","type":""}]},{"nativeSrc":"9172:28:83","nodeType":"YulVariableDeclaration","src":"9172:28:83","value":{"arguments":[{"name":"offset","nativeSrc":"9187:6:83","nodeType":"YulIdentifier","src":"9187:6:83"},{"kind":"number","nativeSrc":"9195:4:83","nodeType":"YulLiteral","src":"9195:4:83","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"9183:3:83","nodeType":"YulIdentifier","src":"9183:3:83"},"nativeSrc":"9183:17:83","nodeType":"YulFunctionCall","src":"9183:17:83"},"variables":[{"name":"src","nativeSrc":"9176:3:83","nodeType":"YulTypedName","src":"9176:3:83","type":""}]},{"nativeSrc":"9209:16:83","nodeType":"YulVariableDeclaration","src":"9209:16:83","value":{"kind":"number","nativeSrc":"9224:1:83","nodeType":"YulLiteral","src":"9224:1:83","type":"","value":"0"},"variables":[{"name":"array_1","nativeSrc":"9213:7:83","nodeType":"YulTypedName","src":"9213:7:83","type":""}]},{"nativeSrc":"9234:13:83","nodeType":"YulVariableDeclaration","src":"9234:13:83","value":{"kind":"number","nativeSrc":"9246:1:83","nodeType":"YulLiteral","src":"9246:1:83","type":"","value":"0"},"variables":[{"name":"size","nativeSrc":"9238:4:83","nodeType":"YulTypedName","src":"9238:4:83","type":""}]},{"body":{"nativeSrc":"9290:22:83","nodeType":"YulBlock","src":"9290:22:83","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"9292:16:83","nodeType":"YulIdentifier","src":"9292:16:83"},"nativeSrc":"9292:18:83","nodeType":"YulFunctionCall","src":"9292:18:83"},"nativeSrc":"9292:18:83","nodeType":"YulExpressionStatement","src":"9292:18:83"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"9262:6:83","nodeType":"YulIdentifier","src":"9262:6:83"},{"kind":"number","nativeSrc":"9270:18:83","nodeType":"YulLiteral","src":"9270:18:83","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"9259:2:83","nodeType":"YulIdentifier","src":"9259:2:83"},"nativeSrc":"9259:30:83","nodeType":"YulFunctionCall","src":"9259:30:83"},"nativeSrc":"9256:56:83","nodeType":"YulIf","src":"9256:56:83"},{"nativeSrc":"9321:48:83","nodeType":"YulAssignment","src":"9321:48:83","value":{"arguments":[{"arguments":[{"arguments":[{"name":"length","nativeSrc":"9341:6:83","nodeType":"YulIdentifier","src":"9341:6:83"},{"kind":"number","nativeSrc":"9349:2:83","nodeType":"YulLiteral","src":"9349:2:83","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"9337:3:83","nodeType":"YulIdentifier","src":"9337:3:83"},"nativeSrc":"9337:15:83","nodeType":"YulFunctionCall","src":"9337:15:83"},{"arguments":[{"kind":"number","nativeSrc":"9358:2:83","nodeType":"YulLiteral","src":"9358:2:83","type":"","value":"31"}],"functionName":{"name":"not","nativeSrc":"9354:3:83","nodeType":"YulIdentifier","src":"9354:3:83"},"nativeSrc":"9354:7:83","nodeType":"YulFunctionCall","src":"9354:7:83"}],"functionName":{"name":"and","nativeSrc":"9333:3:83","nodeType":"YulIdentifier","src":"9333:3:83"},"nativeSrc":"9333:29:83","nodeType":"YulFunctionCall","src":"9333:29:83"},{"kind":"number","nativeSrc":"9364:4:83","nodeType":"YulLiteral","src":"9364:4:83","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"9329:3:83","nodeType":"YulIdentifier","src":"9329:3:83"},"nativeSrc":"9329:40:83","nodeType":"YulFunctionCall","src":"9329:40:83"},"variableNames":[{"name":"size","nativeSrc":"9321:4:83","nodeType":"YulIdentifier","src":"9321:4:83"}]},{"nativeSrc":"9378:32:83","nodeType":"YulAssignment","src":"9378:32:83","value":{"arguments":[{"name":"size","nativeSrc":"9405:4:83","nodeType":"YulIdentifier","src":"9405:4:83"}],"functionName":{"name":"allocate_memory","nativeSrc":"9389:15:83","nodeType":"YulIdentifier","src":"9389:15:83"},"nativeSrc":"9389:21:83","nodeType":"YulFunctionCall","src":"9389:21:83"},"variableNames":[{"name":"array_1","nativeSrc":"9378:7:83","nodeType":"YulIdentifier","src":"9378:7:83"}]},{"expression":{"arguments":[{"name":"array_1","nativeSrc":"9426:7:83","nodeType":"YulIdentifier","src":"9426:7:83"},{"name":"length","nativeSrc":"9435:6:83","nodeType":"YulIdentifier","src":"9435:6:83"}],"functionName":{"name":"mstore","nativeSrc":"9419:6:83","nodeType":"YulIdentifier","src":"9419:6:83"},"nativeSrc":"9419:23:83","nodeType":"YulFunctionCall","src":"9419:23:83"},"nativeSrc":"9419:23:83","nodeType":"YulExpressionStatement","src":"9419:23:83"},{"body":{"nativeSrc":"9480:16:83","nodeType":"YulBlock","src":"9480:16:83","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9489:1:83","nodeType":"YulLiteral","src":"9489:1:83","type":"","value":"0"},{"kind":"number","nativeSrc":"9492:1:83","nodeType":"YulLiteral","src":"9492:1:83","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9482:6:83","nodeType":"YulIdentifier","src":"9482:6:83"},"nativeSrc":"9482:12:83","nodeType":"YulFunctionCall","src":"9482:12:83"},"nativeSrc":"9482:12:83","nodeType":"YulExpressionStatement","src":"9482:12:83"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nativeSrc":"9461:3:83","nodeType":"YulIdentifier","src":"9461:3:83"},{"name":"length","nativeSrc":"9466:6:83","nodeType":"YulIdentifier","src":"9466:6:83"}],"functionName":{"name":"add","nativeSrc":"9457:3:83","nodeType":"YulIdentifier","src":"9457:3:83"},"nativeSrc":"9457:16:83","nodeType":"YulFunctionCall","src":"9457:16:83"},{"name":"end","nativeSrc":"9475:3:83","nodeType":"YulIdentifier","src":"9475:3:83"}],"functionName":{"name":"gt","nativeSrc":"9454:2:83","nodeType":"YulIdentifier","src":"9454:2:83"},"nativeSrc":"9454:25:83","nodeType":"YulFunctionCall","src":"9454:25:83"},"nativeSrc":"9451:45:83","nodeType":"YulIf","src":"9451:45:83"},{"expression":{"arguments":[{"arguments":[{"name":"array_1","nativeSrc":"9515:7:83","nodeType":"YulIdentifier","src":"9515:7:83"},{"kind":"number","nativeSrc":"9524:4:83","nodeType":"YulLiteral","src":"9524:4:83","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"9511:3:83","nodeType":"YulIdentifier","src":"9511:3:83"},"nativeSrc":"9511:18:83","nodeType":"YulFunctionCall","src":"9511:18:83"},{"name":"src","nativeSrc":"9531:3:83","nodeType":"YulIdentifier","src":"9531:3:83"},{"name":"length","nativeSrc":"9536:6:83","nodeType":"YulIdentifier","src":"9536:6:83"}],"functionName":{"name":"mcopy","nativeSrc":"9505:5:83","nodeType":"YulIdentifier","src":"9505:5:83"},"nativeSrc":"9505:38:83","nodeType":"YulFunctionCall","src":"9505:38:83"},"nativeSrc":"9505:38:83","nodeType":"YulExpressionStatement","src":"9505:38:83"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"array_1","nativeSrc":"9567:7:83","nodeType":"YulIdentifier","src":"9567:7:83"},{"name":"length","nativeSrc":"9576:6:83","nodeType":"YulIdentifier","src":"9576:6:83"}],"functionName":{"name":"add","nativeSrc":"9563:3:83","nodeType":"YulIdentifier","src":"9563:3:83"},"nativeSrc":"9563:20:83","nodeType":"YulFunctionCall","src":"9563:20:83"},{"kind":"number","nativeSrc":"9585:4:83","nodeType":"YulLiteral","src":"9585:4:83","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"9559:3:83","nodeType":"YulIdentifier","src":"9559:3:83"},"nativeSrc":"9559:31:83","nodeType":"YulFunctionCall","src":"9559:31:83"},{"kind":"number","nativeSrc":"9592:1:83","nodeType":"YulLiteral","src":"9592:1:83","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"9552:6:83","nodeType":"YulIdentifier","src":"9552:6:83"},"nativeSrc":"9552:42:83","nodeType":"YulFunctionCall","src":"9552:42:83"},"nativeSrc":"9552:42:83","nodeType":"YulExpressionStatement","src":"9552:42:83"},{"nativeSrc":"9603:16:83","nodeType":"YulAssignment","src":"9603:16:83","value":{"name":"array_1","nativeSrc":"9612:7:83","nodeType":"YulIdentifier","src":"9612:7:83"},"variableNames":[{"name":"array","nativeSrc":"9603:5:83","nodeType":"YulIdentifier","src":"9603:5:83"}]}]},"name":"abi_decode_bytes_fromMemory","nativeSrc":"8999:626:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"9036:6:83","nodeType":"YulTypedName","src":"9036:6:83","type":""},{"name":"end","nativeSrc":"9044:3:83","nodeType":"YulTypedName","src":"9044:3:83","type":""}],"returnVariables":[{"name":"array","nativeSrc":"9052:5:83","nodeType":"YulTypedName","src":"9052:5:83","type":""}],"src":"8999:626:83"},{"body":{"nativeSrc":"9720:245:83","nodeType":"YulBlock","src":"9720:245:83","statements":[{"body":{"nativeSrc":"9766:16:83","nodeType":"YulBlock","src":"9766:16:83","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9775:1:83","nodeType":"YulLiteral","src":"9775:1:83","type":"","value":"0"},{"kind":"number","nativeSrc":"9778:1:83","nodeType":"YulLiteral","src":"9778:1:83","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9768:6:83","nodeType":"YulIdentifier","src":"9768:6:83"},"nativeSrc":"9768:12:83","nodeType":"YulFunctionCall","src":"9768:12:83"},"nativeSrc":"9768:12:83","nodeType":"YulExpressionStatement","src":"9768:12:83"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"9741:7:83","nodeType":"YulIdentifier","src":"9741:7:83"},{"name":"headStart","nativeSrc":"9750:9:83","nodeType":"YulIdentifier","src":"9750:9:83"}],"functionName":{"name":"sub","nativeSrc":"9737:3:83","nodeType":"YulIdentifier","src":"9737:3:83"},"nativeSrc":"9737:23:83","nodeType":"YulFunctionCall","src":"9737:23:83"},{"kind":"number","nativeSrc":"9762:2:83","nodeType":"YulLiteral","src":"9762:2:83","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"9733:3:83","nodeType":"YulIdentifier","src":"9733:3:83"},"nativeSrc":"9733:32:83","nodeType":"YulFunctionCall","src":"9733:32:83"},"nativeSrc":"9730:52:83","nodeType":"YulIf","src":"9730:52:83"},{"nativeSrc":"9791:30:83","nodeType":"YulVariableDeclaration","src":"9791:30:83","value":{"arguments":[{"name":"headStart","nativeSrc":"9811:9:83","nodeType":"YulIdentifier","src":"9811:9:83"}],"functionName":{"name":"mload","nativeSrc":"9805:5:83","nodeType":"YulIdentifier","src":"9805:5:83"},"nativeSrc":"9805:16:83","nodeType":"YulFunctionCall","src":"9805:16:83"},"variables":[{"name":"offset","nativeSrc":"9795:6:83","nodeType":"YulTypedName","src":"9795:6:83","type":""}]},{"body":{"nativeSrc":"9864:16:83","nodeType":"YulBlock","src":"9864:16:83","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9873:1:83","nodeType":"YulLiteral","src":"9873:1:83","type":"","value":"0"},{"kind":"number","nativeSrc":"9876:1:83","nodeType":"YulLiteral","src":"9876:1:83","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9866:6:83","nodeType":"YulIdentifier","src":"9866:6:83"},"nativeSrc":"9866:12:83","nodeType":"YulFunctionCall","src":"9866:12:83"},"nativeSrc":"9866:12:83","nodeType":"YulExpressionStatement","src":"9866:12:83"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"9836:6:83","nodeType":"YulIdentifier","src":"9836:6:83"},{"kind":"number","nativeSrc":"9844:18:83","nodeType":"YulLiteral","src":"9844:18:83","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"9833:2:83","nodeType":"YulIdentifier","src":"9833:2:83"},"nativeSrc":"9833:30:83","nodeType":"YulFunctionCall","src":"9833:30:83"},"nativeSrc":"9830:50:83","nodeType":"YulIf","src":"9830:50:83"},{"nativeSrc":"9889:70:83","nodeType":"YulAssignment","src":"9889:70:83","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9931:9:83","nodeType":"YulIdentifier","src":"9931:9:83"},{"name":"offset","nativeSrc":"9942:6:83","nodeType":"YulIdentifier","src":"9942:6:83"}],"functionName":{"name":"add","nativeSrc":"9927:3:83","nodeType":"YulIdentifier","src":"9927:3:83"},"nativeSrc":"9927:22:83","nodeType":"YulFunctionCall","src":"9927:22:83"},{"name":"dataEnd","nativeSrc":"9951:7:83","nodeType":"YulIdentifier","src":"9951:7:83"}],"functionName":{"name":"abi_decode_bytes_fromMemory","nativeSrc":"9899:27:83","nodeType":"YulIdentifier","src":"9899:27:83"},"nativeSrc":"9899:60:83","nodeType":"YulFunctionCall","src":"9899:60:83"},"variableNames":[{"name":"value0","nativeSrc":"9889:6:83","nodeType":"YulIdentifier","src":"9889:6:83"}]}]},"name":"abi_decode_tuple_t_bytes_memory_ptr_fromMemory","nativeSrc":"9630:335:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"9686:9:83","nodeType":"YulTypedName","src":"9686:9:83","type":""},{"name":"dataEnd","nativeSrc":"9697:7:83","nodeType":"YulTypedName","src":"9697:7:83","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"9709:6:83","nodeType":"YulTypedName","src":"9709:6:83","type":""}],"src":"9630:335:83"},{"body":{"nativeSrc":"10153:80:83","nodeType":"YulBlock","src":"10153:80:83","statements":[{"nativeSrc":"10163:64:83","nodeType":"YulAssignment","src":"10163:64:83","value":{"arguments":[{"name":"value1","nativeSrc":"10188:6:83","nodeType":"YulIdentifier","src":"10188:6:83"},{"arguments":[{"name":"value0","nativeSrc":"10214:6:83","nodeType":"YulIdentifier","src":"10214:6:83"},{"name":"pos","nativeSrc":"10222:3:83","nodeType":"YulIdentifier","src":"10222:3:83"}],"functionName":{"name":"abi_encode_string","nativeSrc":"10196:17:83","nodeType":"YulIdentifier","src":"10196:17:83"},"nativeSrc":"10196:30:83","nodeType":"YulFunctionCall","src":"10196:30:83"}],"functionName":{"name":"abi_encode_string","nativeSrc":"10170:17:83","nodeType":"YulIdentifier","src":"10170:17:83"},"nativeSrc":"10170:57:83","nodeType":"YulFunctionCall","src":"10170:57:83"},"variableNames":[{"name":"end","nativeSrc":"10163:3:83","nodeType":"YulIdentifier","src":"10163:3:83"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr_t_bytes_memory_ptr__to_t_bytes_memory_ptr_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"9970:263:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"10121:3:83","nodeType":"YulTypedName","src":"10121:3:83","type":""},{"name":"value1","nativeSrc":"10126:6:83","nodeType":"YulTypedName","src":"10126:6:83","type":""},{"name":"value0","nativeSrc":"10134:6:83","nodeType":"YulTypedName","src":"10134:6:83","type":""}],"returnVariables":[{"name":"end","nativeSrc":"10145:3:83","nodeType":"YulTypedName","src":"10145:3:83","type":""}],"src":"9970:263:83"},{"body":{"nativeSrc":"10728:318:83","nodeType":"YulBlock","src":"10728:318:83","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"10745:3:83","nodeType":"YulIdentifier","src":"10745:3:83"},{"hexValue":"4661696c656420746f206465706c6f7920636f6e747261637420","kind":"string","nativeSrc":"10750:28:83","nodeType":"YulLiteral","src":"10750:28:83","type":"","value":"Failed to deploy contract "}],"functionName":{"name":"mstore","nativeSrc":"10738:6:83","nodeType":"YulIdentifier","src":"10738:6:83"},"nativeSrc":"10738:41:83","nodeType":"YulFunctionCall","src":"10738:41:83"},"nativeSrc":"10738:41:83","nodeType":"YulExpressionStatement","src":"10738:41:83"},{"nativeSrc":"10788:49:83","nodeType":"YulVariableDeclaration","src":"10788:49:83","value":{"arguments":[{"name":"value0","nativeSrc":"10816:6:83","nodeType":"YulIdentifier","src":"10816:6:83"},{"arguments":[{"name":"pos","nativeSrc":"10828:3:83","nodeType":"YulIdentifier","src":"10828:3:83"},{"kind":"number","nativeSrc":"10833:2:83","nodeType":"YulLiteral","src":"10833:2:83","type":"","value":"26"}],"functionName":{"name":"add","nativeSrc":"10824:3:83","nodeType":"YulIdentifier","src":"10824:3:83"},"nativeSrc":"10824:12:83","nodeType":"YulFunctionCall","src":"10824:12:83"}],"functionName":{"name":"abi_encode_string","nativeSrc":"10798:17:83","nodeType":"YulIdentifier","src":"10798:17:83"},"nativeSrc":"10798:39:83","nodeType":"YulFunctionCall","src":"10798:39:83"},"variables":[{"name":"_1","nativeSrc":"10792:2:83","nodeType":"YulTypedName","src":"10792:2:83","type":""}]},{"expression":{"arguments":[{"name":"_1","nativeSrc":"10853:2:83","nodeType":"YulIdentifier","src":"10853:2:83"},{"kind":"number","nativeSrc":"10857:66:83","nodeType":"YulLiteral","src":"10857:66:83","type":"","value":"0x207573696e6720636f6e7374727563746f722064617461202200000000000000"}],"functionName":{"name":"mstore","nativeSrc":"10846:6:83","nodeType":"YulIdentifier","src":"10846:6:83"},"nativeSrc":"10846:78:83","nodeType":"YulFunctionCall","src":"10846:78:83"},"nativeSrc":"10846:78:83","nodeType":"YulExpressionStatement","src":"10846:78:83"},{"nativeSrc":"10933:48:83","nodeType":"YulVariableDeclaration","src":"10933:48:83","value":{"arguments":[{"name":"value1","nativeSrc":"10961:6:83","nodeType":"YulIdentifier","src":"10961:6:83"},{"arguments":[{"name":"_1","nativeSrc":"10973:2:83","nodeType":"YulIdentifier","src":"10973:2:83"},{"kind":"number","nativeSrc":"10977:2:83","nodeType":"YulLiteral","src":"10977:2:83","type":"","value":"25"}],"functionName":{"name":"add","nativeSrc":"10969:3:83","nodeType":"YulIdentifier","src":"10969:3:83"},"nativeSrc":"10969:11:83","nodeType":"YulFunctionCall","src":"10969:11:83"}],"functionName":{"name":"abi_encode_string","nativeSrc":"10943:17:83","nodeType":"YulIdentifier","src":"10943:17:83"},"nativeSrc":"10943:38:83","nodeType":"YulFunctionCall","src":"10943:38:83"},"variables":[{"name":"_2","nativeSrc":"10937:2:83","nodeType":"YulTypedName","src":"10937:2:83","type":""}]},{"expression":{"arguments":[{"name":"_2","nativeSrc":"10997:2:83","nodeType":"YulIdentifier","src":"10997:2:83"},{"arguments":[{"kind":"number","nativeSrc":"11005:3:83","nodeType":"YulLiteral","src":"11005:3:83","type":"","value":"249"},{"kind":"number","nativeSrc":"11010:2:83","nodeType":"YulLiteral","src":"11010:2:83","type":"","value":"17"}],"functionName":{"name":"shl","nativeSrc":"11001:3:83","nodeType":"YulIdentifier","src":"11001:3:83"},"nativeSrc":"11001:12:83","nodeType":"YulFunctionCall","src":"11001:12:83"}],"functionName":{"name":"mstore","nativeSrc":"10990:6:83","nodeType":"YulIdentifier","src":"10990:6:83"},"nativeSrc":"10990:24:83","nodeType":"YulFunctionCall","src":"10990:24:83"},"nativeSrc":"10990:24:83","nodeType":"YulExpressionStatement","src":"10990:24:83"},{"nativeSrc":"11023:17:83","nodeType":"YulAssignment","src":"11023:17:83","value":{"arguments":[{"name":"_2","nativeSrc":"11034:2:83","nodeType":"YulIdentifier","src":"11034:2:83"},{"kind":"number","nativeSrc":"11038:1:83","nodeType":"YulLiteral","src":"11038:1:83","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"11030:3:83","nodeType":"YulIdentifier","src":"11030:3:83"},"nativeSrc":"11030:10:83","nodeType":"YulFunctionCall","src":"11030:10:83"},"variableNames":[{"name":"end","nativeSrc":"11023:3:83","nodeType":"YulIdentifier","src":"11023:3:83"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_45942a044068f475a72b247d918918cfb3543fa9d2f925dce5c26b7172dbe289_t_string_memory_ptr_t_stringliteral_aa9d79cc8375f222c2818bc0c013f6b7c3934b6f21aedb1df102a8f780a1b664_t_string_memory_ptr_t_stringliteral_6e9f33448a4153023cdaf3eb759f1afdc24aba433a3e18b683f8c04a6eaa69f0__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"10238:808:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"10696:3:83","nodeType":"YulTypedName","src":"10696:3:83","type":""},{"name":"value1","nativeSrc":"10701:6:83","nodeType":"YulTypedName","src":"10701:6:83","type":""},{"name":"value0","nativeSrc":"10709:6:83","nodeType":"YulTypedName","src":"10709:6:83","type":""}],"returnVariables":[{"name":"end","nativeSrc":"10720:3:83","nodeType":"YulTypedName","src":"10720:3:83","type":""}],"src":"10238:808:83"},{"body":{"nativeSrc":"11273:242:83","nodeType":"YulBlock","src":"11273:242:83","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"11290:9:83","nodeType":"YulIdentifier","src":"11290:9:83"},{"kind":"number","nativeSrc":"11301:2:83","nodeType":"YulLiteral","src":"11301:2:83","type":"","value":"64"}],"functionName":{"name":"mstore","nativeSrc":"11283:6:83","nodeType":"YulIdentifier","src":"11283:6:83"},"nativeSrc":"11283:21:83","nodeType":"YulFunctionCall","src":"11283:21:83"},"nativeSrc":"11283:21:83","nodeType":"YulExpressionStatement","src":"11283:21:83"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11324:9:83","nodeType":"YulIdentifier","src":"11324:9:83"},{"kind":"number","nativeSrc":"11335:2:83","nodeType":"YulLiteral","src":"11335:2:83","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"11320:3:83","nodeType":"YulIdentifier","src":"11320:3:83"},"nativeSrc":"11320:18:83","nodeType":"YulFunctionCall","src":"11320:18:83"},{"kind":"number","nativeSrc":"11340:2:83","nodeType":"YulLiteral","src":"11340:2:83","type":"","value":"11"}],"functionName":{"name":"mstore","nativeSrc":"11313:6:83","nodeType":"YulIdentifier","src":"11313:6:83"},"nativeSrc":"11313:30:83","nodeType":"YulFunctionCall","src":"11313:30:83"},"nativeSrc":"11313:30:83","nodeType":"YulExpressionStatement","src":"11313:30:83"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11363:9:83","nodeType":"YulIdentifier","src":"11363:9:83"},{"kind":"number","nativeSrc":"11374:2:83","nodeType":"YulLiteral","src":"11374:2:83","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"11359:3:83","nodeType":"YulIdentifier","src":"11359:3:83"},"nativeSrc":"11359:18:83","nodeType":"YulFunctionCall","src":"11359:18:83"},{"hexValue":"464f554e4452595f4f5554","kind":"string","nativeSrc":"11379:13:83","nodeType":"YulLiteral","src":"11379:13:83","type":"","value":"FOUNDRY_OUT"}],"functionName":{"name":"mstore","nativeSrc":"11352:6:83","nodeType":"YulIdentifier","src":"11352:6:83"},"nativeSrc":"11352:41:83","nodeType":"YulFunctionCall","src":"11352:41:83"},"nativeSrc":"11352:41:83","nodeType":"YulExpressionStatement","src":"11352:41:83"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11413:9:83","nodeType":"YulIdentifier","src":"11413:9:83"},{"kind":"number","nativeSrc":"11424:4:83","nodeType":"YulLiteral","src":"11424:4:83","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"11409:3:83","nodeType":"YulIdentifier","src":"11409:3:83"},"nativeSrc":"11409:20:83","nodeType":"YulFunctionCall","src":"11409:20:83"},{"kind":"number","nativeSrc":"11431:3:83","nodeType":"YulLiteral","src":"11431:3:83","type":"","value":"128"}],"functionName":{"name":"mstore","nativeSrc":"11402:6:83","nodeType":"YulIdentifier","src":"11402:6:83"},"nativeSrc":"11402:33:83","nodeType":"YulFunctionCall","src":"11402:33:83"},"nativeSrc":"11402:33:83","nodeType":"YulExpressionStatement","src":"11402:33:83"},{"nativeSrc":"11444:65:83","nodeType":"YulAssignment","src":"11444:65:83","value":{"arguments":[{"name":"value0","nativeSrc":"11481:6:83","nodeType":"YulIdentifier","src":"11481:6:83"},{"arguments":[{"name":"headStart","nativeSrc":"11493:9:83","nodeType":"YulIdentifier","src":"11493:9:83"},{"kind":"number","nativeSrc":"11504:3:83","nodeType":"YulLiteral","src":"11504:3:83","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"11489:3:83","nodeType":"YulIdentifier","src":"11489:3:83"},"nativeSrc":"11489:19:83","nodeType":"YulFunctionCall","src":"11489:19:83"}],"functionName":{"name":"abi_encode_string_memory_ptr","nativeSrc":"11452:28:83","nodeType":"YulIdentifier","src":"11452:28:83"},"nativeSrc":"11452:57:83","nodeType":"YulFunctionCall","src":"11452:57:83"},"variableNames":[{"name":"tail","nativeSrc":"11444:4:83","nodeType":"YulIdentifier","src":"11444:4:83"}]}]},"name":"abi_encode_tuple_t_stringliteral_ae11223e55da1785bb01a018df547ee9df83f6bfc03bcf9ee05fa29541f23f06_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed","nativeSrc":"11051:464:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"11242:9:83","nodeType":"YulTypedName","src":"11242:9:83","type":""},{"name":"value0","nativeSrc":"11253:6:83","nodeType":"YulTypedName","src":"11253:6:83","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"11264:4:83","nodeType":"YulTypedName","src":"11264:4:83","type":""}],"src":"11051:464:83"},{"body":{"nativeSrc":"11611:245:83","nodeType":"YulBlock","src":"11611:245:83","statements":[{"body":{"nativeSrc":"11657:16:83","nodeType":"YulBlock","src":"11657:16:83","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"11666:1:83","nodeType":"YulLiteral","src":"11666:1:83","type":"","value":"0"},{"kind":"number","nativeSrc":"11669:1:83","nodeType":"YulLiteral","src":"11669:1:83","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"11659:6:83","nodeType":"YulIdentifier","src":"11659:6:83"},"nativeSrc":"11659:12:83","nodeType":"YulFunctionCall","src":"11659:12:83"},"nativeSrc":"11659:12:83","nodeType":"YulExpressionStatement","src":"11659:12:83"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"11632:7:83","nodeType":"YulIdentifier","src":"11632:7:83"},{"name":"headStart","nativeSrc":"11641:9:83","nodeType":"YulIdentifier","src":"11641:9:83"}],"functionName":{"name":"sub","nativeSrc":"11628:3:83","nodeType":"YulIdentifier","src":"11628:3:83"},"nativeSrc":"11628:23:83","nodeType":"YulFunctionCall","src":"11628:23:83"},{"kind":"number","nativeSrc":"11653:2:83","nodeType":"YulLiteral","src":"11653:2:83","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"11624:3:83","nodeType":"YulIdentifier","src":"11624:3:83"},"nativeSrc":"11624:32:83","nodeType":"YulFunctionCall","src":"11624:32:83"},"nativeSrc":"11621:52:83","nodeType":"YulIf","src":"11621:52:83"},{"nativeSrc":"11682:30:83","nodeType":"YulVariableDeclaration","src":"11682:30:83","value":{"arguments":[{"name":"headStart","nativeSrc":"11702:9:83","nodeType":"YulIdentifier","src":"11702:9:83"}],"functionName":{"name":"mload","nativeSrc":"11696:5:83","nodeType":"YulIdentifier","src":"11696:5:83"},"nativeSrc":"11696:16:83","nodeType":"YulFunctionCall","src":"11696:16:83"},"variables":[{"name":"offset","nativeSrc":"11686:6:83","nodeType":"YulTypedName","src":"11686:6:83","type":""}]},{"body":{"nativeSrc":"11755:16:83","nodeType":"YulBlock","src":"11755:16:83","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"11764:1:83","nodeType":"YulLiteral","src":"11764:1:83","type":"","value":"0"},{"kind":"number","nativeSrc":"11767:1:83","nodeType":"YulLiteral","src":"11767:1:83","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"11757:6:83","nodeType":"YulIdentifier","src":"11757:6:83"},"nativeSrc":"11757:12:83","nodeType":"YulFunctionCall","src":"11757:12:83"},"nativeSrc":"11757:12:83","nodeType":"YulExpressionStatement","src":"11757:12:83"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"11727:6:83","nodeType":"YulIdentifier","src":"11727:6:83"},{"kind":"number","nativeSrc":"11735:18:83","nodeType":"YulLiteral","src":"11735:18:83","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"11724:2:83","nodeType":"YulIdentifier","src":"11724:2:83"},"nativeSrc":"11724:30:83","nodeType":"YulFunctionCall","src":"11724:30:83"},"nativeSrc":"11721:50:83","nodeType":"YulIf","src":"11721:50:83"},{"nativeSrc":"11780:70:83","nodeType":"YulAssignment","src":"11780:70:83","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11822:9:83","nodeType":"YulIdentifier","src":"11822:9:83"},{"name":"offset","nativeSrc":"11833:6:83","nodeType":"YulIdentifier","src":"11833:6:83"}],"functionName":{"name":"add","nativeSrc":"11818:3:83","nodeType":"YulIdentifier","src":"11818:3:83"},"nativeSrc":"11818:22:83","nodeType":"YulFunctionCall","src":"11818:22:83"},{"name":"dataEnd","nativeSrc":"11842:7:83","nodeType":"YulIdentifier","src":"11842:7:83"}],"functionName":{"name":"abi_decode_bytes_fromMemory","nativeSrc":"11790:27:83","nodeType":"YulIdentifier","src":"11790:27:83"},"nativeSrc":"11790:60:83","nodeType":"YulFunctionCall","src":"11790:60:83"},"variableNames":[{"name":"value0","nativeSrc":"11780:6:83","nodeType":"YulIdentifier","src":"11780:6:83"}]}]},"name":"abi_decode_tuple_t_string_memory_ptr_fromMemory","nativeSrc":"11520:336:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"11577:9:83","nodeType":"YulTypedName","src":"11577:9:83","type":""},{"name":"dataEnd","nativeSrc":"11588:7:83","nodeType":"YulTypedName","src":"11588:7:83","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"11600:6:83","nodeType":"YulTypedName","src":"11600:6:83","type":""}],"src":"11520:336:83"},{"body":{"nativeSrc":"12548:350:83","nodeType":"YulBlock","src":"12548:350:83","statements":[{"nativeSrc":"12558:40:83","nodeType":"YulVariableDeclaration","src":"12558:40:83","value":{"arguments":[{"name":"value0","nativeSrc":"12586:6:83","nodeType":"YulIdentifier","src":"12586:6:83"},{"name":"pos","nativeSrc":"12594:3:83","nodeType":"YulIdentifier","src":"12594:3:83"}],"functionName":{"name":"abi_encode_string","nativeSrc":"12568:17:83","nodeType":"YulIdentifier","src":"12568:17:83"},"nativeSrc":"12568:30:83","nodeType":"YulFunctionCall","src":"12568:30:83"},"variables":[{"name":"_1","nativeSrc":"12562:2:83","nodeType":"YulTypedName","src":"12562:2:83","type":""}]},{"expression":{"arguments":[{"name":"_1","nativeSrc":"12614:2:83","nodeType":"YulIdentifier","src":"12614:2:83"},{"hexValue":"2f","kind":"string","nativeSrc":"12618:3:83","nodeType":"YulLiteral","src":"12618:3:83","type":"","value":"/"}],"functionName":{"name":"mstore","nativeSrc":"12607:6:83","nodeType":"YulIdentifier","src":"12607:6:83"},"nativeSrc":"12607:15:83","nodeType":"YulFunctionCall","src":"12607:15:83"},"nativeSrc":"12607:15:83","nodeType":"YulExpressionStatement","src":"12607:15:83"},{"nativeSrc":"12631:47:83","nodeType":"YulVariableDeclaration","src":"12631:47:83","value":{"arguments":[{"name":"value1","nativeSrc":"12659:6:83","nodeType":"YulIdentifier","src":"12659:6:83"},{"arguments":[{"name":"_1","nativeSrc":"12671:2:83","nodeType":"YulIdentifier","src":"12671:2:83"},{"kind":"number","nativeSrc":"12675:1:83","nodeType":"YulLiteral","src":"12675:1:83","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"12667:3:83","nodeType":"YulIdentifier","src":"12667:3:83"},"nativeSrc":"12667:10:83","nodeType":"YulFunctionCall","src":"12667:10:83"}],"functionName":{"name":"abi_encode_string","nativeSrc":"12641:17:83","nodeType":"YulIdentifier","src":"12641:17:83"},"nativeSrc":"12641:37:83","nodeType":"YulFunctionCall","src":"12641:37:83"},"variables":[{"name":"_2","nativeSrc":"12635:2:83","nodeType":"YulTypedName","src":"12635:2:83","type":""}]},{"expression":{"arguments":[{"name":"_2","nativeSrc":"12694:2:83","nodeType":"YulIdentifier","src":"12694:2:83"},{"hexValue":"2f","kind":"string","nativeSrc":"12698:3:83","nodeType":"YulLiteral","src":"12698:3:83","type":"","value":"/"}],"functionName":{"name":"mstore","nativeSrc":"12687:6:83","nodeType":"YulIdentifier","src":"12687:6:83"},"nativeSrc":"12687:15:83","nodeType":"YulFunctionCall","src":"12687:15:83"},"nativeSrc":"12687:15:83","nodeType":"YulExpressionStatement","src":"12687:15:83"},{"nativeSrc":"12711:47:83","nodeType":"YulVariableDeclaration","src":"12711:47:83","value":{"arguments":[{"name":"value2","nativeSrc":"12739:6:83","nodeType":"YulIdentifier","src":"12739:6:83"},{"arguments":[{"name":"_2","nativeSrc":"12751:2:83","nodeType":"YulIdentifier","src":"12751:2:83"},{"kind":"number","nativeSrc":"12755:1:83","nodeType":"YulLiteral","src":"12755:1:83","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"12747:3:83","nodeType":"YulIdentifier","src":"12747:3:83"},"nativeSrc":"12747:10:83","nodeType":"YulFunctionCall","src":"12747:10:83"}],"functionName":{"name":"abi_encode_string","nativeSrc":"12721:17:83","nodeType":"YulIdentifier","src":"12721:17:83"},"nativeSrc":"12721:37:83","nodeType":"YulFunctionCall","src":"12721:37:83"},"variables":[{"name":"_3","nativeSrc":"12715:2:83","nodeType":"YulTypedName","src":"12715:2:83","type":""}]},{"expression":{"arguments":[{"name":"_3","nativeSrc":"12774:2:83","nodeType":"YulIdentifier","src":"12774:2:83"},{"hexValue":"2f","kind":"string","nativeSrc":"12778:3:83","nodeType":"YulLiteral","src":"12778:3:83","type":"","value":"/"}],"functionName":{"name":"mstore","nativeSrc":"12767:6:83","nodeType":"YulIdentifier","src":"12767:6:83"},"nativeSrc":"12767:15:83","nodeType":"YulFunctionCall","src":"12767:15:83"},"nativeSrc":"12767:15:83","nodeType":"YulExpressionStatement","src":"12767:15:83"},{"nativeSrc":"12791:47:83","nodeType":"YulVariableDeclaration","src":"12791:47:83","value":{"arguments":[{"name":"value3","nativeSrc":"12819:6:83","nodeType":"YulIdentifier","src":"12819:6:83"},{"arguments":[{"name":"_3","nativeSrc":"12831:2:83","nodeType":"YulIdentifier","src":"12831:2:83"},{"kind":"number","nativeSrc":"12835:1:83","nodeType":"YulLiteral","src":"12835:1:83","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"12827:3:83","nodeType":"YulIdentifier","src":"12827:3:83"},"nativeSrc":"12827:10:83","nodeType":"YulFunctionCall","src":"12827:10:83"}],"functionName":{"name":"abi_encode_string","nativeSrc":"12801:17:83","nodeType":"YulIdentifier","src":"12801:17:83"},"nativeSrc":"12801:37:83","nodeType":"YulFunctionCall","src":"12801:37:83"},"variables":[{"name":"_4","nativeSrc":"12795:2:83","nodeType":"YulTypedName","src":"12795:2:83","type":""}]},{"expression":{"arguments":[{"name":"_4","nativeSrc":"12854:2:83","nodeType":"YulIdentifier","src":"12854:2:83"},{"hexValue":"2e6a736f6e","kind":"string","nativeSrc":"12858:7:83","nodeType":"YulLiteral","src":"12858:7:83","type":"","value":".json"}],"functionName":{"name":"mstore","nativeSrc":"12847:6:83","nodeType":"YulIdentifier","src":"12847:6:83"},"nativeSrc":"12847:19:83","nodeType":"YulFunctionCall","src":"12847:19:83"},"nativeSrc":"12847:19:83","nodeType":"YulExpressionStatement","src":"12847:19:83"},{"nativeSrc":"12875:17:83","nodeType":"YulAssignment","src":"12875:17:83","value":{"arguments":[{"name":"_4","nativeSrc":"12886:2:83","nodeType":"YulIdentifier","src":"12886:2:83"},{"kind":"number","nativeSrc":"12890:1:83","nodeType":"YulLiteral","src":"12890:1:83","type":"","value":"5"}],"functionName":{"name":"add","nativeSrc":"12882:3:83","nodeType":"YulIdentifier","src":"12882:3:83"},"nativeSrc":"12882:10:83","nodeType":"YulFunctionCall","src":"12882:10:83"},"variableNames":[{"name":"end","nativeSrc":"12875:3:83","nodeType":"YulIdentifier","src":"12875:3:83"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_fba9715e477e68952d3f1df7a185b3708aadad50ec10cc793973864023868527_t_string_memory_ptr_t_stringliteral_fba9715e477e68952d3f1df7a185b3708aadad50ec10cc793973864023868527_t_string_memory_ptr_t_stringliteral_fba9715e477e68952d3f1df7a185b3708aadad50ec10cc793973864023868527_t_string_memory_ptr_t_stringliteral_94311adc0a0cd4e10be11b23bd4316b8cffa4adf693e8f96f5c075aa439a7972__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"11861:1037:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"12500:3:83","nodeType":"YulTypedName","src":"12500:3:83","type":""},{"name":"value3","nativeSrc":"12505:6:83","nodeType":"YulTypedName","src":"12505:6:83","type":""},{"name":"value2","nativeSrc":"12513:6:83","nodeType":"YulTypedName","src":"12513:6:83","type":""},{"name":"value1","nativeSrc":"12521:6:83","nodeType":"YulTypedName","src":"12521:6:83","type":""},{"name":"value0","nativeSrc":"12529:6:83","nodeType":"YulTypedName","src":"12529:6:83","type":""}],"returnVariables":[{"name":"end","nativeSrc":"12540:3:83","nodeType":"YulTypedName","src":"12540:3:83","type":""}],"src":"11861:1037:83"},{"body":{"nativeSrc":"13125:273:83","nodeType":"YulBlock","src":"13125:273:83","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"13142:9:83","nodeType":"YulIdentifier","src":"13142:9:83"},{"kind":"number","nativeSrc":"13153:2:83","nodeType":"YulLiteral","src":"13153:2:83","type":"","value":"64"}],"functionName":{"name":"mstore","nativeSrc":"13135:6:83","nodeType":"YulIdentifier","src":"13135:6:83"},"nativeSrc":"13135:21:83","nodeType":"YulFunctionCall","src":"13135:21:83"},"nativeSrc":"13135:21:83","nodeType":"YulExpressionStatement","src":"13135:21:83"},{"nativeSrc":"13165:70:83","nodeType":"YulVariableDeclaration","src":"13165:70:83","value":{"arguments":[{"name":"value0","nativeSrc":"13208:6:83","nodeType":"YulIdentifier","src":"13208:6:83"},{"arguments":[{"name":"headStart","nativeSrc":"13220:9:83","nodeType":"YulIdentifier","src":"13220:9:83"},{"kind":"number","nativeSrc":"13231:2:83","nodeType":"YulLiteral","src":"13231:2:83","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"13216:3:83","nodeType":"YulIdentifier","src":"13216:3:83"},"nativeSrc":"13216:18:83","nodeType":"YulFunctionCall","src":"13216:18:83"}],"functionName":{"name":"abi_encode_string_memory_ptr","nativeSrc":"13179:28:83","nodeType":"YulIdentifier","src":"13179:28:83"},"nativeSrc":"13179:56:83","nodeType":"YulFunctionCall","src":"13179:56:83"},"variables":[{"name":"tail_1","nativeSrc":"13169:6:83","nodeType":"YulTypedName","src":"13169:6:83","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13255:9:83","nodeType":"YulIdentifier","src":"13255:9:83"},{"kind":"number","nativeSrc":"13266:2:83","nodeType":"YulLiteral","src":"13266:2:83","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"13251:3:83","nodeType":"YulIdentifier","src":"13251:3:83"},"nativeSrc":"13251:18:83","nodeType":"YulFunctionCall","src":"13251:18:83"},{"arguments":[{"name":"tail_1","nativeSrc":"13275:6:83","nodeType":"YulIdentifier","src":"13275:6:83"},{"name":"headStart","nativeSrc":"13283:9:83","nodeType":"YulIdentifier","src":"13283:9:83"}],"functionName":{"name":"sub","nativeSrc":"13271:3:83","nodeType":"YulIdentifier","src":"13271:3:83"},"nativeSrc":"13271:22:83","nodeType":"YulFunctionCall","src":"13271:22:83"}],"functionName":{"name":"mstore","nativeSrc":"13244:6:83","nodeType":"YulIdentifier","src":"13244:6:83"},"nativeSrc":"13244:50:83","nodeType":"YulFunctionCall","src":"13244:50:83"},"nativeSrc":"13244:50:83","nodeType":"YulExpressionStatement","src":"13244:50:83"},{"expression":{"arguments":[{"name":"tail_1","nativeSrc":"13310:6:83","nodeType":"YulIdentifier","src":"13310:6:83"},{"kind":"number","nativeSrc":"13318:1:83","nodeType":"YulLiteral","src":"13318:1:83","type":"","value":"4"}],"functionName":{"name":"mstore","nativeSrc":"13303:6:83","nodeType":"YulIdentifier","src":"13303:6:83"},"nativeSrc":"13303:17:83","nodeType":"YulFunctionCall","src":"13303:17:83"},"nativeSrc":"13303:17:83","nodeType":"YulExpressionStatement","src":"13303:17:83"},{"expression":{"arguments":[{"arguments":[{"name":"tail_1","nativeSrc":"13340:6:83","nodeType":"YulIdentifier","src":"13340:6:83"},{"kind":"number","nativeSrc":"13348:2:83","nodeType":"YulLiteral","src":"13348:2:83","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"13336:3:83","nodeType":"YulIdentifier","src":"13336:3:83"},"nativeSrc":"13336:15:83","nodeType":"YulFunctionCall","src":"13336:15:83"},{"hexValue":"2e617374","kind":"string","nativeSrc":"13353:6:83","nodeType":"YulLiteral","src":"13353:6:83","type":"","value":".ast"}],"functionName":{"name":"mstore","nativeSrc":"13329:6:83","nodeType":"YulIdentifier","src":"13329:6:83"},"nativeSrc":"13329:31:83","nodeType":"YulFunctionCall","src":"13329:31:83"},"nativeSrc":"13329:31:83","nodeType":"YulExpressionStatement","src":"13329:31:83"},{"nativeSrc":"13369:23:83","nodeType":"YulAssignment","src":"13369:23:83","value":{"arguments":[{"name":"tail_1","nativeSrc":"13381:6:83","nodeType":"YulIdentifier","src":"13381:6:83"},{"kind":"number","nativeSrc":"13389:2:83","nodeType":"YulLiteral","src":"13389:2:83","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"13377:3:83","nodeType":"YulIdentifier","src":"13377:3:83"},"nativeSrc":"13377:15:83","nodeType":"YulFunctionCall","src":"13377:15:83"},"variableNames":[{"name":"tail","nativeSrc":"13369:4:83","nodeType":"YulIdentifier","src":"13369:4:83"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr_t_stringliteral_94ac7d5548e308c1d3c62d3cec2f12ac4e8340c7ba9c9bd462561ccfdd974d98__to_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed","nativeSrc":"12903:495:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"13094:9:83","nodeType":"YulTypedName","src":"13094:9:83","type":""},{"name":"value0","nativeSrc":"13105:6:83","nodeType":"YulTypedName","src":"13105:6:83","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"13116:4:83","nodeType":"YulTypedName","src":"13116:4:83","type":""}],"src":"12903:495:83"},{"body":{"nativeSrc":"13481:199:83","nodeType":"YulBlock","src":"13481:199:83","statements":[{"body":{"nativeSrc":"13527:16:83","nodeType":"YulBlock","src":"13527:16:83","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"13536:1:83","nodeType":"YulLiteral","src":"13536:1:83","type":"","value":"0"},{"kind":"number","nativeSrc":"13539:1:83","nodeType":"YulLiteral","src":"13539:1:83","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"13529:6:83","nodeType":"YulIdentifier","src":"13529:6:83"},"nativeSrc":"13529:12:83","nodeType":"YulFunctionCall","src":"13529:12:83"},"nativeSrc":"13529:12:83","nodeType":"YulExpressionStatement","src":"13529:12:83"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"13502:7:83","nodeType":"YulIdentifier","src":"13502:7:83"},{"name":"headStart","nativeSrc":"13511:9:83","nodeType":"YulIdentifier","src":"13511:9:83"}],"functionName":{"name":"sub","nativeSrc":"13498:3:83","nodeType":"YulIdentifier","src":"13498:3:83"},"nativeSrc":"13498:23:83","nodeType":"YulFunctionCall","src":"13498:23:83"},{"kind":"number","nativeSrc":"13523:2:83","nodeType":"YulLiteral","src":"13523:2:83","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"13494:3:83","nodeType":"YulIdentifier","src":"13494:3:83"},"nativeSrc":"13494:32:83","nodeType":"YulFunctionCall","src":"13494:32:83"},"nativeSrc":"13491:52:83","nodeType":"YulIf","src":"13491:52:83"},{"nativeSrc":"13552:29:83","nodeType":"YulVariableDeclaration","src":"13552:29:83","value":{"arguments":[{"name":"headStart","nativeSrc":"13571:9:83","nodeType":"YulIdentifier","src":"13571:9:83"}],"functionName":{"name":"mload","nativeSrc":"13565:5:83","nodeType":"YulIdentifier","src":"13565:5:83"},"nativeSrc":"13565:16:83","nodeType":"YulFunctionCall","src":"13565:16:83"},"variables":[{"name":"value","nativeSrc":"13556:5:83","nodeType":"YulTypedName","src":"13556:5:83","type":""}]},{"body":{"nativeSrc":"13634:16:83","nodeType":"YulBlock","src":"13634:16:83","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"13643:1:83","nodeType":"YulLiteral","src":"13643:1:83","type":"","value":"0"},{"kind":"number","nativeSrc":"13646:1:83","nodeType":"YulLiteral","src":"13646:1:83","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"13636:6:83","nodeType":"YulIdentifier","src":"13636:6:83"},"nativeSrc":"13636:12:83","nodeType":"YulFunctionCall","src":"13636:12:83"},"nativeSrc":"13636:12:83","nodeType":"YulExpressionStatement","src":"13636:12:83"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"13603:5:83","nodeType":"YulIdentifier","src":"13603:5:83"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"13624:5:83","nodeType":"YulIdentifier","src":"13624:5:83"}],"functionName":{"name":"iszero","nativeSrc":"13617:6:83","nodeType":"YulIdentifier","src":"13617:6:83"},"nativeSrc":"13617:13:83","nodeType":"YulFunctionCall","src":"13617:13:83"}],"functionName":{"name":"iszero","nativeSrc":"13610:6:83","nodeType":"YulIdentifier","src":"13610:6:83"},"nativeSrc":"13610:21:83","nodeType":"YulFunctionCall","src":"13610:21:83"}],"functionName":{"name":"eq","nativeSrc":"13600:2:83","nodeType":"YulIdentifier","src":"13600:2:83"},"nativeSrc":"13600:32:83","nodeType":"YulFunctionCall","src":"13600:32:83"}],"functionName":{"name":"iszero","nativeSrc":"13593:6:83","nodeType":"YulIdentifier","src":"13593:6:83"},"nativeSrc":"13593:40:83","nodeType":"YulFunctionCall","src":"13593:40:83"},"nativeSrc":"13590:60:83","nodeType":"YulIf","src":"13590:60:83"},{"nativeSrc":"13659:15:83","nodeType":"YulAssignment","src":"13659:15:83","value":{"name":"value","nativeSrc":"13669:5:83","nodeType":"YulIdentifier","src":"13669:5:83"},"variableNames":[{"name":"value0","nativeSrc":"13659:6:83","nodeType":"YulIdentifier","src":"13659:6:83"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nativeSrc":"13403:277:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"13447:9:83","nodeType":"YulTypedName","src":"13447:9:83","type":""},{"name":"dataEnd","nativeSrc":"13458:7:83","nodeType":"YulTypedName","src":"13458:7:83","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"13470:6:83","nodeType":"YulTypedName","src":"13470:6:83","type":""}],"src":"13403:277:83"},{"body":{"nativeSrc":"14026:236:83","nodeType":"YulBlock","src":"14026:236:83","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"14043:3:83","nodeType":"YulIdentifier","src":"14043:3:83"},{"hexValue":"436f756c64206e6f742066696e642041535420696e20617274696661637420","kind":"string","nativeSrc":"14048:33:83","nodeType":"YulLiteral","src":"14048:33:83","type":"","value":"Could not find AST in artifact "}],"functionName":{"name":"mstore","nativeSrc":"14036:6:83","nodeType":"YulIdentifier","src":"14036:6:83"},"nativeSrc":"14036:46:83","nodeType":"YulFunctionCall","src":"14036:46:83"},"nativeSrc":"14036:46:83","nodeType":"YulExpressionStatement","src":"14036:46:83"},{"nativeSrc":"14091:49:83","nodeType":"YulVariableDeclaration","src":"14091:49:83","value":{"arguments":[{"name":"value0","nativeSrc":"14119:6:83","nodeType":"YulIdentifier","src":"14119:6:83"},{"arguments":[{"name":"pos","nativeSrc":"14131:3:83","nodeType":"YulIdentifier","src":"14131:3:83"},{"kind":"number","nativeSrc":"14136:2:83","nodeType":"YulLiteral","src":"14136:2:83","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"14127:3:83","nodeType":"YulIdentifier","src":"14127:3:83"},"nativeSrc":"14127:12:83","nodeType":"YulFunctionCall","src":"14127:12:83"}],"functionName":{"name":"abi_encode_string","nativeSrc":"14101:17:83","nodeType":"YulIdentifier","src":"14101:17:83"},"nativeSrc":"14101:39:83","nodeType":"YulFunctionCall","src":"14101:39:83"},"variables":[{"name":"_1","nativeSrc":"14095:2:83","nodeType":"YulTypedName","src":"14095:2:83","type":""}]},{"expression":{"arguments":[{"name":"_1","nativeSrc":"14156:2:83","nodeType":"YulIdentifier","src":"14156:2:83"},{"hexValue":"2e205365742060617374203d20747275656020696e20666f756e6472792e746f","kind":"string","nativeSrc":"14160:34:83","nodeType":"YulLiteral","src":"14160:34:83","type":"","value":". Set `ast = true` in foundry.to"}],"functionName":{"name":"mstore","nativeSrc":"14149:6:83","nodeType":"YulIdentifier","src":"14149:6:83"},"nativeSrc":"14149:46:83","nodeType":"YulFunctionCall","src":"14149:46:83"},"nativeSrc":"14149:46:83","nodeType":"YulExpressionStatement","src":"14149:46:83"},{"expression":{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"14215:2:83","nodeType":"YulIdentifier","src":"14215:2:83"},{"kind":"number","nativeSrc":"14219:2:83","nodeType":"YulLiteral","src":"14219:2:83","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"14211:3:83","nodeType":"YulIdentifier","src":"14211:3:83"},"nativeSrc":"14211:11:83","nodeType":"YulFunctionCall","src":"14211:11:83"},{"hexValue":"6d6c","kind":"string","nativeSrc":"14224:4:83","nodeType":"YulLiteral","src":"14224:4:83","type":"","value":"ml"}],"functionName":{"name":"mstore","nativeSrc":"14204:6:83","nodeType":"YulIdentifier","src":"14204:6:83"},"nativeSrc":"14204:25:83","nodeType":"YulFunctionCall","src":"14204:25:83"},"nativeSrc":"14204:25:83","nodeType":"YulExpressionStatement","src":"14204:25:83"},{"nativeSrc":"14238:18:83","nodeType":"YulAssignment","src":"14238:18:83","value":{"arguments":[{"name":"_1","nativeSrc":"14249:2:83","nodeType":"YulIdentifier","src":"14249:2:83"},{"kind":"number","nativeSrc":"14253:2:83","nodeType":"YulLiteral","src":"14253:2:83","type":"","value":"34"}],"functionName":{"name":"add","nativeSrc":"14245:3:83","nodeType":"YulIdentifier","src":"14245:3:83"},"nativeSrc":"14245:11:83","nodeType":"YulFunctionCall","src":"14245:11:83"},"variableNames":[{"name":"end","nativeSrc":"14238:3:83","nodeType":"YulIdentifier","src":"14238:3:83"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_3b0c29718fa0ccfd3c548e0fdf398a1d76969c362a61df53627e5e4f64fab1e8_t_string_memory_ptr_t_stringliteral_dd0e6e5fb2dfed5daf937831e40458612ea423d5675571cc5b1b64fd260d1245__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"13685:577:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"14002:3:83","nodeType":"YulTypedName","src":"14002:3:83","type":""},{"name":"value0","nativeSrc":"14007:6:83","nodeType":"YulTypedName","src":"14007:6:83","type":""}],"returnVariables":[{"name":"end","nativeSrc":"14018:3:83","nodeType":"YulTypedName","src":"14018:3:83","type":""}],"src":"13685:577:83"},{"body":{"nativeSrc":"14489:287:83","nodeType":"YulBlock","src":"14489:287:83","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"14506:9:83","nodeType":"YulIdentifier","src":"14506:9:83"},{"kind":"number","nativeSrc":"14517:2:83","nodeType":"YulLiteral","src":"14517:2:83","type":"","value":"64"}],"functionName":{"name":"mstore","nativeSrc":"14499:6:83","nodeType":"YulIdentifier","src":"14499:6:83"},"nativeSrc":"14499:21:83","nodeType":"YulFunctionCall","src":"14499:21:83"},"nativeSrc":"14499:21:83","nodeType":"YulExpressionStatement","src":"14499:21:83"},{"nativeSrc":"14529:70:83","nodeType":"YulVariableDeclaration","src":"14529:70:83","value":{"arguments":[{"name":"value0","nativeSrc":"14572:6:83","nodeType":"YulIdentifier","src":"14572:6:83"},{"arguments":[{"name":"headStart","nativeSrc":"14584:9:83","nodeType":"YulIdentifier","src":"14584:9:83"},{"kind":"number","nativeSrc":"14595:2:83","nodeType":"YulLiteral","src":"14595:2:83","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"14580:3:83","nodeType":"YulIdentifier","src":"14580:3:83"},"nativeSrc":"14580:18:83","nodeType":"YulFunctionCall","src":"14580:18:83"}],"functionName":{"name":"abi_encode_string_memory_ptr","nativeSrc":"14543:28:83","nodeType":"YulIdentifier","src":"14543:28:83"},"nativeSrc":"14543:56:83","nodeType":"YulFunctionCall","src":"14543:56:83"},"variables":[{"name":"tail_1","nativeSrc":"14533:6:83","nodeType":"YulTypedName","src":"14533:6:83","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"14619:9:83","nodeType":"YulIdentifier","src":"14619:9:83"},{"kind":"number","nativeSrc":"14630:2:83","nodeType":"YulLiteral","src":"14630:2:83","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"14615:3:83","nodeType":"YulIdentifier","src":"14615:3:83"},"nativeSrc":"14615:18:83","nodeType":"YulFunctionCall","src":"14615:18:83"},{"arguments":[{"name":"tail_1","nativeSrc":"14639:6:83","nodeType":"YulIdentifier","src":"14639:6:83"},{"name":"headStart","nativeSrc":"14647:9:83","nodeType":"YulIdentifier","src":"14647:9:83"}],"functionName":{"name":"sub","nativeSrc":"14635:3:83","nodeType":"YulIdentifier","src":"14635:3:83"},"nativeSrc":"14635:22:83","nodeType":"YulFunctionCall","src":"14635:22:83"}],"functionName":{"name":"mstore","nativeSrc":"14608:6:83","nodeType":"YulIdentifier","src":"14608:6:83"},"nativeSrc":"14608:50:83","nodeType":"YulFunctionCall","src":"14608:50:83"},"nativeSrc":"14608:50:83","nodeType":"YulExpressionStatement","src":"14608:50:83"},{"expression":{"arguments":[{"name":"tail_1","nativeSrc":"14674:6:83","nodeType":"YulIdentifier","src":"14674:6:83"},{"kind":"number","nativeSrc":"14682:2:83","nodeType":"YulLiteral","src":"14682:2:83","type":"","value":"17"}],"functionName":{"name":"mstore","nativeSrc":"14667:6:83","nodeType":"YulIdentifier","src":"14667:6:83"},"nativeSrc":"14667:18:83","nodeType":"YulFunctionCall","src":"14667:18:83"},"nativeSrc":"14667:18:83","nodeType":"YulExpressionStatement","src":"14667:18:83"},{"expression":{"arguments":[{"arguments":[{"name":"tail_1","nativeSrc":"14705:6:83","nodeType":"YulIdentifier","src":"14705:6:83"},{"kind":"number","nativeSrc":"14713:2:83","nodeType":"YulLiteral","src":"14713:2:83","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"14701:3:83","nodeType":"YulIdentifier","src":"14701:3:83"},"nativeSrc":"14701:15:83","nodeType":"YulFunctionCall","src":"14701:15:83"},{"hexValue":"2e6173742e6162736f6c75746550617468","kind":"string","nativeSrc":"14718:19:83","nodeType":"YulLiteral","src":"14718:19:83","type":"","value":".ast.absolutePath"}],"functionName":{"name":"mstore","nativeSrc":"14694:6:83","nodeType":"YulIdentifier","src":"14694:6:83"},"nativeSrc":"14694:44:83","nodeType":"YulFunctionCall","src":"14694:44:83"},"nativeSrc":"14694:44:83","nodeType":"YulExpressionStatement","src":"14694:44:83"},{"nativeSrc":"14747:23:83","nodeType":"YulAssignment","src":"14747:23:83","value":{"arguments":[{"name":"tail_1","nativeSrc":"14759:6:83","nodeType":"YulIdentifier","src":"14759:6:83"},{"kind":"number","nativeSrc":"14767:2:83","nodeType":"YulLiteral","src":"14767:2:83","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"14755:3:83","nodeType":"YulIdentifier","src":"14755:3:83"},"nativeSrc":"14755:15:83","nodeType":"YulFunctionCall","src":"14755:15:83"},"variableNames":[{"name":"tail","nativeSrc":"14747:4:83","nodeType":"YulIdentifier","src":"14747:4:83"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr_t_stringliteral_0f3ac612dde053e2dba53344fdd4fdfcedab8a75b1f141a9e2889b50a75851e1__to_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed","nativeSrc":"14267:509:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"14458:9:83","nodeType":"YulTypedName","src":"14458:9:83","type":""},{"name":"value0","nativeSrc":"14469:6:83","nodeType":"YulTypedName","src":"14469:6:83","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"14480:4:83","nodeType":"YulTypedName","src":"14480:4:83","type":""}],"src":"14267:509:83"},{"body":{"nativeSrc":"15003:282:83","nodeType":"YulBlock","src":"15003:282:83","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"15020:9:83","nodeType":"YulIdentifier","src":"15020:9:83"},{"kind":"number","nativeSrc":"15031:2:83","nodeType":"YulLiteral","src":"15031:2:83","type":"","value":"64"}],"functionName":{"name":"mstore","nativeSrc":"15013:6:83","nodeType":"YulIdentifier","src":"15013:6:83"},"nativeSrc":"15013:21:83","nodeType":"YulFunctionCall","src":"15013:21:83"},"nativeSrc":"15013:21:83","nodeType":"YulExpressionStatement","src":"15013:21:83"},{"nativeSrc":"15043:70:83","nodeType":"YulVariableDeclaration","src":"15043:70:83","value":{"arguments":[{"name":"value0","nativeSrc":"15086:6:83","nodeType":"YulIdentifier","src":"15086:6:83"},{"arguments":[{"name":"headStart","nativeSrc":"15098:9:83","nodeType":"YulIdentifier","src":"15098:9:83"},{"kind":"number","nativeSrc":"15109:2:83","nodeType":"YulLiteral","src":"15109:2:83","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"15094:3:83","nodeType":"YulIdentifier","src":"15094:3:83"},"nativeSrc":"15094:18:83","nodeType":"YulFunctionCall","src":"15094:18:83"}],"functionName":{"name":"abi_encode_string_memory_ptr","nativeSrc":"15057:28:83","nodeType":"YulIdentifier","src":"15057:28:83"},"nativeSrc":"15057:56:83","nodeType":"YulFunctionCall","src":"15057:56:83"},"variables":[{"name":"tail_1","nativeSrc":"15047:6:83","nodeType":"YulTypedName","src":"15047:6:83","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"15133:9:83","nodeType":"YulIdentifier","src":"15133:9:83"},{"kind":"number","nativeSrc":"15144:2:83","nodeType":"YulLiteral","src":"15144:2:83","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"15129:3:83","nodeType":"YulIdentifier","src":"15129:3:83"},"nativeSrc":"15129:18:83","nodeType":"YulFunctionCall","src":"15129:18:83"},{"arguments":[{"name":"tail_1","nativeSrc":"15153:6:83","nodeType":"YulIdentifier","src":"15153:6:83"},{"name":"headStart","nativeSrc":"15161:9:83","nodeType":"YulIdentifier","src":"15161:9:83"}],"functionName":{"name":"sub","nativeSrc":"15149:3:83","nodeType":"YulIdentifier","src":"15149:3:83"},"nativeSrc":"15149:22:83","nodeType":"YulFunctionCall","src":"15149:22:83"}],"functionName":{"name":"mstore","nativeSrc":"15122:6:83","nodeType":"YulIdentifier","src":"15122:6:83"},"nativeSrc":"15122:50:83","nodeType":"YulFunctionCall","src":"15122:50:83"},"nativeSrc":"15122:50:83","nodeType":"YulExpressionStatement","src":"15122:50:83"},{"expression":{"arguments":[{"name":"tail_1","nativeSrc":"15188:6:83","nodeType":"YulIdentifier","src":"15188:6:83"},{"kind":"number","nativeSrc":"15196:2:83","nodeType":"YulLiteral","src":"15196:2:83","type":"","value":"12"}],"functionName":{"name":"mstore","nativeSrc":"15181:6:83","nodeType":"YulIdentifier","src":"15181:6:83"},"nativeSrc":"15181:18:83","nodeType":"YulFunctionCall","src":"15181:18:83"},"nativeSrc":"15181:18:83","nodeType":"YulExpressionStatement","src":"15181:18:83"},{"expression":{"arguments":[{"arguments":[{"name":"tail_1","nativeSrc":"15219:6:83","nodeType":"YulIdentifier","src":"15219:6:83"},{"kind":"number","nativeSrc":"15227:2:83","nodeType":"YulLiteral","src":"15227:2:83","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"15215:3:83","nodeType":"YulIdentifier","src":"15215:3:83"},"nativeSrc":"15215:15:83","nodeType":"YulFunctionCall","src":"15215:15:83"},{"hexValue":"2e6173742e6c6963656e7365","kind":"string","nativeSrc":"15232:14:83","nodeType":"YulLiteral","src":"15232:14:83","type":"","value":".ast.license"}],"functionName":{"name":"mstore","nativeSrc":"15208:6:83","nodeType":"YulIdentifier","src":"15208:6:83"},"nativeSrc":"15208:39:83","nodeType":"YulFunctionCall","src":"15208:39:83"},"nativeSrc":"15208:39:83","nodeType":"YulExpressionStatement","src":"15208:39:83"},{"nativeSrc":"15256:23:83","nodeType":"YulAssignment","src":"15256:23:83","value":{"arguments":[{"name":"tail_1","nativeSrc":"15268:6:83","nodeType":"YulIdentifier","src":"15268:6:83"},{"kind":"number","nativeSrc":"15276:2:83","nodeType":"YulLiteral","src":"15276:2:83","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"15264:3:83","nodeType":"YulIdentifier","src":"15264:3:83"},"nativeSrc":"15264:15:83","nodeType":"YulFunctionCall","src":"15264:15:83"},"variableNames":[{"name":"tail","nativeSrc":"15256:4:83","nodeType":"YulIdentifier","src":"15256:4:83"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr_t_stringliteral_0ec1952d7acb1df54d89163ca83f1d7b360061eb9c0c5c501b4eac52c5c807e4__to_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed","nativeSrc":"14781:504:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"14972:9:83","nodeType":"YulTypedName","src":"14972:9:83","type":""},{"name":"value0","nativeSrc":"14983:6:83","nodeType":"YulTypedName","src":"14983:6:83","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"14994:4:83","nodeType":"YulTypedName","src":"14994:4:83","type":""}],"src":"14781:504:83"},{"body":{"nativeSrc":"15631:171:83","nodeType":"YulBlock","src":"15631:171:83","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"15648:3:83","nodeType":"YulIdentifier","src":"15648:3:83"},{"hexValue":"2e6d657461646174612e736f75726365732e5b27","kind":"string","nativeSrc":"15653:22:83","nodeType":"YulLiteral","src":"15653:22:83","type":"","value":".metadata.sources.['"}],"functionName":{"name":"mstore","nativeSrc":"15641:6:83","nodeType":"YulIdentifier","src":"15641:6:83"},"nativeSrc":"15641:35:83","nodeType":"YulFunctionCall","src":"15641:35:83"},"nativeSrc":"15641:35:83","nodeType":"YulExpressionStatement","src":"15641:35:83"},{"nativeSrc":"15685:49:83","nodeType":"YulVariableDeclaration","src":"15685:49:83","value":{"arguments":[{"name":"value0","nativeSrc":"15713:6:83","nodeType":"YulIdentifier","src":"15713:6:83"},{"arguments":[{"name":"pos","nativeSrc":"15725:3:83","nodeType":"YulIdentifier","src":"15725:3:83"},{"kind":"number","nativeSrc":"15730:2:83","nodeType":"YulLiteral","src":"15730:2:83","type":"","value":"20"}],"functionName":{"name":"add","nativeSrc":"15721:3:83","nodeType":"YulIdentifier","src":"15721:3:83"},"nativeSrc":"15721:12:83","nodeType":"YulFunctionCall","src":"15721:12:83"}],"functionName":{"name":"abi_encode_string","nativeSrc":"15695:17:83","nodeType":"YulIdentifier","src":"15695:17:83"},"nativeSrc":"15695:39:83","nodeType":"YulFunctionCall","src":"15695:39:83"},"variables":[{"name":"_1","nativeSrc":"15689:2:83","nodeType":"YulTypedName","src":"15689:2:83","type":""}]},{"expression":{"arguments":[{"name":"_1","nativeSrc":"15750:2:83","nodeType":"YulIdentifier","src":"15750:2:83"},{"hexValue":"275d2e6b656363616b323536","kind":"string","nativeSrc":"15754:14:83","nodeType":"YulLiteral","src":"15754:14:83","type":"","value":"'].keccak256"}],"functionName":{"name":"mstore","nativeSrc":"15743:6:83","nodeType":"YulIdentifier","src":"15743:6:83"},"nativeSrc":"15743:26:83","nodeType":"YulFunctionCall","src":"15743:26:83"},"nativeSrc":"15743:26:83","nodeType":"YulExpressionStatement","src":"15743:26:83"},{"nativeSrc":"15778:18:83","nodeType":"YulAssignment","src":"15778:18:83","value":{"arguments":[{"name":"_1","nativeSrc":"15789:2:83","nodeType":"YulIdentifier","src":"15789:2:83"},{"kind":"number","nativeSrc":"15793:2:83","nodeType":"YulLiteral","src":"15793:2:83","type":"","value":"12"}],"functionName":{"name":"add","nativeSrc":"15785:3:83","nodeType":"YulIdentifier","src":"15785:3:83"},"nativeSrc":"15785:11:83","nodeType":"YulFunctionCall","src":"15785:11:83"},"variableNames":[{"name":"end","nativeSrc":"15778:3:83","nodeType":"YulIdentifier","src":"15778:3:83"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_9acc65371218b2be388de4c512999c5773d7c7e8cfe55ef8b9c7f869e0e7945b_t_string_memory_ptr_t_stringliteral_aad8893e597421c55956295138eb041c0150d1e2975daa37e4c3a126e8685848__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"15290:512:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"15607:3:83","nodeType":"YulTypedName","src":"15607:3:83","type":""},{"name":"value0","nativeSrc":"15612:6:83","nodeType":"YulTypedName","src":"15612:6:83","type":""}],"returnVariables":[{"name":"end","nativeSrc":"15623:3:83","nodeType":"YulTypedName","src":"15623:3:83","type":""}],"src":"15290:512:83"},{"body":{"nativeSrc":"16148:157:83","nodeType":"YulBlock","src":"16148:157:83","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"16165:3:83","nodeType":"YulIdentifier","src":"16165:3:83"},{"arguments":[{"kind":"number","nativeSrc":"16174:3:83","nodeType":"YulLiteral","src":"16174:3:83","type":"","value":"249"},{"kind":"number","nativeSrc":"16179:2:83","nodeType":"YulLiteral","src":"16179:2:83","type":"","value":"17"}],"functionName":{"name":"shl","nativeSrc":"16170:3:83","nodeType":"YulIdentifier","src":"16170:3:83"},"nativeSrc":"16170:12:83","nodeType":"YulFunctionCall","src":"16170:12:83"}],"functionName":{"name":"mstore","nativeSrc":"16158:6:83","nodeType":"YulIdentifier","src":"16158:6:83"},"nativeSrc":"16158:25:83","nodeType":"YulFunctionCall","src":"16158:25:83"},"nativeSrc":"16158:25:83","nodeType":"YulExpressionStatement","src":"16158:25:83"},{"nativeSrc":"16192:48:83","nodeType":"YulVariableDeclaration","src":"16192:48:83","value":{"arguments":[{"name":"value0","nativeSrc":"16220:6:83","nodeType":"YulIdentifier","src":"16220:6:83"},{"arguments":[{"name":"pos","nativeSrc":"16232:3:83","nodeType":"YulIdentifier","src":"16232:3:83"},{"kind":"number","nativeSrc":"16237:1:83","nodeType":"YulLiteral","src":"16237:1:83","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"16228:3:83","nodeType":"YulIdentifier","src":"16228:3:83"},"nativeSrc":"16228:11:83","nodeType":"YulFunctionCall","src":"16228:11:83"}],"functionName":{"name":"abi_encode_string","nativeSrc":"16202:17:83","nodeType":"YulIdentifier","src":"16202:17:83"},"nativeSrc":"16202:38:83","nodeType":"YulFunctionCall","src":"16202:38:83"},"variables":[{"name":"_1","nativeSrc":"16196:2:83","nodeType":"YulTypedName","src":"16196:2:83","type":""}]},{"expression":{"arguments":[{"name":"_1","nativeSrc":"16256:2:83","nodeType":"YulIdentifier","src":"16256:2:83"},{"arguments":[{"kind":"number","nativeSrc":"16264:3:83","nodeType":"YulLiteral","src":"16264:3:83","type":"","value":"249"},{"kind":"number","nativeSrc":"16269:2:83","nodeType":"YulLiteral","src":"16269:2:83","type":"","value":"17"}],"functionName":{"name":"shl","nativeSrc":"16260:3:83","nodeType":"YulIdentifier","src":"16260:3:83"},"nativeSrc":"16260:12:83","nodeType":"YulFunctionCall","src":"16260:12:83"}],"functionName":{"name":"mstore","nativeSrc":"16249:6:83","nodeType":"YulIdentifier","src":"16249:6:83"},"nativeSrc":"16249:24:83","nodeType":"YulFunctionCall","src":"16249:24:83"},"nativeSrc":"16249:24:83","nodeType":"YulExpressionStatement","src":"16249:24:83"},{"nativeSrc":"16282:17:83","nodeType":"YulAssignment","src":"16282:17:83","value":{"arguments":[{"name":"_1","nativeSrc":"16293:2:83","nodeType":"YulIdentifier","src":"16293:2:83"},{"kind":"number","nativeSrc":"16297:1:83","nodeType":"YulLiteral","src":"16297:1:83","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"16289:3:83","nodeType":"YulIdentifier","src":"16289:3:83"},"nativeSrc":"16289:10:83","nodeType":"YulFunctionCall","src":"16289:10:83"},"variableNames":[{"name":"end","nativeSrc":"16282:3:83","nodeType":"YulIdentifier","src":"16282:3:83"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_6e9f33448a4153023cdaf3eb759f1afdc24aba433a3e18b683f8c04a6eaa69f0_t_string_memory_ptr_t_stringliteral_6e9f33448a4153023cdaf3eb759f1afdc24aba433a3e18b683f8c04a6eaa69f0__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"15807:498:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"16124:3:83","nodeType":"YulTypedName","src":"16124:3:83","type":""},{"name":"value0","nativeSrc":"16129:6:83","nodeType":"YulTypedName","src":"16129:6:83","type":""}],"returnVariables":[{"name":"end","nativeSrc":"16140:3:83","nodeType":"YulTypedName","src":"16140:3:83","type":""}],"src":"15807:498:83"},{"body":{"nativeSrc":"16550:117:83","nodeType":"YulBlock","src":"16550:117:83","statements":[{"nativeSrc":"16560:40:83","nodeType":"YulVariableDeclaration","src":"16560:40:83","value":{"arguments":[{"name":"value0","nativeSrc":"16588:6:83","nodeType":"YulIdentifier","src":"16588:6:83"},{"name":"pos","nativeSrc":"16596:3:83","nodeType":"YulIdentifier","src":"16596:3:83"}],"functionName":{"name":"abi_encode_string","nativeSrc":"16570:17:83","nodeType":"YulIdentifier","src":"16570:17:83"},"nativeSrc":"16570:30:83","nodeType":"YulFunctionCall","src":"16570:30:83"},"variables":[{"name":"_1","nativeSrc":"16564:2:83","nodeType":"YulTypedName","src":"16564:2:83","type":""}]},{"expression":{"arguments":[{"name":"_1","nativeSrc":"16616:2:83","nodeType":"YulIdentifier","src":"16616:2:83"},{"hexValue":"2f6275696c642d696e666f","kind":"string","nativeSrc":"16620:13:83","nodeType":"YulLiteral","src":"16620:13:83","type":"","value":"/build-info"}],"functionName":{"name":"mstore","nativeSrc":"16609:6:83","nodeType":"YulIdentifier","src":"16609:6:83"},"nativeSrc":"16609:25:83","nodeType":"YulFunctionCall","src":"16609:25:83"},"nativeSrc":"16609:25:83","nodeType":"YulExpressionStatement","src":"16609:25:83"},{"nativeSrc":"16643:18:83","nodeType":"YulAssignment","src":"16643:18:83","value":{"arguments":[{"name":"_1","nativeSrc":"16654:2:83","nodeType":"YulIdentifier","src":"16654:2:83"},{"kind":"number","nativeSrc":"16658:2:83","nodeType":"YulLiteral","src":"16658:2:83","type":"","value":"11"}],"functionName":{"name":"add","nativeSrc":"16650:3:83","nodeType":"YulIdentifier","src":"16650:3:83"},"nativeSrc":"16650:11:83","nodeType":"YulFunctionCall","src":"16650:11:83"},"variableNames":[{"name":"end","nativeSrc":"16643:3:83","nodeType":"YulIdentifier","src":"16643:3:83"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_69ae65ff9142d8f87b3884b153358f78dcd4f6339bb046b9a6d16c966fa813af__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"16310:357:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"16526:3:83","nodeType":"YulTypedName","src":"16526:3:83","type":""},{"name":"value0","nativeSrc":"16531:6:83","nodeType":"YulTypedName","src":"16531:6:83","type":""}],"returnVariables":[{"name":"end","nativeSrc":"16542:3:83","nodeType":"YulTypedName","src":"16542:3:83","type":""}],"src":"16310:357:83"},{"body":{"nativeSrc":"16912:227:83","nodeType":"YulBlock","src":"16912:227:83","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"16929:3:83","nodeType":"YulIdentifier","src":"16929:3:83"},{"hexValue":"436f756c64206e6f742066696e64206275696c642d696e666f2066696c652077","kind":"string","nativeSrc":"16934:34:83","nodeType":"YulLiteral","src":"16934:34:83","type":"","value":"Could not find build-info file w"}],"functionName":{"name":"mstore","nativeSrc":"16922:6:83","nodeType":"YulIdentifier","src":"16922:6:83"},"nativeSrc":"16922:47:83","nodeType":"YulFunctionCall","src":"16922:47:83"},"nativeSrc":"16922:47:83","nodeType":"YulExpressionStatement","src":"16922:47:83"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"16989:3:83","nodeType":"YulIdentifier","src":"16989:3:83"},{"kind":"number","nativeSrc":"16994:2:83","nodeType":"YulLiteral","src":"16994:2:83","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"16985:3:83","nodeType":"YulIdentifier","src":"16985:3:83"},"nativeSrc":"16985:12:83","nodeType":"YulFunctionCall","src":"16985:12:83"},{"hexValue":"697468206d61746368696e6720736f7572636520636f6465206861736820666f","kind":"string","nativeSrc":"16999:34:83","nodeType":"YulLiteral","src":"16999:34:83","type":"","value":"ith matching source code hash fo"}],"functionName":{"name":"mstore","nativeSrc":"16978:6:83","nodeType":"YulIdentifier","src":"16978:6:83"},"nativeSrc":"16978:56:83","nodeType":"YulFunctionCall","src":"16978:56:83"},"nativeSrc":"16978:56:83","nodeType":"YulExpressionStatement","src":"16978:56:83"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"17054:3:83","nodeType":"YulIdentifier","src":"17054:3:83"},{"kind":"number","nativeSrc":"17059:2:83","nodeType":"YulLiteral","src":"17059:2:83","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"17050:3:83","nodeType":"YulIdentifier","src":"17050:3:83"},"nativeSrc":"17050:12:83","nodeType":"YulFunctionCall","src":"17050:12:83"},{"hexValue":"7220636f6e747261637420","kind":"string","nativeSrc":"17064:13:83","nodeType":"YulLiteral","src":"17064:13:83","type":"","value":"r contract "}],"functionName":{"name":"mstore","nativeSrc":"17043:6:83","nodeType":"YulIdentifier","src":"17043:6:83"},"nativeSrc":"17043:35:83","nodeType":"YulFunctionCall","src":"17043:35:83"},"nativeSrc":"17043:35:83","nodeType":"YulExpressionStatement","src":"17043:35:83"},{"nativeSrc":"17087:46:83","nodeType":"YulAssignment","src":"17087:46:83","value":{"arguments":[{"name":"value0","nativeSrc":"17112:6:83","nodeType":"YulIdentifier","src":"17112:6:83"},{"arguments":[{"name":"pos","nativeSrc":"17124:3:83","nodeType":"YulIdentifier","src":"17124:3:83"},{"kind":"number","nativeSrc":"17129:2:83","nodeType":"YulLiteral","src":"17129:2:83","type":"","value":"75"}],"functionName":{"name":"add","nativeSrc":"17120:3:83","nodeType":"YulIdentifier","src":"17120:3:83"},"nativeSrc":"17120:12:83","nodeType":"YulFunctionCall","src":"17120:12:83"}],"functionName":{"name":"abi_encode_string","nativeSrc":"17094:17:83","nodeType":"YulIdentifier","src":"17094:17:83"},"nativeSrc":"17094:39:83","nodeType":"YulFunctionCall","src":"17094:39:83"},"variableNames":[{"name":"end","nativeSrc":"17087:3:83","nodeType":"YulIdentifier","src":"17087:3:83"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_97996f6d547fd3154e3c44156fcd12ba2952d6646db5187f6bd117ff435085a8_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"16672:467:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"16888:3:83","nodeType":"YulTypedName","src":"16888:3:83","type":""},{"name":"value0","nativeSrc":"16893:6:83","nodeType":"YulTypedName","src":"16893:6:83","type":""}],"returnVariables":[{"name":"end","nativeSrc":"16904:3:83","nodeType":"YulTypedName","src":"16904:3:83","type":""}],"src":"16672:467:83"},{"body":{"nativeSrc":"17318:318:83","nodeType":"YulBlock","src":"17318:318:83","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"17335:9:83","nodeType":"YulIdentifier","src":"17335:9:83"},{"kind":"number","nativeSrc":"17346:2:83","nodeType":"YulLiteral","src":"17346:2:83","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"17328:6:83","nodeType":"YulIdentifier","src":"17328:6:83"},"nativeSrc":"17328:21:83","nodeType":"YulFunctionCall","src":"17328:21:83"},"nativeSrc":"17328:21:83","nodeType":"YulExpressionStatement","src":"17328:21:83"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"17369:9:83","nodeType":"YulIdentifier","src":"17369:9:83"},{"kind":"number","nativeSrc":"17380:2:83","nodeType":"YulLiteral","src":"17380:2:83","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"17365:3:83","nodeType":"YulIdentifier","src":"17365:3:83"},"nativeSrc":"17365:18:83","nodeType":"YulFunctionCall","src":"17365:18:83"},{"kind":"number","nativeSrc":"17385:2:83","nodeType":"YulLiteral","src":"17385:2:83","type":"","value":"88"}],"functionName":{"name":"mstore","nativeSrc":"17358:6:83","nodeType":"YulIdentifier","src":"17358:6:83"},"nativeSrc":"17358:30:83","nodeType":"YulFunctionCall","src":"17358:30:83"},"nativeSrc":"17358:30:83","nodeType":"YulExpressionStatement","src":"17358:30:83"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"17408:9:83","nodeType":"YulIdentifier","src":"17408:9:83"},{"kind":"number","nativeSrc":"17419:2:83","nodeType":"YulLiteral","src":"17419:2:83","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"17404:3:83","nodeType":"YulIdentifier","src":"17404:3:83"},"nativeSrc":"17404:18:83","nodeType":"YulFunctionCall","src":"17404:18:83"},{"hexValue":"54686520606c6963656e73655479706560206f7074696f6e2063616e6e6f7420","kind":"string","nativeSrc":"17424:34:83","nodeType":"YulLiteral","src":"17424:34:83","type":"","value":"The `licenseType` option cannot "}],"functionName":{"name":"mstore","nativeSrc":"17397:6:83","nodeType":"YulIdentifier","src":"17397:6:83"},"nativeSrc":"17397:62:83","nodeType":"YulFunctionCall","src":"17397:62:83"},"nativeSrc":"17397:62:83","nodeType":"YulExpressionStatement","src":"17397:62:83"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"17479:9:83","nodeType":"YulIdentifier","src":"17479:9:83"},{"kind":"number","nativeSrc":"17490:2:83","nodeType":"YulLiteral","src":"17490:2:83","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"17475:3:83","nodeType":"YulIdentifier","src":"17475:3:83"},"nativeSrc":"17475:18:83","nodeType":"YulFunctionCall","src":"17475:18:83"},{"hexValue":"62652075736564207768656e207468652060736b6970566572696679536f7572","kind":"string","nativeSrc":"17495:34:83","nodeType":"YulLiteral","src":"17495:34:83","type":"","value":"be used when the `skipVerifySour"}],"functionName":{"name":"mstore","nativeSrc":"17468:6:83","nodeType":"YulIdentifier","src":"17468:6:83"},"nativeSrc":"17468:62:83","nodeType":"YulFunctionCall","src":"17468:62:83"},"nativeSrc":"17468:62:83","nodeType":"YulExpressionStatement","src":"17468:62:83"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"17550:9:83","nodeType":"YulIdentifier","src":"17550:9:83"},{"kind":"number","nativeSrc":"17561:3:83","nodeType":"YulLiteral","src":"17561:3:83","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"17546:3:83","nodeType":"YulIdentifier","src":"17546:3:83"},"nativeSrc":"17546:19:83","nodeType":"YulFunctionCall","src":"17546:19:83"},{"hexValue":"6365436f646560206f7074696f6e20697320607472756560","kind":"string","nativeSrc":"17567:26:83","nodeType":"YulLiteral","src":"17567:26:83","type":"","value":"ceCode` option is `true`"}],"functionName":{"name":"mstore","nativeSrc":"17539:6:83","nodeType":"YulIdentifier","src":"17539:6:83"},"nativeSrc":"17539:55:83","nodeType":"YulFunctionCall","src":"17539:55:83"},"nativeSrc":"17539:55:83","nodeType":"YulExpressionStatement","src":"17539:55:83"},{"nativeSrc":"17603:27:83","nodeType":"YulAssignment","src":"17603:27:83","value":{"arguments":[{"name":"headStart","nativeSrc":"17615:9:83","nodeType":"YulIdentifier","src":"17615:9:83"},{"kind":"number","nativeSrc":"17626:3:83","nodeType":"YulLiteral","src":"17626:3:83","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"17611:3:83","nodeType":"YulIdentifier","src":"17611:3:83"},"nativeSrc":"17611:19:83","nodeType":"YulFunctionCall","src":"17611:19:83"},"variableNames":[{"name":"tail","nativeSrc":"17603:4:83","nodeType":"YulIdentifier","src":"17603:4:83"}]}]},"name":"abi_encode_tuple_t_stringliteral_24539e734dcb001ba7c33c80423f2ee30ce04105a5ff31966733164624aa2d38__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"17144:492:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"17295:9:83","nodeType":"YulTypedName","src":"17295:9:83","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"17309:4:83","nodeType":"YulTypedName","src":"17309:4:83","type":""}],"src":"17144:492:83"},{"body":{"nativeSrc":"17815:313:83","nodeType":"YulBlock","src":"17815:313:83","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"17832:9:83","nodeType":"YulIdentifier","src":"17832:9:83"},{"kind":"number","nativeSrc":"17843:2:83","nodeType":"YulLiteral","src":"17843:2:83","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"17825:6:83","nodeType":"YulIdentifier","src":"17825:6:83"},"nativeSrc":"17825:21:83","nodeType":"YulFunctionCall","src":"17825:21:83"},"nativeSrc":"17825:21:83","nodeType":"YulExpressionStatement","src":"17825:21:83"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"17866:9:83","nodeType":"YulIdentifier","src":"17866:9:83"},{"kind":"number","nativeSrc":"17877:2:83","nodeType":"YulLiteral","src":"17877:2:83","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"17862:3:83","nodeType":"YulIdentifier","src":"17862:3:83"},"nativeSrc":"17862:18:83","nodeType":"YulFunctionCall","src":"17862:18:83"},{"kind":"number","nativeSrc":"17882:2:83","nodeType":"YulLiteral","src":"17882:2:83","type":"","value":"83"}],"functionName":{"name":"mstore","nativeSrc":"17855:6:83","nodeType":"YulIdentifier","src":"17855:6:83"},"nativeSrc":"17855:30:83","nodeType":"YulFunctionCall","src":"17855:30:83"},"nativeSrc":"17855:30:83","nodeType":"YulExpressionStatement","src":"17855:30:83"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"17905:9:83","nodeType":"YulIdentifier","src":"17905:9:83"},{"kind":"number","nativeSrc":"17916:2:83","nodeType":"YulLiteral","src":"17916:2:83","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"17901:3:83","nodeType":"YulIdentifier","src":"17901:3:83"},"nativeSrc":"17901:18:83","nodeType":"YulFunctionCall","src":"17901:18:83"},{"hexValue":"54686520606c6963656e73655479706560206f7074696f6e2063616e6e6f7420","kind":"string","nativeSrc":"17921:34:83","nodeType":"YulLiteral","src":"17921:34:83","type":"","value":"The `licenseType` option cannot "}],"functionName":{"name":"mstore","nativeSrc":"17894:6:83","nodeType":"YulIdentifier","src":"17894:6:83"},"nativeSrc":"17894:62:83","nodeType":"YulFunctionCall","src":"17894:62:83"},"nativeSrc":"17894:62:83","nodeType":"YulExpressionStatement","src":"17894:62:83"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"17976:9:83","nodeType":"YulIdentifier","src":"17976:9:83"},{"kind":"number","nativeSrc":"17987:2:83","nodeType":"YulLiteral","src":"17987:2:83","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"17972:3:83","nodeType":"YulIdentifier","src":"17972:3:83"},"nativeSrc":"17972:18:83","nodeType":"YulFunctionCall","src":"17972:18:83"},{"hexValue":"62652075736564207768656e207468652060736b69704c6963656e7365547970","kind":"string","nativeSrc":"17992:34:83","nodeType":"YulLiteral","src":"17992:34:83","type":"","value":"be used when the `skipLicenseTyp"}],"functionName":{"name":"mstore","nativeSrc":"17965:6:83","nodeType":"YulIdentifier","src":"17965:6:83"},"nativeSrc":"17965:62:83","nodeType":"YulFunctionCall","src":"17965:62:83"},"nativeSrc":"17965:62:83","nodeType":"YulExpressionStatement","src":"17965:62:83"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"18047:9:83","nodeType":"YulIdentifier","src":"18047:9:83"},{"kind":"number","nativeSrc":"18058:3:83","nodeType":"YulLiteral","src":"18058:3:83","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"18043:3:83","nodeType":"YulIdentifier","src":"18043:3:83"},"nativeSrc":"18043:19:83","nodeType":"YulFunctionCall","src":"18043:19:83"},{"hexValue":"6560206f7074696f6e20697320607472756560","kind":"string","nativeSrc":"18064:21:83","nodeType":"YulLiteral","src":"18064:21:83","type":"","value":"e` option is `true`"}],"functionName":{"name":"mstore","nativeSrc":"18036:6:83","nodeType":"YulIdentifier","src":"18036:6:83"},"nativeSrc":"18036:50:83","nodeType":"YulFunctionCall","src":"18036:50:83"},"nativeSrc":"18036:50:83","nodeType":"YulExpressionStatement","src":"18036:50:83"},{"nativeSrc":"18095:27:83","nodeType":"YulAssignment","src":"18095:27:83","value":{"arguments":[{"name":"headStart","nativeSrc":"18107:9:83","nodeType":"YulIdentifier","src":"18107:9:83"},{"kind":"number","nativeSrc":"18118:3:83","nodeType":"YulLiteral","src":"18118:3:83","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"18103:3:83","nodeType":"YulIdentifier","src":"18103:3:83"},"nativeSrc":"18103:19:83","nodeType":"YulFunctionCall","src":"18103:19:83"},"variableNames":[{"name":"tail","nativeSrc":"18095:4:83","nodeType":"YulIdentifier","src":"18095:4:83"}]}]},"name":"abi_encode_tuple_t_stringliteral_f48c71a4d559c08a669fad0de76519ac5cb5f320e5ef8890570d6dc61c117609__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"17641:487:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"17792:9:83","nodeType":"YulTypedName","src":"17792:9:83","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"17806:4:83","nodeType":"YulTypedName","src":"17806:4:83","type":""}],"src":"17641:487:83"},{"body":{"nativeSrc":"18165:95:83","nodeType":"YulBlock","src":"18165:95:83","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"18182:1:83","nodeType":"YulLiteral","src":"18182:1:83","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"18189:3:83","nodeType":"YulLiteral","src":"18189:3:83","type":"","value":"224"},{"kind":"number","nativeSrc":"18194:10:83","nodeType":"YulLiteral","src":"18194:10:83","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"18185:3:83","nodeType":"YulIdentifier","src":"18185:3:83"},"nativeSrc":"18185:20:83","nodeType":"YulFunctionCall","src":"18185:20:83"}],"functionName":{"name":"mstore","nativeSrc":"18175:6:83","nodeType":"YulIdentifier","src":"18175:6:83"},"nativeSrc":"18175:31:83","nodeType":"YulFunctionCall","src":"18175:31:83"},"nativeSrc":"18175:31:83","nodeType":"YulExpressionStatement","src":"18175:31:83"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"18222:1:83","nodeType":"YulLiteral","src":"18222:1:83","type":"","value":"4"},{"kind":"number","nativeSrc":"18225:4:83","nodeType":"YulLiteral","src":"18225:4:83","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"18215:6:83","nodeType":"YulIdentifier","src":"18215:6:83"},"nativeSrc":"18215:15:83","nodeType":"YulFunctionCall","src":"18215:15:83"},"nativeSrc":"18215:15:83","nodeType":"YulExpressionStatement","src":"18215:15:83"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"18246:1:83","nodeType":"YulLiteral","src":"18246:1:83","type":"","value":"0"},{"kind":"number","nativeSrc":"18249:4:83","nodeType":"YulLiteral","src":"18249:4:83","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"18239:6:83","nodeType":"YulIdentifier","src":"18239:6:83"},"nativeSrc":"18239:15:83","nodeType":"YulFunctionCall","src":"18239:15:83"},"nativeSrc":"18239:15:83","nodeType":"YulExpressionStatement","src":"18239:15:83"}]},"name":"panic_error_0x11","nativeSrc":"18133:127:83","nodeType":"YulFunctionDefinition","src":"18133:127:83"},{"body":{"nativeSrc":"18310:130:83","nodeType":"YulBlock","src":"18310:130:83","statements":[{"nativeSrc":"18320:31:83","nodeType":"YulVariableDeclaration","src":"18320:31:83","value":{"arguments":[{"name":"value","nativeSrc":"18339:5:83","nodeType":"YulIdentifier","src":"18339:5:83"},{"kind":"number","nativeSrc":"18346:4:83","nodeType":"YulLiteral","src":"18346:4:83","type":"","value":"0xff"}],"functionName":{"name":"and","nativeSrc":"18335:3:83","nodeType":"YulIdentifier","src":"18335:3:83"},"nativeSrc":"18335:16:83","nodeType":"YulFunctionCall","src":"18335:16:83"},"variables":[{"name":"value_1","nativeSrc":"18324:7:83","nodeType":"YulTypedName","src":"18324:7:83","type":""}]},{"body":{"nativeSrc":"18381:22:83","nodeType":"YulBlock","src":"18381:22:83","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"18383:16:83","nodeType":"YulIdentifier","src":"18383:16:83"},"nativeSrc":"18383:18:83","nodeType":"YulFunctionCall","src":"18383:18:83"},"nativeSrc":"18383:18:83","nodeType":"YulExpressionStatement","src":"18383:18:83"}]},"condition":{"arguments":[{"name":"value_1","nativeSrc":"18366:7:83","nodeType":"YulIdentifier","src":"18366:7:83"},{"kind":"number","nativeSrc":"18375:4:83","nodeType":"YulLiteral","src":"18375:4:83","type":"","value":"0xff"}],"functionName":{"name":"eq","nativeSrc":"18363:2:83","nodeType":"YulIdentifier","src":"18363:2:83"},"nativeSrc":"18363:17:83","nodeType":"YulFunctionCall","src":"18363:17:83"},"nativeSrc":"18360:43:83","nodeType":"YulIf","src":"18360:43:83"},{"nativeSrc":"18412:22:83","nodeType":"YulAssignment","src":"18412:22:83","value":{"arguments":[{"name":"value_1","nativeSrc":"18423:7:83","nodeType":"YulIdentifier","src":"18423:7:83"},{"kind":"number","nativeSrc":"18432:1:83","nodeType":"YulLiteral","src":"18432:1:83","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"18419:3:83","nodeType":"YulIdentifier","src":"18419:3:83"},"nativeSrc":"18419:15:83","nodeType":"YulFunctionCall","src":"18419:15:83"},"variableNames":[{"name":"ret","nativeSrc":"18412:3:83","nodeType":"YulIdentifier","src":"18412:3:83"}]}]},"name":"increment_t_uint8","nativeSrc":"18265:175:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"18292:5:83","nodeType":"YulTypedName","src":"18292:5:83","type":""}],"returnVariables":[{"name":"ret","nativeSrc":"18302:3:83","nodeType":"YulTypedName","src":"18302:3:83","type":""}],"src":"18265:175:83"},{"body":{"nativeSrc":"18685:160:83","nodeType":"YulBlock","src":"18685:160:83","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"18702:3:83","nodeType":"YulIdentifier","src":"18702:3:83"},{"hexValue":"406f70656e7a657070656c696e2f646566656e6465722d6465706c6f792d636c","kind":"string","nativeSrc":"18707:34:83","nodeType":"YulLiteral","src":"18707:34:83","type":"","value":"@openzeppelin/defender-deploy-cl"}],"functionName":{"name":"mstore","nativeSrc":"18695:6:83","nodeType":"YulIdentifier","src":"18695:6:83"},"nativeSrc":"18695:47:83","nodeType":"YulFunctionCall","src":"18695:47:83"},"nativeSrc":"18695:47:83","nodeType":"YulExpressionStatement","src":"18695:47:83"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"18762:3:83","nodeType":"YulIdentifier","src":"18762:3:83"},{"kind":"number","nativeSrc":"18767:2:83","nodeType":"YulLiteral","src":"18767:2:83","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"18758:3:83","nodeType":"YulIdentifier","src":"18758:3:83"},"nativeSrc":"18758:12:83","nodeType":"YulFunctionCall","src":"18758:12:83"},{"hexValue":"69656e742d636c6940","kind":"string","nativeSrc":"18772:11:83","nodeType":"YulLiteral","src":"18772:11:83","type":"","value":"ient-cli@"}],"functionName":{"name":"mstore","nativeSrc":"18751:6:83","nodeType":"YulIdentifier","src":"18751:6:83"},"nativeSrc":"18751:33:83","nodeType":"YulFunctionCall","src":"18751:33:83"},"nativeSrc":"18751:33:83","nodeType":"YulExpressionStatement","src":"18751:33:83"},{"nativeSrc":"18793:46:83","nodeType":"YulAssignment","src":"18793:46:83","value":{"arguments":[{"name":"value0","nativeSrc":"18818:6:83","nodeType":"YulIdentifier","src":"18818:6:83"},{"arguments":[{"name":"pos","nativeSrc":"18830:3:83","nodeType":"YulIdentifier","src":"18830:3:83"},{"kind":"number","nativeSrc":"18835:2:83","nodeType":"YulLiteral","src":"18835:2:83","type":"","value":"41"}],"functionName":{"name":"add","nativeSrc":"18826:3:83","nodeType":"YulIdentifier","src":"18826:3:83"},"nativeSrc":"18826:12:83","nodeType":"YulFunctionCall","src":"18826:12:83"}],"functionName":{"name":"abi_encode_string","nativeSrc":"18800:17:83","nodeType":"YulIdentifier","src":"18800:17:83"},"nativeSrc":"18800:39:83","nodeType":"YulFunctionCall","src":"18800:39:83"},"variableNames":[{"name":"end","nativeSrc":"18793:3:83","nodeType":"YulIdentifier","src":"18793:3:83"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_911dd02035025c2cb695e87f546c8657a33a4f437472b320b67efab6662a5c76_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"18445:400:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"18661:3:83","nodeType":"YulTypedName","src":"18661:3:83","type":""},{"name":"value0","nativeSrc":"18666:6:83","nodeType":"YulTypedName","src":"18666:6:83","type":""}],"returnVariables":[{"name":"end","nativeSrc":"18677:3:83","nodeType":"YulTypedName","src":"18677:3:83","type":""}],"src":"18445:400:83"},{"body":{"nativeSrc":"18969:110:83","nodeType":"YulBlock","src":"18969:110:83","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"18986:9:83","nodeType":"YulIdentifier","src":"18986:9:83"},{"kind":"number","nativeSrc":"18997:2:83","nodeType":"YulLiteral","src":"18997:2:83","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"18979:6:83","nodeType":"YulIdentifier","src":"18979:6:83"},"nativeSrc":"18979:21:83","nodeType":"YulFunctionCall","src":"18979:21:83"},"nativeSrc":"18979:21:83","nodeType":"YulExpressionStatement","src":"18979:21:83"},{"nativeSrc":"19009:64:83","nodeType":"YulAssignment","src":"19009:64:83","value":{"arguments":[{"name":"value0","nativeSrc":"19046:6:83","nodeType":"YulIdentifier","src":"19046:6:83"},{"arguments":[{"name":"headStart","nativeSrc":"19058:9:83","nodeType":"YulIdentifier","src":"19058:9:83"},{"kind":"number","nativeSrc":"19069:2:83","nodeType":"YulLiteral","src":"19069:2:83","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"19054:3:83","nodeType":"YulIdentifier","src":"19054:3:83"},"nativeSrc":"19054:18:83","nodeType":"YulFunctionCall","src":"19054:18:83"}],"functionName":{"name":"abi_encode_string_memory_ptr","nativeSrc":"19017:28:83","nodeType":"YulIdentifier","src":"19017:28:83"},"nativeSrc":"19017:56:83","nodeType":"YulFunctionCall","src":"19017:56:83"},"variableNames":[{"name":"tail","nativeSrc":"19009:4:83","nodeType":"YulIdentifier","src":"19009:4:83"}]}]},"name":"abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed","nativeSrc":"18850:229:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"18938:9:83","nodeType":"YulTypedName","src":"18938:9:83","type":""},{"name":"value0","nativeSrc":"18949:6:83","nodeType":"YulTypedName","src":"18949:6:83","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"18960:4:83","nodeType":"YulTypedName","src":"18960:4:83","type":""}],"src":"18850:229:83"},{"body":{"nativeSrc":"19185:76:83","nodeType":"YulBlock","src":"19185:76:83","statements":[{"nativeSrc":"19195:26:83","nodeType":"YulAssignment","src":"19195:26:83","value":{"arguments":[{"name":"headStart","nativeSrc":"19207:9:83","nodeType":"YulIdentifier","src":"19207:9:83"},{"kind":"number","nativeSrc":"19218:2:83","nodeType":"YulLiteral","src":"19218:2:83","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"19203:3:83","nodeType":"YulIdentifier","src":"19203:3:83"},"nativeSrc":"19203:18:83","nodeType":"YulFunctionCall","src":"19203:18:83"},"variableNames":[{"name":"tail","nativeSrc":"19195:4:83","nodeType":"YulIdentifier","src":"19195:4:83"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"19237:9:83","nodeType":"YulIdentifier","src":"19237:9:83"},{"name":"value0","nativeSrc":"19248:6:83","nodeType":"YulIdentifier","src":"19248:6:83"}],"functionName":{"name":"mstore","nativeSrc":"19230:6:83","nodeType":"YulIdentifier","src":"19230:6:83"},"nativeSrc":"19230:25:83","nodeType":"YulFunctionCall","src":"19230:25:83"},"nativeSrc":"19230:25:83","nodeType":"YulExpressionStatement","src":"19230:25:83"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nativeSrc":"19084:177:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"19154:9:83","nodeType":"YulTypedName","src":"19154:9:83","type":""},{"name":"value0","nativeSrc":"19165:6:83","nodeType":"YulTypedName","src":"19165:6:83","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"19176:4:83","nodeType":"YulTypedName","src":"19176:4:83","type":""}],"src":"19084:177:83"},{"body":{"nativeSrc":"19589:433:83","nodeType":"YulBlock","src":"19589:433:83","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"19606:9:83","nodeType":"YulIdentifier","src":"19606:9:83"},{"kind":"number","nativeSrc":"19617:2:83","nodeType":"YulLiteral","src":"19617:2:83","type":"","value":"96"}],"functionName":{"name":"mstore","nativeSrc":"19599:6:83","nodeType":"YulIdentifier","src":"19599:6:83"},"nativeSrc":"19599:21:83","nodeType":"YulFunctionCall","src":"19599:21:83"},"nativeSrc":"19599:21:83","nodeType":"YulExpressionStatement","src":"19599:21:83"},{"nativeSrc":"19629:70:83","nodeType":"YulVariableDeclaration","src":"19629:70:83","value":{"arguments":[{"name":"value0","nativeSrc":"19672:6:83","nodeType":"YulIdentifier","src":"19672:6:83"},{"arguments":[{"name":"headStart","nativeSrc":"19684:9:83","nodeType":"YulIdentifier","src":"19684:9:83"},{"kind":"number","nativeSrc":"19695:2:83","nodeType":"YulLiteral","src":"19695:2:83","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"19680:3:83","nodeType":"YulIdentifier","src":"19680:3:83"},"nativeSrc":"19680:18:83","nodeType":"YulFunctionCall","src":"19680:18:83"}],"functionName":{"name":"abi_encode_string_memory_ptr","nativeSrc":"19643:28:83","nodeType":"YulIdentifier","src":"19643:28:83"},"nativeSrc":"19643:56:83","nodeType":"YulFunctionCall","src":"19643:56:83"},"variables":[{"name":"tail_1","nativeSrc":"19633:6:83","nodeType":"YulTypedName","src":"19633:6:83","type":""}]},{"nativeSrc":"19708:32:83","nodeType":"YulVariableDeclaration","src":"19708:32:83","value":{"arguments":[{"name":"tail_1","nativeSrc":"19722:6:83","nodeType":"YulIdentifier","src":"19722:6:83"},{"name":"headStart","nativeSrc":"19730:9:83","nodeType":"YulIdentifier","src":"19730:9:83"}],"functionName":{"name":"sub","nativeSrc":"19718:3:83","nodeType":"YulIdentifier","src":"19718:3:83"},"nativeSrc":"19718:22:83","nodeType":"YulFunctionCall","src":"19718:22:83"},"variables":[{"name":"_1","nativeSrc":"19712:2:83","nodeType":"YulTypedName","src":"19712:2:83","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"19760:9:83","nodeType":"YulIdentifier","src":"19760:9:83"},{"kind":"number","nativeSrc":"19771:2:83","nodeType":"YulLiteral","src":"19771:2:83","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"19756:3:83","nodeType":"YulIdentifier","src":"19756:3:83"},"nativeSrc":"19756:18:83","nodeType":"YulFunctionCall","src":"19756:18:83"},{"name":"_1","nativeSrc":"19776:2:83","nodeType":"YulIdentifier","src":"19776:2:83"}],"functionName":{"name":"mstore","nativeSrc":"19749:6:83","nodeType":"YulIdentifier","src":"19749:6:83"},"nativeSrc":"19749:30:83","nodeType":"YulFunctionCall","src":"19749:30:83"},"nativeSrc":"19749:30:83","nodeType":"YulExpressionStatement","src":"19749:30:83"},{"expression":{"arguments":[{"name":"tail_1","nativeSrc":"19795:6:83","nodeType":"YulIdentifier","src":"19795:6:83"},{"kind":"number","nativeSrc":"19803:1:83","nodeType":"YulLiteral","src":"19803:1:83","type":"","value":"1"}],"functionName":{"name":"mstore","nativeSrc":"19788:6:83","nodeType":"YulIdentifier","src":"19788:6:83"},"nativeSrc":"19788:17:83","nodeType":"YulFunctionCall","src":"19788:17:83"},"nativeSrc":"19788:17:83","nodeType":"YulExpressionStatement","src":"19788:17:83"},{"expression":{"arguments":[{"arguments":[{"name":"tail_1","nativeSrc":"19825:6:83","nodeType":"YulIdentifier","src":"19825:6:83"},{"kind":"number","nativeSrc":"19833:2:83","nodeType":"YulLiteral","src":"19833:2:83","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"19821:3:83","nodeType":"YulIdentifier","src":"19821:3:83"},"nativeSrc":"19821:15:83","nodeType":"YulFunctionCall","src":"19821:15:83"},{"arguments":[{"kind":"number","nativeSrc":"19842:3:83","nodeType":"YulLiteral","src":"19842:3:83","type":"","value":"249"},{"kind":"number","nativeSrc":"19847:2:83","nodeType":"YulLiteral","src":"19847:2:83","type":"","value":"17"}],"functionName":{"name":"shl","nativeSrc":"19838:3:83","nodeType":"YulIdentifier","src":"19838:3:83"},"nativeSrc":"19838:12:83","nodeType":"YulFunctionCall","src":"19838:12:83"}],"functionName":{"name":"mstore","nativeSrc":"19814:6:83","nodeType":"YulIdentifier","src":"19814:6:83"},"nativeSrc":"19814:37:83","nodeType":"YulFunctionCall","src":"19814:37:83"},"nativeSrc":"19814:37:83","nodeType":"YulExpressionStatement","src":"19814:37:83"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"19871:9:83","nodeType":"YulIdentifier","src":"19871:9:83"},{"kind":"number","nativeSrc":"19882:2:83","nodeType":"YulLiteral","src":"19882:2:83","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"19867:3:83","nodeType":"YulIdentifier","src":"19867:3:83"},"nativeSrc":"19867:18:83","nodeType":"YulFunctionCall","src":"19867:18:83"},{"arguments":[{"name":"_1","nativeSrc":"19891:2:83","nodeType":"YulIdentifier","src":"19891:2:83"},{"kind":"number","nativeSrc":"19895:2:83","nodeType":"YulLiteral","src":"19895:2:83","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"19887:3:83","nodeType":"YulIdentifier","src":"19887:3:83"},"nativeSrc":"19887:11:83","nodeType":"YulFunctionCall","src":"19887:11:83"}],"functionName":{"name":"mstore","nativeSrc":"19860:6:83","nodeType":"YulIdentifier","src":"19860:6:83"},"nativeSrc":"19860:39:83","nodeType":"YulFunctionCall","src":"19860:39:83"},"nativeSrc":"19860:39:83","nodeType":"YulExpressionStatement","src":"19860:39:83"},{"expression":{"arguments":[{"arguments":[{"name":"tail_1","nativeSrc":"19919:6:83","nodeType":"YulIdentifier","src":"19919:6:83"},{"kind":"number","nativeSrc":"19927:2:83","nodeType":"YulLiteral","src":"19927:2:83","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"19915:3:83","nodeType":"YulIdentifier","src":"19915:3:83"},"nativeSrc":"19915:15:83","nodeType":"YulFunctionCall","src":"19915:15:83"},{"kind":"number","nativeSrc":"19932:1:83","nodeType":"YulLiteral","src":"19932:1:83","type":"","value":"2"}],"functionName":{"name":"mstore","nativeSrc":"19908:6:83","nodeType":"YulIdentifier","src":"19908:6:83"},"nativeSrc":"19908:26:83","nodeType":"YulFunctionCall","src":"19908:26:83"},"nativeSrc":"19908:26:83","nodeType":"YulExpressionStatement","src":"19908:26:83"},{"expression":{"arguments":[{"arguments":[{"name":"tail_1","nativeSrc":"19954:6:83","nodeType":"YulIdentifier","src":"19954:6:83"},{"kind":"number","nativeSrc":"19962:2:83","nodeType":"YulLiteral","src":"19962:2:83","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"19950:3:83","nodeType":"YulIdentifier","src":"19950:3:83"},"nativeSrc":"19950:15:83","nodeType":"YulFunctionCall","src":"19950:15:83"},{"arguments":[{"kind":"number","nativeSrc":"19971:3:83","nodeType":"YulLiteral","src":"19971:3:83","type":"","value":"241"},{"kind":"number","nativeSrc":"19976:5:83","nodeType":"YulLiteral","src":"19976:5:83","type":"","value":"11793"}],"functionName":{"name":"shl","nativeSrc":"19967:3:83","nodeType":"YulIdentifier","src":"19967:3:83"},"nativeSrc":"19967:15:83","nodeType":"YulFunctionCall","src":"19967:15:83"}],"functionName":{"name":"mstore","nativeSrc":"19943:6:83","nodeType":"YulIdentifier","src":"19943:6:83"},"nativeSrc":"19943:40:83","nodeType":"YulFunctionCall","src":"19943:40:83"},"nativeSrc":"19943:40:83","nodeType":"YulExpressionStatement","src":"19943:40:83"},{"nativeSrc":"19992:24:83","nodeType":"YulAssignment","src":"19992:24:83","value":{"arguments":[{"name":"tail_1","nativeSrc":"20004:6:83","nodeType":"YulIdentifier","src":"20004:6:83"},{"kind":"number","nativeSrc":"20012:3:83","nodeType":"YulLiteral","src":"20012:3:83","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"20000:3:83","nodeType":"YulIdentifier","src":"20000:3:83"},"nativeSrc":"20000:16:83","nodeType":"YulFunctionCall","src":"20000:16:83"},"variableNames":[{"name":"tail","nativeSrc":"19992:4:83","nodeType":"YulIdentifier","src":"19992:4:83"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr_t_stringliteral_6e9f33448a4153023cdaf3eb759f1afdc24aba433a3e18b683f8c04a6eaa69f0_t_stringliteral_9104361da4a0d729c7b0f207387eef9f9e34470af38c160ad972369226db1fea__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed","nativeSrc":"19266:756:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"19558:9:83","nodeType":"YulTypedName","src":"19558:9:83","type":""},{"name":"value0","nativeSrc":"19569:6:83","nodeType":"YulTypedName","src":"19569:6:83","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"19580:4:83","nodeType":"YulTypedName","src":"19580:4:83","type":""}],"src":"19266:756:83"},{"body":{"nativeSrc":"20249:253:83","nodeType":"YulBlock","src":"20249:253:83","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"20266:9:83","nodeType":"YulIdentifier","src":"20266:9:83"},{"kind":"number","nativeSrc":"20277:2:83","nodeType":"YulLiteral","src":"20277:2:83","type":"","value":"64"}],"functionName":{"name":"mstore","nativeSrc":"20259:6:83","nodeType":"YulIdentifier","src":"20259:6:83"},"nativeSrc":"20259:21:83","nodeType":"YulFunctionCall","src":"20259:21:83"},"nativeSrc":"20259:21:83","nodeType":"YulExpressionStatement","src":"20259:21:83"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"20300:9:83","nodeType":"YulIdentifier","src":"20300:9:83"},{"kind":"number","nativeSrc":"20311:2:83","nodeType":"YulLiteral","src":"20311:2:83","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"20296:3:83","nodeType":"YulIdentifier","src":"20296:3:83"},"nativeSrc":"20296:18:83","nodeType":"YulFunctionCall","src":"20296:18:83"},{"kind":"number","nativeSrc":"20316:2:83","nodeType":"YulLiteral","src":"20316:2:83","type":"","value":"22"}],"functionName":{"name":"mstore","nativeSrc":"20289:6:83","nodeType":"YulIdentifier","src":"20289:6:83"},"nativeSrc":"20289:30:83","nodeType":"YulFunctionCall","src":"20289:30:83"},"nativeSrc":"20289:30:83","nodeType":"YulExpressionStatement","src":"20289:30:83"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"20339:9:83","nodeType":"YulIdentifier","src":"20339:9:83"},{"kind":"number","nativeSrc":"20350:2:83","nodeType":"YulLiteral","src":"20350:2:83","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"20335:3:83","nodeType":"YulIdentifier","src":"20335:3:83"},"nativeSrc":"20335:18:83","nodeType":"YulFunctionCall","src":"20335:18:83"},{"hexValue":"4f50454e5a455050454c494e5f424153485f50415448","kind":"string","nativeSrc":"20355:24:83","nodeType":"YulLiteral","src":"20355:24:83","type":"","value":"OPENZEPPELIN_BASH_PATH"}],"functionName":{"name":"mstore","nativeSrc":"20328:6:83","nodeType":"YulIdentifier","src":"20328:6:83"},"nativeSrc":"20328:52:83","nodeType":"YulFunctionCall","src":"20328:52:83"},"nativeSrc":"20328:52:83","nodeType":"YulExpressionStatement","src":"20328:52:83"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"20400:9:83","nodeType":"YulIdentifier","src":"20400:9:83"},{"kind":"number","nativeSrc":"20411:4:83","nodeType":"YulLiteral","src":"20411:4:83","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"20396:3:83","nodeType":"YulIdentifier","src":"20396:3:83"},"nativeSrc":"20396:20:83","nodeType":"YulFunctionCall","src":"20396:20:83"},{"kind":"number","nativeSrc":"20418:3:83","nodeType":"YulLiteral","src":"20418:3:83","type":"","value":"128"}],"functionName":{"name":"mstore","nativeSrc":"20389:6:83","nodeType":"YulIdentifier","src":"20389:6:83"},"nativeSrc":"20389:33:83","nodeType":"YulFunctionCall","src":"20389:33:83"},"nativeSrc":"20389:33:83","nodeType":"YulExpressionStatement","src":"20389:33:83"},{"nativeSrc":"20431:65:83","nodeType":"YulAssignment","src":"20431:65:83","value":{"arguments":[{"name":"value0","nativeSrc":"20468:6:83","nodeType":"YulIdentifier","src":"20468:6:83"},{"arguments":[{"name":"headStart","nativeSrc":"20480:9:83","nodeType":"YulIdentifier","src":"20480:9:83"},{"kind":"number","nativeSrc":"20491:3:83","nodeType":"YulLiteral","src":"20491:3:83","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"20476:3:83","nodeType":"YulIdentifier","src":"20476:3:83"},"nativeSrc":"20476:19:83","nodeType":"YulFunctionCall","src":"20476:19:83"}],"functionName":{"name":"abi_encode_string_memory_ptr","nativeSrc":"20439:28:83","nodeType":"YulIdentifier","src":"20439:28:83"},"nativeSrc":"20439:57:83","nodeType":"YulFunctionCall","src":"20439:57:83"},"variableNames":[{"name":"tail","nativeSrc":"20431:4:83","nodeType":"YulIdentifier","src":"20431:4:83"}]}]},"name":"abi_encode_tuple_t_stringliteral_524873d67beb7637903c52887510c8a7ea71785147c24441a8c36e6df12a4c44_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed","nativeSrc":"20027:475:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"20218:9:83","nodeType":"YulTypedName","src":"20218:9:83","type":""},{"name":"value0","nativeSrc":"20229:6:83","nodeType":"YulTypedName","src":"20229:6:83","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"20240:4:83","nodeType":"YulTypedName","src":"20240:4:83","type":""}],"src":"20027:475:83"},{"body":{"nativeSrc":"20678:622:83","nodeType":"YulBlock","src":"20678:622:83","statements":[{"nativeSrc":"20688:32:83","nodeType":"YulVariableDeclaration","src":"20688:32:83","value":{"arguments":[{"name":"headStart","nativeSrc":"20706:9:83","nodeType":"YulIdentifier","src":"20706:9:83"},{"kind":"number","nativeSrc":"20717:2:83","nodeType":"YulLiteral","src":"20717:2:83","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"20702:3:83","nodeType":"YulIdentifier","src":"20702:3:83"},"nativeSrc":"20702:18:83","nodeType":"YulFunctionCall","src":"20702:18:83"},"variables":[{"name":"tail_1","nativeSrc":"20692:6:83","nodeType":"YulTypedName","src":"20692:6:83","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"20736:9:83","nodeType":"YulIdentifier","src":"20736:9:83"},{"kind":"number","nativeSrc":"20747:2:83","nodeType":"YulLiteral","src":"20747:2:83","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"20729:6:83","nodeType":"YulIdentifier","src":"20729:6:83"},"nativeSrc":"20729:21:83","nodeType":"YulFunctionCall","src":"20729:21:83"},"nativeSrc":"20729:21:83","nodeType":"YulExpressionStatement","src":"20729:21:83"},{"nativeSrc":"20759:17:83","nodeType":"YulVariableDeclaration","src":"20759:17:83","value":{"name":"tail_1","nativeSrc":"20770:6:83","nodeType":"YulIdentifier","src":"20770:6:83"},"variables":[{"name":"pos","nativeSrc":"20763:3:83","nodeType":"YulTypedName","src":"20763:3:83","type":""}]},{"nativeSrc":"20785:27:83","nodeType":"YulVariableDeclaration","src":"20785:27:83","value":{"arguments":[{"name":"value0","nativeSrc":"20805:6:83","nodeType":"YulIdentifier","src":"20805:6:83"}],"functionName":{"name":"mload","nativeSrc":"20799:5:83","nodeType":"YulIdentifier","src":"20799:5:83"},"nativeSrc":"20799:13:83","nodeType":"YulFunctionCall","src":"20799:13:83"},"variables":[{"name":"length","nativeSrc":"20789:6:83","nodeType":"YulTypedName","src":"20789:6:83","type":""}]},{"expression":{"arguments":[{"name":"tail_1","nativeSrc":"20828:6:83","nodeType":"YulIdentifier","src":"20828:6:83"},{"name":"length","nativeSrc":"20836:6:83","nodeType":"YulIdentifier","src":"20836:6:83"}],"functionName":{"name":"mstore","nativeSrc":"20821:6:83","nodeType":"YulIdentifier","src":"20821:6:83"},"nativeSrc":"20821:22:83","nodeType":"YulFunctionCall","src":"20821:22:83"},"nativeSrc":"20821:22:83","nodeType":"YulExpressionStatement","src":"20821:22:83"},{"nativeSrc":"20852:25:83","nodeType":"YulAssignment","src":"20852:25:83","value":{"arguments":[{"name":"headStart","nativeSrc":"20863:9:83","nodeType":"YulIdentifier","src":"20863:9:83"},{"kind":"number","nativeSrc":"20874:2:83","nodeType":"YulLiteral","src":"20874:2:83","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"20859:3:83","nodeType":"YulIdentifier","src":"20859:3:83"},"nativeSrc":"20859:18:83","nodeType":"YulFunctionCall","src":"20859:18:83"},"variableNames":[{"name":"pos","nativeSrc":"20852:3:83","nodeType":"YulIdentifier","src":"20852:3:83"}]},{"nativeSrc":"20886:53:83","nodeType":"YulVariableDeclaration","src":"20886:53:83","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"20908:9:83","nodeType":"YulIdentifier","src":"20908:9:83"},{"arguments":[{"kind":"number","nativeSrc":"20923:1:83","nodeType":"YulLiteral","src":"20923:1:83","type":"","value":"5"},{"name":"length","nativeSrc":"20926:6:83","nodeType":"YulIdentifier","src":"20926:6:83"}],"functionName":{"name":"shl","nativeSrc":"20919:3:83","nodeType":"YulIdentifier","src":"20919:3:83"},"nativeSrc":"20919:14:83","nodeType":"YulFunctionCall","src":"20919:14:83"}],"functionName":{"name":"add","nativeSrc":"20904:3:83","nodeType":"YulIdentifier","src":"20904:3:83"},"nativeSrc":"20904:30:83","nodeType":"YulFunctionCall","src":"20904:30:83"},{"kind":"number","nativeSrc":"20936:2:83","nodeType":"YulLiteral","src":"20936:2:83","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"20900:3:83","nodeType":"YulIdentifier","src":"20900:3:83"},"nativeSrc":"20900:39:83","nodeType":"YulFunctionCall","src":"20900:39:83"},"variables":[{"name":"tail_2","nativeSrc":"20890:6:83","nodeType":"YulTypedName","src":"20890:6:83","type":""}]},{"nativeSrc":"20948:29:83","nodeType":"YulVariableDeclaration","src":"20948:29:83","value":{"arguments":[{"name":"value0","nativeSrc":"20966:6:83","nodeType":"YulIdentifier","src":"20966:6:83"},{"kind":"number","nativeSrc":"20974:2:83","nodeType":"YulLiteral","src":"20974:2:83","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"20962:3:83","nodeType":"YulIdentifier","src":"20962:3:83"},"nativeSrc":"20962:15:83","nodeType":"YulFunctionCall","src":"20962:15:83"},"variables":[{"name":"srcPtr","nativeSrc":"20952:6:83","nodeType":"YulTypedName","src":"20952:6:83","type":""}]},{"nativeSrc":"20986:10:83","nodeType":"YulVariableDeclaration","src":"20986:10:83","value":{"kind":"number","nativeSrc":"20995:1:83","nodeType":"YulLiteral","src":"20995:1:83","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"20990:1:83","nodeType":"YulTypedName","src":"20990:1:83","type":""}]},{"body":{"nativeSrc":"21054:217:83","nodeType":"YulBlock","src":"21054:217:83","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"21075:3:83","nodeType":"YulIdentifier","src":"21075:3:83"},{"arguments":[{"arguments":[{"name":"tail_2","nativeSrc":"21088:6:83","nodeType":"YulIdentifier","src":"21088:6:83"},{"name":"headStart","nativeSrc":"21096:9:83","nodeType":"YulIdentifier","src":"21096:9:83"}],"functionName":{"name":"sub","nativeSrc":"21084:3:83","nodeType":"YulIdentifier","src":"21084:3:83"},"nativeSrc":"21084:22:83","nodeType":"YulFunctionCall","src":"21084:22:83"},{"arguments":[{"kind":"number","nativeSrc":"21112:2:83","nodeType":"YulLiteral","src":"21112:2:83","type":"","value":"63"}],"functionName":{"name":"not","nativeSrc":"21108:3:83","nodeType":"YulIdentifier","src":"21108:3:83"},"nativeSrc":"21108:7:83","nodeType":"YulFunctionCall","src":"21108:7:83"}],"functionName":{"name":"add","nativeSrc":"21080:3:83","nodeType":"YulIdentifier","src":"21080:3:83"},"nativeSrc":"21080:36:83","nodeType":"YulFunctionCall","src":"21080:36:83"}],"functionName":{"name":"mstore","nativeSrc":"21068:6:83","nodeType":"YulIdentifier","src":"21068:6:83"},"nativeSrc":"21068:49:83","nodeType":"YulFunctionCall","src":"21068:49:83"},"nativeSrc":"21068:49:83","nodeType":"YulExpressionStatement","src":"21068:49:83"},{"nativeSrc":"21130:61:83","nodeType":"YulAssignment","src":"21130:61:83","value":{"arguments":[{"arguments":[{"name":"srcPtr","nativeSrc":"21175:6:83","nodeType":"YulIdentifier","src":"21175:6:83"}],"functionName":{"name":"mload","nativeSrc":"21169:5:83","nodeType":"YulIdentifier","src":"21169:5:83"},"nativeSrc":"21169:13:83","nodeType":"YulFunctionCall","src":"21169:13:83"},{"name":"tail_2","nativeSrc":"21184:6:83","nodeType":"YulIdentifier","src":"21184:6:83"}],"functionName":{"name":"abi_encode_string_memory_ptr","nativeSrc":"21140:28:83","nodeType":"YulIdentifier","src":"21140:28:83"},"nativeSrc":"21140:51:83","nodeType":"YulFunctionCall","src":"21140:51:83"},"variableNames":[{"name":"tail_2","nativeSrc":"21130:6:83","nodeType":"YulIdentifier","src":"21130:6:83"}]},{"nativeSrc":"21204:25:83","nodeType":"YulAssignment","src":"21204:25:83","value":{"arguments":[{"name":"srcPtr","nativeSrc":"21218:6:83","nodeType":"YulIdentifier","src":"21218:6:83"},{"kind":"number","nativeSrc":"21226:2:83","nodeType":"YulLiteral","src":"21226:2:83","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"21214:3:83","nodeType":"YulIdentifier","src":"21214:3:83"},"nativeSrc":"21214:15:83","nodeType":"YulFunctionCall","src":"21214:15:83"},"variableNames":[{"name":"srcPtr","nativeSrc":"21204:6:83","nodeType":"YulIdentifier","src":"21204:6:83"}]},{"nativeSrc":"21242:19:83","nodeType":"YulAssignment","src":"21242:19:83","value":{"arguments":[{"name":"pos","nativeSrc":"21253:3:83","nodeType":"YulIdentifier","src":"21253:3:83"},{"kind":"number","nativeSrc":"21258:2:83","nodeType":"YulLiteral","src":"21258:2:83","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"21249:3:83","nodeType":"YulIdentifier","src":"21249:3:83"},"nativeSrc":"21249:12:83","nodeType":"YulFunctionCall","src":"21249:12:83"},"variableNames":[{"name":"pos","nativeSrc":"21242:3:83","nodeType":"YulIdentifier","src":"21242:3:83"}]}]},"condition":{"arguments":[{"name":"i","nativeSrc":"21016:1:83","nodeType":"YulIdentifier","src":"21016:1:83"},{"name":"length","nativeSrc":"21019:6:83","nodeType":"YulIdentifier","src":"21019:6:83"}],"functionName":{"name":"lt","nativeSrc":"21013:2:83","nodeType":"YulIdentifier","src":"21013:2:83"},"nativeSrc":"21013:13:83","nodeType":"YulFunctionCall","src":"21013:13:83"},"nativeSrc":"21005:266:83","nodeType":"YulForLoop","post":{"nativeSrc":"21027:18:83","nodeType":"YulBlock","src":"21027:18:83","statements":[{"nativeSrc":"21029:14:83","nodeType":"YulAssignment","src":"21029:14:83","value":{"arguments":[{"name":"i","nativeSrc":"21038:1:83","nodeType":"YulIdentifier","src":"21038:1:83"},{"kind":"number","nativeSrc":"21041:1:83","nodeType":"YulLiteral","src":"21041:1:83","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"21034:3:83","nodeType":"YulIdentifier","src":"21034:3:83"},"nativeSrc":"21034:9:83","nodeType":"YulFunctionCall","src":"21034:9:83"},"variableNames":[{"name":"i","nativeSrc":"21029:1:83","nodeType":"YulIdentifier","src":"21029:1:83"}]}]},"pre":{"nativeSrc":"21009:3:83","nodeType":"YulBlock","src":"21009:3:83","statements":[]},"src":"21005:266:83"},{"nativeSrc":"21280:14:83","nodeType":"YulAssignment","src":"21280:14:83","value":{"name":"tail_2","nativeSrc":"21288:6:83","nodeType":"YulIdentifier","src":"21288:6:83"},"variableNames":[{"name":"tail","nativeSrc":"21280:4:83","nodeType":"YulIdentifier","src":"21280:4:83"}]}]},"name":"abi_encode_tuple_t_array$_t_string_memory_ptr_$dyn_memory_ptr__to_t_array$_t_string_memory_ptr_$dyn_memory_ptr__fromStack_reversed","nativeSrc":"20507:793:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"20647:9:83","nodeType":"YulTypedName","src":"20647:9:83","type":""},{"name":"value0","nativeSrc":"20658:6:83","nodeType":"YulTypedName","src":"20658:6:83","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"20669:4:83","nodeType":"YulTypedName","src":"20669:4:83","type":""}],"src":"20507:793:83"},{"body":{"nativeSrc":"21413:851:83","nodeType":"YulBlock","src":"21413:851:83","statements":[{"body":{"nativeSrc":"21459:16:83","nodeType":"YulBlock","src":"21459:16:83","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"21468:1:83","nodeType":"YulLiteral","src":"21468:1:83","type":"","value":"0"},{"kind":"number","nativeSrc":"21471:1:83","nodeType":"YulLiteral","src":"21471:1:83","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"21461:6:83","nodeType":"YulIdentifier","src":"21461:6:83"},"nativeSrc":"21461:12:83","nodeType":"YulFunctionCall","src":"21461:12:83"},"nativeSrc":"21461:12:83","nodeType":"YulExpressionStatement","src":"21461:12:83"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"21434:7:83","nodeType":"YulIdentifier","src":"21434:7:83"},{"name":"headStart","nativeSrc":"21443:9:83","nodeType":"YulIdentifier","src":"21443:9:83"}],"functionName":{"name":"sub","nativeSrc":"21430:3:83","nodeType":"YulIdentifier","src":"21430:3:83"},"nativeSrc":"21430:23:83","nodeType":"YulFunctionCall","src":"21430:23:83"},{"kind":"number","nativeSrc":"21455:2:83","nodeType":"YulLiteral","src":"21455:2:83","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"21426:3:83","nodeType":"YulIdentifier","src":"21426:3:83"},"nativeSrc":"21426:32:83","nodeType":"YulFunctionCall","src":"21426:32:83"},"nativeSrc":"21423:52:83","nodeType":"YulIf","src":"21423:52:83"},{"nativeSrc":"21484:30:83","nodeType":"YulVariableDeclaration","src":"21484:30:83","value":{"arguments":[{"name":"headStart","nativeSrc":"21504:9:83","nodeType":"YulIdentifier","src":"21504:9:83"}],"functionName":{"name":"mload","nativeSrc":"21498:5:83","nodeType":"YulIdentifier","src":"21498:5:83"},"nativeSrc":"21498:16:83","nodeType":"YulFunctionCall","src":"21498:16:83"},"variables":[{"name":"offset","nativeSrc":"21488:6:83","nodeType":"YulTypedName","src":"21488:6:83","type":""}]},{"body":{"nativeSrc":"21557:16:83","nodeType":"YulBlock","src":"21557:16:83","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"21566:1:83","nodeType":"YulLiteral","src":"21566:1:83","type":"","value":"0"},{"kind":"number","nativeSrc":"21569:1:83","nodeType":"YulLiteral","src":"21569:1:83","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"21559:6:83","nodeType":"YulIdentifier","src":"21559:6:83"},"nativeSrc":"21559:12:83","nodeType":"YulFunctionCall","src":"21559:12:83"},"nativeSrc":"21559:12:83","nodeType":"YulExpressionStatement","src":"21559:12:83"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"21529:6:83","nodeType":"YulIdentifier","src":"21529:6:83"},{"kind":"number","nativeSrc":"21537:18:83","nodeType":"YulLiteral","src":"21537:18:83","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"21526:2:83","nodeType":"YulIdentifier","src":"21526:2:83"},"nativeSrc":"21526:30:83","nodeType":"YulFunctionCall","src":"21526:30:83"},"nativeSrc":"21523:50:83","nodeType":"YulIf","src":"21523:50:83"},{"nativeSrc":"21582:32:83","nodeType":"YulVariableDeclaration","src":"21582:32:83","value":{"arguments":[{"name":"headStart","nativeSrc":"21596:9:83","nodeType":"YulIdentifier","src":"21596:9:83"},{"name":"offset","nativeSrc":"21607:6:83","nodeType":"YulIdentifier","src":"21607:6:83"}],"functionName":{"name":"add","nativeSrc":"21592:3:83","nodeType":"YulIdentifier","src":"21592:3:83"},"nativeSrc":"21592:22:83","nodeType":"YulFunctionCall","src":"21592:22:83"},"variables":[{"name":"_1","nativeSrc":"21586:2:83","nodeType":"YulTypedName","src":"21586:2:83","type":""}]},{"body":{"nativeSrc":"21654:16:83","nodeType":"YulBlock","src":"21654:16:83","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"21663:1:83","nodeType":"YulLiteral","src":"21663:1:83","type":"","value":"0"},{"kind":"number","nativeSrc":"21666:1:83","nodeType":"YulLiteral","src":"21666:1:83","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"21656:6:83","nodeType":"YulIdentifier","src":"21656:6:83"},"nativeSrc":"21656:12:83","nodeType":"YulFunctionCall","src":"21656:12:83"},"nativeSrc":"21656:12:83","nodeType":"YulExpressionStatement","src":"21656:12:83"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"21634:7:83","nodeType":"YulIdentifier","src":"21634:7:83"},{"name":"_1","nativeSrc":"21643:2:83","nodeType":"YulIdentifier","src":"21643:2:83"}],"functionName":{"name":"sub","nativeSrc":"21630:3:83","nodeType":"YulIdentifier","src":"21630:3:83"},"nativeSrc":"21630:16:83","nodeType":"YulFunctionCall","src":"21630:16:83"},{"kind":"number","nativeSrc":"21648:4:83","nodeType":"YulLiteral","src":"21648:4:83","type":"","value":"0x60"}],"functionName":{"name":"slt","nativeSrc":"21626:3:83","nodeType":"YulIdentifier","src":"21626:3:83"},"nativeSrc":"21626:27:83","nodeType":"YulFunctionCall","src":"21626:27:83"},"nativeSrc":"21623:47:83","nodeType":"YulIf","src":"21623:47:83"},{"nativeSrc":"21679:35:83","nodeType":"YulVariableDeclaration","src":"21679:35:83","value":{"arguments":[],"functionName":{"name":"allocate_memory_3969","nativeSrc":"21692:20:83","nodeType":"YulIdentifier","src":"21692:20:83"},"nativeSrc":"21692:22:83","nodeType":"YulFunctionCall","src":"21692:22:83"},"variables":[{"name":"value","nativeSrc":"21683:5:83","nodeType":"YulTypedName","src":"21683:5:83","type":""}]},{"nativeSrc":"21723:24:83","nodeType":"YulVariableDeclaration","src":"21723:24:83","value":{"arguments":[{"name":"_1","nativeSrc":"21744:2:83","nodeType":"YulIdentifier","src":"21744:2:83"}],"functionName":{"name":"mload","nativeSrc":"21738:5:83","nodeType":"YulIdentifier","src":"21738:5:83"},"nativeSrc":"21738:9:83","nodeType":"YulFunctionCall","src":"21738:9:83"},"variables":[{"name":"value_1","nativeSrc":"21727:7:83","nodeType":"YulTypedName","src":"21727:7:83","type":""}]},{"body":{"nativeSrc":"21803:16:83","nodeType":"YulBlock","src":"21803:16:83","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"21812:1:83","nodeType":"YulLiteral","src":"21812:1:83","type":"","value":"0"},{"kind":"number","nativeSrc":"21815:1:83","nodeType":"YulLiteral","src":"21815:1:83","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"21805:6:83","nodeType":"YulIdentifier","src":"21805:6:83"},"nativeSrc":"21805:12:83","nodeType":"YulFunctionCall","src":"21805:12:83"},"nativeSrc":"21805:12:83","nodeType":"YulExpressionStatement","src":"21805:12:83"}]},"condition":{"arguments":[{"arguments":[{"name":"value_1","nativeSrc":"21769:7:83","nodeType":"YulIdentifier","src":"21769:7:83"},{"arguments":[{"kind":"number","nativeSrc":"21789:1:83","nodeType":"YulLiteral","src":"21789:1:83","type":"","value":"3"},{"name":"value_1","nativeSrc":"21792:7:83","nodeType":"YulIdentifier","src":"21792:7:83"}],"functionName":{"name":"signextend","nativeSrc":"21778:10:83","nodeType":"YulIdentifier","src":"21778:10:83"},"nativeSrc":"21778:22:83","nodeType":"YulFunctionCall","src":"21778:22:83"}],"functionName":{"name":"eq","nativeSrc":"21766:2:83","nodeType":"YulIdentifier","src":"21766:2:83"},"nativeSrc":"21766:35:83","nodeType":"YulFunctionCall","src":"21766:35:83"}],"functionName":{"name":"iszero","nativeSrc":"21759:6:83","nodeType":"YulIdentifier","src":"21759:6:83"},"nativeSrc":"21759:43:83","nodeType":"YulFunctionCall","src":"21759:43:83"},"nativeSrc":"21756:63:83","nodeType":"YulIf","src":"21756:63:83"},{"expression":{"arguments":[{"name":"value","nativeSrc":"21835:5:83","nodeType":"YulIdentifier","src":"21835:5:83"},{"name":"value_1","nativeSrc":"21842:7:83","nodeType":"YulIdentifier","src":"21842:7:83"}],"functionName":{"name":"mstore","nativeSrc":"21828:6:83","nodeType":"YulIdentifier","src":"21828:6:83"},"nativeSrc":"21828:22:83","nodeType":"YulFunctionCall","src":"21828:22:83"},"nativeSrc":"21828:22:83","nodeType":"YulExpressionStatement","src":"21828:22:83"},{"nativeSrc":"21859:34:83","nodeType":"YulVariableDeclaration","src":"21859:34:83","value":{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"21885:2:83","nodeType":"YulIdentifier","src":"21885:2:83"},{"kind":"number","nativeSrc":"21889:2:83","nodeType":"YulLiteral","src":"21889:2:83","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"21881:3:83","nodeType":"YulIdentifier","src":"21881:3:83"},"nativeSrc":"21881:11:83","nodeType":"YulFunctionCall","src":"21881:11:83"}],"functionName":{"name":"mload","nativeSrc":"21875:5:83","nodeType":"YulIdentifier","src":"21875:5:83"},"nativeSrc":"21875:18:83","nodeType":"YulFunctionCall","src":"21875:18:83"},"variables":[{"name":"offset_1","nativeSrc":"21863:8:83","nodeType":"YulTypedName","src":"21863:8:83","type":""}]},{"body":{"nativeSrc":"21938:16:83","nodeType":"YulBlock","src":"21938:16:83","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"21947:1:83","nodeType":"YulLiteral","src":"21947:1:83","type":"","value":"0"},{"kind":"number","nativeSrc":"21950:1:83","nodeType":"YulLiteral","src":"21950:1:83","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"21940:6:83","nodeType":"YulIdentifier","src":"21940:6:83"},"nativeSrc":"21940:12:83","nodeType":"YulFunctionCall","src":"21940:12:83"},"nativeSrc":"21940:12:83","nodeType":"YulExpressionStatement","src":"21940:12:83"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"21908:8:83","nodeType":"YulIdentifier","src":"21908:8:83"},{"kind":"number","nativeSrc":"21918:18:83","nodeType":"YulLiteral","src":"21918:18:83","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"21905:2:83","nodeType":"YulIdentifier","src":"21905:2:83"},"nativeSrc":"21905:32:83","nodeType":"YulFunctionCall","src":"21905:32:83"},"nativeSrc":"21902:52:83","nodeType":"YulIf","src":"21902:52:83"},{"expression":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"21974:5:83","nodeType":"YulIdentifier","src":"21974:5:83"},{"kind":"number","nativeSrc":"21981:2:83","nodeType":"YulLiteral","src":"21981:2:83","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"21970:3:83","nodeType":"YulIdentifier","src":"21970:3:83"},"nativeSrc":"21970:14:83","nodeType":"YulFunctionCall","src":"21970:14:83"},{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"22018:2:83","nodeType":"YulIdentifier","src":"22018:2:83"},{"name":"offset_1","nativeSrc":"22022:8:83","nodeType":"YulIdentifier","src":"22022:8:83"}],"functionName":{"name":"add","nativeSrc":"22014:3:83","nodeType":"YulIdentifier","src":"22014:3:83"},"nativeSrc":"22014:17:83","nodeType":"YulFunctionCall","src":"22014:17:83"},{"name":"dataEnd","nativeSrc":"22033:7:83","nodeType":"YulIdentifier","src":"22033:7:83"}],"functionName":{"name":"abi_decode_bytes_fromMemory","nativeSrc":"21986:27:83","nodeType":"YulIdentifier","src":"21986:27:83"},"nativeSrc":"21986:55:83","nodeType":"YulFunctionCall","src":"21986:55:83"}],"functionName":{"name":"mstore","nativeSrc":"21963:6:83","nodeType":"YulIdentifier","src":"21963:6:83"},"nativeSrc":"21963:79:83","nodeType":"YulFunctionCall","src":"21963:79:83"},"nativeSrc":"21963:79:83","nodeType":"YulExpressionStatement","src":"21963:79:83"},{"nativeSrc":"22051:34:83","nodeType":"YulVariableDeclaration","src":"22051:34:83","value":{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"22077:2:83","nodeType":"YulIdentifier","src":"22077:2:83"},{"kind":"number","nativeSrc":"22081:2:83","nodeType":"YulLiteral","src":"22081:2:83","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"22073:3:83","nodeType":"YulIdentifier","src":"22073:3:83"},"nativeSrc":"22073:11:83","nodeType":"YulFunctionCall","src":"22073:11:83"}],"functionName":{"name":"mload","nativeSrc":"22067:5:83","nodeType":"YulIdentifier","src":"22067:5:83"},"nativeSrc":"22067:18:83","nodeType":"YulFunctionCall","src":"22067:18:83"},"variables":[{"name":"offset_2","nativeSrc":"22055:8:83","nodeType":"YulTypedName","src":"22055:8:83","type":""}]},{"body":{"nativeSrc":"22130:16:83","nodeType":"YulBlock","src":"22130:16:83","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"22139:1:83","nodeType":"YulLiteral","src":"22139:1:83","type":"","value":"0"},{"kind":"number","nativeSrc":"22142:1:83","nodeType":"YulLiteral","src":"22142:1:83","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"22132:6:83","nodeType":"YulIdentifier","src":"22132:6:83"},"nativeSrc":"22132:12:83","nodeType":"YulFunctionCall","src":"22132:12:83"},"nativeSrc":"22132:12:83","nodeType":"YulExpressionStatement","src":"22132:12:83"}]},"condition":{"arguments":[{"name":"offset_2","nativeSrc":"22100:8:83","nodeType":"YulIdentifier","src":"22100:8:83"},{"kind":"number","nativeSrc":"22110:18:83","nodeType":"YulLiteral","src":"22110:18:83","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"22097:2:83","nodeType":"YulIdentifier","src":"22097:2:83"},"nativeSrc":"22097:32:83","nodeType":"YulFunctionCall","src":"22097:32:83"},"nativeSrc":"22094:52:83","nodeType":"YulIf","src":"22094:52:83"},{"expression":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"22166:5:83","nodeType":"YulIdentifier","src":"22166:5:83"},{"kind":"number","nativeSrc":"22173:2:83","nodeType":"YulLiteral","src":"22173:2:83","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"22162:3:83","nodeType":"YulIdentifier","src":"22162:3:83"},"nativeSrc":"22162:14:83","nodeType":"YulFunctionCall","src":"22162:14:83"},{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"22210:2:83","nodeType":"YulIdentifier","src":"22210:2:83"},{"name":"offset_2","nativeSrc":"22214:8:83","nodeType":"YulIdentifier","src":"22214:8:83"}],"functionName":{"name":"add","nativeSrc":"22206:3:83","nodeType":"YulIdentifier","src":"22206:3:83"},"nativeSrc":"22206:17:83","nodeType":"YulFunctionCall","src":"22206:17:83"},{"name":"dataEnd","nativeSrc":"22225:7:83","nodeType":"YulIdentifier","src":"22225:7:83"}],"functionName":{"name":"abi_decode_bytes_fromMemory","nativeSrc":"22178:27:83","nodeType":"YulIdentifier","src":"22178:27:83"},"nativeSrc":"22178:55:83","nodeType":"YulFunctionCall","src":"22178:55:83"}],"functionName":{"name":"mstore","nativeSrc":"22155:6:83","nodeType":"YulIdentifier","src":"22155:6:83"},"nativeSrc":"22155:79:83","nodeType":"YulFunctionCall","src":"22155:79:83"},"nativeSrc":"22155:79:83","nodeType":"YulExpressionStatement","src":"22155:79:83"},{"nativeSrc":"22243:15:83","nodeType":"YulAssignment","src":"22243:15:83","value":{"name":"value","nativeSrc":"22253:5:83","nodeType":"YulIdentifier","src":"22253:5:83"},"variableNames":[{"name":"value0","nativeSrc":"22243:6:83","nodeType":"YulIdentifier","src":"22243:6:83"}]}]},"name":"abi_decode_tuple_t_struct$_FfiResult_$9129_memory_ptr_fromMemory","nativeSrc":"21305:959:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"21379:9:83","nodeType":"YulTypedName","src":"21379:9:83","type":""},{"name":"dataEnd","nativeSrc":"21390:7:83","nodeType":"YulTypedName","src":"21390:7:83","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"21402:6:83","nodeType":"YulTypedName","src":"21402:6:83","type":""}],"src":"21305:959:83"},{"body":{"nativeSrc":"22610:925:83","nodeType":"YulBlock","src":"22610:925:83","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"22627:3:83","nodeType":"YulIdentifier","src":"22627:3:83"},{"hexValue":"4661696c656420746f2072756e206261736820636f6d6d616e64207769746820","kind":"string","nativeSrc":"22632:34:83","nodeType":"YulLiteral","src":"22632:34:83","type":"","value":"Failed to run bash command with "}],"functionName":{"name":"mstore","nativeSrc":"22620:6:83","nodeType":"YulIdentifier","src":"22620:6:83"},"nativeSrc":"22620:47:83","nodeType":"YulFunctionCall","src":"22620:47:83"},"nativeSrc":"22620:47:83","nodeType":"YulExpressionStatement","src":"22620:47:83"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"22687:3:83","nodeType":"YulIdentifier","src":"22687:3:83"},{"kind":"number","nativeSrc":"22692:2:83","nodeType":"YulLiteral","src":"22692:2:83","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"22683:3:83","nodeType":"YulIdentifier","src":"22683:3:83"},"nativeSrc":"22683:12:83","nodeType":"YulFunctionCall","src":"22683:12:83"},{"arguments":[{"kind":"number","nativeSrc":"22701:3:83","nodeType":"YulLiteral","src":"22701:3:83","type":"","value":"249"},{"kind":"number","nativeSrc":"22706:2:83","nodeType":"YulLiteral","src":"22706:2:83","type":"","value":"17"}],"functionName":{"name":"shl","nativeSrc":"22697:3:83","nodeType":"YulIdentifier","src":"22697:3:83"},"nativeSrc":"22697:12:83","nodeType":"YulFunctionCall","src":"22697:12:83"}],"functionName":{"name":"mstore","nativeSrc":"22676:6:83","nodeType":"YulIdentifier","src":"22676:6:83"},"nativeSrc":"22676:34:83","nodeType":"YulFunctionCall","src":"22676:34:83"},"nativeSrc":"22676:34:83","nodeType":"YulExpressionStatement","src":"22676:34:83"},{"nativeSrc":"22719:49:83","nodeType":"YulVariableDeclaration","src":"22719:49:83","value":{"arguments":[{"name":"value0","nativeSrc":"22747:6:83","nodeType":"YulIdentifier","src":"22747:6:83"},{"arguments":[{"name":"pos","nativeSrc":"22759:3:83","nodeType":"YulIdentifier","src":"22759:3:83"},{"kind":"number","nativeSrc":"22764:2:83","nodeType":"YulLiteral","src":"22764:2:83","type":"","value":"33"}],"functionName":{"name":"add","nativeSrc":"22755:3:83","nodeType":"YulIdentifier","src":"22755:3:83"},"nativeSrc":"22755:12:83","nodeType":"YulFunctionCall","src":"22755:12:83"}],"functionName":{"name":"abi_encode_string","nativeSrc":"22729:17:83","nodeType":"YulIdentifier","src":"22729:17:83"},"nativeSrc":"22729:39:83","nodeType":"YulFunctionCall","src":"22729:39:83"},"variables":[{"name":"_1","nativeSrc":"22723:2:83","nodeType":"YulTypedName","src":"22723:2:83","type":""}]},{"expression":{"arguments":[{"name":"_1","nativeSrc":"22784:2:83","nodeType":"YulIdentifier","src":"22784:2:83"},{"kind":"number","nativeSrc":"22788:66:83","nodeType":"YulLiteral","src":"22788:66:83","type":"","value":"0x222e20496620796f7520617265207573696e672057696e646f77732c20736574"}],"functionName":{"name":"mstore","nativeSrc":"22777:6:83","nodeType":"YulIdentifier","src":"22777:6:83"},"nativeSrc":"22777:78:83","nodeType":"YulFunctionCall","src":"22777:78:83"},"nativeSrc":"22777:78:83","nodeType":"YulExpressionStatement","src":"22777:78:83"},{"expression":{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"22875:2:83","nodeType":"YulIdentifier","src":"22875:2:83"},{"kind":"number","nativeSrc":"22879:2:83","nodeType":"YulLiteral","src":"22879:2:83","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"22871:3:83","nodeType":"YulIdentifier","src":"22871:3:83"},"nativeSrc":"22871:11:83","nodeType":"YulFunctionCall","src":"22871:11:83"},{"hexValue":"20746865204f50454e5a455050454c494e5f424153485f5041544820656e7669","kind":"string","nativeSrc":"22884:34:83","nodeType":"YulLiteral","src":"22884:34:83","type":"","value":" the OPENZEPPELIN_BASH_PATH envi"}],"functionName":{"name":"mstore","nativeSrc":"22864:6:83","nodeType":"YulIdentifier","src":"22864:6:83"},"nativeSrc":"22864:55:83","nodeType":"YulFunctionCall","src":"22864:55:83"},"nativeSrc":"22864:55:83","nodeType":"YulExpressionStatement","src":"22864:55:83"},{"expression":{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"22939:2:83","nodeType":"YulIdentifier","src":"22939:2:83"},{"kind":"number","nativeSrc":"22943:2:83","nodeType":"YulLiteral","src":"22943:2:83","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"22935:3:83","nodeType":"YulIdentifier","src":"22935:3:83"},"nativeSrc":"22935:11:83","nodeType":"YulFunctionCall","src":"22935:11:83"},{"hexValue":"726f6e6d656e74207661726961626c6520746f207468652066756c6c79207175","kind":"string","nativeSrc":"22948:34:83","nodeType":"YulLiteral","src":"22948:34:83","type":"","value":"ronment variable to the fully qu"}],"functionName":{"name":"mstore","nativeSrc":"22928:6:83","nodeType":"YulIdentifier","src":"22928:6:83"},"nativeSrc":"22928:55:83","nodeType":"YulFunctionCall","src":"22928:55:83"},"nativeSrc":"22928:55:83","nodeType":"YulExpressionStatement","src":"22928:55:83"},{"expression":{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"23003:2:83","nodeType":"YulIdentifier","src":"23003:2:83"},{"kind":"number","nativeSrc":"23007:2:83","nodeType":"YulLiteral","src":"23007:2:83","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"22999:3:83","nodeType":"YulIdentifier","src":"22999:3:83"},"nativeSrc":"22999:11:83","nodeType":"YulFunctionCall","src":"22999:11:83"},{"hexValue":"616c69666965642070617468206f662074686520626173682065786563757461","kind":"string","nativeSrc":"23012:34:83","nodeType":"YulLiteral","src":"23012:34:83","type":"","value":"alified path of the bash executa"}],"functionName":{"name":"mstore","nativeSrc":"22992:6:83","nodeType":"YulIdentifier","src":"22992:6:83"},"nativeSrc":"22992:55:83","nodeType":"YulFunctionCall","src":"22992:55:83"},"nativeSrc":"22992:55:83","nodeType":"YulExpressionStatement","src":"22992:55:83"},{"expression":{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"23067:2:83","nodeType":"YulIdentifier","src":"23067:2:83"},{"kind":"number","nativeSrc":"23071:3:83","nodeType":"YulLiteral","src":"23071:3:83","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"23063:3:83","nodeType":"YulIdentifier","src":"23063:3:83"},"nativeSrc":"23063:12:83","nodeType":"YulFunctionCall","src":"23063:12:83"},{"hexValue":"626c652e20466f72206578616d706c652c20696620796f752061726520757369","kind":"string","nativeSrc":"23077:34:83","nodeType":"YulLiteral","src":"23077:34:83","type":"","value":"ble. For example, if you are usi"}],"functionName":{"name":"mstore","nativeSrc":"23056:6:83","nodeType":"YulIdentifier","src":"23056:6:83"},"nativeSrc":"23056:56:83","nodeType":"YulFunctionCall","src":"23056:56:83"},"nativeSrc":"23056:56:83","nodeType":"YulExpressionStatement","src":"23056:56:83"},{"expression":{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"23132:2:83","nodeType":"YulIdentifier","src":"23132:2:83"},{"kind":"number","nativeSrc":"23136:3:83","nodeType":"YulLiteral","src":"23136:3:83","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"23128:3:83","nodeType":"YulIdentifier","src":"23128:3:83"},"nativeSrc":"23128:12:83","nodeType":"YulFunctionCall","src":"23128:12:83"},{"hexValue":"6e672047697420666f722057696e646f77732c206164642074686520666f6c6c","kind":"string","nativeSrc":"23142:34:83","nodeType":"YulLiteral","src":"23142:34:83","type":"","value":"ng Git for Windows, add the foll"}],"functionName":{"name":"mstore","nativeSrc":"23121:6:83","nodeType":"YulIdentifier","src":"23121:6:83"},"nativeSrc":"23121:56:83","nodeType":"YulFunctionCall","src":"23121:56:83"},"nativeSrc":"23121:56:83","nodeType":"YulExpressionStatement","src":"23121:56:83"},{"expression":{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"23197:2:83","nodeType":"YulIdentifier","src":"23197:2:83"},{"kind":"number","nativeSrc":"23201:3:83","nodeType":"YulLiteral","src":"23201:3:83","type":"","value":"192"}],"functionName":{"name":"add","nativeSrc":"23193:3:83","nodeType":"YulIdentifier","src":"23193:3:83"},"nativeSrc":"23193:12:83","nodeType":"YulFunctionCall","src":"23193:12:83"},{"hexValue":"6f77696e67206c696e6520696e20746865202e656e762066696c65206f662079","kind":"string","nativeSrc":"23207:34:83","nodeType":"YulLiteral","src":"23207:34:83","type":"","value":"owing line in the .env file of y"}],"functionName":{"name":"mstore","nativeSrc":"23186:6:83","nodeType":"YulIdentifier","src":"23186:6:83"},"nativeSrc":"23186:56:83","nodeType":"YulFunctionCall","src":"23186:56:83"},"nativeSrc":"23186:56:83","nodeType":"YulExpressionStatement","src":"23186:56:83"},{"expression":{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"23262:2:83","nodeType":"YulIdentifier","src":"23262:2:83"},{"kind":"number","nativeSrc":"23266:3:83","nodeType":"YulLiteral","src":"23266:3:83","type":"","value":"224"}],"functionName":{"name":"add","nativeSrc":"23258:3:83","nodeType":"YulIdentifier","src":"23258:3:83"},"nativeSrc":"23258:12:83","nodeType":"YulFunctionCall","src":"23258:12:83"},{"hexValue":"6f75722070726f6a65637420287573696e6720666f727761726420736c617368","kind":"string","nativeSrc":"23272:34:83","nodeType":"YulLiteral","src":"23272:34:83","type":"","value":"our project (using forward slash"}],"functionName":{"name":"mstore","nativeSrc":"23251:6:83","nodeType":"YulIdentifier","src":"23251:6:83"},"nativeSrc":"23251:56:83","nodeType":"YulFunctionCall","src":"23251:56:83"},"nativeSrc":"23251:56:83","nodeType":"YulExpressionStatement","src":"23251:56:83"},{"expression":{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"23327:2:83","nodeType":"YulIdentifier","src":"23327:2:83"},{"kind":"number","nativeSrc":"23331:3:83","nodeType":"YulLiteral","src":"23331:3:83","type":"","value":"256"}],"functionName":{"name":"add","nativeSrc":"23323:3:83","nodeType":"YulIdentifier","src":"23323:3:83"},"nativeSrc":"23323:12:83","nodeType":"YulFunctionCall","src":"23323:12:83"},{"kind":"number","nativeSrc":"23337:66:83","nodeType":"YulLiteral","src":"23337:66:83","type":"","value":"0x6573293a0a4f50454e5a455050454c494e5f424153485f504154483d22433a2f"}],"functionName":{"name":"mstore","nativeSrc":"23316:6:83","nodeType":"YulIdentifier","src":"23316:6:83"},"nativeSrc":"23316:88:83","nodeType":"YulFunctionCall","src":"23316:88:83"},"nativeSrc":"23316:88:83","nodeType":"YulExpressionStatement","src":"23316:88:83"},{"expression":{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"23424:2:83","nodeType":"YulIdentifier","src":"23424:2:83"},{"kind":"number","nativeSrc":"23428:3:83","nodeType":"YulLiteral","src":"23428:3:83","type":"","value":"288"}],"functionName":{"name":"add","nativeSrc":"23420:3:83","nodeType":"YulIdentifier","src":"23420:3:83"},"nativeSrc":"23420:12:83","nodeType":"YulFunctionCall","src":"23420:12:83"},{"kind":"number","nativeSrc":"23434:66:83","nodeType":"YulLiteral","src":"23434:66:83","type":"","value":"0x50726f6772616d2046696c65732f4769742f62696e2f62617368220000000000"}],"functionName":{"name":"mstore","nativeSrc":"23413:6:83","nodeType":"YulIdentifier","src":"23413:6:83"},"nativeSrc":"23413:88:83","nodeType":"YulFunctionCall","src":"23413:88:83"},"nativeSrc":"23413:88:83","nodeType":"YulExpressionStatement","src":"23413:88:83"},{"nativeSrc":"23510:19:83","nodeType":"YulAssignment","src":"23510:19:83","value":{"arguments":[{"name":"_1","nativeSrc":"23521:2:83","nodeType":"YulIdentifier","src":"23521:2:83"},{"kind":"number","nativeSrc":"23525:3:83","nodeType":"YulLiteral","src":"23525:3:83","type":"","value":"315"}],"functionName":{"name":"add","nativeSrc":"23517:3:83","nodeType":"YulIdentifier","src":"23517:3:83"},"nativeSrc":"23517:12:83","nodeType":"YulFunctionCall","src":"23517:12:83"},"variableNames":[{"name":"end","nativeSrc":"23510:3:83","nodeType":"YulIdentifier","src":"23510:3:83"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_9645b1309bf78e4558cd11f0c8b7c479bbb946c623d04c306a8843ee1cc47506_t_string_memory_ptr_t_stringliteral_3b53890135633717feb8747563f231c42249fa1cfe7d1f04d5790e40902f3b91__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"22269:1266:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"22586:3:83","nodeType":"YulTypedName","src":"22586:3:83","type":""},{"name":"value0","nativeSrc":"22591:6:83","nodeType":"YulTypedName","src":"22591:6:83","type":""}],"returnVariables":[{"name":"end","nativeSrc":"22602:3:83","nodeType":"YulTypedName","src":"22602:3:83","type":""}],"src":"22269:1266:83"},{"body":{"nativeSrc":"23656:987:83","nodeType":"YulBlock","src":"23656:987:83","statements":[{"body":{"nativeSrc":"23702:16:83","nodeType":"YulBlock","src":"23702:16:83","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"23711:1:83","nodeType":"YulLiteral","src":"23711:1:83","type":"","value":"0"},{"kind":"number","nativeSrc":"23714:1:83","nodeType":"YulLiteral","src":"23714:1:83","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"23704:6:83","nodeType":"YulIdentifier","src":"23704:6:83"},"nativeSrc":"23704:12:83","nodeType":"YulFunctionCall","src":"23704:12:83"},"nativeSrc":"23704:12:83","nodeType":"YulExpressionStatement","src":"23704:12:83"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"23677:7:83","nodeType":"YulIdentifier","src":"23677:7:83"},{"name":"headStart","nativeSrc":"23686:9:83","nodeType":"YulIdentifier","src":"23686:9:83"}],"functionName":{"name":"sub","nativeSrc":"23673:3:83","nodeType":"YulIdentifier","src":"23673:3:83"},"nativeSrc":"23673:23:83","nodeType":"YulFunctionCall","src":"23673:23:83"},{"kind":"number","nativeSrc":"23698:2:83","nodeType":"YulLiteral","src":"23698:2:83","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"23669:3:83","nodeType":"YulIdentifier","src":"23669:3:83"},"nativeSrc":"23669:32:83","nodeType":"YulFunctionCall","src":"23669:32:83"},"nativeSrc":"23666:52:83","nodeType":"YulIf","src":"23666:52:83"},{"nativeSrc":"23727:30:83","nodeType":"YulVariableDeclaration","src":"23727:30:83","value":{"arguments":[{"name":"headStart","nativeSrc":"23747:9:83","nodeType":"YulIdentifier","src":"23747:9:83"}],"functionName":{"name":"mload","nativeSrc":"23741:5:83","nodeType":"YulIdentifier","src":"23741:5:83"},"nativeSrc":"23741:16:83","nodeType":"YulFunctionCall","src":"23741:16:83"},"variables":[{"name":"offset","nativeSrc":"23731:6:83","nodeType":"YulTypedName","src":"23731:6:83","type":""}]},{"body":{"nativeSrc":"23800:16:83","nodeType":"YulBlock","src":"23800:16:83","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"23809:1:83","nodeType":"YulLiteral","src":"23809:1:83","type":"","value":"0"},{"kind":"number","nativeSrc":"23812:1:83","nodeType":"YulLiteral","src":"23812:1:83","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"23802:6:83","nodeType":"YulIdentifier","src":"23802:6:83"},"nativeSrc":"23802:12:83","nodeType":"YulFunctionCall","src":"23802:12:83"},"nativeSrc":"23802:12:83","nodeType":"YulExpressionStatement","src":"23802:12:83"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"23772:6:83","nodeType":"YulIdentifier","src":"23772:6:83"},{"kind":"number","nativeSrc":"23780:18:83","nodeType":"YulLiteral","src":"23780:18:83","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"23769:2:83","nodeType":"YulIdentifier","src":"23769:2:83"},"nativeSrc":"23769:30:83","nodeType":"YulFunctionCall","src":"23769:30:83"},"nativeSrc":"23766:50:83","nodeType":"YulIf","src":"23766:50:83"},{"nativeSrc":"23825:32:83","nodeType":"YulVariableDeclaration","src":"23825:32:83","value":{"arguments":[{"name":"headStart","nativeSrc":"23839:9:83","nodeType":"YulIdentifier","src":"23839:9:83"},{"name":"offset","nativeSrc":"23850:6:83","nodeType":"YulIdentifier","src":"23850:6:83"}],"functionName":{"name":"add","nativeSrc":"23835:3:83","nodeType":"YulIdentifier","src":"23835:3:83"},"nativeSrc":"23835:22:83","nodeType":"YulFunctionCall","src":"23835:22:83"},"variables":[{"name":"_1","nativeSrc":"23829:2:83","nodeType":"YulTypedName","src":"23829:2:83","type":""}]},{"body":{"nativeSrc":"23905:16:83","nodeType":"YulBlock","src":"23905:16:83","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"23914:1:83","nodeType":"YulLiteral","src":"23914:1:83","type":"","value":"0"},{"kind":"number","nativeSrc":"23917:1:83","nodeType":"YulLiteral","src":"23917:1:83","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"23907:6:83","nodeType":"YulIdentifier","src":"23907:6:83"},"nativeSrc":"23907:12:83","nodeType":"YulFunctionCall","src":"23907:12:83"},"nativeSrc":"23907:12:83","nodeType":"YulExpressionStatement","src":"23907:12:83"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"23884:2:83","nodeType":"YulIdentifier","src":"23884:2:83"},{"kind":"number","nativeSrc":"23888:4:83","nodeType":"YulLiteral","src":"23888:4:83","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"23880:3:83","nodeType":"YulIdentifier","src":"23880:3:83"},"nativeSrc":"23880:13:83","nodeType":"YulFunctionCall","src":"23880:13:83"},{"name":"dataEnd","nativeSrc":"23895:7:83","nodeType":"YulIdentifier","src":"23895:7:83"}],"functionName":{"name":"slt","nativeSrc":"23876:3:83","nodeType":"YulIdentifier","src":"23876:3:83"},"nativeSrc":"23876:27:83","nodeType":"YulFunctionCall","src":"23876:27:83"}],"functionName":{"name":"iszero","nativeSrc":"23869:6:83","nodeType":"YulIdentifier","src":"23869:6:83"},"nativeSrc":"23869:35:83","nodeType":"YulFunctionCall","src":"23869:35:83"},"nativeSrc":"23866:55:83","nodeType":"YulIf","src":"23866:55:83"},{"nativeSrc":"23930:23:83","nodeType":"YulVariableDeclaration","src":"23930:23:83","value":{"arguments":[{"name":"_1","nativeSrc":"23950:2:83","nodeType":"YulIdentifier","src":"23950:2:83"}],"functionName":{"name":"mload","nativeSrc":"23944:5:83","nodeType":"YulIdentifier","src":"23944:5:83"},"nativeSrc":"23944:9:83","nodeType":"YulFunctionCall","src":"23944:9:83"},"variables":[{"name":"length","nativeSrc":"23934:6:83","nodeType":"YulTypedName","src":"23934:6:83","type":""}]},{"body":{"nativeSrc":"23996:22:83","nodeType":"YulBlock","src":"23996:22:83","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"23998:16:83","nodeType":"YulIdentifier","src":"23998:16:83"},"nativeSrc":"23998:18:83","nodeType":"YulFunctionCall","src":"23998:18:83"},"nativeSrc":"23998:18:83","nodeType":"YulExpressionStatement","src":"23998:18:83"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"23968:6:83","nodeType":"YulIdentifier","src":"23968:6:83"},{"kind":"number","nativeSrc":"23976:18:83","nodeType":"YulLiteral","src":"23976:18:83","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"23965:2:83","nodeType":"YulIdentifier","src":"23965:2:83"},"nativeSrc":"23965:30:83","nodeType":"YulFunctionCall","src":"23965:30:83"},"nativeSrc":"23962:56:83","nodeType":"YulIf","src":"23962:56:83"},{"nativeSrc":"24027:24:83","nodeType":"YulVariableDeclaration","src":"24027:24:83","value":{"arguments":[{"kind":"number","nativeSrc":"24041:1:83","nodeType":"YulLiteral","src":"24041:1:83","type":"","value":"5"},{"name":"length","nativeSrc":"24044:6:83","nodeType":"YulIdentifier","src":"24044:6:83"}],"functionName":{"name":"shl","nativeSrc":"24037:3:83","nodeType":"YulIdentifier","src":"24037:3:83"},"nativeSrc":"24037:14:83","nodeType":"YulFunctionCall","src":"24037:14:83"},"variables":[{"name":"_2","nativeSrc":"24031:2:83","nodeType":"YulTypedName","src":"24031:2:83","type":""}]},{"nativeSrc":"24060:39:83","nodeType":"YulVariableDeclaration","src":"24060:39:83","value":{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"24091:2:83","nodeType":"YulIdentifier","src":"24091:2:83"},{"kind":"number","nativeSrc":"24095:2:83","nodeType":"YulLiteral","src":"24095:2:83","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"24087:3:83","nodeType":"YulIdentifier","src":"24087:3:83"},"nativeSrc":"24087:11:83","nodeType":"YulFunctionCall","src":"24087:11:83"}],"functionName":{"name":"allocate_memory","nativeSrc":"24071:15:83","nodeType":"YulIdentifier","src":"24071:15:83"},"nativeSrc":"24071:28:83","nodeType":"YulFunctionCall","src":"24071:28:83"},"variables":[{"name":"dst","nativeSrc":"24064:3:83","nodeType":"YulTypedName","src":"24064:3:83","type":""}]},{"nativeSrc":"24108:16:83","nodeType":"YulVariableDeclaration","src":"24108:16:83","value":{"name":"dst","nativeSrc":"24121:3:83","nodeType":"YulIdentifier","src":"24121:3:83"},"variables":[{"name":"array","nativeSrc":"24112:5:83","nodeType":"YulTypedName","src":"24112:5:83","type":""}]},{"expression":{"arguments":[{"name":"dst","nativeSrc":"24140:3:83","nodeType":"YulIdentifier","src":"24140:3:83"},{"name":"length","nativeSrc":"24145:6:83","nodeType":"YulIdentifier","src":"24145:6:83"}],"functionName":{"name":"mstore","nativeSrc":"24133:6:83","nodeType":"YulIdentifier","src":"24133:6:83"},"nativeSrc":"24133:19:83","nodeType":"YulFunctionCall","src":"24133:19:83"},"nativeSrc":"24133:19:83","nodeType":"YulExpressionStatement","src":"24133:19:83"},{"nativeSrc":"24161:19:83","nodeType":"YulAssignment","src":"24161:19:83","value":{"arguments":[{"name":"dst","nativeSrc":"24172:3:83","nodeType":"YulIdentifier","src":"24172:3:83"},{"kind":"number","nativeSrc":"24177:2:83","nodeType":"YulLiteral","src":"24177:2:83","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"24168:3:83","nodeType":"YulIdentifier","src":"24168:3:83"},"nativeSrc":"24168:12:83","nodeType":"YulFunctionCall","src":"24168:12:83"},"variableNames":[{"name":"dst","nativeSrc":"24161:3:83","nodeType":"YulIdentifier","src":"24161:3:83"}]},{"nativeSrc":"24189:34:83","nodeType":"YulVariableDeclaration","src":"24189:34:83","value":{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"24211:2:83","nodeType":"YulIdentifier","src":"24211:2:83"},{"name":"_2","nativeSrc":"24215:2:83","nodeType":"YulIdentifier","src":"24215:2:83"}],"functionName":{"name":"add","nativeSrc":"24207:3:83","nodeType":"YulIdentifier","src":"24207:3:83"},"nativeSrc":"24207:11:83","nodeType":"YulFunctionCall","src":"24207:11:83"},{"kind":"number","nativeSrc":"24220:2:83","nodeType":"YulLiteral","src":"24220:2:83","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"24203:3:83","nodeType":"YulIdentifier","src":"24203:3:83"},"nativeSrc":"24203:20:83","nodeType":"YulFunctionCall","src":"24203:20:83"},"variables":[{"name":"srcEnd","nativeSrc":"24193:6:83","nodeType":"YulTypedName","src":"24193:6:83","type":""}]},{"body":{"nativeSrc":"24255:16:83","nodeType":"YulBlock","src":"24255:16:83","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"24264:1:83","nodeType":"YulLiteral","src":"24264:1:83","type":"","value":"0"},{"kind":"number","nativeSrc":"24267:1:83","nodeType":"YulLiteral","src":"24267:1:83","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"24257:6:83","nodeType":"YulIdentifier","src":"24257:6:83"},"nativeSrc":"24257:12:83","nodeType":"YulFunctionCall","src":"24257:12:83"},"nativeSrc":"24257:12:83","nodeType":"YulExpressionStatement","src":"24257:12:83"}]},"condition":{"arguments":[{"name":"srcEnd","nativeSrc":"24238:6:83","nodeType":"YulIdentifier","src":"24238:6:83"},{"name":"dataEnd","nativeSrc":"24246:7:83","nodeType":"YulIdentifier","src":"24246:7:83"}],"functionName":{"name":"gt","nativeSrc":"24235:2:83","nodeType":"YulIdentifier","src":"24235:2:83"},"nativeSrc":"24235:19:83","nodeType":"YulFunctionCall","src":"24235:19:83"},"nativeSrc":"24232:39:83","nodeType":"YulIf","src":"24232:39:83"},{"nativeSrc":"24280:22:83","nodeType":"YulVariableDeclaration","src":"24280:22:83","value":{"arguments":[{"name":"_1","nativeSrc":"24295:2:83","nodeType":"YulIdentifier","src":"24295:2:83"},{"kind":"number","nativeSrc":"24299:2:83","nodeType":"YulLiteral","src":"24299:2:83","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"24291:3:83","nodeType":"YulIdentifier","src":"24291:3:83"},"nativeSrc":"24291:11:83","nodeType":"YulFunctionCall","src":"24291:11:83"},"variables":[{"name":"src","nativeSrc":"24284:3:83","nodeType":"YulTypedName","src":"24284:3:83","type":""}]},{"body":{"nativeSrc":"24367:246:83","nodeType":"YulBlock","src":"24367:246:83","statements":[{"nativeSrc":"24381:29:83","nodeType":"YulVariableDeclaration","src":"24381:29:83","value":{"arguments":[{"name":"src","nativeSrc":"24406:3:83","nodeType":"YulIdentifier","src":"24406:3:83"}],"functionName":{"name":"mload","nativeSrc":"24400:5:83","nodeType":"YulIdentifier","src":"24400:5:83"},"nativeSrc":"24400:10:83","nodeType":"YulFunctionCall","src":"24400:10:83"},"variables":[{"name":"innerOffset","nativeSrc":"24385:11:83","nodeType":"YulTypedName","src":"24385:11:83","type":""}]},{"body":{"nativeSrc":"24462:16:83","nodeType":"YulBlock","src":"24462:16:83","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"24471:1:83","nodeType":"YulLiteral","src":"24471:1:83","type":"","value":"0"},{"kind":"number","nativeSrc":"24474:1:83","nodeType":"YulLiteral","src":"24474:1:83","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"24464:6:83","nodeType":"YulIdentifier","src":"24464:6:83"},"nativeSrc":"24464:12:83","nodeType":"YulFunctionCall","src":"24464:12:83"},"nativeSrc":"24464:12:83","nodeType":"YulExpressionStatement","src":"24464:12:83"}]},"condition":{"arguments":[{"name":"innerOffset","nativeSrc":"24429:11:83","nodeType":"YulIdentifier","src":"24429:11:83"},{"kind":"number","nativeSrc":"24442:18:83","nodeType":"YulLiteral","src":"24442:18:83","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"24426:2:83","nodeType":"YulIdentifier","src":"24426:2:83"},"nativeSrc":"24426:35:83","nodeType":"YulFunctionCall","src":"24426:35:83"},"nativeSrc":"24423:55:83","nodeType":"YulIf","src":"24423:55:83"},{"expression":{"arguments":[{"name":"dst","nativeSrc":"24498:3:83","nodeType":"YulIdentifier","src":"24498:3:83"},{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"24539:2:83","nodeType":"YulIdentifier","src":"24539:2:83"},{"name":"innerOffset","nativeSrc":"24543:11:83","nodeType":"YulIdentifier","src":"24543:11:83"}],"functionName":{"name":"add","nativeSrc":"24535:3:83","nodeType":"YulIdentifier","src":"24535:3:83"},"nativeSrc":"24535:20:83","nodeType":"YulFunctionCall","src":"24535:20:83"},{"kind":"number","nativeSrc":"24557:2:83","nodeType":"YulLiteral","src":"24557:2:83","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"24531:3:83","nodeType":"YulIdentifier","src":"24531:3:83"},"nativeSrc":"24531:29:83","nodeType":"YulFunctionCall","src":"24531:29:83"},{"name":"dataEnd","nativeSrc":"24562:7:83","nodeType":"YulIdentifier","src":"24562:7:83"}],"functionName":{"name":"abi_decode_bytes_fromMemory","nativeSrc":"24503:27:83","nodeType":"YulIdentifier","src":"24503:27:83"},"nativeSrc":"24503:67:83","nodeType":"YulFunctionCall","src":"24503:67:83"}],"functionName":{"name":"mstore","nativeSrc":"24491:6:83","nodeType":"YulIdentifier","src":"24491:6:83"},"nativeSrc":"24491:80:83","nodeType":"YulFunctionCall","src":"24491:80:83"},"nativeSrc":"24491:80:83","nodeType":"YulExpressionStatement","src":"24491:80:83"},{"nativeSrc":"24584:19:83","nodeType":"YulAssignment","src":"24584:19:83","value":{"arguments":[{"name":"dst","nativeSrc":"24595:3:83","nodeType":"YulIdentifier","src":"24595:3:83"},{"kind":"number","nativeSrc":"24600:2:83","nodeType":"YulLiteral","src":"24600:2:83","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"24591:3:83","nodeType":"YulIdentifier","src":"24591:3:83"},"nativeSrc":"24591:12:83","nodeType":"YulFunctionCall","src":"24591:12:83"},"variableNames":[{"name":"dst","nativeSrc":"24584:3:83","nodeType":"YulIdentifier","src":"24584:3:83"}]}]},"condition":{"arguments":[{"name":"src","nativeSrc":"24322:3:83","nodeType":"YulIdentifier","src":"24322:3:83"},{"name":"srcEnd","nativeSrc":"24327:6:83","nodeType":"YulIdentifier","src":"24327:6:83"}],"functionName":{"name":"lt","nativeSrc":"24319:2:83","nodeType":"YulIdentifier","src":"24319:2:83"},"nativeSrc":"24319:15:83","nodeType":"YulFunctionCall","src":"24319:15:83"},"nativeSrc":"24311:302:83","nodeType":"YulForLoop","post":{"nativeSrc":"24335:23:83","nodeType":"YulBlock","src":"24335:23:83","statements":[{"nativeSrc":"24337:19:83","nodeType":"YulAssignment","src":"24337:19:83","value":{"arguments":[{"name":"src","nativeSrc":"24348:3:83","nodeType":"YulIdentifier","src":"24348:3:83"},{"kind":"number","nativeSrc":"24353:2:83","nodeType":"YulLiteral","src":"24353:2:83","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"24344:3:83","nodeType":"YulIdentifier","src":"24344:3:83"},"nativeSrc":"24344:12:83","nodeType":"YulFunctionCall","src":"24344:12:83"},"variableNames":[{"name":"src","nativeSrc":"24337:3:83","nodeType":"YulIdentifier","src":"24337:3:83"}]}]},"pre":{"nativeSrc":"24315:3:83","nodeType":"YulBlock","src":"24315:3:83","statements":[]},"src":"24311:302:83"},{"nativeSrc":"24622:15:83","nodeType":"YulAssignment","src":"24622:15:83","value":{"name":"array","nativeSrc":"24632:5:83","nodeType":"YulIdentifier","src":"24632:5:83"},"variableNames":[{"name":"value0","nativeSrc":"24622:6:83","nodeType":"YulIdentifier","src":"24622:6:83"}]}]},"name":"abi_decode_tuple_t_array$_t_string_memory_ptr_$dyn_memory_ptr_fromMemory","nativeSrc":"23540:1103:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"23622:9:83","nodeType":"YulTypedName","src":"23622:9:83","type":""},{"name":"dataEnd","nativeSrc":"23633:7:83","nodeType":"YulTypedName","src":"23633:7:83","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"23645:6:83","nodeType":"YulTypedName","src":"23645:6:83","type":""}],"src":"23540:1103:83"},{"body":{"nativeSrc":"25037:250:83","nodeType":"YulBlock","src":"25037:250:83","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"25054:3:83","nodeType":"YulIdentifier","src":"25054:3:83"},{"hexValue":"466f756e64206d756c7469706c65206f6363757272656e636573206f66207072","kind":"string","nativeSrc":"25059:34:83","nodeType":"YulLiteral","src":"25059:34:83","type":"","value":"Found multiple occurrences of pr"}],"functionName":{"name":"mstore","nativeSrc":"25047:6:83","nodeType":"YulIdentifier","src":"25047:6:83"},"nativeSrc":"25047:47:83","nodeType":"YulFunctionCall","src":"25047:47:83"},"nativeSrc":"25047:47:83","nodeType":"YulExpressionStatement","src":"25047:47:83"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"25114:3:83","nodeType":"YulIdentifier","src":"25114:3:83"},{"kind":"number","nativeSrc":"25119:2:83","nodeType":"YulLiteral","src":"25119:2:83","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"25110:3:83","nodeType":"YulIdentifier","src":"25110:3:83"},"nativeSrc":"25110:12:83","nodeType":"YulFunctionCall","src":"25110:12:83"},{"hexValue":"656669782027","kind":"string","nativeSrc":"25124:8:83","nodeType":"YulLiteral","src":"25124:8:83","type":"","value":"efix '"}],"functionName":{"name":"mstore","nativeSrc":"25103:6:83","nodeType":"YulIdentifier","src":"25103:6:83"},"nativeSrc":"25103:30:83","nodeType":"YulFunctionCall","src":"25103:30:83"},"nativeSrc":"25103:30:83","nodeType":"YulExpressionStatement","src":"25103:30:83"},{"nativeSrc":"25142:49:83","nodeType":"YulVariableDeclaration","src":"25142:49:83","value":{"arguments":[{"name":"value0","nativeSrc":"25170:6:83","nodeType":"YulIdentifier","src":"25170:6:83"},{"arguments":[{"name":"pos","nativeSrc":"25182:3:83","nodeType":"YulIdentifier","src":"25182:3:83"},{"kind":"number","nativeSrc":"25187:2:83","nodeType":"YulLiteral","src":"25187:2:83","type":"","value":"38"}],"functionName":{"name":"add","nativeSrc":"25178:3:83","nodeType":"YulIdentifier","src":"25178:3:83"},"nativeSrc":"25178:12:83","nodeType":"YulFunctionCall","src":"25178:12:83"}],"functionName":{"name":"abi_encode_string","nativeSrc":"25152:17:83","nodeType":"YulIdentifier","src":"25152:17:83"},"nativeSrc":"25152:39:83","nodeType":"YulFunctionCall","src":"25152:39:83"},"variables":[{"name":"_1","nativeSrc":"25146:2:83","nodeType":"YulTypedName","src":"25146:2:83","type":""}]},{"expression":{"arguments":[{"name":"_1","nativeSrc":"25207:2:83","nodeType":"YulIdentifier","src":"25207:2:83"},{"hexValue":"2720696e206f75747075743a20","kind":"string","nativeSrc":"25211:15:83","nodeType":"YulLiteral","src":"25211:15:83","type":"","value":"' in output: "}],"functionName":{"name":"mstore","nativeSrc":"25200:6:83","nodeType":"YulIdentifier","src":"25200:6:83"},"nativeSrc":"25200:27:83","nodeType":"YulFunctionCall","src":"25200:27:83"},"nativeSrc":"25200:27:83","nodeType":"YulExpressionStatement","src":"25200:27:83"},{"nativeSrc":"25236:45:83","nodeType":"YulAssignment","src":"25236:45:83","value":{"arguments":[{"name":"value1","nativeSrc":"25261:6:83","nodeType":"YulIdentifier","src":"25261:6:83"},{"arguments":[{"name":"_1","nativeSrc":"25273:2:83","nodeType":"YulIdentifier","src":"25273:2:83"},{"kind":"number","nativeSrc":"25277:2:83","nodeType":"YulLiteral","src":"25277:2:83","type":"","value":"13"}],"functionName":{"name":"add","nativeSrc":"25269:3:83","nodeType":"YulIdentifier","src":"25269:3:83"},"nativeSrc":"25269:11:83","nodeType":"YulFunctionCall","src":"25269:11:83"}],"functionName":{"name":"abi_encode_string","nativeSrc":"25243:17:83","nodeType":"YulIdentifier","src":"25243:17:83"},"nativeSrc":"25243:38:83","nodeType":"YulFunctionCall","src":"25243:38:83"},"variableNames":[{"name":"end","nativeSrc":"25236:3:83","nodeType":"YulIdentifier","src":"25236:3:83"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_7c24507b5303926943f349dcca7bb8333d10cd816dcad3e2e8bb5cb2df222ca7_t_string_memory_ptr_t_stringliteral_93bcd8f909ee99a96370a8190ddeafae0a627cb872c93cfdab495c157ddc6c8f_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"24648:639:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"25005:3:83","nodeType":"YulTypedName","src":"25005:3:83","type":""},{"name":"value1","nativeSrc":"25010:6:83","nodeType":"YulTypedName","src":"25010:6:83","type":""},{"name":"value0","nativeSrc":"25018:6:83","nodeType":"YulTypedName","src":"25018:6:83","type":""}],"returnVariables":[{"name":"end","nativeSrc":"25029:3:83","nodeType":"YulTypedName","src":"25029:3:83","type":""}],"src":"24648:639:83"},{"body":{"nativeSrc":"25514:278:83","nodeType":"YulBlock","src":"25514:278:83","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"25531:9:83","nodeType":"YulIdentifier","src":"25531:9:83"},{"kind":"number","nativeSrc":"25542:2:83","nodeType":"YulLiteral","src":"25542:2:83","type":"","value":"64"}],"functionName":{"name":"mstore","nativeSrc":"25524:6:83","nodeType":"YulIdentifier","src":"25524:6:83"},"nativeSrc":"25524:21:83","nodeType":"YulFunctionCall","src":"25524:21:83"},"nativeSrc":"25524:21:83","nodeType":"YulExpressionStatement","src":"25524:21:83"},{"nativeSrc":"25554:70:83","nodeType":"YulVariableDeclaration","src":"25554:70:83","value":{"arguments":[{"name":"value0","nativeSrc":"25597:6:83","nodeType":"YulIdentifier","src":"25597:6:83"},{"arguments":[{"name":"headStart","nativeSrc":"25609:9:83","nodeType":"YulIdentifier","src":"25609:9:83"},{"kind":"number","nativeSrc":"25620:2:83","nodeType":"YulLiteral","src":"25620:2:83","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"25605:3:83","nodeType":"YulIdentifier","src":"25605:3:83"},"nativeSrc":"25605:18:83","nodeType":"YulFunctionCall","src":"25605:18:83"}],"functionName":{"name":"abi_encode_string_memory_ptr","nativeSrc":"25568:28:83","nodeType":"YulIdentifier","src":"25568:28:83"},"nativeSrc":"25568:56:83","nodeType":"YulFunctionCall","src":"25568:56:83"},"variables":[{"name":"tail_1","nativeSrc":"25558:6:83","nodeType":"YulTypedName","src":"25558:6:83","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"25644:9:83","nodeType":"YulIdentifier","src":"25644:9:83"},{"kind":"number","nativeSrc":"25655:2:83","nodeType":"YulLiteral","src":"25655:2:83","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"25640:3:83","nodeType":"YulIdentifier","src":"25640:3:83"},"nativeSrc":"25640:18:83","nodeType":"YulFunctionCall","src":"25640:18:83"},{"arguments":[{"name":"tail_1","nativeSrc":"25664:6:83","nodeType":"YulIdentifier","src":"25664:6:83"},{"name":"headStart","nativeSrc":"25672:9:83","nodeType":"YulIdentifier","src":"25672:9:83"}],"functionName":{"name":"sub","nativeSrc":"25660:3:83","nodeType":"YulIdentifier","src":"25660:3:83"},"nativeSrc":"25660:22:83","nodeType":"YulFunctionCall","src":"25660:22:83"}],"functionName":{"name":"mstore","nativeSrc":"25633:6:83","nodeType":"YulIdentifier","src":"25633:6:83"},"nativeSrc":"25633:50:83","nodeType":"YulFunctionCall","src":"25633:50:83"},"nativeSrc":"25633:50:83","nodeType":"YulExpressionStatement","src":"25633:50:83"},{"expression":{"arguments":[{"name":"tail_1","nativeSrc":"25699:6:83","nodeType":"YulIdentifier","src":"25699:6:83"},{"kind":"number","nativeSrc":"25707:1:83","nodeType":"YulLiteral","src":"25707:1:83","type":"","value":"1"}],"functionName":{"name":"mstore","nativeSrc":"25692:6:83","nodeType":"YulIdentifier","src":"25692:6:83"},"nativeSrc":"25692:17:83","nodeType":"YulFunctionCall","src":"25692:17:83"},"nativeSrc":"25692:17:83","nodeType":"YulExpressionStatement","src":"25692:17:83"},{"expression":{"arguments":[{"arguments":[{"name":"tail_1","nativeSrc":"25729:6:83","nodeType":"YulIdentifier","src":"25729:6:83"},{"kind":"number","nativeSrc":"25737:2:83","nodeType":"YulLiteral","src":"25737:2:83","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"25725:3:83","nodeType":"YulIdentifier","src":"25725:3:83"},"nativeSrc":"25725:15:83","nodeType":"YulFunctionCall","src":"25725:15:83"},{"arguments":[{"kind":"number","nativeSrc":"25746:3:83","nodeType":"YulLiteral","src":"25746:3:83","type":"","value":"249"},{"kind":"number","nativeSrc":"25751:1:83","nodeType":"YulLiteral","src":"25751:1:83","type":"","value":"5"}],"functionName":{"name":"shl","nativeSrc":"25742:3:83","nodeType":"YulIdentifier","src":"25742:3:83"},"nativeSrc":"25742:11:83","nodeType":"YulFunctionCall","src":"25742:11:83"}],"functionName":{"name":"mstore","nativeSrc":"25718:6:83","nodeType":"YulIdentifier","src":"25718:6:83"},"nativeSrc":"25718:36:83","nodeType":"YulFunctionCall","src":"25718:36:83"},"nativeSrc":"25718:36:83","nodeType":"YulExpressionStatement","src":"25718:36:83"},{"nativeSrc":"25763:23:83","nodeType":"YulAssignment","src":"25763:23:83","value":{"arguments":[{"name":"tail_1","nativeSrc":"25775:6:83","nodeType":"YulIdentifier","src":"25775:6:83"},{"kind":"number","nativeSrc":"25783:2:83","nodeType":"YulLiteral","src":"25783:2:83","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"25771:3:83","nodeType":"YulIdentifier","src":"25771:3:83"},"nativeSrc":"25771:15:83","nodeType":"YulFunctionCall","src":"25771:15:83"},"variableNames":[{"name":"tail","nativeSrc":"25763:4:83","nodeType":"YulIdentifier","src":"25763:4:83"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr_t_stringliteral_0ef9d8f8804d174666011a394cab7901679a8944d24249fd148a6a36071151f8__to_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed","nativeSrc":"25292:500:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"25483:9:83","nodeType":"YulTypedName","src":"25483:9:83","type":""},{"name":"value0","nativeSrc":"25494:6:83","nodeType":"YulTypedName","src":"25494:6:83","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"25505:4:83","nodeType":"YulTypedName","src":"25505:4:83","type":""}],"src":"25292:500:83"},{"body":{"nativeSrc":"26186:245:83","nodeType":"YulBlock","src":"26186:245:83","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"26203:3:83","nodeType":"YulIdentifier","src":"26203:3:83"},{"hexValue":"4661696c656420746f2066696e64206c696e6520776974682070726566697820","kind":"string","nativeSrc":"26208:34:83","nodeType":"YulLiteral","src":"26208:34:83","type":"","value":"Failed to find line with prefix "}],"functionName":{"name":"mstore","nativeSrc":"26196:6:83","nodeType":"YulIdentifier","src":"26196:6:83"},"nativeSrc":"26196:47:83","nodeType":"YulFunctionCall","src":"26196:47:83"},"nativeSrc":"26196:47:83","nodeType":"YulExpressionStatement","src":"26196:47:83"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"26263:3:83","nodeType":"YulIdentifier","src":"26263:3:83"},{"kind":"number","nativeSrc":"26268:2:83","nodeType":"YulLiteral","src":"26268:2:83","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"26259:3:83","nodeType":"YulIdentifier","src":"26259:3:83"},"nativeSrc":"26259:12:83","nodeType":"YulFunctionCall","src":"26259:12:83"},{"hexValue":"27","kind":"string","nativeSrc":"26273:3:83","nodeType":"YulLiteral","src":"26273:3:83","type":"","value":"'"}],"functionName":{"name":"mstore","nativeSrc":"26252:6:83","nodeType":"YulIdentifier","src":"26252:6:83"},"nativeSrc":"26252:25:83","nodeType":"YulFunctionCall","src":"26252:25:83"},"nativeSrc":"26252:25:83","nodeType":"YulExpressionStatement","src":"26252:25:83"},{"nativeSrc":"26286:49:83","nodeType":"YulVariableDeclaration","src":"26286:49:83","value":{"arguments":[{"name":"value0","nativeSrc":"26314:6:83","nodeType":"YulIdentifier","src":"26314:6:83"},{"arguments":[{"name":"pos","nativeSrc":"26326:3:83","nodeType":"YulIdentifier","src":"26326:3:83"},{"kind":"number","nativeSrc":"26331:2:83","nodeType":"YulLiteral","src":"26331:2:83","type":"","value":"33"}],"functionName":{"name":"add","nativeSrc":"26322:3:83","nodeType":"YulIdentifier","src":"26322:3:83"},"nativeSrc":"26322:12:83","nodeType":"YulFunctionCall","src":"26322:12:83"}],"functionName":{"name":"abi_encode_string","nativeSrc":"26296:17:83","nodeType":"YulIdentifier","src":"26296:17:83"},"nativeSrc":"26296:39:83","nodeType":"YulFunctionCall","src":"26296:39:83"},"variables":[{"name":"_1","nativeSrc":"26290:2:83","nodeType":"YulTypedName","src":"26290:2:83","type":""}]},{"expression":{"arguments":[{"name":"_1","nativeSrc":"26351:2:83","nodeType":"YulIdentifier","src":"26351:2:83"},{"hexValue":"2720696e206f75747075743a20","kind":"string","nativeSrc":"26355:15:83","nodeType":"YulLiteral","src":"26355:15:83","type":"","value":"' in output: "}],"functionName":{"name":"mstore","nativeSrc":"26344:6:83","nodeType":"YulIdentifier","src":"26344:6:83"},"nativeSrc":"26344:27:83","nodeType":"YulFunctionCall","src":"26344:27:83"},"nativeSrc":"26344:27:83","nodeType":"YulExpressionStatement","src":"26344:27:83"},{"nativeSrc":"26380:45:83","nodeType":"YulAssignment","src":"26380:45:83","value":{"arguments":[{"name":"value1","nativeSrc":"26405:6:83","nodeType":"YulIdentifier","src":"26405:6:83"},{"arguments":[{"name":"_1","nativeSrc":"26417:2:83","nodeType":"YulIdentifier","src":"26417:2:83"},{"kind":"number","nativeSrc":"26421:2:83","nodeType":"YulLiteral","src":"26421:2:83","type":"","value":"13"}],"functionName":{"name":"add","nativeSrc":"26413:3:83","nodeType":"YulIdentifier","src":"26413:3:83"},"nativeSrc":"26413:11:83","nodeType":"YulFunctionCall","src":"26413:11:83"}],"functionName":{"name":"abi_encode_string","nativeSrc":"26387:17:83","nodeType":"YulIdentifier","src":"26387:17:83"},"nativeSrc":"26387:38:83","nodeType":"YulFunctionCall","src":"26387:38:83"},"variableNames":[{"name":"end","nativeSrc":"26380:3:83","nodeType":"YulIdentifier","src":"26380:3:83"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_47a92f1f2e2401ec3324f84072908fea4ea6788425ad1f8f366b1db3c55810d9_t_string_memory_ptr_t_stringliteral_93bcd8f909ee99a96370a8190ddeafae0a627cb872c93cfdab495c157ddc6c8f_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"25797:634:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"26154:3:83","nodeType":"YulTypedName","src":"26154:3:83","type":""},{"name":"value1","nativeSrc":"26159:6:83","nodeType":"YulTypedName","src":"26159:6:83","type":""},{"name":"value0","nativeSrc":"26167:6:83","nodeType":"YulTypedName","src":"26167:6:83","type":""}],"returnVariables":[{"name":"end","nativeSrc":"26178:3:83","nodeType":"YulTypedName","src":"26178:3:83","type":""}],"src":"25797:634:83"},{"body":{"nativeSrc":"26658:276:83","nodeType":"YulBlock","src":"26658:276:83","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"26675:9:83","nodeType":"YulIdentifier","src":"26675:9:83"},{"kind":"number","nativeSrc":"26686:2:83","nodeType":"YulLiteral","src":"26686:2:83","type":"","value":"64"}],"functionName":{"name":"mstore","nativeSrc":"26668:6:83","nodeType":"YulIdentifier","src":"26668:6:83"},"nativeSrc":"26668:21:83","nodeType":"YulFunctionCall","src":"26668:21:83"},"nativeSrc":"26668:21:83","nodeType":"YulExpressionStatement","src":"26668:21:83"},{"nativeSrc":"26698:70:83","nodeType":"YulVariableDeclaration","src":"26698:70:83","value":{"arguments":[{"name":"value0","nativeSrc":"26741:6:83","nodeType":"YulIdentifier","src":"26741:6:83"},{"arguments":[{"name":"headStart","nativeSrc":"26753:9:83","nodeType":"YulIdentifier","src":"26753:9:83"},{"kind":"number","nativeSrc":"26764:2:83","nodeType":"YulLiteral","src":"26764:2:83","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"26749:3:83","nodeType":"YulIdentifier","src":"26749:3:83"},"nativeSrc":"26749:18:83","nodeType":"YulFunctionCall","src":"26749:18:83"}],"functionName":{"name":"abi_encode_string_memory_ptr","nativeSrc":"26712:28:83","nodeType":"YulIdentifier","src":"26712:28:83"},"nativeSrc":"26712:56:83","nodeType":"YulFunctionCall","src":"26712:56:83"},"variables":[{"name":"tail_1","nativeSrc":"26702:6:83","nodeType":"YulTypedName","src":"26702:6:83","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"26788:9:83","nodeType":"YulIdentifier","src":"26788:9:83"},{"kind":"number","nativeSrc":"26799:2:83","nodeType":"YulLiteral","src":"26799:2:83","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"26784:3:83","nodeType":"YulIdentifier","src":"26784:3:83"},"nativeSrc":"26784:18:83","nodeType":"YulFunctionCall","src":"26784:18:83"},{"arguments":[{"name":"tail_1","nativeSrc":"26808:6:83","nodeType":"YulIdentifier","src":"26808:6:83"},{"name":"headStart","nativeSrc":"26816:9:83","nodeType":"YulIdentifier","src":"26816:9:83"}],"functionName":{"name":"sub","nativeSrc":"26804:3:83","nodeType":"YulIdentifier","src":"26804:3:83"},"nativeSrc":"26804:22:83","nodeType":"YulFunctionCall","src":"26804:22:83"}],"functionName":{"name":"mstore","nativeSrc":"26777:6:83","nodeType":"YulIdentifier","src":"26777:6:83"},"nativeSrc":"26777:50:83","nodeType":"YulFunctionCall","src":"26777:50:83"},"nativeSrc":"26777:50:83","nodeType":"YulExpressionStatement","src":"26777:50:83"},{"expression":{"arguments":[{"name":"tail_1","nativeSrc":"26843:6:83","nodeType":"YulIdentifier","src":"26843:6:83"},{"kind":"number","nativeSrc":"26851:1:83","nodeType":"YulLiteral","src":"26851:1:83","type":"","value":"7"}],"functionName":{"name":"mstore","nativeSrc":"26836:6:83","nodeType":"YulIdentifier","src":"26836:6:83"},"nativeSrc":"26836:17:83","nodeType":"YulFunctionCall","src":"26836:17:83"},"nativeSrc":"26836:17:83","nodeType":"YulExpressionStatement","src":"26836:17:83"},{"expression":{"arguments":[{"arguments":[{"name":"tail_1","nativeSrc":"26873:6:83","nodeType":"YulIdentifier","src":"26873:6:83"},{"kind":"number","nativeSrc":"26881:2:83","nodeType":"YulLiteral","src":"26881:2:83","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"26869:3:83","nodeType":"YulIdentifier","src":"26869:3:83"},"nativeSrc":"26869:15:83","nodeType":"YulFunctionCall","src":"26869:15:83"},{"hexValue":"53554343455353","kind":"string","nativeSrc":"26886:9:83","nodeType":"YulLiteral","src":"26886:9:83","type":"","value":"SUCCESS"}],"functionName":{"name":"mstore","nativeSrc":"26862:6:83","nodeType":"YulIdentifier","src":"26862:6:83"},"nativeSrc":"26862:34:83","nodeType":"YulFunctionCall","src":"26862:34:83"},"nativeSrc":"26862:34:83","nodeType":"YulExpressionStatement","src":"26862:34:83"},{"nativeSrc":"26905:23:83","nodeType":"YulAssignment","src":"26905:23:83","value":{"arguments":[{"name":"tail_1","nativeSrc":"26917:6:83","nodeType":"YulIdentifier","src":"26917:6:83"},{"kind":"number","nativeSrc":"26925:2:83","nodeType":"YulLiteral","src":"26925:2:83","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"26913:3:83","nodeType":"YulIdentifier","src":"26913:3:83"},"nativeSrc":"26913:15:83","nodeType":"YulFunctionCall","src":"26913:15:83"},"variableNames":[{"name":"tail","nativeSrc":"26905:4:83","nodeType":"YulIdentifier","src":"26905:4:83"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr_t_stringliteral_39bf027dd97f3bae0cf8cfb909695ec63313a9bd61ad52fc7f52cf565b141da8__to_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed","nativeSrc":"26436:498:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"26627:9:83","nodeType":"YulTypedName","src":"26627:9:83","type":""},{"name":"value0","nativeSrc":"26638:6:83","nodeType":"YulTypedName","src":"26638:6:83","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"26649:4:83","nodeType":"YulTypedName","src":"26649:4:83","type":""}],"src":"26436:498:83"},{"body":{"nativeSrc":"27179:160:83","nodeType":"YulBlock","src":"27179:160:83","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"27196:3:83","nodeType":"YulIdentifier","src":"27196:3:83"},{"hexValue":"4661696c656420746f2072756e2075706772616465207361666574792076616c","kind":"string","nativeSrc":"27201:34:83","nodeType":"YulLiteral","src":"27201:34:83","type":"","value":"Failed to run upgrade safety val"}],"functionName":{"name":"mstore","nativeSrc":"27189:6:83","nodeType":"YulIdentifier","src":"27189:6:83"},"nativeSrc":"27189:47:83","nodeType":"YulFunctionCall","src":"27189:47:83"},"nativeSrc":"27189:47:83","nodeType":"YulExpressionStatement","src":"27189:47:83"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"27256:3:83","nodeType":"YulIdentifier","src":"27256:3:83"},{"kind":"number","nativeSrc":"27261:2:83","nodeType":"YulLiteral","src":"27261:2:83","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"27252:3:83","nodeType":"YulIdentifier","src":"27252:3:83"},"nativeSrc":"27252:12:83","nodeType":"YulFunctionCall","src":"27252:12:83"},{"hexValue":"69646174696f6e3a20","kind":"string","nativeSrc":"27266:11:83","nodeType":"YulLiteral","src":"27266:11:83","type":"","value":"idation: "}],"functionName":{"name":"mstore","nativeSrc":"27245:6:83","nodeType":"YulIdentifier","src":"27245:6:83"},"nativeSrc":"27245:33:83","nodeType":"YulFunctionCall","src":"27245:33:83"},"nativeSrc":"27245:33:83","nodeType":"YulExpressionStatement","src":"27245:33:83"},{"nativeSrc":"27287:46:83","nodeType":"YulAssignment","src":"27287:46:83","value":{"arguments":[{"name":"value0","nativeSrc":"27312:6:83","nodeType":"YulIdentifier","src":"27312:6:83"},{"arguments":[{"name":"pos","nativeSrc":"27324:3:83","nodeType":"YulIdentifier","src":"27324:3:83"},{"kind":"number","nativeSrc":"27329:2:83","nodeType":"YulLiteral","src":"27329:2:83","type":"","value":"41"}],"functionName":{"name":"add","nativeSrc":"27320:3:83","nodeType":"YulIdentifier","src":"27320:3:83"},"nativeSrc":"27320:12:83","nodeType":"YulFunctionCall","src":"27320:12:83"}],"functionName":{"name":"abi_encode_string","nativeSrc":"27294:17:83","nodeType":"YulIdentifier","src":"27294:17:83"},"nativeSrc":"27294:39:83","nodeType":"YulFunctionCall","src":"27294:39:83"},"variableNames":[{"name":"end","nativeSrc":"27287:3:83","nodeType":"YulIdentifier","src":"27287:3:83"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_29a2b74f226f0ae680d4b1730e672f85f1c84ce9f2c45ff21557229ab3df8027_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"26939:400:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"27155:3:83","nodeType":"YulTypedName","src":"27155:3:83","type":""},{"name":"value0","nativeSrc":"27160:6:83","nodeType":"YulTypedName","src":"27160:6:83","type":""}],"returnVariables":[{"name":"end","nativeSrc":"27171:3:83","nodeType":"YulTypedName","src":"27171:3:83","type":""}],"src":"26939:400:83"},{"body":{"nativeSrc":"27566:275:83","nodeType":"YulBlock","src":"27566:275:83","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"27583:9:83","nodeType":"YulIdentifier","src":"27583:9:83"},{"kind":"number","nativeSrc":"27594:2:83","nodeType":"YulLiteral","src":"27594:2:83","type":"","value":"64"}],"functionName":{"name":"mstore","nativeSrc":"27576:6:83","nodeType":"YulIdentifier","src":"27576:6:83"},"nativeSrc":"27576:21:83","nodeType":"YulFunctionCall","src":"27576:21:83"},"nativeSrc":"27576:21:83","nodeType":"YulExpressionStatement","src":"27576:21:83"},{"nativeSrc":"27606:70:83","nodeType":"YulVariableDeclaration","src":"27606:70:83","value":{"arguments":[{"name":"value0","nativeSrc":"27649:6:83","nodeType":"YulIdentifier","src":"27649:6:83"},{"arguments":[{"name":"headStart","nativeSrc":"27661:9:83","nodeType":"YulIdentifier","src":"27661:9:83"},{"kind":"number","nativeSrc":"27672:2:83","nodeType":"YulLiteral","src":"27672:2:83","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"27657:3:83","nodeType":"YulIdentifier","src":"27657:3:83"},"nativeSrc":"27657:18:83","nodeType":"YulFunctionCall","src":"27657:18:83"}],"functionName":{"name":"abi_encode_string_memory_ptr","nativeSrc":"27620:28:83","nodeType":"YulIdentifier","src":"27620:28:83"},"nativeSrc":"27620:56:83","nodeType":"YulFunctionCall","src":"27620:56:83"},"variables":[{"name":"tail_1","nativeSrc":"27610:6:83","nodeType":"YulTypedName","src":"27610:6:83","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"27696:9:83","nodeType":"YulIdentifier","src":"27696:9:83"},{"kind":"number","nativeSrc":"27707:2:83","nodeType":"YulLiteral","src":"27707:2:83","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"27692:3:83","nodeType":"YulIdentifier","src":"27692:3:83"},"nativeSrc":"27692:18:83","nodeType":"YulFunctionCall","src":"27692:18:83"},{"arguments":[{"name":"tail_1","nativeSrc":"27716:6:83","nodeType":"YulIdentifier","src":"27716:6:83"},{"name":"headStart","nativeSrc":"27724:9:83","nodeType":"YulIdentifier","src":"27724:9:83"}],"functionName":{"name":"sub","nativeSrc":"27712:3:83","nodeType":"YulIdentifier","src":"27712:3:83"},"nativeSrc":"27712:22:83","nodeType":"YulFunctionCall","src":"27712:22:83"}],"functionName":{"name":"mstore","nativeSrc":"27685:6:83","nodeType":"YulIdentifier","src":"27685:6:83"},"nativeSrc":"27685:50:83","nodeType":"YulFunctionCall","src":"27685:50:83"},"nativeSrc":"27685:50:83","nodeType":"YulExpressionStatement","src":"27685:50:83"},{"expression":{"arguments":[{"name":"tail_1","nativeSrc":"27751:6:83","nodeType":"YulIdentifier","src":"27751:6:83"},{"kind":"number","nativeSrc":"27759:1:83","nodeType":"YulLiteral","src":"27759:1:83","type":"","value":"6"}],"functionName":{"name":"mstore","nativeSrc":"27744:6:83","nodeType":"YulIdentifier","src":"27744:6:83"},"nativeSrc":"27744:17:83","nodeType":"YulFunctionCall","src":"27744:17:83"},"nativeSrc":"27744:17:83","nodeType":"YulExpressionStatement","src":"27744:17:83"},{"expression":{"arguments":[{"arguments":[{"name":"tail_1","nativeSrc":"27781:6:83","nodeType":"YulIdentifier","src":"27781:6:83"},{"kind":"number","nativeSrc":"27789:2:83","nodeType":"YulLiteral","src":"27789:2:83","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"27777:3:83","nodeType":"YulIdentifier","src":"27777:3:83"},"nativeSrc":"27777:15:83","nodeType":"YulFunctionCall","src":"27777:15:83"},{"hexValue":"4641494c4544","kind":"string","nativeSrc":"27794:8:83","nodeType":"YulLiteral","src":"27794:8:83","type":"","value":"FAILED"}],"functionName":{"name":"mstore","nativeSrc":"27770:6:83","nodeType":"YulIdentifier","src":"27770:6:83"},"nativeSrc":"27770:33:83","nodeType":"YulFunctionCall","src":"27770:33:83"},"nativeSrc":"27770:33:83","nodeType":"YulExpressionStatement","src":"27770:33:83"},{"nativeSrc":"27812:23:83","nodeType":"YulAssignment","src":"27812:23:83","value":{"arguments":[{"name":"tail_1","nativeSrc":"27824:6:83","nodeType":"YulIdentifier","src":"27824:6:83"},{"kind":"number","nativeSrc":"27832:2:83","nodeType":"YulLiteral","src":"27832:2:83","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"27820:3:83","nodeType":"YulIdentifier","src":"27820:3:83"},"nativeSrc":"27820:15:83","nodeType":"YulFunctionCall","src":"27820:15:83"},"variableNames":[{"name":"tail","nativeSrc":"27812:4:83","nodeType":"YulIdentifier","src":"27812:4:83"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr_t_stringliteral_c50cad6f8b1c8a54a5c76e3eca57f2748d547818bfac18403e7911bf23fc8166__to_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed","nativeSrc":"27344:497:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"27535:9:83","nodeType":"YulTypedName","src":"27535:9:83","type":""},{"name":"value0","nativeSrc":"27546:6:83","nodeType":"YulTypedName","src":"27546:6:83","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"27557:4:83","nodeType":"YulTypedName","src":"27557:4:83","type":""}],"src":"27344:497:83"},{"body":{"nativeSrc":"28086:163:83","nodeType":"YulBlock","src":"28086:163:83","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"28103:3:83","nodeType":"YulIdentifier","src":"28103:3:83"},{"hexValue":"55706772616465207361666574792076616c69646174696f6e206661696c6564","kind":"string","nativeSrc":"28108:34:83","nodeType":"YulLiteral","src":"28108:34:83","type":"","value":"Upgrade safety validation failed"}],"functionName":{"name":"mstore","nativeSrc":"28096:6:83","nodeType":"YulIdentifier","src":"28096:6:83"},"nativeSrc":"28096:47:83","nodeType":"YulFunctionCall","src":"28096:47:83"},"nativeSrc":"28096:47:83","nodeType":"YulExpressionStatement","src":"28096:47:83"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"28163:3:83","nodeType":"YulIdentifier","src":"28163:3:83"},{"kind":"number","nativeSrc":"28168:2:83","nodeType":"YulLiteral","src":"28168:2:83","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"28159:3:83","nodeType":"YulIdentifier","src":"28159:3:83"},"nativeSrc":"28159:12:83","nodeType":"YulFunctionCall","src":"28159:12:83"},{"arguments":[{"kind":"number","nativeSrc":"28177:3:83","nodeType":"YulLiteral","src":"28177:3:83","type":"","value":"241"},{"kind":"number","nativeSrc":"28182:4:83","nodeType":"YulLiteral","src":"28182:4:83","type":"","value":"7429"}],"functionName":{"name":"shl","nativeSrc":"28173:3:83","nodeType":"YulIdentifier","src":"28173:3:83"},"nativeSrc":"28173:14:83","nodeType":"YulFunctionCall","src":"28173:14:83"}],"functionName":{"name":"mstore","nativeSrc":"28152:6:83","nodeType":"YulIdentifier","src":"28152:6:83"},"nativeSrc":"28152:36:83","nodeType":"YulFunctionCall","src":"28152:36:83"},"nativeSrc":"28152:36:83","nodeType":"YulExpressionStatement","src":"28152:36:83"},{"nativeSrc":"28197:46:83","nodeType":"YulAssignment","src":"28197:46:83","value":{"arguments":[{"name":"value0","nativeSrc":"28222:6:83","nodeType":"YulIdentifier","src":"28222:6:83"},{"arguments":[{"name":"pos","nativeSrc":"28234:3:83","nodeType":"YulIdentifier","src":"28234:3:83"},{"kind":"number","nativeSrc":"28239:2:83","nodeType":"YulLiteral","src":"28239:2:83","type":"","value":"34"}],"functionName":{"name":"add","nativeSrc":"28230:3:83","nodeType":"YulIdentifier","src":"28230:3:83"},"nativeSrc":"28230:12:83","nodeType":"YulFunctionCall","src":"28230:12:83"}],"functionName":{"name":"abi_encode_string","nativeSrc":"28204:17:83","nodeType":"YulIdentifier","src":"28204:17:83"},"nativeSrc":"28204:39:83","nodeType":"YulFunctionCall","src":"28204:39:83"},"variableNames":[{"name":"end","nativeSrc":"28197:3:83","nodeType":"YulIdentifier","src":"28197:3:83"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_08801615ab40adc93bf881a8fa998cec8215450529dace7649c906794b645fd9_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"27846:403:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"28062:3:83","nodeType":"YulTypedName","src":"28062:3:83","type":""},{"name":"value0","nativeSrc":"28067:6:83","nodeType":"YulTypedName","src":"28067:6:83","type":""}],"returnVariables":[{"name":"end","nativeSrc":"28078:3:83","nodeType":"YulTypedName","src":"28078:3:83","type":""}],"src":"27846:403:83"},{"body":{"nativeSrc":"28577:377:83","nodeType":"YulBlock","src":"28577:377:83","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"28594:9:83","nodeType":"YulIdentifier","src":"28594:9:83"},{"kind":"number","nativeSrc":"28605:2:83","nodeType":"YulLiteral","src":"28605:2:83","type":"","value":"96"}],"functionName":{"name":"mstore","nativeSrc":"28587:6:83","nodeType":"YulIdentifier","src":"28587:6:83"},"nativeSrc":"28587:21:83","nodeType":"YulFunctionCall","src":"28587:21:83"},"nativeSrc":"28587:21:83","nodeType":"YulExpressionStatement","src":"28587:21:83"},{"nativeSrc":"28617:70:83","nodeType":"YulVariableDeclaration","src":"28617:70:83","value":{"arguments":[{"name":"value0","nativeSrc":"28660:6:83","nodeType":"YulIdentifier","src":"28660:6:83"},{"arguments":[{"name":"headStart","nativeSrc":"28672:9:83","nodeType":"YulIdentifier","src":"28672:9:83"},{"kind":"number","nativeSrc":"28683:2:83","nodeType":"YulLiteral","src":"28683:2:83","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"28668:3:83","nodeType":"YulIdentifier","src":"28668:3:83"},"nativeSrc":"28668:18:83","nodeType":"YulFunctionCall","src":"28668:18:83"}],"functionName":{"name":"abi_encode_string_memory_ptr","nativeSrc":"28631:28:83","nodeType":"YulIdentifier","src":"28631:28:83"},"nativeSrc":"28631:56:83","nodeType":"YulFunctionCall","src":"28631:56:83"},"variables":[{"name":"tail_1","nativeSrc":"28621:6:83","nodeType":"YulTypedName","src":"28621:6:83","type":""}]},{"nativeSrc":"28696:32:83","nodeType":"YulVariableDeclaration","src":"28696:32:83","value":{"arguments":[{"name":"tail_1","nativeSrc":"28710:6:83","nodeType":"YulIdentifier","src":"28710:6:83"},{"name":"headStart","nativeSrc":"28718:9:83","nodeType":"YulIdentifier","src":"28718:9:83"}],"functionName":{"name":"sub","nativeSrc":"28706:3:83","nodeType":"YulIdentifier","src":"28706:3:83"},"nativeSrc":"28706:22:83","nodeType":"YulFunctionCall","src":"28706:22:83"},"variables":[{"name":"_1","nativeSrc":"28700:2:83","nodeType":"YulTypedName","src":"28700:2:83","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"28748:9:83","nodeType":"YulIdentifier","src":"28748:9:83"},{"kind":"number","nativeSrc":"28759:2:83","nodeType":"YulLiteral","src":"28759:2:83","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"28744:3:83","nodeType":"YulIdentifier","src":"28744:3:83"},"nativeSrc":"28744:18:83","nodeType":"YulFunctionCall","src":"28744:18:83"},{"name":"_1","nativeSrc":"28764:2:83","nodeType":"YulIdentifier","src":"28764:2:83"}],"functionName":{"name":"mstore","nativeSrc":"28737:6:83","nodeType":"YulIdentifier","src":"28737:6:83"},"nativeSrc":"28737:30:83","nodeType":"YulFunctionCall","src":"28737:30:83"},"nativeSrc":"28737:30:83","nodeType":"YulExpressionStatement","src":"28737:30:83"},{"expression":{"arguments":[{"name":"tail_1","nativeSrc":"28783:6:83","nodeType":"YulIdentifier","src":"28783:6:83"},{"kind":"number","nativeSrc":"28791:1:83","nodeType":"YulLiteral","src":"28791:1:83","type":"","value":"4"}],"functionName":{"name":"mstore","nativeSrc":"28776:6:83","nodeType":"YulIdentifier","src":"28776:6:83"},"nativeSrc":"28776:17:83","nodeType":"YulFunctionCall","src":"28776:17:83"},"nativeSrc":"28776:17:83","nodeType":"YulExpressionStatement","src":"28776:17:83"},{"expression":{"arguments":[{"arguments":[{"name":"tail_1","nativeSrc":"28813:6:83","nodeType":"YulIdentifier","src":"28813:6:83"},{"kind":"number","nativeSrc":"28821:2:83","nodeType":"YulLiteral","src":"28821:2:83","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"28809:3:83","nodeType":"YulIdentifier","src":"28809:3:83"},"nativeSrc":"28809:15:83","nodeType":"YulFunctionCall","src":"28809:15:83"},{"hexValue":"2e736f6c","kind":"string","nativeSrc":"28826:6:83","nodeType":"YulLiteral","src":"28826:6:83","type":"","value":".sol"}],"functionName":{"name":"mstore","nativeSrc":"28802:6:83","nodeType":"YulIdentifier","src":"28802:6:83"},"nativeSrc":"28802:31:83","nodeType":"YulFunctionCall","src":"28802:31:83"},"nativeSrc":"28802:31:83","nodeType":"YulExpressionStatement","src":"28802:31:83"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"28853:9:83","nodeType":"YulIdentifier","src":"28853:9:83"},{"kind":"number","nativeSrc":"28864:2:83","nodeType":"YulLiteral","src":"28864:2:83","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"28849:3:83","nodeType":"YulIdentifier","src":"28849:3:83"},"nativeSrc":"28849:18:83","nodeType":"YulFunctionCall","src":"28849:18:83"},{"arguments":[{"name":"_1","nativeSrc":"28873:2:83","nodeType":"YulIdentifier","src":"28873:2:83"},{"kind":"number","nativeSrc":"28877:2:83","nodeType":"YulLiteral","src":"28877:2:83","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"28869:3:83","nodeType":"YulIdentifier","src":"28869:3:83"},"nativeSrc":"28869:11:83","nodeType":"YulFunctionCall","src":"28869:11:83"}],"functionName":{"name":"mstore","nativeSrc":"28842:6:83","nodeType":"YulIdentifier","src":"28842:6:83"},"nativeSrc":"28842:39:83","nodeType":"YulFunctionCall","src":"28842:39:83"},"nativeSrc":"28842:39:83","nodeType":"YulExpressionStatement","src":"28842:39:83"},{"expression":{"arguments":[{"arguments":[{"name":"tail_1","nativeSrc":"28901:6:83","nodeType":"YulIdentifier","src":"28901:6:83"},{"kind":"number","nativeSrc":"28909:2:83","nodeType":"YulLiteral","src":"28909:2:83","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"28897:3:83","nodeType":"YulIdentifier","src":"28897:3:83"},"nativeSrc":"28897:15:83","nodeType":"YulFunctionCall","src":"28897:15:83"},{"kind":"number","nativeSrc":"28914:1:83","nodeType":"YulLiteral","src":"28914:1:83","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"28890:6:83","nodeType":"YulIdentifier","src":"28890:6:83"},"nativeSrc":"28890:26:83","nodeType":"YulFunctionCall","src":"28890:26:83"},"nativeSrc":"28890:26:83","nodeType":"YulExpressionStatement","src":"28890:26:83"},{"nativeSrc":"28925:23:83","nodeType":"YulAssignment","src":"28925:23:83","value":{"arguments":[{"name":"tail_1","nativeSrc":"28937:6:83","nodeType":"YulIdentifier","src":"28937:6:83"},{"kind":"number","nativeSrc":"28945:2:83","nodeType":"YulLiteral","src":"28945:2:83","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"28933:3:83","nodeType":"YulIdentifier","src":"28933:3:83"},"nativeSrc":"28933:15:83","nodeType":"YulFunctionCall","src":"28933:15:83"},"variableNames":[{"name":"tail","nativeSrc":"28925:4:83","nodeType":"YulIdentifier","src":"28925:4:83"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr_t_stringliteral_e4899d98551d0eedd3839d89cdef847f3de976f02aecec9c64bb534483e2fdc1_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed","nativeSrc":"28254:700:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"28546:9:83","nodeType":"YulTypedName","src":"28546:9:83","type":""},{"name":"value0","nativeSrc":"28557:6:83","nodeType":"YulTypedName","src":"28557:6:83","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"28568:4:83","nodeType":"YulTypedName","src":"28568:4:83","type":""}],"src":"28254:700:83"},{"body":{"nativeSrc":"29181:270:83","nodeType":"YulBlock","src":"29181:270:83","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"29198:9:83","nodeType":"YulIdentifier","src":"29198:9:83"},{"kind":"number","nativeSrc":"29209:2:83","nodeType":"YulLiteral","src":"29209:2:83","type":"","value":"64"}],"functionName":{"name":"mstore","nativeSrc":"29191:6:83","nodeType":"YulIdentifier","src":"29191:6:83"},"nativeSrc":"29191:21:83","nodeType":"YulFunctionCall","src":"29191:21:83"},"nativeSrc":"29191:21:83","nodeType":"YulExpressionStatement","src":"29191:21:83"},{"nativeSrc":"29221:70:83","nodeType":"YulVariableDeclaration","src":"29221:70:83","value":{"arguments":[{"name":"value0","nativeSrc":"29264:6:83","nodeType":"YulIdentifier","src":"29264:6:83"},{"arguments":[{"name":"headStart","nativeSrc":"29276:9:83","nodeType":"YulIdentifier","src":"29276:9:83"},{"kind":"number","nativeSrc":"29287:2:83","nodeType":"YulLiteral","src":"29287:2:83","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"29272:3:83","nodeType":"YulIdentifier","src":"29272:3:83"},"nativeSrc":"29272:18:83","nodeType":"YulFunctionCall","src":"29272:18:83"}],"functionName":{"name":"abi_encode_string_memory_ptr","nativeSrc":"29235:28:83","nodeType":"YulIdentifier","src":"29235:28:83"},"nativeSrc":"29235:56:83","nodeType":"YulFunctionCall","src":"29235:56:83"},"variables":[{"name":"tail_1","nativeSrc":"29225:6:83","nodeType":"YulTypedName","src":"29225:6:83","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"29311:9:83","nodeType":"YulIdentifier","src":"29311:9:83"},{"kind":"number","nativeSrc":"29322:2:83","nodeType":"YulLiteral","src":"29322:2:83","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"29307:3:83","nodeType":"YulIdentifier","src":"29307:3:83"},"nativeSrc":"29307:18:83","nodeType":"YulFunctionCall","src":"29307:18:83"},{"arguments":[{"name":"tail_1","nativeSrc":"29331:6:83","nodeType":"YulIdentifier","src":"29331:6:83"},{"name":"headStart","nativeSrc":"29339:9:83","nodeType":"YulIdentifier","src":"29339:9:83"}],"functionName":{"name":"sub","nativeSrc":"29327:3:83","nodeType":"YulIdentifier","src":"29327:3:83"},"nativeSrc":"29327:22:83","nodeType":"YulFunctionCall","src":"29327:22:83"}],"functionName":{"name":"mstore","nativeSrc":"29300:6:83","nodeType":"YulIdentifier","src":"29300:6:83"},"nativeSrc":"29300:50:83","nodeType":"YulFunctionCall","src":"29300:50:83"},"nativeSrc":"29300:50:83","nodeType":"YulExpressionStatement","src":"29300:50:83"},{"expression":{"arguments":[{"name":"tail_1","nativeSrc":"29366:6:83","nodeType":"YulIdentifier","src":"29366:6:83"},{"kind":"number","nativeSrc":"29374:1:83","nodeType":"YulLiteral","src":"29374:1:83","type":"","value":"1"}],"functionName":{"name":"mstore","nativeSrc":"29359:6:83","nodeType":"YulIdentifier","src":"29359:6:83"},"nativeSrc":"29359:17:83","nodeType":"YulFunctionCall","src":"29359:17:83"},"nativeSrc":"29359:17:83","nodeType":"YulExpressionStatement","src":"29359:17:83"},{"expression":{"arguments":[{"arguments":[{"name":"tail_1","nativeSrc":"29396:6:83","nodeType":"YulIdentifier","src":"29396:6:83"},{"kind":"number","nativeSrc":"29404:2:83","nodeType":"YulLiteral","src":"29404:2:83","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"29392:3:83","nodeType":"YulIdentifier","src":"29392:3:83"},"nativeSrc":"29392:15:83","nodeType":"YulFunctionCall","src":"29392:15:83"},{"hexValue":"3a","kind":"string","nativeSrc":"29409:3:83","nodeType":"YulLiteral","src":"29409:3:83","type":"","value":":"}],"functionName":{"name":"mstore","nativeSrc":"29385:6:83","nodeType":"YulIdentifier","src":"29385:6:83"},"nativeSrc":"29385:28:83","nodeType":"YulFunctionCall","src":"29385:28:83"},"nativeSrc":"29385:28:83","nodeType":"YulExpressionStatement","src":"29385:28:83"},{"nativeSrc":"29422:23:83","nodeType":"YulAssignment","src":"29422:23:83","value":{"arguments":[{"name":"tail_1","nativeSrc":"29434:6:83","nodeType":"YulIdentifier","src":"29434:6:83"},{"kind":"number","nativeSrc":"29442:2:83","nodeType":"YulLiteral","src":"29442:2:83","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"29430:3:83","nodeType":"YulIdentifier","src":"29430:3:83"},"nativeSrc":"29430:15:83","nodeType":"YulFunctionCall","src":"29430:15:83"},"variableNames":[{"name":"tail","nativeSrc":"29422:4:83","nodeType":"YulIdentifier","src":"29422:4:83"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr_t_stringliteral_96d280011b274d9410ea6c6fc28e2bb076b01d2fac329c49c4b29a719ec4650c__to_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed","nativeSrc":"28959:492:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"29150:9:83","nodeType":"YulTypedName","src":"29150:9:83","type":""},{"name":"value0","nativeSrc":"29161:6:83","nodeType":"YulTypedName","src":"29161:6:83","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"29172:4:83","nodeType":"YulTypedName","src":"29172:4:83","type":""}],"src":"28959:492:83"},{"body":{"nativeSrc":"29678:270:83","nodeType":"YulBlock","src":"29678:270:83","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"29695:9:83","nodeType":"YulIdentifier","src":"29695:9:83"},{"kind":"number","nativeSrc":"29706:2:83","nodeType":"YulLiteral","src":"29706:2:83","type":"","value":"64"}],"functionName":{"name":"mstore","nativeSrc":"29688:6:83","nodeType":"YulIdentifier","src":"29688:6:83"},"nativeSrc":"29688:21:83","nodeType":"YulFunctionCall","src":"29688:21:83"},"nativeSrc":"29688:21:83","nodeType":"YulExpressionStatement","src":"29688:21:83"},{"nativeSrc":"29718:70:83","nodeType":"YulVariableDeclaration","src":"29718:70:83","value":{"arguments":[{"name":"value0","nativeSrc":"29761:6:83","nodeType":"YulIdentifier","src":"29761:6:83"},{"arguments":[{"name":"headStart","nativeSrc":"29773:9:83","nodeType":"YulIdentifier","src":"29773:9:83"},{"kind":"number","nativeSrc":"29784:2:83","nodeType":"YulLiteral","src":"29784:2:83","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"29769:3:83","nodeType":"YulIdentifier","src":"29769:3:83"},"nativeSrc":"29769:18:83","nodeType":"YulFunctionCall","src":"29769:18:83"}],"functionName":{"name":"abi_encode_string_memory_ptr","nativeSrc":"29732:28:83","nodeType":"YulIdentifier","src":"29732:28:83"},"nativeSrc":"29732:56:83","nodeType":"YulFunctionCall","src":"29732:56:83"},"variables":[{"name":"tail_1","nativeSrc":"29722:6:83","nodeType":"YulTypedName","src":"29722:6:83","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"29808:9:83","nodeType":"YulIdentifier","src":"29808:9:83"},{"kind":"number","nativeSrc":"29819:2:83","nodeType":"YulLiteral","src":"29819:2:83","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"29804:3:83","nodeType":"YulIdentifier","src":"29804:3:83"},"nativeSrc":"29804:18:83","nodeType":"YulFunctionCall","src":"29804:18:83"},{"arguments":[{"name":"tail_1","nativeSrc":"29828:6:83","nodeType":"YulIdentifier","src":"29828:6:83"},{"name":"headStart","nativeSrc":"29836:9:83","nodeType":"YulIdentifier","src":"29836:9:83"}],"functionName":{"name":"sub","nativeSrc":"29824:3:83","nodeType":"YulIdentifier","src":"29824:3:83"},"nativeSrc":"29824:22:83","nodeType":"YulFunctionCall","src":"29824:22:83"}],"functionName":{"name":"mstore","nativeSrc":"29797:6:83","nodeType":"YulIdentifier","src":"29797:6:83"},"nativeSrc":"29797:50:83","nodeType":"YulFunctionCall","src":"29797:50:83"},"nativeSrc":"29797:50:83","nodeType":"YulExpressionStatement","src":"29797:50:83"},{"expression":{"arguments":[{"name":"tail_1","nativeSrc":"29863:6:83","nodeType":"YulIdentifier","src":"29863:6:83"},{"kind":"number","nativeSrc":"29871:1:83","nodeType":"YulLiteral","src":"29871:1:83","type":"","value":"1"}],"functionName":{"name":"mstore","nativeSrc":"29856:6:83","nodeType":"YulIdentifier","src":"29856:6:83"},"nativeSrc":"29856:17:83","nodeType":"YulFunctionCall","src":"29856:17:83"},"nativeSrc":"29856:17:83","nodeType":"YulExpressionStatement","src":"29856:17:83"},{"expression":{"arguments":[{"arguments":[{"name":"tail_1","nativeSrc":"29893:6:83","nodeType":"YulIdentifier","src":"29893:6:83"},{"kind":"number","nativeSrc":"29901:2:83","nodeType":"YulLiteral","src":"29901:2:83","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"29889:3:83","nodeType":"YulIdentifier","src":"29889:3:83"},"nativeSrc":"29889:15:83","nodeType":"YulFunctionCall","src":"29889:15:83"},{"hexValue":"2f","kind":"string","nativeSrc":"29906:3:83","nodeType":"YulLiteral","src":"29906:3:83","type":"","value":"/"}],"functionName":{"name":"mstore","nativeSrc":"29882:6:83","nodeType":"YulIdentifier","src":"29882:6:83"},"nativeSrc":"29882:28:83","nodeType":"YulFunctionCall","src":"29882:28:83"},"nativeSrc":"29882:28:83","nodeType":"YulExpressionStatement","src":"29882:28:83"},{"nativeSrc":"29919:23:83","nodeType":"YulAssignment","src":"29919:23:83","value":{"arguments":[{"name":"tail_1","nativeSrc":"29931:6:83","nodeType":"YulIdentifier","src":"29931:6:83"},{"kind":"number","nativeSrc":"29939:2:83","nodeType":"YulLiteral","src":"29939:2:83","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"29927:3:83","nodeType":"YulIdentifier","src":"29927:3:83"},"nativeSrc":"29927:15:83","nodeType":"YulFunctionCall","src":"29927:15:83"},"variableNames":[{"name":"tail","nativeSrc":"29919:4:83","nodeType":"YulIdentifier","src":"29919:4:83"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr_t_stringliteral_fba9715e477e68952d3f1df7a185b3708aadad50ec10cc793973864023868527__to_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed","nativeSrc":"29456:492:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"29647:9:83","nodeType":"YulTypedName","src":"29647:9:83","type":""},{"name":"value0","nativeSrc":"29658:6:83","nodeType":"YulTypedName","src":"29658:6:83","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"29669:4:83","nodeType":"YulTypedName","src":"29669:4:83","type":""}],"src":"29456:492:83"},{"body":{"nativeSrc":"30002:79:83","nodeType":"YulBlock","src":"30002:79:83","statements":[{"nativeSrc":"30012:17:83","nodeType":"YulAssignment","src":"30012:17:83","value":{"arguments":[{"name":"x","nativeSrc":"30024:1:83","nodeType":"YulIdentifier","src":"30024:1:83"},{"name":"y","nativeSrc":"30027:1:83","nodeType":"YulIdentifier","src":"30027:1:83"}],"functionName":{"name":"sub","nativeSrc":"30020:3:83","nodeType":"YulIdentifier","src":"30020:3:83"},"nativeSrc":"30020:9:83","nodeType":"YulFunctionCall","src":"30020:9:83"},"variableNames":[{"name":"diff","nativeSrc":"30012:4:83","nodeType":"YulIdentifier","src":"30012:4:83"}]},{"body":{"nativeSrc":"30053:22:83","nodeType":"YulBlock","src":"30053:22:83","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"30055:16:83","nodeType":"YulIdentifier","src":"30055:16:83"},"nativeSrc":"30055:18:83","nodeType":"YulFunctionCall","src":"30055:18:83"},"nativeSrc":"30055:18:83","nodeType":"YulExpressionStatement","src":"30055:18:83"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"30044:4:83","nodeType":"YulIdentifier","src":"30044:4:83"},{"name":"x","nativeSrc":"30050:1:83","nodeType":"YulIdentifier","src":"30050:1:83"}],"functionName":{"name":"gt","nativeSrc":"30041:2:83","nodeType":"YulIdentifier","src":"30041:2:83"},"nativeSrc":"30041:11:83","nodeType":"YulFunctionCall","src":"30041:11:83"},"nativeSrc":"30038:37:83","nodeType":"YulIf","src":"30038:37:83"}]},"name":"checked_sub_t_uint256","nativeSrc":"29953:128:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"29984:1:83","nodeType":"YulTypedName","src":"29984:1:83","type":""},{"name":"y","nativeSrc":"29987:1:83","nodeType":"YulTypedName","src":"29987:1:83","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"29993:4:83","nodeType":"YulTypedName","src":"29993:4:83","type":""}],"src":"29953:128:83"},{"body":{"nativeSrc":"30409:378:83","nodeType":"YulBlock","src":"30409:378:83","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"30426:9:83","nodeType":"YulIdentifier","src":"30426:9:83"},{"kind":"number","nativeSrc":"30437:2:83","nodeType":"YulLiteral","src":"30437:2:83","type":"","value":"96"}],"functionName":{"name":"mstore","nativeSrc":"30419:6:83","nodeType":"YulIdentifier","src":"30419:6:83"},"nativeSrc":"30419:21:83","nodeType":"YulFunctionCall","src":"30419:21:83"},"nativeSrc":"30419:21:83","nodeType":"YulExpressionStatement","src":"30419:21:83"},{"nativeSrc":"30449:70:83","nodeType":"YulVariableDeclaration","src":"30449:70:83","value":{"arguments":[{"name":"value0","nativeSrc":"30492:6:83","nodeType":"YulIdentifier","src":"30492:6:83"},{"arguments":[{"name":"headStart","nativeSrc":"30504:9:83","nodeType":"YulIdentifier","src":"30504:9:83"},{"kind":"number","nativeSrc":"30515:2:83","nodeType":"YulLiteral","src":"30515:2:83","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"30500:3:83","nodeType":"YulIdentifier","src":"30500:3:83"},"nativeSrc":"30500:18:83","nodeType":"YulFunctionCall","src":"30500:18:83"}],"functionName":{"name":"abi_encode_string_memory_ptr","nativeSrc":"30463:28:83","nodeType":"YulIdentifier","src":"30463:28:83"},"nativeSrc":"30463:56:83","nodeType":"YulFunctionCall","src":"30463:56:83"},"variables":[{"name":"tail_1","nativeSrc":"30453:6:83","nodeType":"YulTypedName","src":"30453:6:83","type":""}]},{"nativeSrc":"30528:32:83","nodeType":"YulVariableDeclaration","src":"30528:32:83","value":{"arguments":[{"name":"tail_1","nativeSrc":"30542:6:83","nodeType":"YulIdentifier","src":"30542:6:83"},{"name":"headStart","nativeSrc":"30550:9:83","nodeType":"YulIdentifier","src":"30550:9:83"}],"functionName":{"name":"sub","nativeSrc":"30538:3:83","nodeType":"YulIdentifier","src":"30538:3:83"},"nativeSrc":"30538:22:83","nodeType":"YulFunctionCall","src":"30538:22:83"},"variables":[{"name":"_1","nativeSrc":"30532:2:83","nodeType":"YulTypedName","src":"30532:2:83","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"30580:9:83","nodeType":"YulIdentifier","src":"30580:9:83"},{"kind":"number","nativeSrc":"30591:2:83","nodeType":"YulLiteral","src":"30591:2:83","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"30576:3:83","nodeType":"YulIdentifier","src":"30576:3:83"},"nativeSrc":"30576:18:83","nodeType":"YulFunctionCall","src":"30576:18:83"},{"name":"_1","nativeSrc":"30596:2:83","nodeType":"YulIdentifier","src":"30596:2:83"}],"functionName":{"name":"mstore","nativeSrc":"30569:6:83","nodeType":"YulIdentifier","src":"30569:6:83"},"nativeSrc":"30569:30:83","nodeType":"YulFunctionCall","src":"30569:30:83"},"nativeSrc":"30569:30:83","nodeType":"YulExpressionStatement","src":"30569:30:83"},{"expression":{"arguments":[{"name":"tail_1","nativeSrc":"30615:6:83","nodeType":"YulIdentifier","src":"30615:6:83"},{"kind":"number","nativeSrc":"30623:1:83","nodeType":"YulLiteral","src":"30623:1:83","type":"","value":"5"}],"functionName":{"name":"mstore","nativeSrc":"30608:6:83","nodeType":"YulIdentifier","src":"30608:6:83"},"nativeSrc":"30608:17:83","nodeType":"YulFunctionCall","src":"30608:17:83"},"nativeSrc":"30608:17:83","nodeType":"YulExpressionStatement","src":"30608:17:83"},{"expression":{"arguments":[{"arguments":[{"name":"tail_1","nativeSrc":"30645:6:83","nodeType":"YulIdentifier","src":"30645:6:83"},{"kind":"number","nativeSrc":"30653:2:83","nodeType":"YulLiteral","src":"30653:2:83","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"30641:3:83","nodeType":"YulIdentifier","src":"30641:3:83"},"nativeSrc":"30641:15:83","nodeType":"YulFunctionCall","src":"30641:15:83"},{"hexValue":"2e6a736f6e","kind":"string","nativeSrc":"30658:7:83","nodeType":"YulLiteral","src":"30658:7:83","type":"","value":".json"}],"functionName":{"name":"mstore","nativeSrc":"30634:6:83","nodeType":"YulIdentifier","src":"30634:6:83"},"nativeSrc":"30634:32:83","nodeType":"YulFunctionCall","src":"30634:32:83"},"nativeSrc":"30634:32:83","nodeType":"YulExpressionStatement","src":"30634:32:83"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"30686:9:83","nodeType":"YulIdentifier","src":"30686:9:83"},{"kind":"number","nativeSrc":"30697:2:83","nodeType":"YulLiteral","src":"30697:2:83","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"30682:3:83","nodeType":"YulIdentifier","src":"30682:3:83"},"nativeSrc":"30682:18:83","nodeType":"YulFunctionCall","src":"30682:18:83"},{"arguments":[{"name":"_1","nativeSrc":"30706:2:83","nodeType":"YulIdentifier","src":"30706:2:83"},{"kind":"number","nativeSrc":"30710:2:83","nodeType":"YulLiteral","src":"30710:2:83","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"30702:3:83","nodeType":"YulIdentifier","src":"30702:3:83"},"nativeSrc":"30702:11:83","nodeType":"YulFunctionCall","src":"30702:11:83"}],"functionName":{"name":"mstore","nativeSrc":"30675:6:83","nodeType":"YulIdentifier","src":"30675:6:83"},"nativeSrc":"30675:39:83","nodeType":"YulFunctionCall","src":"30675:39:83"},"nativeSrc":"30675:39:83","nodeType":"YulExpressionStatement","src":"30675:39:83"},{"expression":{"arguments":[{"arguments":[{"name":"tail_1","nativeSrc":"30734:6:83","nodeType":"YulIdentifier","src":"30734:6:83"},{"kind":"number","nativeSrc":"30742:2:83","nodeType":"YulLiteral","src":"30742:2:83","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"30730:3:83","nodeType":"YulIdentifier","src":"30730:3:83"},"nativeSrc":"30730:15:83","nodeType":"YulFunctionCall","src":"30730:15:83"},{"kind":"number","nativeSrc":"30747:1:83","nodeType":"YulLiteral","src":"30747:1:83","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"30723:6:83","nodeType":"YulIdentifier","src":"30723:6:83"},"nativeSrc":"30723:26:83","nodeType":"YulFunctionCall","src":"30723:26:83"},"nativeSrc":"30723:26:83","nodeType":"YulExpressionStatement","src":"30723:26:83"},{"nativeSrc":"30758:23:83","nodeType":"YulAssignment","src":"30758:23:83","value":{"arguments":[{"name":"tail_1","nativeSrc":"30770:6:83","nodeType":"YulIdentifier","src":"30770:6:83"},{"kind":"number","nativeSrc":"30778:2:83","nodeType":"YulLiteral","src":"30778:2:83","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"30766:3:83","nodeType":"YulIdentifier","src":"30766:3:83"},"nativeSrc":"30766:15:83","nodeType":"YulFunctionCall","src":"30766:15:83"},"variableNames":[{"name":"tail","nativeSrc":"30758:4:83","nodeType":"YulIdentifier","src":"30758:4:83"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr_t_stringliteral_94311adc0a0cd4e10be11b23bd4316b8cffa4adf693e8f96f5c075aa439a7972_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed","nativeSrc":"30086:701:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"30378:9:83","nodeType":"YulTypedName","src":"30378:9:83","type":""},{"name":"value0","nativeSrc":"30389:6:83","nodeType":"YulTypedName","src":"30389:6:83","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"30400:4:83","nodeType":"YulTypedName","src":"30400:4:83","type":""}],"src":"30086:701:83"},{"body":{"nativeSrc":"31133:354:83","nodeType":"YulBlock","src":"31133:354:83","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"31150:3:83","nodeType":"YulIdentifier","src":"31150:3:83"},{"hexValue":"436f6e7472616374206e616d6520","kind":"string","nativeSrc":"31155:16:83","nodeType":"YulLiteral","src":"31155:16:83","type":"","value":"Contract name "}],"functionName":{"name":"mstore","nativeSrc":"31143:6:83","nodeType":"YulIdentifier","src":"31143:6:83"},"nativeSrc":"31143:29:83","nodeType":"YulFunctionCall","src":"31143:29:83"},"nativeSrc":"31143:29:83","nodeType":"YulExpressionStatement","src":"31143:29:83"},{"nativeSrc":"31181:49:83","nodeType":"YulVariableDeclaration","src":"31181:49:83","value":{"arguments":[{"name":"value0","nativeSrc":"31209:6:83","nodeType":"YulIdentifier","src":"31209:6:83"},{"arguments":[{"name":"pos","nativeSrc":"31221:3:83","nodeType":"YulIdentifier","src":"31221:3:83"},{"kind":"number","nativeSrc":"31226:2:83","nodeType":"YulLiteral","src":"31226:2:83","type":"","value":"14"}],"functionName":{"name":"add","nativeSrc":"31217:3:83","nodeType":"YulIdentifier","src":"31217:3:83"},"nativeSrc":"31217:12:83","nodeType":"YulFunctionCall","src":"31217:12:83"}],"functionName":{"name":"abi_encode_string","nativeSrc":"31191:17:83","nodeType":"YulIdentifier","src":"31191:17:83"},"nativeSrc":"31191:39:83","nodeType":"YulFunctionCall","src":"31191:39:83"},"variables":[{"name":"_1","nativeSrc":"31185:2:83","nodeType":"YulTypedName","src":"31185:2:83","type":""}]},{"expression":{"arguments":[{"name":"_1","nativeSrc":"31246:2:83","nodeType":"YulIdentifier","src":"31246:2:83"},{"hexValue":"206d75737420626520696e2074686520666f726d6174204d79436f6e74726163","kind":"string","nativeSrc":"31250:34:83","nodeType":"YulLiteral","src":"31250:34:83","type":"","value":" must be in the format MyContrac"}],"functionName":{"name":"mstore","nativeSrc":"31239:6:83","nodeType":"YulIdentifier","src":"31239:6:83"},"nativeSrc":"31239:46:83","nodeType":"YulFunctionCall","src":"31239:46:83"},"nativeSrc":"31239:46:83","nodeType":"YulExpressionStatement","src":"31239:46:83"},{"expression":{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"31305:2:83","nodeType":"YulIdentifier","src":"31305:2:83"},{"kind":"number","nativeSrc":"31309:2:83","nodeType":"YulLiteral","src":"31309:2:83","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"31301:3:83","nodeType":"YulIdentifier","src":"31301:3:83"},"nativeSrc":"31301:11:83","nodeType":"YulFunctionCall","src":"31301:11:83"},{"hexValue":"742e736f6c3a4d79436f6e7472616374206f72204d79436f6e74726163742e73","kind":"string","nativeSrc":"31314:34:83","nodeType":"YulLiteral","src":"31314:34:83","type":"","value":"t.sol:MyContract or MyContract.s"}],"functionName":{"name":"mstore","nativeSrc":"31294:6:83","nodeType":"YulIdentifier","src":"31294:6:83"},"nativeSrc":"31294:55:83","nodeType":"YulFunctionCall","src":"31294:55:83"},"nativeSrc":"31294:55:83","nodeType":"YulExpressionStatement","src":"31294:55:83"},{"expression":{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"31369:2:83","nodeType":"YulIdentifier","src":"31369:2:83"},{"kind":"number","nativeSrc":"31373:2:83","nodeType":"YulLiteral","src":"31373:2:83","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"31365:3:83","nodeType":"YulIdentifier","src":"31365:3:83"},"nativeSrc":"31365:11:83","nodeType":"YulFunctionCall","src":"31365:11:83"},{"hexValue":"6f6c206f72206f75742f4d79436f6e74726163742e736f6c2f4d79436f6e7472","kind":"string","nativeSrc":"31378:34:83","nodeType":"YulLiteral","src":"31378:34:83","type":"","value":"ol or out/MyContract.sol/MyContr"}],"functionName":{"name":"mstore","nativeSrc":"31358:6:83","nodeType":"YulIdentifier","src":"31358:6:83"},"nativeSrc":"31358:55:83","nodeType":"YulFunctionCall","src":"31358:55:83"},"nativeSrc":"31358:55:83","nodeType":"YulExpressionStatement","src":"31358:55:83"},{"expression":{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"31433:2:83","nodeType":"YulIdentifier","src":"31433:2:83"},{"kind":"number","nativeSrc":"31437:2:83","nodeType":"YulLiteral","src":"31437:2:83","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"31429:3:83","nodeType":"YulIdentifier","src":"31429:3:83"},"nativeSrc":"31429:11:83","nodeType":"YulFunctionCall","src":"31429:11:83"},{"hexValue":"6163742e6a736f6e","kind":"string","nativeSrc":"31442:10:83","nodeType":"YulLiteral","src":"31442:10:83","type":"","value":"act.json"}],"functionName":{"name":"mstore","nativeSrc":"31422:6:83","nodeType":"YulIdentifier","src":"31422:6:83"},"nativeSrc":"31422:31:83","nodeType":"YulFunctionCall","src":"31422:31:83"},"nativeSrc":"31422:31:83","nodeType":"YulExpressionStatement","src":"31422:31:83"},{"nativeSrc":"31462:19:83","nodeType":"YulAssignment","src":"31462:19:83","value":{"arguments":[{"name":"_1","nativeSrc":"31473:2:83","nodeType":"YulIdentifier","src":"31473:2:83"},{"kind":"number","nativeSrc":"31477:3:83","nodeType":"YulLiteral","src":"31477:3:83","type":"","value":"104"}],"functionName":{"name":"add","nativeSrc":"31469:3:83","nodeType":"YulIdentifier","src":"31469:3:83"},"nativeSrc":"31469:12:83","nodeType":"YulFunctionCall","src":"31469:12:83"},"variableNames":[{"name":"end","nativeSrc":"31462:3:83","nodeType":"YulIdentifier","src":"31462:3:83"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_3f120aa75756516f8ad13d558a5b9e5a44bb19eefe0388ce8c7f36f6df8edea5_t_string_memory_ptr_t_stringliteral_9a274a4ef728d0f993bc2f4dc24a093c4d7da9d1cb0dff5da2bf5cfca4271809__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"30792:695:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"31109:3:83","nodeType":"YulTypedName","src":"31109:3:83","type":""},{"name":"value0","nativeSrc":"31114:6:83","nodeType":"YulTypedName","src":"31114:6:83","type":""}],"returnVariables":[{"name":"end","nativeSrc":"31125:3:83","nodeType":"YulTypedName","src":"31125:3:83","type":""}],"src":"30792:695:83"},{"body":{"nativeSrc":"31524:95:83","nodeType":"YulBlock","src":"31524:95:83","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"31541:1:83","nodeType":"YulLiteral","src":"31541:1:83","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"31548:3:83","nodeType":"YulLiteral","src":"31548:3:83","type":"","value":"224"},{"kind":"number","nativeSrc":"31553:10:83","nodeType":"YulLiteral","src":"31553:10:83","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"31544:3:83","nodeType":"YulIdentifier","src":"31544:3:83"},"nativeSrc":"31544:20:83","nodeType":"YulFunctionCall","src":"31544:20:83"}],"functionName":{"name":"mstore","nativeSrc":"31534:6:83","nodeType":"YulIdentifier","src":"31534:6:83"},"nativeSrc":"31534:31:83","nodeType":"YulFunctionCall","src":"31534:31:83"},"nativeSrc":"31534:31:83","nodeType":"YulExpressionStatement","src":"31534:31:83"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"31581:1:83","nodeType":"YulLiteral","src":"31581:1:83","type":"","value":"4"},{"kind":"number","nativeSrc":"31584:4:83","nodeType":"YulLiteral","src":"31584:4:83","type":"","value":"0x12"}],"functionName":{"name":"mstore","nativeSrc":"31574:6:83","nodeType":"YulIdentifier","src":"31574:6:83"},"nativeSrc":"31574:15:83","nodeType":"YulFunctionCall","src":"31574:15:83"},"nativeSrc":"31574:15:83","nodeType":"YulExpressionStatement","src":"31574:15:83"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"31605:1:83","nodeType":"YulLiteral","src":"31605:1:83","type":"","value":"0"},{"kind":"number","nativeSrc":"31608:4:83","nodeType":"YulLiteral","src":"31608:4:83","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"31598:6:83","nodeType":"YulIdentifier","src":"31598:6:83"},"nativeSrc":"31598:15:83","nodeType":"YulFunctionCall","src":"31598:15:83"},"nativeSrc":"31598:15:83","nodeType":"YulExpressionStatement","src":"31598:15:83"}]},"name":"panic_error_0x12","nativeSrc":"31492:127:83","nodeType":"YulFunctionDefinition","src":"31492:127:83"},{"body":{"nativeSrc":"32114:592:83","nodeType":"YulBlock","src":"32114:592:83","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"32131:3:83","nodeType":"YulIdentifier","src":"32131:3:83"},{"hexValue":"53504458206c6963656e7365206964656e74696669657220","kind":"string","nativeSrc":"32136:26:83","nodeType":"YulLiteral","src":"32136:26:83","type":"","value":"SPDX license identifier "}],"functionName":{"name":"mstore","nativeSrc":"32124:6:83","nodeType":"YulIdentifier","src":"32124:6:83"},"nativeSrc":"32124:39:83","nodeType":"YulFunctionCall","src":"32124:39:83"},"nativeSrc":"32124:39:83","nodeType":"YulExpressionStatement","src":"32124:39:83"},{"nativeSrc":"32172:49:83","nodeType":"YulVariableDeclaration","src":"32172:49:83","value":{"arguments":[{"name":"value0","nativeSrc":"32200:6:83","nodeType":"YulIdentifier","src":"32200:6:83"},{"arguments":[{"name":"pos","nativeSrc":"32212:3:83","nodeType":"YulIdentifier","src":"32212:3:83"},{"kind":"number","nativeSrc":"32217:2:83","nodeType":"YulLiteral","src":"32217:2:83","type":"","value":"24"}],"functionName":{"name":"add","nativeSrc":"32208:3:83","nodeType":"YulIdentifier","src":"32208:3:83"},"nativeSrc":"32208:12:83","nodeType":"YulFunctionCall","src":"32208:12:83"}],"functionName":{"name":"abi_encode_string","nativeSrc":"32182:17:83","nodeType":"YulIdentifier","src":"32182:17:83"},"nativeSrc":"32182:39:83","nodeType":"YulFunctionCall","src":"32182:39:83"},"variables":[{"name":"_1","nativeSrc":"32176:2:83","nodeType":"YulTypedName","src":"32176:2:83","type":""}]},{"expression":{"arguments":[{"name":"_1","nativeSrc":"32237:2:83","nodeType":"YulIdentifier","src":"32237:2:83"},{"hexValue":"20696e20","kind":"string","nativeSrc":"32241:6:83","nodeType":"YulLiteral","src":"32241:6:83","type":"","value":" in "}],"functionName":{"name":"mstore","nativeSrc":"32230:6:83","nodeType":"YulIdentifier","src":"32230:6:83"},"nativeSrc":"32230:18:83","nodeType":"YulFunctionCall","src":"32230:18:83"},"nativeSrc":"32230:18:83","nodeType":"YulExpressionStatement","src":"32230:18:83"},{"nativeSrc":"32257:47:83","nodeType":"YulVariableDeclaration","src":"32257:47:83","value":{"arguments":[{"name":"value1","nativeSrc":"32285:6:83","nodeType":"YulIdentifier","src":"32285:6:83"},{"arguments":[{"name":"_1","nativeSrc":"32297:2:83","nodeType":"YulIdentifier","src":"32297:2:83"},{"kind":"number","nativeSrc":"32301:1:83","nodeType":"YulLiteral","src":"32301:1:83","type":"","value":"4"}],"functionName":{"name":"add","nativeSrc":"32293:3:83","nodeType":"YulIdentifier","src":"32293:3:83"},"nativeSrc":"32293:10:83","nodeType":"YulFunctionCall","src":"32293:10:83"}],"functionName":{"name":"abi_encode_string","nativeSrc":"32267:17:83","nodeType":"YulIdentifier","src":"32267:17:83"},"nativeSrc":"32267:37:83","nodeType":"YulFunctionCall","src":"32267:37:83"},"variables":[{"name":"_2","nativeSrc":"32261:2:83","nodeType":"YulTypedName","src":"32261:2:83","type":""}]},{"expression":{"arguments":[{"name":"_2","nativeSrc":"32320:2:83","nodeType":"YulIdentifier","src":"32320:2:83"},{"hexValue":"20646f6573206e6f74206c6f6f6b206c696b65206120737570706f7274656420","kind":"string","nativeSrc":"32324:34:83","nodeType":"YulLiteral","src":"32324:34:83","type":"","value":" does not look like a supported "}],"functionName":{"name":"mstore","nativeSrc":"32313:6:83","nodeType":"YulIdentifier","src":"32313:6:83"},"nativeSrc":"32313:46:83","nodeType":"YulFunctionCall","src":"32313:46:83"},"nativeSrc":"32313:46:83","nodeType":"YulExpressionStatement","src":"32313:46:83"},{"expression":{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"32379:2:83","nodeType":"YulIdentifier","src":"32379:2:83"},{"kind":"number","nativeSrc":"32383:2:83","nodeType":"YulLiteral","src":"32383:2:83","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"32375:3:83","nodeType":"YulIdentifier","src":"32375:3:83"},"nativeSrc":"32375:11:83","nodeType":"YulFunctionCall","src":"32375:11:83"},{"hexValue":"6c6963656e736520666f7220626c6f636b206578706c6f726572207665726966","kind":"string","nativeSrc":"32388:34:83","nodeType":"YulLiteral","src":"32388:34:83","type":"","value":"license for block explorer verif"}],"functionName":{"name":"mstore","nativeSrc":"32368:6:83","nodeType":"YulIdentifier","src":"32368:6:83"},"nativeSrc":"32368:55:83","nodeType":"YulFunctionCall","src":"32368:55:83"},"nativeSrc":"32368:55:83","nodeType":"YulExpressionStatement","src":"32368:55:83"},{"expression":{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"32443:2:83","nodeType":"YulIdentifier","src":"32443:2:83"},{"kind":"number","nativeSrc":"32447:2:83","nodeType":"YulLiteral","src":"32447:2:83","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"32439:3:83","nodeType":"YulIdentifier","src":"32439:3:83"},"nativeSrc":"32439:11:83","nodeType":"YulFunctionCall","src":"32439:11:83"},{"hexValue":"69636174696f6e2e205573652074686520606c6963656e73655479706560206f","kind":"string","nativeSrc":"32452:34:83","nodeType":"YulLiteral","src":"32452:34:83","type":"","value":"ication. Use the `licenseType` o"}],"functionName":{"name":"mstore","nativeSrc":"32432:6:83","nodeType":"YulIdentifier","src":"32432:6:83"},"nativeSrc":"32432:55:83","nodeType":"YulFunctionCall","src":"32432:55:83"},"nativeSrc":"32432:55:83","nodeType":"YulExpressionStatement","src":"32432:55:83"},{"expression":{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"32507:2:83","nodeType":"YulIdentifier","src":"32507:2:83"},{"kind":"number","nativeSrc":"32511:2:83","nodeType":"YulLiteral","src":"32511:2:83","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"32503:3:83","nodeType":"YulIdentifier","src":"32503:3:83"},"nativeSrc":"32503:11:83","nodeType":"YulFunctionCall","src":"32503:11:83"},{"hexValue":"7074696f6e20746f20737065636966792061206c6963656e736520747970652c","kind":"string","nativeSrc":"32516:34:83","nodeType":"YulLiteral","src":"32516:34:83","type":"","value":"ption to specify a license type,"}],"functionName":{"name":"mstore","nativeSrc":"32496:6:83","nodeType":"YulIdentifier","src":"32496:6:83"},"nativeSrc":"32496:55:83","nodeType":"YulFunctionCall","src":"32496:55:83"},"nativeSrc":"32496:55:83","nodeType":"YulExpressionStatement","src":"32496:55:83"},{"expression":{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"32571:2:83","nodeType":"YulIdentifier","src":"32571:2:83"},{"kind":"number","nativeSrc":"32575:3:83","nodeType":"YulLiteral","src":"32575:3:83","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"32567:3:83","nodeType":"YulIdentifier","src":"32567:3:83"},"nativeSrc":"32567:12:83","nodeType":"YulFunctionCall","src":"32567:12:83"},{"hexValue":"206f7220736574207468652060736b69704c6963656e73655479706560206f70","kind":"string","nativeSrc":"32581:34:83","nodeType":"YulLiteral","src":"32581:34:83","type":"","value":" or set the `skipLicenseType` op"}],"functionName":{"name":"mstore","nativeSrc":"32560:6:83","nodeType":"YulIdentifier","src":"32560:6:83"},"nativeSrc":"32560:56:83","nodeType":"YulFunctionCall","src":"32560:56:83"},"nativeSrc":"32560:56:83","nodeType":"YulExpressionStatement","src":"32560:56:83"},{"expression":{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"32636:2:83","nodeType":"YulIdentifier","src":"32636:2:83"},{"kind":"number","nativeSrc":"32640:3:83","nodeType":"YulLiteral","src":"32640:3:83","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"32632:3:83","nodeType":"YulIdentifier","src":"32632:3:83"},"nativeSrc":"32632:12:83","nodeType":"YulFunctionCall","src":"32632:12:83"},{"hexValue":"74696f6e20746f2060747275656020746f20736b69702e","kind":"string","nativeSrc":"32646:25:83","nodeType":"YulLiteral","src":"32646:25:83","type":"","value":"tion to `true` to skip."}],"functionName":{"name":"mstore","nativeSrc":"32625:6:83","nodeType":"YulIdentifier","src":"32625:6:83"},"nativeSrc":"32625:47:83","nodeType":"YulFunctionCall","src":"32625:47:83"},"nativeSrc":"32625:47:83","nodeType":"YulExpressionStatement","src":"32625:47:83"},{"nativeSrc":"32681:19:83","nodeType":"YulAssignment","src":"32681:19:83","value":{"arguments":[{"name":"_2","nativeSrc":"32692:2:83","nodeType":"YulIdentifier","src":"32692:2:83"},{"kind":"number","nativeSrc":"32696:3:83","nodeType":"YulLiteral","src":"32696:3:83","type":"","value":"183"}],"functionName":{"name":"add","nativeSrc":"32688:3:83","nodeType":"YulIdentifier","src":"32688:3:83"},"nativeSrc":"32688:12:83","nodeType":"YulFunctionCall","src":"32688:12:83"},"variableNames":[{"name":"end","nativeSrc":"32681:3:83","nodeType":"YulIdentifier","src":"32681:3:83"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_a70b4d22eeee20f8bb7a39d4040bcf9ebd66e88382efee55cf50875396c44658_t_string_memory_ptr_t_stringliteral_7a5a2e05f2bc8368a75d6eecdcd03c3949dfdb0c1c10cca4a5feac5e5b4cc170_t_string_memory_ptr_t_stringliteral_eac7c85eba44d81e2f5546a595c99c2433fd28fa81a701d817ae87beaa906f14__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"31624:1082:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"32082:3:83","nodeType":"YulTypedName","src":"32082:3:83","type":""},{"name":"value1","nativeSrc":"32087:6:83","nodeType":"YulTypedName","src":"32087:6:83","type":""},{"name":"value0","nativeSrc":"32095:6:83","nodeType":"YulTypedName","src":"32095:6:83","type":""}],"returnVariables":[{"name":"end","nativeSrc":"32106:3:83","nodeType":"YulTypedName","src":"32106:3:83","type":""}],"src":"31624:1082:83"},{"body":{"nativeSrc":"32898:80:83","nodeType":"YulBlock","src":"32898:80:83","statements":[{"nativeSrc":"32908:64:83","nodeType":"YulAssignment","src":"32908:64:83","value":{"arguments":[{"name":"value1","nativeSrc":"32933:6:83","nodeType":"YulIdentifier","src":"32933:6:83"},{"arguments":[{"name":"value0","nativeSrc":"32959:6:83","nodeType":"YulIdentifier","src":"32959:6:83"},{"name":"pos","nativeSrc":"32967:3:83","nodeType":"YulIdentifier","src":"32967:3:83"}],"functionName":{"name":"abi_encode_string","nativeSrc":"32941:17:83","nodeType":"YulIdentifier","src":"32941:17:83"},"nativeSrc":"32941:30:83","nodeType":"YulFunctionCall","src":"32941:30:83"}],"functionName":{"name":"abi_encode_string","nativeSrc":"32915:17:83","nodeType":"YulIdentifier","src":"32915:17:83"},"nativeSrc":"32915:57:83","nodeType":"YulFunctionCall","src":"32915:57:83"},"variableNames":[{"name":"end","nativeSrc":"32908:3:83","nodeType":"YulIdentifier","src":"32908:3:83"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"32711:267:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"32866:3:83","nodeType":"YulTypedName","src":"32866:3:83","type":""},{"name":"value1","nativeSrc":"32871:6:83","nodeType":"YulTypedName","src":"32871:6:83","type":""},{"name":"value0","nativeSrc":"32879:6:83","nodeType":"YulTypedName","src":"32879:6:83","type":""}],"returnVariables":[{"name":"end","nativeSrc":"32890:3:83","nodeType":"YulTypedName","src":"32890:3:83","type":""}],"src":"32711:267:83"},{"body":{"nativeSrc":"33223:106:83","nodeType":"YulBlock","src":"33223:106:83","statements":[{"nativeSrc":"33233:40:83","nodeType":"YulVariableDeclaration","src":"33233:40:83","value":{"arguments":[{"name":"value0","nativeSrc":"33261:6:83","nodeType":"YulIdentifier","src":"33261:6:83"},{"name":"pos","nativeSrc":"33269:3:83","nodeType":"YulIdentifier","src":"33269:3:83"}],"functionName":{"name":"abi_encode_string","nativeSrc":"33243:17:83","nodeType":"YulIdentifier","src":"33243:17:83"},"nativeSrc":"33243:30:83","nodeType":"YulFunctionCall","src":"33243:30:83"},"variables":[{"name":"_1","nativeSrc":"33237:2:83","nodeType":"YulTypedName","src":"33237:2:83","type":""}]},{"expression":{"arguments":[{"name":"_1","nativeSrc":"33289:2:83","nodeType":"YulIdentifier","src":"33289:2:83"},{"hexValue":"20","kind":"string","nativeSrc":"33293:3:83","nodeType":"YulLiteral","src":"33293:3:83","type":"","value":" "}],"functionName":{"name":"mstore","nativeSrc":"33282:6:83","nodeType":"YulIdentifier","src":"33282:6:83"},"nativeSrc":"33282:15:83","nodeType":"YulFunctionCall","src":"33282:15:83"},"nativeSrc":"33282:15:83","nodeType":"YulExpressionStatement","src":"33282:15:83"},{"nativeSrc":"33306:17:83","nodeType":"YulAssignment","src":"33306:17:83","value":{"arguments":[{"name":"_1","nativeSrc":"33317:2:83","nodeType":"YulIdentifier","src":"33317:2:83"},{"kind":"number","nativeSrc":"33321:1:83","nodeType":"YulLiteral","src":"33321:1:83","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"33313:3:83","nodeType":"YulIdentifier","src":"33313:3:83"},"nativeSrc":"33313:10:83","nodeType":"YulFunctionCall","src":"33313:10:83"},"variableNames":[{"name":"end","nativeSrc":"33306:3:83","nodeType":"YulIdentifier","src":"33306:3:83"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_681afa780d17da29203322b473d3f210a7d621259a4e6ce9e403f5a266ff719a__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"32983:346:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"33199:3:83","nodeType":"YulTypedName","src":"33199:3:83","type":""},{"name":"value0","nativeSrc":"33204:6:83","nodeType":"YulTypedName","src":"33204:6:83","type":""}],"returnVariables":[{"name":"end","nativeSrc":"33215:3:83","nodeType":"YulTypedName","src":"33215:3:83","type":""}],"src":"32983:346:83"},{"body":{"nativeSrc":"33380:134:83","nodeType":"YulBlock","src":"33380:134:83","statements":[{"nativeSrc":"33390:33:83","nodeType":"YulVariableDeclaration","src":"33390:33:83","value":{"arguments":[{"name":"value","nativeSrc":"33409:5:83","nodeType":"YulIdentifier","src":"33409:5:83"},{"kind":"number","nativeSrc":"33416:6:83","nodeType":"YulLiteral","src":"33416:6:83","type":"","value":"0xffff"}],"functionName":{"name":"and","nativeSrc":"33405:3:83","nodeType":"YulIdentifier","src":"33405:3:83"},"nativeSrc":"33405:18:83","nodeType":"YulFunctionCall","src":"33405:18:83"},"variables":[{"name":"value_1","nativeSrc":"33394:7:83","nodeType":"YulTypedName","src":"33394:7:83","type":""}]},{"body":{"nativeSrc":"33455:22:83","nodeType":"YulBlock","src":"33455:22:83","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"33457:16:83","nodeType":"YulIdentifier","src":"33457:16:83"},"nativeSrc":"33457:18:83","nodeType":"YulFunctionCall","src":"33457:18:83"},"nativeSrc":"33457:18:83","nodeType":"YulExpressionStatement","src":"33457:18:83"}]},"condition":{"arguments":[{"name":"value_1","nativeSrc":"33438:7:83","nodeType":"YulIdentifier","src":"33438:7:83"},{"kind":"number","nativeSrc":"33447:6:83","nodeType":"YulLiteral","src":"33447:6:83","type":"","value":"0xffff"}],"functionName":{"name":"eq","nativeSrc":"33435:2:83","nodeType":"YulIdentifier","src":"33435:2:83"},"nativeSrc":"33435:19:83","nodeType":"YulFunctionCall","src":"33435:19:83"},"nativeSrc":"33432:45:83","nodeType":"YulIf","src":"33432:45:83"},{"nativeSrc":"33486:22:83","nodeType":"YulAssignment","src":"33486:22:83","value":{"arguments":[{"name":"value_1","nativeSrc":"33497:7:83","nodeType":"YulIdentifier","src":"33497:7:83"},{"kind":"number","nativeSrc":"33506:1:83","nodeType":"YulLiteral","src":"33506:1:83","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"33493:3:83","nodeType":"YulIdentifier","src":"33493:3:83"},"nativeSrc":"33493:15:83","nodeType":"YulFunctionCall","src":"33493:15:83"},"variableNames":[{"name":"ret","nativeSrc":"33486:3:83","nodeType":"YulIdentifier","src":"33486:3:83"}]}]},"name":"increment_t_uint16","nativeSrc":"33334:180:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"33362:5:83","nodeType":"YulTypedName","src":"33362:5:83","type":""}],"returnVariables":[{"name":"ret","nativeSrc":"33372:3:83","nodeType":"YulTypedName","src":"33372:3:83","type":""}],"src":"33334:180:83"},{"body":{"nativeSrc":"33759:114:83","nodeType":"YulBlock","src":"33759:114:83","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"33776:3:83","nodeType":"YulIdentifier","src":"33776:3:83"},{"hexValue":"406f70656e7a657070656c696e2f75706772616465732d636f726540","kind":"string","nativeSrc":"33781:30:83","nodeType":"YulLiteral","src":"33781:30:83","type":"","value":"@openzeppelin/upgrades-core@"}],"functionName":{"name":"mstore","nativeSrc":"33769:6:83","nodeType":"YulIdentifier","src":"33769:6:83"},"nativeSrc":"33769:43:83","nodeType":"YulFunctionCall","src":"33769:43:83"},"nativeSrc":"33769:43:83","nodeType":"YulExpressionStatement","src":"33769:43:83"},{"nativeSrc":"33821:46:83","nodeType":"YulAssignment","src":"33821:46:83","value":{"arguments":[{"name":"value0","nativeSrc":"33846:6:83","nodeType":"YulIdentifier","src":"33846:6:83"},{"arguments":[{"name":"pos","nativeSrc":"33858:3:83","nodeType":"YulIdentifier","src":"33858:3:83"},{"kind":"number","nativeSrc":"33863:2:83","nodeType":"YulLiteral","src":"33863:2:83","type":"","value":"28"}],"functionName":{"name":"add","nativeSrc":"33854:3:83","nodeType":"YulIdentifier","src":"33854:3:83"},"nativeSrc":"33854:12:83","nodeType":"YulFunctionCall","src":"33854:12:83"}],"functionName":{"name":"abi_encode_string","nativeSrc":"33828:17:83","nodeType":"YulIdentifier","src":"33828:17:83"},"nativeSrc":"33828:39:83","nodeType":"YulFunctionCall","src":"33828:39:83"},"variableNames":[{"name":"end","nativeSrc":"33821:3:83","nodeType":"YulIdentifier","src":"33821:3:83"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_459e684ed08b96f40b9b516154105232b46d6e25e3ebbcc2460d0ad2691a0f84_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"33519:354:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"33735:3:83","nodeType":"YulTypedName","src":"33735:3:83","type":""},{"name":"value0","nativeSrc":"33740:6:83","nodeType":"YulTypedName","src":"33740:6:83","type":""}],"returnVariables":[{"name":"end","nativeSrc":"33751:3:83","nodeType":"YulTypedName","src":"33751:3:83","type":""}],"src":"33519:354:83"},{"body":{"nativeSrc":"34166:133:83","nodeType":"YulBlock","src":"34166:133:83","statements":[{"nativeSrc":"34176:40:83","nodeType":"YulVariableDeclaration","src":"34176:40:83","value":{"arguments":[{"name":"value0","nativeSrc":"34204:6:83","nodeType":"YulIdentifier","src":"34204:6:83"},{"name":"pos","nativeSrc":"34212:3:83","nodeType":"YulIdentifier","src":"34212:3:83"}],"functionName":{"name":"abi_encode_string","nativeSrc":"34186:17:83","nodeType":"YulIdentifier","src":"34186:17:83"},"nativeSrc":"34186:30:83","nodeType":"YulFunctionCall","src":"34186:30:83"},"variables":[{"name":"_1","nativeSrc":"34180:2:83","nodeType":"YulTypedName","src":"34180:2:83","type":""}]},{"expression":{"arguments":[{"name":"_1","nativeSrc":"34232:2:83","nodeType":"YulIdentifier","src":"34232:2:83"},{"hexValue":"3a","kind":"string","nativeSrc":"34236:3:83","nodeType":"YulLiteral","src":"34236:3:83","type":"","value":":"}],"functionName":{"name":"mstore","nativeSrc":"34225:6:83","nodeType":"YulIdentifier","src":"34225:6:83"},"nativeSrc":"34225:15:83","nodeType":"YulFunctionCall","src":"34225:15:83"},"nativeSrc":"34225:15:83","nodeType":"YulExpressionStatement","src":"34225:15:83"},{"nativeSrc":"34249:44:83","nodeType":"YulAssignment","src":"34249:44:83","value":{"arguments":[{"name":"value1","nativeSrc":"34274:6:83","nodeType":"YulIdentifier","src":"34274:6:83"},{"arguments":[{"name":"_1","nativeSrc":"34286:2:83","nodeType":"YulIdentifier","src":"34286:2:83"},{"kind":"number","nativeSrc":"34290:1:83","nodeType":"YulLiteral","src":"34290:1:83","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"34282:3:83","nodeType":"YulIdentifier","src":"34282:3:83"},"nativeSrc":"34282:10:83","nodeType":"YulFunctionCall","src":"34282:10:83"}],"functionName":{"name":"abi_encode_string","nativeSrc":"34256:17:83","nodeType":"YulIdentifier","src":"34256:17:83"},"nativeSrc":"34256:37:83","nodeType":"YulFunctionCall","src":"34256:37:83"},"variableNames":[{"name":"end","nativeSrc":"34249:3:83","nodeType":"YulIdentifier","src":"34249:3:83"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_96d280011b274d9410ea6c6fc28e2bb076b01d2fac329c49c4b29a719ec4650c_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"33878:421:83","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"34134:3:83","nodeType":"YulTypedName","src":"34134:3:83","type":""},{"name":"value1","nativeSrc":"34139:6:83","nodeType":"YulTypedName","src":"34139:6:83","type":""},{"name":"value0","nativeSrc":"34147:6:83","nodeType":"YulTypedName","src":"34147:6:83","type":""}],"returnVariables":[{"name":"end","nativeSrc":"34158:3:83","nodeType":"YulTypedName","src":"34158:3:83","type":""}],"src":"33878:421:83"},{"body":{"nativeSrc":"34336:95:83","nodeType":"YulBlock","src":"34336:95:83","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"34353:1:83","nodeType":"YulLiteral","src":"34353:1:83","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"34360:3:83","nodeType":"YulLiteral","src":"34360:3:83","type":"","value":"224"},{"kind":"number","nativeSrc":"34365:10:83","nodeType":"YulLiteral","src":"34365:10:83","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"34356:3:83","nodeType":"YulIdentifier","src":"34356:3:83"},"nativeSrc":"34356:20:83","nodeType":"YulFunctionCall","src":"34356:20:83"}],"functionName":{"name":"mstore","nativeSrc":"34346:6:83","nodeType":"YulIdentifier","src":"34346:6:83"},"nativeSrc":"34346:31:83","nodeType":"YulFunctionCall","src":"34346:31:83"},"nativeSrc":"34346:31:83","nodeType":"YulExpressionStatement","src":"34346:31:83"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"34393:1:83","nodeType":"YulLiteral","src":"34393:1:83","type":"","value":"4"},{"kind":"number","nativeSrc":"34396:4:83","nodeType":"YulLiteral","src":"34396:4:83","type":"","value":"0x51"}],"functionName":{"name":"mstore","nativeSrc":"34386:6:83","nodeType":"YulIdentifier","src":"34386:6:83"},"nativeSrc":"34386:15:83","nodeType":"YulFunctionCall","src":"34386:15:83"},"nativeSrc":"34386:15:83","nodeType":"YulExpressionStatement","src":"34386:15:83"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"34417:1:83","nodeType":"YulLiteral","src":"34417:1:83","type":"","value":"0"},{"kind":"number","nativeSrc":"34420:4:83","nodeType":"YulLiteral","src":"34420:4:83","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"34410:6:83","nodeType":"YulIdentifier","src":"34410:6:83"},"nativeSrc":"34410:15:83","nodeType":"YulFunctionCall","src":"34410:15:83"},"nativeSrc":"34410:15:83","nodeType":"YulExpressionStatement","src":"34410:15:83"}]},"name":"panic_error_0x51","nativeSrc":"34304:127:83","nodeType":"YulFunctionDefinition","src":"34304:127:83"}]},"contents":"{\n    { }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function array_storeLengthForEncoding_string(pos, length) -> updated_pos\n    {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n    function abi_encode_tuple_t_stringliteral_2ef6555c4d06f7a53d2dd092327f3256a8d6f18aff592d5349c12226686be6c5__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 11)\n        mstore(add(headStart, 64), \"PRIVATE_KEY\")\n        tail := add(headStart, 96)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function abi_encode_string_storage(value, pos) -> ret\n    {\n        let slotValue := sload(value)\n        let length := 0\n        length := shr(1, slotValue)\n        let outOfPlaceEncoding := and(slotValue, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n        let pos_1 := array_storeLengthForEncoding_string(pos, length)\n        switch outOfPlaceEncoding\n        case 0 {\n            mstore(pos_1, and(slotValue, not(255)))\n            ret := add(pos_1, shl(5, iszero(iszero(length))))\n        }\n        case 1 {\n            let dataPos := array_dataslot_string_storage(value)\n            let i := 0\n            for { } lt(i, length) { i := add(i, 32) }\n            {\n                mstore(add(pos_1, i), sload(dataPos))\n                dataPos := add(dataPos, 1)\n            }\n            ret := add(pos_1, i)\n        }\n    }\n    function abi_encode_tuple_t_string_storage_t_string_storage__to_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 64)\n        let tail_1 := abi_encode_string_storage(value0, add(headStart, 64))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        tail := abi_encode_string_storage(value1, tail_1)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_decode_tuple_t_bytes32_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, sub(shl(160, 1), 1)))\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_address_t_address_t_address_t_array$_t_address_$dyn_memory_ptr__to_t_address_t_address_t_address_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        let tail_1 := add(headStart, 128)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), and(value1, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 64), and(value2, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 96), 128)\n        let pos := tail_1\n        let length := mload(value3)\n        mstore(tail_1, length)\n        pos := add(headStart, 160)\n        let srcPtr := add(value3, 32)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, and(mload(srcPtr), sub(shl(160, 1), 1)))\n            pos := add(pos, 32)\n            srcPtr := add(srcPtr, 32)\n        }\n        tail := pos\n    }\n    function abi_encode_string_memory_ptr(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        mcopy(add(pos, 0x20), add(value, 0x20), length)\n        mstore(add(add(pos, length), 0x20), 0)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr_t_address__to_t_string_memory_ptr_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 64)\n        tail := abi_encode_string_memory_ptr(value0, add(headStart, 64))\n        mstore(add(headStart, 32), and(value1, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_string_memory_ptr_t_uint256__to_t_string_memory_ptr_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 64)\n        tail := abi_encode_string_memory_ptr(value0, add(headStart, 64))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 64)\n        let tail_1 := abi_encode_string_memory_ptr(value0, add(headStart, 64))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        tail := abi_encode_string_memory_ptr(value1, tail_1)\n    }\n    function abi_encode_tuple_t_string_memory_ptr_t_string_memory_ptr_t_address__to_t_string_memory_ptr_t_string_memory_ptr_t_address__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        mstore(headStart, 96)\n        let tail_1 := abi_encode_string_memory_ptr(value0, add(headStart, 96))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        tail := abi_encode_string_memory_ptr(value1, tail_1)\n        mstore(add(headStart, 64), and(value2, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string_memory_ptr(value0, add(headStart, 32))\n    }\n    function abi_encode_tuple_t_address_t_bytes_memory_ptr__to_t_address_t_bytes_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), 64)\n        tail := abi_encode_string_memory_ptr(value1, add(headStart, 64))\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mcopy(pos, add(value, 0x20), length)\n        let _1 := add(pos, length)\n        mstore(_1, 0)\n        end := _1\n    }\n    function abi_encode_tuple_packed_t_stringliteral_45942a044068f475a72b247d918918cfb3543fa9d2f925dce5c26b7172dbe289_t_string_memory_ptr_t_stringliteral_e64009107d042bdc478cc69a5433e4573ea2e8a23a46646c0ee241e30c888e73_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, \"Failed to deploy contract \")\n        let _1 := abi_encode_string(value0, add(pos, 26))\n        mstore(_1, \": \")\n        end := abi_encode_string(value1, add(_1, 2))\n    }\n    function allocate_memory_3969() -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, 0x60)\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function allocate_memory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function abi_decode_bytes_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let length := mload(offset)\n        let src := add(offset, 0x20)\n        let array_1 := 0\n        let size := 0\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        size := add(and(add(length, 31), not(31)), 0x20)\n        array_1 := allocate_memory(size)\n        mstore(array_1, length)\n        if gt(add(src, length), end) { revert(0, 0) }\n        mcopy(add(array_1, 0x20), src, length)\n        mstore(add(add(array_1, length), 0x20), 0)\n        array := array_1\n    }\n    function abi_decode_tuple_t_bytes_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := mload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value0 := abi_decode_bytes_fromMemory(add(headStart, offset), dataEnd)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr_t_bytes_memory_ptr__to_t_bytes_memory_ptr_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        end := abi_encode_string(value1, abi_encode_string(value0, pos))\n    }\n    function abi_encode_tuple_packed_t_stringliteral_45942a044068f475a72b247d918918cfb3543fa9d2f925dce5c26b7172dbe289_t_string_memory_ptr_t_stringliteral_aa9d79cc8375f222c2818bc0c013f6b7c3934b6f21aedb1df102a8f780a1b664_t_string_memory_ptr_t_stringliteral_6e9f33448a4153023cdaf3eb759f1afdc24aba433a3e18b683f8c04a6eaa69f0__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, \"Failed to deploy contract \")\n        let _1 := abi_encode_string(value0, add(pos, 26))\n        mstore(_1, 0x207573696e6720636f6e7374727563746f722064617461202200000000000000)\n        let _2 := abi_encode_string(value1, add(_1, 25))\n        mstore(_2, shl(249, 17))\n        end := add(_2, 1)\n    }\n    function abi_encode_tuple_t_stringliteral_ae11223e55da1785bb01a018df547ee9df83f6bfc03bcf9ee05fa29541f23f06_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 64)\n        mstore(add(headStart, 64), 11)\n        mstore(add(headStart, 96), \"FOUNDRY_OUT\")\n        mstore(add(headStart, 0x20), 128)\n        tail := abi_encode_string_memory_ptr(value0, add(headStart, 128))\n    }\n    function abi_decode_tuple_t_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := mload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value0 := abi_decode_bytes_fromMemory(add(headStart, offset), dataEnd)\n    }\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_fba9715e477e68952d3f1df7a185b3708aadad50ec10cc793973864023868527_t_string_memory_ptr_t_stringliteral_fba9715e477e68952d3f1df7a185b3708aadad50ec10cc793973864023868527_t_string_memory_ptr_t_stringliteral_fba9715e477e68952d3f1df7a185b3708aadad50ec10cc793973864023868527_t_string_memory_ptr_t_stringliteral_94311adc0a0cd4e10be11b23bd4316b8cffa4adf693e8f96f5c075aa439a7972__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value3, value2, value1, value0) -> end\n    {\n        let _1 := abi_encode_string(value0, pos)\n        mstore(_1, \"/\")\n        let _2 := abi_encode_string(value1, add(_1, 1))\n        mstore(_2, \"/\")\n        let _3 := abi_encode_string(value2, add(_2, 1))\n        mstore(_3, \"/\")\n        let _4 := abi_encode_string(value3, add(_3, 1))\n        mstore(_4, \".json\")\n        end := add(_4, 5)\n    }\n    function abi_encode_tuple_t_string_memory_ptr_t_stringliteral_94ac7d5548e308c1d3c62d3cec2f12ac4e8340c7ba9c9bd462561ccfdd974d98__to_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 64)\n        let tail_1 := abi_encode_string_memory_ptr(value0, add(headStart, 64))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        mstore(tail_1, 4)\n        mstore(add(tail_1, 32), \".ast\")\n        tail := add(tail_1, 64)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_packed_t_stringliteral_3b0c29718fa0ccfd3c548e0fdf398a1d76969c362a61df53627e5e4f64fab1e8_t_string_memory_ptr_t_stringliteral_dd0e6e5fb2dfed5daf937831e40458612ea423d5675571cc5b1b64fd260d1245__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        mstore(pos, \"Could not find AST in artifact \")\n        let _1 := abi_encode_string(value0, add(pos, 31))\n        mstore(_1, \". Set `ast = true` in foundry.to\")\n        mstore(add(_1, 32), \"ml\")\n        end := add(_1, 34)\n    }\n    function abi_encode_tuple_t_string_memory_ptr_t_stringliteral_0f3ac612dde053e2dba53344fdd4fdfcedab8a75b1f141a9e2889b50a75851e1__to_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 64)\n        let tail_1 := abi_encode_string_memory_ptr(value0, add(headStart, 64))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        mstore(tail_1, 17)\n        mstore(add(tail_1, 32), \".ast.absolutePath\")\n        tail := add(tail_1, 64)\n    }\n    function abi_encode_tuple_t_string_memory_ptr_t_stringliteral_0ec1952d7acb1df54d89163ca83f1d7b360061eb9c0c5c501b4eac52c5c807e4__to_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 64)\n        let tail_1 := abi_encode_string_memory_ptr(value0, add(headStart, 64))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        mstore(tail_1, 12)\n        mstore(add(tail_1, 32), \".ast.license\")\n        tail := add(tail_1, 64)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_9acc65371218b2be388de4c512999c5773d7c7e8cfe55ef8b9c7f869e0e7945b_t_string_memory_ptr_t_stringliteral_aad8893e597421c55956295138eb041c0150d1e2975daa37e4c3a126e8685848__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        mstore(pos, \".metadata.sources.['\")\n        let _1 := abi_encode_string(value0, add(pos, 20))\n        mstore(_1, \"'].keccak256\")\n        end := add(_1, 12)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_6e9f33448a4153023cdaf3eb759f1afdc24aba433a3e18b683f8c04a6eaa69f0_t_string_memory_ptr_t_stringliteral_6e9f33448a4153023cdaf3eb759f1afdc24aba433a3e18b683f8c04a6eaa69f0__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        mstore(pos, shl(249, 17))\n        let _1 := abi_encode_string(value0, add(pos, 1))\n        mstore(_1, shl(249, 17))\n        end := add(_1, 1)\n    }\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_69ae65ff9142d8f87b3884b153358f78dcd4f6339bb046b9a6d16c966fa813af__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let _1 := abi_encode_string(value0, pos)\n        mstore(_1, \"/build-info\")\n        end := add(_1, 11)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_97996f6d547fd3154e3c44156fcd12ba2952d6646db5187f6bd117ff435085a8_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        mstore(pos, \"Could not find build-info file w\")\n        mstore(add(pos, 32), \"ith matching source code hash fo\")\n        mstore(add(pos, 64), \"r contract \")\n        end := abi_encode_string(value0, add(pos, 75))\n    }\n    function abi_encode_tuple_t_stringliteral_24539e734dcb001ba7c33c80423f2ee30ce04105a5ff31966733164624aa2d38__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 88)\n        mstore(add(headStart, 64), \"The `licenseType` option cannot \")\n        mstore(add(headStart, 96), \"be used when the `skipVerifySour\")\n        mstore(add(headStart, 128), \"ceCode` option is `true`\")\n        tail := add(headStart, 160)\n    }\n    function abi_encode_tuple_t_stringliteral_f48c71a4d559c08a669fad0de76519ac5cb5f320e5ef8890570d6dc61c117609__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 83)\n        mstore(add(headStart, 64), \"The `licenseType` option cannot \")\n        mstore(add(headStart, 96), \"be used when the `skipLicenseTyp\")\n        mstore(add(headStart, 128), \"e` option is `true`\")\n        tail := add(headStart, 160)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function increment_t_uint8(value) -> ret\n    {\n        let value_1 := and(value, 0xff)\n        if eq(value_1, 0xff) { panic_error_0x11() }\n        ret := add(value_1, 1)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_911dd02035025c2cb695e87f546c8657a33a4f437472b320b67efab6662a5c76_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        mstore(pos, \"@openzeppelin/defender-deploy-cl\")\n        mstore(add(pos, 32), \"ient-cli@\")\n        end := abi_encode_string(value0, add(pos, 41))\n    }\n    function abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string_memory_ptr(value0, add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_string_memory_ptr_t_stringliteral_6e9f33448a4153023cdaf3eb759f1afdc24aba433a3e18b683f8c04a6eaa69f0_t_stringliteral_9104361da4a0d729c7b0f207387eef9f9e34470af38c160ad972369226db1fea__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 96)\n        let tail_1 := abi_encode_string_memory_ptr(value0, add(headStart, 96))\n        let _1 := sub(tail_1, headStart)\n        mstore(add(headStart, 32), _1)\n        mstore(tail_1, 1)\n        mstore(add(tail_1, 32), shl(249, 17))\n        mstore(add(headStart, 64), add(_1, 64))\n        mstore(add(tail_1, 64), 2)\n        mstore(add(tail_1, 96), shl(241, 11793))\n        tail := add(tail_1, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_524873d67beb7637903c52887510c8a7ea71785147c24441a8c36e6df12a4c44_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 64)\n        mstore(add(headStart, 64), 22)\n        mstore(add(headStart, 96), \"OPENZEPPELIN_BASH_PATH\")\n        mstore(add(headStart, 0x20), 128)\n        tail := abi_encode_string_memory_ptr(value0, add(headStart, 128))\n    }\n    function abi_encode_tuple_t_array$_t_string_memory_ptr_$dyn_memory_ptr__to_t_array$_t_string_memory_ptr_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let tail_1 := add(headStart, 32)\n        mstore(headStart, 32)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        pos := add(headStart, 64)\n        let tail_2 := add(add(headStart, shl(5, length)), 64)\n        let srcPtr := add(value0, 32)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, add(sub(tail_2, headStart), not(63)))\n            tail_2 := abi_encode_string_memory_ptr(mload(srcPtr), tail_2)\n            srcPtr := add(srcPtr, 32)\n            pos := add(pos, 32)\n        }\n        tail := tail_2\n    }\n    function abi_decode_tuple_t_struct$_FfiResult_$9129_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := mload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let _1 := add(headStart, offset)\n        if slt(sub(dataEnd, _1), 0x60) { revert(0, 0) }\n        let value := allocate_memory_3969()\n        let value_1 := mload(_1)\n        if iszero(eq(value_1, signextend(3, value_1))) { revert(0, 0) }\n        mstore(value, value_1)\n        let offset_1 := mload(add(_1, 32))\n        if gt(offset_1, 0xffffffffffffffff) { revert(0, 0) }\n        mstore(add(value, 32), abi_decode_bytes_fromMemory(add(_1, offset_1), dataEnd))\n        let offset_2 := mload(add(_1, 64))\n        if gt(offset_2, 0xffffffffffffffff) { revert(0, 0) }\n        mstore(add(value, 64), abi_decode_bytes_fromMemory(add(_1, offset_2), dataEnd))\n        value0 := value\n    }\n    function abi_encode_tuple_packed_t_stringliteral_9645b1309bf78e4558cd11f0c8b7c479bbb946c623d04c306a8843ee1cc47506_t_string_memory_ptr_t_stringliteral_3b53890135633717feb8747563f231c42249fa1cfe7d1f04d5790e40902f3b91__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        mstore(pos, \"Failed to run bash command with \")\n        mstore(add(pos, 32), shl(249, 17))\n        let _1 := abi_encode_string(value0, add(pos, 33))\n        mstore(_1, 0x222e20496620796f7520617265207573696e672057696e646f77732c20736574)\n        mstore(add(_1, 32), \" the OPENZEPPELIN_BASH_PATH envi\")\n        mstore(add(_1, 64), \"ronment variable to the fully qu\")\n        mstore(add(_1, 96), \"alified path of the bash executa\")\n        mstore(add(_1, 128), \"ble. For example, if you are usi\")\n        mstore(add(_1, 160), \"ng Git for Windows, add the foll\")\n        mstore(add(_1, 192), \"owing line in the .env file of y\")\n        mstore(add(_1, 224), \"our project (using forward slash\")\n        mstore(add(_1, 256), 0x6573293a0a4f50454e5a455050454c494e5f424153485f504154483d22433a2f)\n        mstore(add(_1, 288), 0x50726f6772616d2046696c65732f4769742f62696e2f62617368220000000000)\n        end := add(_1, 315)\n    }\n    function abi_decode_tuple_t_array$_t_string_memory_ptr_$dyn_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := mload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let _1 := add(headStart, offset)\n        if iszero(slt(add(_1, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := mload(_1)\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        let _2 := shl(5, length)\n        let dst := allocate_memory(add(_2, 32))\n        let array := dst\n        mstore(dst, length)\n        dst := add(dst, 32)\n        let srcEnd := add(add(_1, _2), 32)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(_1, 32)\n        for { } lt(src, srcEnd) { src := add(src, 32) }\n        {\n            let innerOffset := mload(src)\n            if gt(innerOffset, 0xffffffffffffffff) { revert(0, 0) }\n            mstore(dst, abi_decode_bytes_fromMemory(add(add(_1, innerOffset), 32), dataEnd))\n            dst := add(dst, 32)\n        }\n        value0 := array\n    }\n    function abi_encode_tuple_packed_t_stringliteral_7c24507b5303926943f349dcca7bb8333d10cd816dcad3e2e8bb5cb2df222ca7_t_string_memory_ptr_t_stringliteral_93bcd8f909ee99a96370a8190ddeafae0a627cb872c93cfdab495c157ddc6c8f_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, \"Found multiple occurrences of pr\")\n        mstore(add(pos, 32), \"efix '\")\n        let _1 := abi_encode_string(value0, add(pos, 38))\n        mstore(_1, \"' in output: \")\n        end := abi_encode_string(value1, add(_1, 13))\n    }\n    function abi_encode_tuple_t_string_memory_ptr_t_stringliteral_0ef9d8f8804d174666011a394cab7901679a8944d24249fd148a6a36071151f8__to_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 64)\n        let tail_1 := abi_encode_string_memory_ptr(value0, add(headStart, 64))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        mstore(tail_1, 1)\n        mstore(add(tail_1, 32), shl(249, 5))\n        tail := add(tail_1, 64)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_47a92f1f2e2401ec3324f84072908fea4ea6788425ad1f8f366b1db3c55810d9_t_string_memory_ptr_t_stringliteral_93bcd8f909ee99a96370a8190ddeafae0a627cb872c93cfdab495c157ddc6c8f_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, \"Failed to find line with prefix \")\n        mstore(add(pos, 32), \"'\")\n        let _1 := abi_encode_string(value0, add(pos, 33))\n        mstore(_1, \"' in output: \")\n        end := abi_encode_string(value1, add(_1, 13))\n    }\n    function abi_encode_tuple_t_string_memory_ptr_t_stringliteral_39bf027dd97f3bae0cf8cfb909695ec63313a9bd61ad52fc7f52cf565b141da8__to_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 64)\n        let tail_1 := abi_encode_string_memory_ptr(value0, add(headStart, 64))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        mstore(tail_1, 7)\n        mstore(add(tail_1, 32), \"SUCCESS\")\n        tail := add(tail_1, 64)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_29a2b74f226f0ae680d4b1730e672f85f1c84ce9f2c45ff21557229ab3df8027_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        mstore(pos, \"Failed to run upgrade safety val\")\n        mstore(add(pos, 32), \"idation: \")\n        end := abi_encode_string(value0, add(pos, 41))\n    }\n    function abi_encode_tuple_t_string_memory_ptr_t_stringliteral_c50cad6f8b1c8a54a5c76e3eca57f2748d547818bfac18403e7911bf23fc8166__to_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 64)\n        let tail_1 := abi_encode_string_memory_ptr(value0, add(headStart, 64))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        mstore(tail_1, 6)\n        mstore(add(tail_1, 32), \"FAILED\")\n        tail := add(tail_1, 64)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_08801615ab40adc93bf881a8fa998cec8215450529dace7649c906794b645fd9_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        mstore(pos, \"Upgrade safety validation failed\")\n        mstore(add(pos, 32), shl(241, 7429))\n        end := abi_encode_string(value0, add(pos, 34))\n    }\n    function abi_encode_tuple_t_string_memory_ptr_t_stringliteral_e4899d98551d0eedd3839d89cdef847f3de976f02aecec9c64bb534483e2fdc1_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 96)\n        let tail_1 := abi_encode_string_memory_ptr(value0, add(headStart, 96))\n        let _1 := sub(tail_1, headStart)\n        mstore(add(headStart, 32), _1)\n        mstore(tail_1, 4)\n        mstore(add(tail_1, 32), \".sol\")\n        mstore(add(headStart, 64), add(_1, 64))\n        mstore(add(tail_1, 64), 0)\n        tail := add(tail_1, 96)\n    }\n    function abi_encode_tuple_t_string_memory_ptr_t_stringliteral_96d280011b274d9410ea6c6fc28e2bb076b01d2fac329c49c4b29a719ec4650c__to_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 64)\n        let tail_1 := abi_encode_string_memory_ptr(value0, add(headStart, 64))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        mstore(tail_1, 1)\n        mstore(add(tail_1, 32), \":\")\n        tail := add(tail_1, 64)\n    }\n    function abi_encode_tuple_t_string_memory_ptr_t_stringliteral_fba9715e477e68952d3f1df7a185b3708aadad50ec10cc793973864023868527__to_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 64)\n        let tail_1 := abi_encode_string_memory_ptr(value0, add(headStart, 64))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        mstore(tail_1, 1)\n        mstore(add(tail_1, 32), \"/\")\n        tail := add(tail_1, 64)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_string_memory_ptr_t_stringliteral_94311adc0a0cd4e10be11b23bd4316b8cffa4adf693e8f96f5c075aa439a7972_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 96)\n        let tail_1 := abi_encode_string_memory_ptr(value0, add(headStart, 96))\n        let _1 := sub(tail_1, headStart)\n        mstore(add(headStart, 32), _1)\n        mstore(tail_1, 5)\n        mstore(add(tail_1, 32), \".json\")\n        mstore(add(headStart, 64), add(_1, 64))\n        mstore(add(tail_1, 64), 0)\n        tail := add(tail_1, 96)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_3f120aa75756516f8ad13d558a5b9e5a44bb19eefe0388ce8c7f36f6df8edea5_t_string_memory_ptr_t_stringliteral_9a274a4ef728d0f993bc2f4dc24a093c4d7da9d1cb0dff5da2bf5cfca4271809__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        mstore(pos, \"Contract name \")\n        let _1 := abi_encode_string(value0, add(pos, 14))\n        mstore(_1, \" must be in the format MyContrac\")\n        mstore(add(_1, 32), \"t.sol:MyContract or MyContract.s\")\n        mstore(add(_1, 64), \"ol or out/MyContract.sol/MyContr\")\n        mstore(add(_1, 96), \"act.json\")\n        end := add(_1, 104)\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_a70b4d22eeee20f8bb7a39d4040bcf9ebd66e88382efee55cf50875396c44658_t_string_memory_ptr_t_stringliteral_7a5a2e05f2bc8368a75d6eecdcd03c3949dfdb0c1c10cca4a5feac5e5b4cc170_t_string_memory_ptr_t_stringliteral_eac7c85eba44d81e2f5546a595c99c2433fd28fa81a701d817ae87beaa906f14__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, \"SPDX license identifier \")\n        let _1 := abi_encode_string(value0, add(pos, 24))\n        mstore(_1, \" in \")\n        let _2 := abi_encode_string(value1, add(_1, 4))\n        mstore(_2, \" does not look like a supported \")\n        mstore(add(_2, 32), \"license for block explorer verif\")\n        mstore(add(_2, 64), \"ication. Use the `licenseType` o\")\n        mstore(add(_2, 96), \"ption to specify a license type,\")\n        mstore(add(_2, 128), \" or set the `skipLicenseType` op\")\n        mstore(add(_2, 160), \"tion to `true` to skip.\")\n        end := add(_2, 183)\n    }\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        end := abi_encode_string(value1, abi_encode_string(value0, pos))\n    }\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_681afa780d17da29203322b473d3f210a7d621259a4e6ce9e403f5a266ff719a__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let _1 := abi_encode_string(value0, pos)\n        mstore(_1, \" \")\n        end := add(_1, 1)\n    }\n    function increment_t_uint16(value) -> ret\n    {\n        let value_1 := and(value, 0xffff)\n        if eq(value_1, 0xffff) { panic_error_0x11() }\n        ret := add(value_1, 1)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_459e684ed08b96f40b9b516154105232b46d6e25e3ebbcc2460d0ad2691a0f84_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        mstore(pos, \"@openzeppelin/upgrades-core@\")\n        end := abi_encode_string(value0, add(pos, 28))\n    }\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_96d280011b274d9410ea6c6fc28e2bb076b01d2fac329c49c4b29a719ec4650c_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        let _1 := abi_encode_string(value0, pos)\n        mstore(_1, \":\")\n        end := abi_encode_string(value1, add(_1, 1))\n    }\n    function panic_error_0x51()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x51)\n        revert(0, 0x24)\n    }\n}","id":83,"language":"Yul","name":"#utility.yul"}],"linkReferences":{}},"methodIdentifiers":{"IS_SCRIPT()":"f8ccbf47","run()":"c0406226"}}}}},"sources":{"lib/forge-std/src/Base.sol":{"id":0,"ast":{}},"lib/forge-std/src/Script.sol":{"id":1,"ast":{}},"lib/forge-std/src/StdChains.sol":{"id":2,"ast":{}},"lib/forge-std/src/StdCheats.sol":{"id":3,"ast":{}},"lib/forge-std/src/StdConstants.sol":{"id":4,"ast":{}},"lib/forge-std/src/StdJson.sol":{"id":5,"ast":{}},"lib/forge-std/src/StdMath.sol":{"id":6,"ast":{}},"lib/forge-std/src/StdStorage.sol":{"id":7,"ast":{}},"lib/forge-std/src/StdStyle.sol":{"id":8,"ast":{}},"lib/forge-std/src/StdUtils.sol":{"id":9,"ast":{}},"lib/forge-std/src/Vm.sol":{"id":10,"ast":{}},"lib/forge-std/src/console.sol":{"id":11,"ast":{}},"lib/forge-std/src/console2.sol":{"id":12,"ast":{}},"lib/forge-std/src/interfaces/IMulticall3.sol":{"id":13,"ast":{}},"lib/forge-std/src/safeconsole.sol":{"id":14,"ast":{}},"lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol":{"id":15,"ast":{}},"lib/openzeppelin-contracts-upgradeable/contracts/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol":{"id":16,"ast":{}},"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol":{"id":17,"ast":{}},"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol":{"id":18,"ast":{}},"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/ERC20PermitUpgradeable.sol":{"id":19,"ast":{}},"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol":{"id":20,"ast":{}},"lib/openzeppelin-contracts-upgradeable/contracts/utils/NoncesUpgradeable.sol":{"id":21,"ast":{}},"lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/EIP712Upgradeable.sol":{"id":22,"ast":{}},"lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol":{"id":23,"ast":{}},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/AccessControl.sol":{"id":24,"ast":{}},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/IAccessControl.sol":{"id":25,"ast":{}},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol":{"id":26,"ast":{}},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable2Step.sol":{"id":27,"ast":{}},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/extensions/AccessControlDefaultAdminRules.sol":{"id":28,"ast":{}},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/extensions/IAccessControlDefaultAdminRules.sol":{"id":29,"ast":{}},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/interfaces/IERC1363.sol":{"id":30,"ast":{}},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol":{"id":31,"ast":{}},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol":{"id":32,"ast":{}},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol":{"id":33,"ast":{}},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol":{"id":34,"ast":{}},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/interfaces/IERC5313.sol":{"id":35,"ast":{}},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol":{"id":36,"ast":{}},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol":{"id":37,"ast":{}},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Utils.sol":{"id":38,"ast":{}},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/Proxy.sol":{"id":39,"ast":{}},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/beacon/BeaconProxy.sol":{"id":40,"ast":{}},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol":{"id":41,"ast":{}},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/beacon/UpgradeableBeacon.sol":{"id":42,"ast":{}},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/transparent/ProxyAdmin.sol":{"id":43,"ast":{}},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/transparent/TransparentUpgradeableProxy.sol":{"id":44,"ast":{}},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol":{"id":45,"ast":{}},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"id":46,"ast":{}},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol":{"id":47,"ast":{}},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol":{"id":48,"ast":{}},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Address.sol":{"id":49,"ast":{}},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Context.sol":{"id":50,"ast":{}},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Errors.sol":{"id":51,"ast":{}},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Panic.sol":{"id":52,"ast":{}},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Pausable.sol":{"id":53,"ast":{}},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol":{"id":54,"ast":{}},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Strings.sol":{"id":55,"ast":{}},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol":{"id":56,"ast":{}},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol":{"id":57,"ast":{}},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol":{"id":58,"ast":{}},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol":{"id":59,"ast":{}},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/math/Math.sol":{"id":60,"ast":{}},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol":{"id":61,"ast":{}},"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol":{"id":62,"ast":{}},"lib/openzeppelin-foundry-upgrades/src/Defender.sol":{"id":63,"ast":{}},"lib/openzeppelin-foundry-upgrades/src/Options.sol":{"id":64,"ast":{}},"lib/openzeppelin-foundry-upgrades/src/Upgrades.sol":{"id":65,"ast":{}},"lib/openzeppelin-foundry-upgrades/src/internal/Core.sol":{"id":66,"ast":{}},"lib/openzeppelin-foundry-upgrades/src/internal/DefenderDeploy.sol":{"id":67,"ast":{}},"lib/openzeppelin-foundry-upgrades/src/internal/StringFinder.sol":{"id":68,"ast":{}},"lib/openzeppelin-foundry-upgrades/src/internal/Utils.sol":{"id":69,"ast":{}},"lib/openzeppelin-foundry-upgrades/src/internal/Versions.sol":{"id":70,"ast":{}},"lib/openzeppelin-foundry-upgrades/src/internal/interfaces/IProxyAdmin.sol":{"id":71,"ast":{}},"lib/openzeppelin-foundry-upgrades/src/internal/interfaces/IUpgradeableBeacon.sol":{"id":72,"ast":{}},"lib/openzeppelin-foundry-upgrades/src/internal/interfaces/IUpgradeableProxy.sol":{"id":73,"ast":{}},"script/Deployment.s.sol":{"id":74,"ast":{"absolutePath":"script/Deployment.s.sol","id":52068,"exportedSymbols":{"AddressesWhitelist":[52159],"DeploymentScript":[52067],"PriceStorage":[52395],"RequestsManager":[53459],"Script":[100],"SimpleToken":[53640],"Upgrades":[47994],"console":[22138]},"nodeType":"SourceUnit","src":"39:4073:74","nodes":[{"id":51777,"nodeType":"PragmaDirective","src":"39:24:74","nodes":[],"literals":["solidity","^","0.8",".28"]},{"id":51780,"nodeType":"ImportDirective","src":"65:53:74","nodes":[],"absolutePath":"lib/forge-std/src/Script.sol","file":"forge-std/Script.sol","nameLocation":"-1:-1:-1","scope":52068,"sourceUnit":101,"symbolAliases":[{"foreign":{"id":51778,"name":"Script","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":100,"src":"73:6:74","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":51779,"name":"console","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":22138,"src":"81:7:74","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":51782,"nodeType":"ImportDirective","src":"119:68:74","nodes":[],"absolutePath":"lib/openzeppelin-foundry-upgrades/src/Upgrades.sol","file":"openzeppelin-foundry-upgrades/Upgrades.sol","nameLocation":"-1:-1:-1","scope":52068,"sourceUnit":48202,"symbolAliases":[{"foreign":{"id":51781,"name":"Upgrades","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":47994,"src":"127:8:74","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":51784,"nodeType":"ImportDirective","src":"189:65:74","nodes":[],"absolutePath":"src/AddressesWhitelist.sol","file":"../src/AddressesWhitelist.sol","nameLocation":"-1:-1:-1","scope":52068,"sourceUnit":52160,"symbolAliases":[{"foreign":{"id":51783,"name":"AddressesWhitelist","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":52159,"src":"197:18:74","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":51786,"nodeType":"ImportDirective","src":"255:53:74","nodes":[],"absolutePath":"src/PriceStorage.sol","file":"../src/PriceStorage.sol","nameLocation":"-1:-1:-1","scope":52068,"sourceUnit":52396,"symbolAliases":[{"foreign":{"id":51785,"name":"PriceStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":52395,"src":"263:12:74","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":51788,"nodeType":"ImportDirective","src":"309:59:74","nodes":[],"absolutePath":"src/RequestsManager.sol","file":"../src/RequestsManager.sol","nameLocation":"-1:-1:-1","scope":52068,"sourceUnit":53460,"symbolAliases":[{"foreign":{"id":51787,"name":"RequestsManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":53459,"src":"317:15:74","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":51790,"nodeType":"ImportDirective","src":"369:51:74","nodes":[],"absolutePath":"src/SimpleToken.sol","file":"../src/SimpleToken.sol","nameLocation":"-1:-1:-1","scope":52068,"sourceUnit":53641,"symbolAliases":[{"foreign":{"id":51789,"name":"SimpleToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":53640,"src":"377:11:74","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":52067,"nodeType":"ContractDefinition","src":"422:3689:74","nodes":[{"id":51795,"nodeType":"VariableDeclaration","src":"922:31:74","nodes":[],"constant":false,"mutability":"mutable","name":"TOKEN_NAME","nameLocation":"929:10:74","scope":52067,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":51793,"name":"string","nodeType":"ElementaryTypeName","src":"922:6:74","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":{"hexValue":"6176555344204d4158","id":51794,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"942:11:74","typeDescriptions":{"typeIdentifier":"t_stringliteral_81fb9e7f1a4ff7c963f9a720ed583f1526537f74876b616184d6fd36cdae3f39","typeString":"literal_string \"avUSD MAX\""},"value":"avUSD MAX"},"visibility":"internal"},{"id":51798,"nodeType":"VariableDeclaration","src":"957:30:74","nodes":[],"constant":false,"mutability":"mutable","name":"TOKEN_SYMBOL","nameLocation":"964:12:74","scope":52067,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":51796,"name":"string","nodeType":"ElementaryTypeName","src":"957:6:74","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":{"hexValue":"617655534478","id":51797,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"979:8:74","typeDescriptions":{"typeIdentifier":"t_stringliteral_709433668b6b69db3632205b81a965d1e2525120e2bc72b1368a004fa1645d9c","typeString":"literal_string \"avUSDx\""},"value":"avUSDx"},"visibility":"internal"},{"id":51801,"nodeType":"VariableDeclaration","src":"992:55:74","nodes":[],"constant":false,"mutability":"mutable","name":"PRICE_UPDATE_UPPER_BOUND_PERCENTAGE","nameLocation":"1000:35:74","scope":52067,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":51799,"name":"uint256","nodeType":"ElementaryTypeName","src":"992:7:74","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"2e3035","id":51800,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1038:9:74","subdenomination":"ether","typeDescriptions":{"typeIdentifier":"t_rational_50000000000000000_by_1","typeString":"int_const 50000000000000000"},"value":".05"},"visibility":"internal"},{"id":51804,"nodeType":"VariableDeclaration","src":"1057:55:74","nodes":[],"constant":false,"mutability":"mutable","name":"PRICE_UPDATE_LOWER_BOUND_PERCENTAGE","nameLocation":"1065:35:74","scope":52067,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":51802,"name":"uint256","nodeType":"ElementaryTypeName","src":"1057:7:74","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"2e3333","id":51803,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1103:9:74","subdenomination":"ether","typeDescriptions":{"typeIdentifier":"t_rational_330000000000000000_by_1","typeString":"int_const 330000000000000000"},"value":".33"},"visibility":"internal"},{"id":51807,"nodeType":"VariableDeclaration","src":"1124:71:74","nodes":[],"constant":false,"mutability":"mutable","name":"MINT_DEPOSIT_VAULT","nameLocation":"1132:18:74","scope":52067,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":51805,"name":"address","nodeType":"ElementaryTypeName","src":"1124:7:74","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":{"hexValue":"307846436331616230614566376539326545663741636444624631383761434444323237614143303831","id":51806,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1153:42:74","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"value":"0xFCc1ab0aEf7e92eEf7AcdDbF187aCDD227aAC081"},"visibility":"internal"},{"id":51810,"nodeType":"VariableDeclaration","src":"1233:64:74","nodes":[],"constant":false,"mutability":"mutable","name":"INPUT_TOKEN","nameLocation":"1241:11:74","scope":52067,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":51808,"name":"address","nodeType":"ElementaryTypeName","src":"1233:7:74","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":{"hexValue":"307832346445383737316243354464423333363244623532394663333335384632646633413045333436","id":51809,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1255:42:74","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"value":"0x24dE8771bC5DdB3362Db529Fc3358F2df3A0E346"},"visibility":"internal"},{"id":51813,"nodeType":"VariableDeclaration","src":"1310:79:74","nodes":[],"constant":false,"mutability":"mutable","name":"MINT_REDEEM_SERVICE_WALLET","nameLocation":"1318:26:74","scope":52067,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":51811,"name":"address","nodeType":"ElementaryTypeName","src":"1310:7:74","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":{"hexValue":"307844353435366239414239393137363836303162456446313135394335313030394434334336393844","id":51812,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1347:42:74","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"value":"0xD5456b9AB991768601bEdF1159C51009D43C698D"},"visibility":"internal"},{"id":51816,"nodeType":"VariableDeclaration","src":"1406:80:74","nodes":[],"constant":false,"mutability":"mutable","name":"PRICE_UPDATE_SERVICE_WALLET","nameLocation":"1414:27:74","scope":52067,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":51814,"name":"address","nodeType":"ElementaryTypeName","src":"1406:7:74","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":{"hexValue":"307844353435366239414239393137363836303162456446313135394335313030394434334336393844","id":51815,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1444:42:74","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"value":"0xD5456b9AB991768601bEdF1159C51009D43C698D"},"visibility":"internal"},{"id":52066,"nodeType":"FunctionDefinition","src":"1964:2145:74","nodes":[],"body":{"id":52065,"nodeType":"Block","src":"1986:2123:74","nodes":[],"statements":[{"assignments":[51820],"declarations":[{"constant":false,"id":51820,"mutability":"mutable","name":"deployerPrivateKey","nameLocation":"2000:18:74","nodeType":"VariableDeclaration","scope":52065,"src":"1992:26:74","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":51819,"name":"uint256","nodeType":"ElementaryTypeName","src":"1992:7:74","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":51825,"initialValue":{"arguments":[{"hexValue":"505249564154455f4b4559","id":51823,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2032:13:74","typeDescriptions":{"typeIdentifier":"t_stringliteral_2ef6555c4d06f7a53d2dd092327f3256a8d6f18aff592d5349c12226686be6c5","typeString":"literal_string \"PRIVATE_KEY\""},"value":"PRIVATE_KEY"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_2ef6555c4d06f7a53d2dd092327f3256a8d6f18aff592d5349c12226686be6c5","typeString":"literal_string \"PRIVATE_KEY\""}],"expression":{"id":51821,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43,"src":"2021:2:74","typeDescriptions":{"typeIdentifier":"t_contract$_Vm_$14022","typeString":"contract Vm"}},"id":51822,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2024:7:74","memberName":"envUint","nodeType":"MemberAccess","referencedDeclaration":9793,"src":"2021:10:74","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_string_memory_ptr_$returns$_t_uint256_$","typeString":"function (string memory) view external returns (uint256)"}},"id":51824,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2021:25:74","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1992:54:74"},{"assignments":[51827],"declarations":[{"constant":false,"id":51827,"mutability":"mutable","name":"deployerAddress","nameLocation":"2060:15:74","nodeType":"VariableDeclaration","scope":52065,"src":"2052:23:74","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":51826,"name":"address","nodeType":"ElementaryTypeName","src":"2052:7:74","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":51832,"initialValue":{"arguments":[{"id":51830,"name":"deployerPrivateKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":51820,"src":"2086:18:74","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":51828,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43,"src":"2078:2:74","typeDescriptions":{"typeIdentifier":"t_contract$_Vm_$14022","typeString":"contract Vm"}},"id":51829,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2081:4:74","memberName":"addr","nodeType":"MemberAccess","referencedDeclaration":9841,"src":"2078:7:74","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) pure external returns (address)"}},"id":51831,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2078:27:74","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2052:53:74"},{"assignments":[51834],"declarations":[{"constant":false,"id":51834,"mutability":"mutable","name":"deployerBalance","nameLocation":"2119:15:74","nodeType":"VariableDeclaration","scope":52065,"src":"2111:23:74","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":51833,"name":"uint256","nodeType":"ElementaryTypeName","src":"2111:7:74","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":51837,"initialValue":{"expression":{"id":51835,"name":"deployerAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":51827,"src":"2137:15:74","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":51836,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2153:7:74","memberName":"balance","nodeType":"MemberAccess","src":"2137:23:74","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2111:49:74"},{"expression":{"arguments":[{"hexValue":"4465706c6f796572202d3e202573","id":51841,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2178:16:74","typeDescriptions":{"typeIdentifier":"t_stringliteral_5094ae9558eedc0ab8f769d574d69255eedc9cb0dac6838d23137bda54f05925","typeString":"literal_string \"Deployer -> %s\""},"value":"Deployer -> %s"},{"id":51842,"name":"deployerAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":51827,"src":"2196:15:74","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_5094ae9558eedc0ab8f769d574d69255eedc9cb0dac6838d23137bda54f05925","typeString":"literal_string \"Deployer -> %s\""},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":51838,"name":"console","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":22138,"src":"2166:7:74","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_console_$22138_$","typeString":"type(library console)"}},"id":51840,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2174:3:74","memberName":"log","nodeType":"MemberAccess","referencedDeclaration":14833,"src":"2166:11:74","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_address_$returns$__$","typeString":"function (string memory,address) pure"}},"id":51843,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2166:46:74","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":51844,"nodeType":"ExpressionStatement","src":"2166:46:74"},{"expression":{"arguments":[{"hexValue":"42616c616e6365202d3e202573","id":51848,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2230:15:74","typeDescriptions":{"typeIdentifier":"t_stringliteral_e5d06b77679c048ce0ce360279a44de822be482992d4ec29114cdd28de1aa2b4","typeString":"literal_string \"Balance -> %s\""},"value":"Balance -> %s"},{"id":51849,"name":"deployerBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":51834,"src":"2247:15:74","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_e5d06b77679c048ce0ce360279a44de822be482992d4ec29114cdd28de1aa2b4","typeString":"literal_string \"Balance -> %s\""},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":51845,"name":"console","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":22138,"src":"2218:7:74","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_console_$22138_$","typeString":"type(library console)"}},"id":51847,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2226:3:74","memberName":"log","nodeType":"MemberAccess","referencedDeclaration":14765,"src":"2218:11:74","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (string memory,uint256) pure"}},"id":51850,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2218:45:74","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":51851,"nodeType":"ExpressionStatement","src":"2218:45:74"},{"expression":{"arguments":[{"id":51855,"name":"deployerPrivateKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":51820,"src":"2288:18:74","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":51852,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43,"src":"2270:2:74","typeDescriptions":{"typeIdentifier":"t_contract$_Vm_$14022","typeString":"contract Vm"}},"id":51854,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2273:14:74","memberName":"startBroadcast","nodeType":"MemberAccess","referencedDeclaration":11039,"src":"2270:17:74","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256) external"}},"id":51856,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2270:37:74","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":51857,"nodeType":"ExpressionStatement","src":"2270:37:74"},{"expression":{"arguments":[{"hexValue":"4465706c6f79696e6720257320746f6b656e2e2e2e","id":51861,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2326:23:74","typeDescriptions":{"typeIdentifier":"t_stringliteral_2e51e6dc6aaf98d2aba29d68819ad295e8d7672ec06505d5f650719f30a3bf57","typeString":"literal_string \"Deploying %s token...\""},"value":"Deploying %s token..."},{"id":51862,"name":"TOKEN_SYMBOL","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":51798,"src":"2351:12:74","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_2e51e6dc6aaf98d2aba29d68819ad295e8d7672ec06505d5f650719f30a3bf57","typeString":"literal_string \"Deploying %s token...\""},{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"expression":{"id":51858,"name":"console","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":22138,"src":"2314:7:74","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_console_$22138_$","typeString":"type(library console)"}},"id":51860,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2322:3:74","memberName":"log","nodeType":"MemberAccess","referencedDeclaration":14799,"src":"2314:11:74","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory,string memory) pure"}},"id":51863,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2314:50:74","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":51864,"nodeType":"ExpressionStatement","src":"2314:50:74"},{"assignments":[51866],"declarations":[{"constant":false,"id":51866,"mutability":"mutable","name":"tokenProxy","nameLocation":"2378:10:74","nodeType":"VariableDeclaration","scope":52065,"src":"2370:18:74","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":51865,"name":"address","nodeType":"ElementaryTypeName","src":"2370:7:74","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":51879,"initialValue":{"arguments":[{"hexValue":"53696d706c65546f6b656e2e736f6c","id":51869,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2423:17:74","typeDescriptions":{"typeIdentifier":"t_stringliteral_8613ab1e1dd54d252982c48d1e026c139f87344e6c90b2d741c561189252e3ae","typeString":"literal_string \"SimpleToken.sol\""},"value":"SimpleToken.sol"},{"arguments":[{"expression":{"id":51872,"name":"SimpleToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":53640,"src":"2463:11:74","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SimpleToken_$53640_$","typeString":"type(contract SimpleToken)"}},"id":51873,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2475:10:74","memberName":"initialize","nodeType":"MemberAccess","referencedDeclaration":53565,"src":"2463:22:74","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function SimpleToken.initialize(string memory,string memory)"}},{"components":[{"id":51874,"name":"TOKEN_NAME","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":51795,"src":"2488:10:74","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},{"id":51875,"name":"TOKEN_SYMBOL","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":51798,"src":"2500:12:74","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"id":51876,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2487:26:74","typeDescriptions":{"typeIdentifier":"t_tuple$_t_string_storage_$_t_string_storage_$","typeString":"tuple(string storage ref,string storage ref)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_function_declaration_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function SimpleToken.initialize(string memory,string memory)"},{"typeIdentifier":"t_tuple$_t_string_storage_$_t_string_storage_$","typeString":"tuple(string storage ref,string storage ref)"}],"expression":{"id":51870,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2448:3:74","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":51871,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2452:10:74","memberName":"encodeCall","nodeType":"MemberAccess","src":"2448:14:74","typeDescriptions":{"typeIdentifier":"t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":51877,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2448:66:74","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_8613ab1e1dd54d252982c48d1e026c139f87344e6c90b2d741c561189252e3ae","typeString":"literal_string \"SimpleToken.sol\""},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":51867,"name":"Upgrades","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":47994,"src":"2391:8:74","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Upgrades_$47994_$","typeString":"type(library Upgrades)"}},"id":51868,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2400:15:74","memberName":"deployUUPSProxy","nodeType":"MemberAccess","referencedDeclaration":47505,"src":"2391:24:74","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$_t_bytes_memory_ptr_$returns$_t_address_$","typeString":"function (string memory,bytes memory) returns (address)"}},"id":51878,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2391:129:74","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2370:150:74"},{"expression":{"arguments":[{"hexValue":"2573202870726f787929206465706c6f79656420746f202573","id":51883,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2538:27:74","typeDescriptions":{"typeIdentifier":"t_stringliteral_4ccd29fd3e84edb0127a30dc3cbfec7e12d93a51b5649ad3ceaffa453a3ed4db","typeString":"literal_string \"%s (proxy) deployed to %s\""},"value":"%s (proxy) deployed to %s"},{"id":51884,"name":"TOKEN_SYMBOL","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":51798,"src":"2567:12:74","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},{"arguments":[{"id":51887,"name":"tokenProxy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":51866,"src":"2589:10:74","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":51886,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2581:7:74","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":51885,"name":"address","nodeType":"ElementaryTypeName","src":"2581:7:74","typeDescriptions":{}}},"id":51888,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2581:19:74","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_4ccd29fd3e84edb0127a30dc3cbfec7e12d93a51b5649ad3ceaffa453a3ed4db","typeString":"literal_string \"%s (proxy) deployed to %s\""},{"typeIdentifier":"t_string_storage","typeString":"string storage ref"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":51880,"name":"console","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":22138,"src":"2526:7:74","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_console_$22138_$","typeString":"type(library console)"}},"id":51882,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2534:3:74","memberName":"log","nodeType":"MemberAccess","referencedDeclaration":15449,"src":"2526:11:74","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_string_memory_ptr_$_t_address_$returns$__$","typeString":"function (string memory,string memory,address) pure"}},"id":51889,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2526:75:74","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":51890,"nodeType":"ExpressionStatement","src":"2526:75:74"},{"expression":{"arguments":[{"hexValue":"4465706c6f79696e6720507269636553746f726167652e2e2e","id":51894,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2620:27:74","typeDescriptions":{"typeIdentifier":"t_stringliteral_5cc33f86b71e73b96532e09ac1906ee01674e69549d5cfb33e7b600219909fe8","typeString":"literal_string \"Deploying PriceStorage...\""},"value":"Deploying PriceStorage..."}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_5cc33f86b71e73b96532e09ac1906ee01674e69549d5cfb33e7b600219909fe8","typeString":"literal_string \"Deploying PriceStorage...\""}],"expression":{"id":51891,"name":"console","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":22138,"src":"2608:7:74","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_console_$22138_$","typeString":"type(library console)"}},"id":51893,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2616:3:74","memberName":"log","nodeType":"MemberAccess","referencedDeclaration":14652,"src":"2608:11:74","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":51895,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2608:40:74","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":51896,"nodeType":"ExpressionStatement","src":"2608:40:74"},{"assignments":[51898],"declarations":[{"constant":false,"id":51898,"mutability":"mutable","name":"priceStorageProxy","nameLocation":"2662:17:74","nodeType":"VariableDeclaration","scope":52065,"src":"2654:25:74","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":51897,"name":"address","nodeType":"ElementaryTypeName","src":"2654:7:74","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":51911,"initialValue":{"arguments":[{"hexValue":"507269636553746f726167652e736f6c","id":51901,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2714:18:74","typeDescriptions":{"typeIdentifier":"t_stringliteral_0d62a92c79dafdddd057834bcb5e67113bd95a4cc59ba2a1faecfd7efa708d6d","typeString":"literal_string \"PriceStorage.sol\""},"value":"PriceStorage.sol"},{"arguments":[{"expression":{"id":51904,"name":"PriceStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":52395,"src":"2755:12:74","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_PriceStorage_$52395_$","typeString":"type(contract PriceStorage)"}},"id":51905,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2768:10:74","memberName":"initialize","nodeType":"MemberAccess","referencedDeclaration":52221,"src":"2755:23:74","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_uint256_$_t_uint256_$returns$__$","typeString":"function PriceStorage.initialize(uint256,uint256)"}},{"components":[{"id":51906,"name":"PRICE_UPDATE_UPPER_BOUND_PERCENTAGE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":51801,"src":"2781:35:74","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":51907,"name":"PRICE_UPDATE_LOWER_BOUND_PERCENTAGE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":51804,"src":"2818:35:74","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":51908,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2780:74:74","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_function_declaration_nonpayable$_t_uint256_$_t_uint256_$returns$__$","typeString":"function PriceStorage.initialize(uint256,uint256)"},{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}],"expression":{"id":51902,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2740:3:74","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":51903,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2744:10:74","memberName":"encodeCall","nodeType":"MemberAccess","src":"2740:14:74","typeDescriptions":{"typeIdentifier":"t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":51909,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2740:115:74","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_0d62a92c79dafdddd057834bcb5e67113bd95a4cc59ba2a1faecfd7efa708d6d","typeString":"literal_string \"PriceStorage.sol\""},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":51899,"name":"Upgrades","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":47994,"src":"2682:8:74","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Upgrades_$47994_$","typeString":"type(library Upgrades)"}},"id":51900,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2691:15:74","memberName":"deployUUPSProxy","nodeType":"MemberAccess","referencedDeclaration":47505,"src":"2682:24:74","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$_t_bytes_memory_ptr_$returns$_t_address_$","typeString":"function (string memory,bytes memory) returns (address)"}},"id":51910,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2682:179:74","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2654:207:74"},{"expression":{"arguments":[{"hexValue":"507269636553746f72616765202870726f787929206465706c6f79656420746f202573","id":51915,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2879:37:74","typeDescriptions":{"typeIdentifier":"t_stringliteral_c19b18d4d902cc3a6315edf7b6e5fe25b29a8afd9c7d7980b23ebbe8c3462f70","typeString":"literal_string \"PriceStorage (proxy) deployed to %s\""},"value":"PriceStorage (proxy) deployed to %s"},{"arguments":[{"id":51918,"name":"priceStorageProxy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":51898,"src":"2926:17:74","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":51917,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2918:7:74","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":51916,"name":"address","nodeType":"ElementaryTypeName","src":"2918:7:74","typeDescriptions":{}}},"id":51919,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2918:26:74","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c19b18d4d902cc3a6315edf7b6e5fe25b29a8afd9c7d7980b23ebbe8c3462f70","typeString":"literal_string \"PriceStorage (proxy) deployed to %s\""},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":51912,"name":"console","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":22138,"src":"2867:7:74","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_console_$22138_$","typeString":"type(library console)"}},"id":51914,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2875:3:74","memberName":"log","nodeType":"MemberAccess","referencedDeclaration":14833,"src":"2867:11:74","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_address_$returns$__$","typeString":"function (string memory,address) pure"}},"id":51920,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2867:78:74","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":51921,"nodeType":"ExpressionStatement","src":"2867:78:74"},{"expression":{"arguments":[{"hexValue":"53657474696e6720534552564943455f524f4c452061646472657373206f6e20507269636553746f726167652e2e2e","id":51925,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2963:49:74","typeDescriptions":{"typeIdentifier":"t_stringliteral_f8053be7cb9dec39e9a6305426e84bce14bcf617d51ef75e15084c2110b292fb","typeString":"literal_string \"Setting SERVICE_ROLE address on PriceStorage...\""},"value":"Setting SERVICE_ROLE address on PriceStorage..."}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_f8053be7cb9dec39e9a6305426e84bce14bcf617d51ef75e15084c2110b292fb","typeString":"literal_string \"Setting SERVICE_ROLE address on PriceStorage...\""}],"expression":{"id":51922,"name":"console","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":22138,"src":"2951:7:74","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_console_$22138_$","typeString":"type(library console)"}},"id":51924,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2959:3:74","memberName":"log","nodeType":"MemberAccess","referencedDeclaration":14652,"src":"2951:11:74","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":51926,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2951:62:74","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":51927,"nodeType":"ExpressionStatement","src":"2951:62:74"},{"assignments":[51930],"declarations":[{"constant":false,"id":51930,"mutability":"mutable","name":"priceStorage","nameLocation":"3032:12:74","nodeType":"VariableDeclaration","scope":52065,"src":"3019:25:74","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_PriceStorage_$52395","typeString":"contract PriceStorage"},"typeName":{"id":51929,"nodeType":"UserDefinedTypeName","pathNode":{"id":51928,"name":"PriceStorage","nameLocations":["3019:12:74"],"nodeType":"IdentifierPath","referencedDeclaration":52395,"src":"3019:12:74"},"referencedDeclaration":52395,"src":"3019:12:74","typeDescriptions":{"typeIdentifier":"t_contract$_PriceStorage_$52395","typeString":"contract PriceStorage"}},"visibility":"internal"}],"id":51934,"initialValue":{"arguments":[{"id":51932,"name":"priceStorageProxy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":51898,"src":"3060:17:74","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":51931,"name":"PriceStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":52395,"src":"3047:12:74","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_PriceStorage_$52395_$","typeString":"type(contract PriceStorage)"}},"id":51933,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3047:31:74","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_PriceStorage_$52395","typeString":"contract PriceStorage"}},"nodeType":"VariableDeclarationStatement","src":"3019:59:74"},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":51938,"name":"priceStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":51930,"src":"3107:12:74","typeDescriptions":{"typeIdentifier":"t_contract$_PriceStorage_$52395","typeString":"contract PriceStorage"}},"id":51939,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3120:12:74","memberName":"SERVICE_ROLE","nodeType":"MemberAccess","referencedDeclaration":52174,"src":"3107:25:74","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_bytes32_$","typeString":"function () view external returns (bytes32)"}},"id":51940,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3107:27:74","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":51941,"name":"PRICE_UPDATE_SERVICE_WALLET","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":51816,"src":"3136:27:74","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":51935,"name":"priceStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":51930,"src":"3084:12:74","typeDescriptions":{"typeIdentifier":"t_contract$_PriceStorage_$52395","typeString":"contract PriceStorage"}},"id":51937,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3097:9:74","memberName":"grantRole","nodeType":"MemberAccess","referencedDeclaration":35910,"src":"3084:22:74","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address) external"}},"id":51942,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3084:80:74","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":51943,"nodeType":"ExpressionStatement","src":"3084:80:74"},{"expression":{"arguments":[{"hexValue":"4465706c6f79696e672041646472657373657357686974656c6973742e2e2e","id":51947,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3183:33:74","typeDescriptions":{"typeIdentifier":"t_stringliteral_2effda4846131b108ce890a344437f19454a8fbe006fadfea7ce4fb934f5cdc7","typeString":"literal_string \"Deploying AddressesWhitelist...\""},"value":"Deploying AddressesWhitelist..."}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_2effda4846131b108ce890a344437f19454a8fbe006fadfea7ce4fb934f5cdc7","typeString":"literal_string \"Deploying AddressesWhitelist...\""}],"expression":{"id":51944,"name":"console","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":22138,"src":"3171:7:74","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_console_$22138_$","typeString":"type(library console)"}},"id":51946,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3179:3:74","memberName":"log","nodeType":"MemberAccess","referencedDeclaration":14652,"src":"3171:11:74","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":51948,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3171:46:74","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":51949,"nodeType":"ExpressionStatement","src":"3171:46:74"},{"assignments":[51952],"declarations":[{"constant":false,"id":51952,"mutability":"mutable","name":"addressesWhitelist","nameLocation":"3242:18:74","nodeType":"VariableDeclaration","scope":52065,"src":"3223:37:74","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_AddressesWhitelist_$52159","typeString":"contract AddressesWhitelist"},"typeName":{"id":51951,"nodeType":"UserDefinedTypeName","pathNode":{"id":51950,"name":"AddressesWhitelist","nameLocations":["3223:18:74"],"nodeType":"IdentifierPath","referencedDeclaration":52159,"src":"3223:18:74"},"referencedDeclaration":52159,"src":"3223:18:74","typeDescriptions":{"typeIdentifier":"t_contract$_AddressesWhitelist_$52159","typeString":"contract AddressesWhitelist"}},"visibility":"internal"}],"id":51957,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":51955,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"NewExpression","src":"3263:22:74","typeDescriptions":{"typeIdentifier":"t_function_creation_nonpayable$__$returns$_t_contract$_AddressesWhitelist_$52159_$","typeString":"function () returns (contract AddressesWhitelist)"},"typeName":{"id":51954,"nodeType":"UserDefinedTypeName","pathNode":{"id":51953,"name":"AddressesWhitelist","nameLocations":["3267:18:74"],"nodeType":"IdentifierPath","referencedDeclaration":52159,"src":"3267:18:74"},"referencedDeclaration":52159,"src":"3267:18:74","typeDescriptions":{"typeIdentifier":"t_contract$_AddressesWhitelist_$52159","typeString":"contract AddressesWhitelist"}}},"id":51956,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3263:24:74","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_AddressesWhitelist_$52159","typeString":"contract AddressesWhitelist"}},"nodeType":"VariableDeclarationStatement","src":"3223:64:74"},{"expression":{"arguments":[{"hexValue":"41646472657373657357686974656c697374206465706c6f79656420746f202573","id":51961,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3305:35:74","typeDescriptions":{"typeIdentifier":"t_stringliteral_dedae006f0496126e39e06c8bff1ea83160abe6221597a020e9dc6a84a322f88","typeString":"literal_string \"AddressesWhitelist deployed to %s\""},"value":"AddressesWhitelist deployed to %s"},{"arguments":[{"id":51964,"name":"addressesWhitelist","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":51952,"src":"3350:18:74","typeDescriptions":{"typeIdentifier":"t_contract$_AddressesWhitelist_$52159","typeString":"contract AddressesWhitelist"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressesWhitelist_$52159","typeString":"contract AddressesWhitelist"}],"id":51963,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3342:7:74","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":51962,"name":"address","nodeType":"ElementaryTypeName","src":"3342:7:74","typeDescriptions":{}}},"id":51965,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3342:27:74","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_dedae006f0496126e39e06c8bff1ea83160abe6221597a020e9dc6a84a322f88","typeString":"literal_string \"AddressesWhitelist deployed to %s\""},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":51958,"name":"console","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":22138,"src":"3293:7:74","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_console_$22138_$","typeString":"type(library console)"}},"id":51960,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3301:3:74","memberName":"log","nodeType":"MemberAccess","referencedDeclaration":14833,"src":"3293:11:74","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_address_$returns$__$","typeString":"function (string memory,address) pure"}},"id":51966,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3293:77:74","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":51967,"nodeType":"ExpressionStatement","src":"3293:77:74"},{"expression":{"arguments":[{"hexValue":"4465706c6f79696e672052657175657374734d616e616765722e2e2e","id":51971,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3389:30:74","typeDescriptions":{"typeIdentifier":"t_stringliteral_a372fc9f8bbf296eb2ac4c3a5c6fa7afdff6ca657f4d2e4c7735b5972e872495","typeString":"literal_string \"Deploying RequestsManager...\""},"value":"Deploying RequestsManager..."}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_a372fc9f8bbf296eb2ac4c3a5c6fa7afdff6ca657f4d2e4c7735b5972e872495","typeString":"literal_string \"Deploying RequestsManager...\""}],"expression":{"id":51968,"name":"console","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":22138,"src":"3377:7:74","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_console_$22138_$","typeString":"type(library console)"}},"id":51970,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3385:3:74","memberName":"log","nodeType":"MemberAccess","referencedDeclaration":14652,"src":"3377:11:74","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":51972,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3377:43:74","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":51973,"nodeType":"ExpressionStatement","src":"3377:43:74"},{"assignments":[51978],"declarations":[{"constant":false,"id":51978,"mutability":"mutable","name":"inputTokens","nameLocation":"3443:11:74","nodeType":"VariableDeclaration","scope":52065,"src":"3426:28:74","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":51976,"name":"address","nodeType":"ElementaryTypeName","src":"3426:7:74","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":51977,"nodeType":"ArrayTypeName","src":"3426:9:74","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"id":51984,"initialValue":{"arguments":[{"hexValue":"31","id":51982,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3471:1:74","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":51981,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"3457:13:74","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_address_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (address[] memory)"},"typeName":{"baseType":{"id":51979,"name":"address","nodeType":"ElementaryTypeName","src":"3461:7:74","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":51980,"nodeType":"ArrayTypeName","src":"3461:9:74","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}}},"id":51983,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3457:16:74","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"nodeType":"VariableDeclarationStatement","src":"3426:47:74"},{"expression":{"id":51989,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":51985,"name":"inputTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":51978,"src":"3479:11:74","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":51987,"indexExpression":{"hexValue":"30","id":51986,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3491:1:74","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3479:14:74","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":51988,"name":"INPUT_TOKEN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":51810,"src":"3496:11:74","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3479:28:74","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":51990,"nodeType":"ExpressionStatement","src":"3479:28:74"},{"assignments":[51993],"declarations":[{"constant":false,"id":51993,"mutability":"mutable","name":"requestsManager","nameLocation":"3529:15:74","nodeType":"VariableDeclaration","scope":52065,"src":"3513:31:74","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_RequestsManager_$53459","typeString":"contract RequestsManager"},"typeName":{"id":51992,"nodeType":"UserDefinedTypeName","pathNode":{"id":51991,"name":"RequestsManager","nameLocations":["3513:15:74"],"nodeType":"IdentifierPath","referencedDeclaration":53459,"src":"3513:15:74"},"referencedDeclaration":53459,"src":"3513:15:74","typeDescriptions":{"typeIdentifier":"t_contract$_RequestsManager_$53459","typeString":"contract RequestsManager"}},"visibility":"internal"}],"id":52008,"initialValue":{"arguments":[{"arguments":[{"id":51999,"name":"tokenProxy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":51866,"src":"3575:10:74","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":51998,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3567:7:74","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":51997,"name":"address","nodeType":"ElementaryTypeName","src":"3567:7:74","typeDescriptions":{}}},"id":52000,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3567:19:74","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":52001,"name":"MINT_DEPOSIT_VAULT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":51807,"src":"3588:18:74","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":52004,"name":"addressesWhitelist","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":51952,"src":"3616:18:74","typeDescriptions":{"typeIdentifier":"t_contract$_AddressesWhitelist_$52159","typeString":"contract AddressesWhitelist"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressesWhitelist_$52159","typeString":"contract AddressesWhitelist"}],"id":52003,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3608:7:74","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":52002,"name":"address","nodeType":"ElementaryTypeName","src":"3608:7:74","typeDescriptions":{}}},"id":52005,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3608:27:74","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":52006,"name":"inputTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":51978,"src":"3637:11:74","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}],"id":51996,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"NewExpression","src":"3547:19:74","typeDescriptions":{"typeIdentifier":"t_function_creation_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_address_$dyn_memory_ptr_$returns$_t_contract$_RequestsManager_$53459_$","typeString":"function (address,address,address,address[] memory) returns (contract RequestsManager)"},"typeName":{"id":51995,"nodeType":"UserDefinedTypeName","pathNode":{"id":51994,"name":"RequestsManager","nameLocations":["3551:15:74"],"nodeType":"IdentifierPath","referencedDeclaration":53459,"src":"3551:15:74"},"referencedDeclaration":53459,"src":"3551:15:74","typeDescriptions":{"typeIdentifier":"t_contract$_RequestsManager_$53459","typeString":"contract RequestsManager"}}},"id":52007,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3547:102:74","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_RequestsManager_$53459","typeString":"contract RequestsManager"}},"nodeType":"VariableDeclarationStatement","src":"3513:136:74"},{"expression":{"arguments":[{"hexValue":"52657175657374734d616e61676572206465706c6f79656420746f202573","id":52012,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3667:32:74","typeDescriptions":{"typeIdentifier":"t_stringliteral_8e73e913709e3e124fae62720a94410a27a58742160ae711aef91d02d07b3f67","typeString":"literal_string \"RequestsManager deployed to %s\""},"value":"RequestsManager deployed to %s"},{"arguments":[{"id":52015,"name":"requestsManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":51993,"src":"3709:15:74","typeDescriptions":{"typeIdentifier":"t_contract$_RequestsManager_$53459","typeString":"contract RequestsManager"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_RequestsManager_$53459","typeString":"contract RequestsManager"}],"id":52014,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3701:7:74","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":52013,"name":"address","nodeType":"ElementaryTypeName","src":"3701:7:74","typeDescriptions":{}}},"id":52016,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3701:24:74","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_8e73e913709e3e124fae62720a94410a27a58742160ae711aef91d02d07b3f67","typeString":"literal_string \"RequestsManager deployed to %s\""},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":52009,"name":"console","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":22138,"src":"3655:7:74","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_console_$22138_$","typeString":"type(library console)"}},"id":52011,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3663:3:74","memberName":"log","nodeType":"MemberAccess","referencedDeclaration":14833,"src":"3655:11:74","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_address_$returns$__$","typeString":"function (string memory,address) pure"}},"id":52017,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3655:71:74","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":52018,"nodeType":"ExpressionStatement","src":"3655:71:74"},{"expression":{"arguments":[{"hexValue":"53657474696e6720534552564943455f524f4c452061646472657373206f6e2052657175657374734d616e616765722e2e2e","id":52022,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3744:52:74","typeDescriptions":{"typeIdentifier":"t_stringliteral_1ae5315471a681046e3f50f28060840ad9b282874225050d2b02502f239e94ea","typeString":"literal_string \"Setting SERVICE_ROLE address on RequestsManager...\""},"value":"Setting SERVICE_ROLE address on RequestsManager..."}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_1ae5315471a681046e3f50f28060840ad9b282874225050d2b02502f239e94ea","typeString":"literal_string \"Setting SERVICE_ROLE address on RequestsManager...\""}],"expression":{"id":52019,"name":"console","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":22138,"src":"3732:7:74","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_console_$22138_$","typeString":"type(library console)"}},"id":52021,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3740:3:74","memberName":"log","nodeType":"MemberAccess","referencedDeclaration":14652,"src":"3732:11:74","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":52023,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3732:65:74","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":52024,"nodeType":"ExpressionStatement","src":"3732:65:74"},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":52028,"name":"requestsManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":51993,"src":"3829:15:74","typeDescriptions":{"typeIdentifier":"t_contract$_RequestsManager_$53459","typeString":"contract RequestsManager"}},"id":52029,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3845:12:74","memberName":"SERVICE_ROLE","nodeType":"MemberAccess","referencedDeclaration":52428,"src":"3829:28:74","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_bytes32_$","typeString":"function () view external returns (bytes32)"}},"id":52030,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3829:30:74","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":52031,"name":"MINT_REDEEM_SERVICE_WALLET","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":51813,"src":"3861:26:74","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":52025,"name":"requestsManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":51993,"src":"3803:15:74","typeDescriptions":{"typeIdentifier":"t_contract$_RequestsManager_$53459","typeString":"contract RequestsManager"}},"id":52027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3819:9:74","memberName":"grantRole","nodeType":"MemberAccess","referencedDeclaration":38921,"src":"3803:25:74","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address) external"}},"id":52032,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3803:85:74","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":52033,"nodeType":"ExpressionStatement","src":"3803:85:74"},{"expression":{"arguments":[{"hexValue":"53657474696e6720534552564943455f524f4c452061646472657373206f6e2025732e2e2e","id":52037,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3907:39:74","typeDescriptions":{"typeIdentifier":"t_stringliteral_59f6ea99b8a75e07e083ebdcd1216630ef82fed8057d89459cdce8bddaae7225","typeString":"literal_string \"Setting SERVICE_ROLE address on %s...\""},"value":"Setting SERVICE_ROLE address on %s..."},{"id":52038,"name":"TOKEN_SYMBOL","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":51798,"src":"3948:12:74","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_59f6ea99b8a75e07e083ebdcd1216630ef82fed8057d89459cdce8bddaae7225","typeString":"literal_string \"Setting SERVICE_ROLE address on %s...\""},{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"expression":{"id":52034,"name":"console","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":22138,"src":"3895:7:74","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_console_$22138_$","typeString":"type(library console)"}},"id":52036,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3903:3:74","memberName":"log","nodeType":"MemberAccess","referencedDeclaration":14799,"src":"3895:11:74","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory,string memory) pure"}},"id":52039,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3895:66:74","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":52040,"nodeType":"ExpressionStatement","src":"3895:66:74"},{"assignments":[52043],"declarations":[{"constant":false,"id":52043,"mutability":"mutable","name":"token","nameLocation":"3979:5:74","nodeType":"VariableDeclaration","scope":52065,"src":"3967:17:74","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_SimpleToken_$53640","typeString":"contract SimpleToken"},"typeName":{"id":52042,"nodeType":"UserDefinedTypeName","pathNode":{"id":52041,"name":"SimpleToken","nameLocations":["3967:11:74"],"nodeType":"IdentifierPath","referencedDeclaration":53640,"src":"3967:11:74"},"referencedDeclaration":53640,"src":"3967:11:74","typeDescriptions":{"typeIdentifier":"t_contract$_SimpleToken_$53640","typeString":"contract SimpleToken"}},"visibility":"internal"}],"id":52047,"initialValue":{"arguments":[{"id":52045,"name":"tokenProxy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":51866,"src":"3999:10:74","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":52044,"name":"SimpleToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":53640,"src":"3987:11:74","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SimpleToken_$53640_$","typeString":"type(contract SimpleToken)"}},"id":52046,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3987:23:74","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_SimpleToken_$53640","typeString":"contract SimpleToken"}},"nodeType":"VariableDeclarationStatement","src":"3967:43:74"},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":52051,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":52043,"src":"4032:5:74","typeDescriptions":{"typeIdentifier":"t_contract$_SimpleToken_$53640","typeString":"contract SimpleToken"}},"id":52052,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4038:12:74","memberName":"SERVICE_ROLE","nodeType":"MemberAccess","referencedDeclaration":53482,"src":"4032:18:74","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_bytes32_$","typeString":"function () view external returns (bytes32)"}},"id":52053,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4032:20:74","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"id":52056,"name":"requestsManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":51993,"src":"4062:15:74","typeDescriptions":{"typeIdentifier":"t_contract$_RequestsManager_$53459","typeString":"contract RequestsManager"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_RequestsManager_$53459","typeString":"contract RequestsManager"}],"id":52055,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4054:7:74","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":52054,"name":"address","nodeType":"ElementaryTypeName","src":"4054:7:74","typeDescriptions":{}}},"id":52057,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4054:24:74","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":52048,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":52043,"src":"4016:5:74","typeDescriptions":{"typeIdentifier":"t_contract$_SimpleToken_$53640","typeString":"contract SimpleToken"}},"id":52050,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4022:9:74","memberName":"grantRole","nodeType":"MemberAccess","referencedDeclaration":35910,"src":"4016:15:74","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address) external"}},"id":52058,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4016:63:74","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":52059,"nodeType":"ExpressionStatement","src":"4016:63:74"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":52060,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43,"src":"4086:2:74","typeDescriptions":{"typeIdentifier":"t_contract$_Vm_$14022","typeString":"contract Vm"}},"id":52062,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4089:13:74","memberName":"stopBroadcast","nodeType":"MemberAccess","referencedDeclaration":11043,"src":"4086:16:74","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$__$returns$__$","typeString":"function () external"}},"id":52063,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4086:18:74","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":52064,"nodeType":"ExpressionStatement","src":"4086:18:74"}]},"functionSelector":"c0406226","implemented":true,"kind":"function","modifiers":[],"name":"run","nameLocation":"1973:3:74","parameters":{"id":51817,"nodeType":"ParameterList","parameters":[],"src":"1976:2:74"},"returnParameters":{"id":51818,"nodeType":"ParameterList","parameters":[],"src":"1986:0:74"},"scope":52067,"stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"abstract":false,"baseContracts":[{"baseName":{"id":51791,"name":"Script","nameLocations":["451:6:74"],"nodeType":"IdentifierPath","referencedDeclaration":100,"src":"451:6:74"},"id":51792,"nodeType":"InheritanceSpecifier","src":"451:6:74"}],"canonicalName":"DeploymentScript","contractDependencies":[52159,53459],"contractKind":"contract","fullyImplemented":true,"internalFunctionIDs":{"14038":1},"linearizedBaseContracts":[52067,100,9007,3152,1062,59,47],"name":"DeploymentScript","nameLocation":"431:16:74","scope":52068,"usedErrors":[],"usedEvents":[]}],"license":"UNLICENSED"}},"src/AddressesWhitelist.sol":{"id":75,"ast":{}},"src/PriceStorage.sol":{"id":76,"ast":{}},"src/RequestsManager.sol":{"id":77,"ast":{}},"src/SimpleToken.sol":{"id":78,"ast":{}},"src/interfaces/IAddressesWhitelist.sol":{"id":79,"ast":{}},"src/interfaces/IPriceStorage.sol":{"id":80,"ast":{}},"src/interfaces/IRequestsManager.sol":{"id":81,"ast":{}},"src/interfaces/ISimpleToken.sol":{"id":82,"ast":{}}}},"solcLongVersion":"0.8.28","solcVersion":"0.8.28"}